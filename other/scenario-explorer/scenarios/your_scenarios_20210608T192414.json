[
        {
                "id": "1581701",
                "publicId": "fbfb1260-88ac-11eb-ac17-75e7e2c515d3",
                "published": false,
                "title": "PoC: RPG systems testing scenarios",
                "description": "This scenario is intended to test RPG systems I'm developing, as well as their integration with Gnurro's RPG systems and maybe EWIJSON. Feel free to modify the WIs and adapt this to your tastes. Do mind that the systems are under active development are not in a very stable state at the moment. Feedback and suggestions are appreciated. Collaboration too.",
                "tags": [],
                "createdAt": "2021-03-19T12:16:50.822Z",
                "updatedAt": "2021-04-18T02:09:57.574Z",
                "memory": "",
                "authorsNote": "",
                "mode": "creative",
                "prompt": "If you'd like to dig through the code, I'm accepting pull requests and suggestions! \nMy codes: https://github.com/thaalesalves/aid-scripts\nGnurro's codes: https://github.com/Gnurro/AIDscripts\n\nI'm always active on the official AI Dungeon Discord server, under the name of Javaman. If you'd like to discuss more about the systems or need help, feel free to ping me there. I'm always active on #scripting and #world-info.",
                "quests": [],
                "worldInfo": null,
                "gameCode": {
                        "onInput": "const modifier = (text) => {\r\n  let stop = false;\r\n  let modifiedText = text;\r\n  const lowered = text.toLowerCase();\r\n  const commandMatcher = text.match(/\\n? ?(?:> You |> You say \"|)\\/(\\w+?)( [\\w ]+)?[\".]?\\n?$/i)\r\n\r\n  if (!state.init && info.actionCount < 1) {\r\n    playerWorldInfo = {\r\n      keys: `you`,\r\n      hidden: false,\r\n      entry: ' You:['\r\n        + ` WORN: nothing;`\r\n        + ` INV: nothing;`\r\n        + ']'\r\n    };\r\n\r\n    state.init = true;\r\n    state.shouldStop = false;\r\n    addWorldEntry(playerWorldInfo.keys, playerWorldInfo.entry, false);\r\n    state.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes('you'));\r\n\r\n    getInventory();\r\n    addToInventory('Rusty Sword', 1);\r\n    addToInventory('Commoner clothes', 1);\r\n    equipItem('Commoner clothes');\r\n    equipItem('Rusty Sword');\r\n\r\n    state.init = true;\r\n  }\r\n\r\n  if (commandMatcher) {\r\n    console.log(`Command detected`);\r\n    console.log(commandMatcher);\r\n    const cmd = commandMatcher[1];\r\n    const params = commandMatcher[2] ? commandMatcher[2].trim() : '';\r\n    console.log(params);\r\n\r\n    if (cmd.includes('invCheck')) {\r\n      console.log(`Begin inventory check.`);\r\n      state.shouldStop = true;\r\n      modifiedText = `\\n> You check your inventory.${checkInventory()}`;\r\n      console.log(`End inventory check.`);\r\n    } else if (cmd.includes('invAdd')) {\r\n      console.log(`Begin inventory add.`);\r\n      state.shouldStop = true;\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        modifiedText = `\\n> You add ${itemQuantity} ${itemName} to your inventory.${addToInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        modifiedText = `\\n> You cannot add less than 1 unit of an item to your inventory.`;\r\n      }\r\n\r\n      console.log(`End inventory add.`);\r\n    } else if (cmd.includes('invRemove')) {\r\n      console.log(`Begin inventory remove.`);\r\n      state.shouldStop = true;\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        modifiedText = `\\n> You remove ${itemQuantity} ${itemName} from your inventory.${removeFromInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        modifiedText = `\\n> You cannot remove less than 1 unit of an item from your inventory.`;\r\n      }\r\n\r\n      console.log(`End inventory remove.`);\r\n    } else if (cmd.includes('invEquip')) {\r\n      console.log(`Begin inventory equip.`);\r\n      state.shouldStop = true;\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      modifiedText = `\\n> You equip ${itemName}.${equipItem(itemName)}`;\r\n      console.log(`End inventory equip.`);\r\n    } else if (cmd.includes('invDebugWi')) {\r\n      console.log(`Begin inventory debug.`);\r\n      state.shouldStop = true;\r\n      modifiedText = `\\n> Your inventory and player WI have been debugged. New player WI saved at index ${state.worldInfoIndex}.`;\r\n      console.log(`End inventory debug.`);\r\n    }\r\n  }\r\n\r\n  return { text: modifiedText, stop: stop };\r\n}\r\n\r\nmodifier(text);",
                        "onOutput": "const modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n  return { text: modifiedText }\r\n}\r\n\r\nmodifier(text)\r\n",
                        "sharedLibrary": "const LETTER_REGEX = /[0-9]/g;\r\nconst DIGIT_REGEX = /\\D/g;\r\nconst PUNCTUATION_REMOVE = /[^\\w\\s]/gi;\r\nconst WORN_REGEX = new RegExp(`(?<=WORN: )(.*)(?=; )`);\r\nconst INVENTORY_REGEX = new RegExp(`(?<=INV: )(.*)(?=;)`);\r\n\r\nconst WEAPONS = [\r\n  'sword', 'knife', 'spear', 'hammer', 'axe', 'battleaxe', 'sledgehammer', 'longsword', 'bow', 'pickaxe'\r\n];\r\n\r\nconst CLOTHING = [\r\n  'rags', 'armor', 'dress', 'kilt', 'skirt', 'jerkin', 'shirt', 'clothes', 'robes', 'leathers', 'hooded', 'cuirass', 'chainmail', 'gauntlets', 'vambraces', 'tights'\r\n];\r\n\r\n/**\r\n * Simple frunction to capitalize the first letter of a string\r\n * \r\n * @param {string} string \r\n */\r\nconst capitalize = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Finds an item in the player's inventory\r\n * @param {string} itemName \r\n */\r\n const findItemInInventory = (itemName) => {\r\n  console.log(`START findItemInInventory(): Looking for item \"${itemName}\" in player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let itemFound = getInventory().find((item) => {\r\n    return item.name == loweredName;\r\n  });\r\n\r\n  if (typeof itemFound != 'undefined') {\r\n    console.log(`END findItemInInventory(): Item \"${itemName}\" found. Returning it.`);\r\n    return itemFound;\r\n  }\r\n\r\n  console.log(`END findItemInInventory(): Item \"${itemName}\" not found in inventory.`);\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Removes an item from player's inventory\r\n * \r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst removeFromInventory = (itemName, itemQuantity) => {\r\n  console.log(`START removeFromInventory(): Removing ${itemQuantity} instances of \"${itemName}\" from player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (!(item.quantity == itemQuantity) && (item.quantity > 1 && item.quantity >= itemQuantity)) {\r\n    console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n    item.quantity -= itemQuantity;\r\n    return `\\nYou have removed ${itemQuantity} ${loweredName} from your inventory.`;\r\n  }\r\n\r\n  let index = getInventory().indexOf(item);\r\n  getInventory().splice(index, 1);\r\n  updateInventory();\r\n  console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n  return `\\nYou have removed all ${loweredName} from your inventory.`;\r\n}\r\n\r\n/**\r\n * Checks player's inventory and returns what's inside\r\n */\r\nconst checkInventory = () => {\r\n\r\n  console.log(`START checkInventory(): Checking player's inventory.`);\r\n  if (getInventory().length > 0) {\r\n    let items = getInventory().map((item) => item.name).join(', ');\r\n    let itemsWorn = getInventory().filter((item) => item.status == 'worn').map((item) => item.name).join(', ');\r\n    console.log(`END checkInventory(): Player's inventory contains: ${items}.`);\r\n    return `\\nYour inventory contains: ${items}. Items equipped: ${itemsWorn}.`;\r\n  }\r\n\r\n  console.log(`END checkInventory(): Player's inventory is empty.`);\r\n  return `\\nYour inventory is empty.`;\r\n}\r\n\r\n/**\r\n * Returns player's inventory. If the array in undefined, define it\r\n */\r\nconst getInventory = () => {\r\n  console.log(`START getInventory(): verifying player's inventory.`);\r\n  if (typeof state.inventory == 'undefined') {\r\n    console.log(`INSIDE getInventory(): Inventory array is undefined. Declaring it with an empty array.`);\r\n    state.inventory = [];\r\n  }\r\n\r\n  console.log(`END getInventory(): player's inventory exists. Returning its contents.`);\r\n  return state.inventory;\r\n}\r\n\r\n/**\r\n * Adds item to player's inventory\r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst addToInventory = (itemName, itemQuantity) => {\r\n\r\n  console.log(`START addToInventory(): adding ${itemQuantity} instances of \"${itemName}\" to player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (typeof item == 'undefined') {\r\n    console.log(`INSIDE addToInventory(): Player has no other instances of this item in their inventory. Adding these.`);\r\n    item = {\r\n      name: loweredName,\r\n      quantity: itemQuantity,\r\n      status: 'in inventory',\r\n      type: getType(itemName)\r\n    };\r\n\r\n    state.inventory.push(item);\r\n  } else {\r\n    console.log(`INSIDE addToInventory(): Player already has other instances of this item in their inventory. Incrementing the quantity by ${itemQuantity}.`);\r\n    item.quantity = item.quantity + itemQuantity;\r\n  }\r\n\r\n  updateInventory();\r\n  console.log(`END addToInventory(): ${itemQuantity} instances of \"${itemName}\" added to player's inventory.`);\r\n  return `\\nYou have added ${itemQuantity} ${loweredName} to your inventory.`;\r\n}\r\n\r\n/**\r\n * Simple function to make the player equip something.\r\n * \r\n * @param {string} itemName \r\n */\r\nconst equipItem = (itemName) => {\r\n  console.log(`START equipItem(): equipping ${itemName}`);\r\n  const itemNameLowerCase = itemName.toLowerCase();\r\n  let itemToBeEquipped = findItemInInventory(itemNameLowerCase);\r\n  if (typeof itemToBeEquipped != 'undefined') {\r\n    const itemToBeEquippedIndex = state.inventory.findIndex(x => x.name == itemToBeEquipped.name);\r\n    console.log(`INSIDE equipItem(): ${itemName} exists in player's inventory`);\r\n    if (itemToBeEquipped.type != 'weapon' && itemToBeEquipped.type != 'clothing') {\r\n      console.log(`END equipItem(): item is not equippable.`);\r\n      return `\\n${capitalize(itemNameLowerCase)} is not an equippable item.`;\r\n    }\r\n\r\n    let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n    let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n    let oldItem = getInventory().find(oldItem => oldItem.status == 'worn' && oldItem.type == itemToBeEquipped.type);\r\n    if (typeof oldItem != 'undefined') {\r\n      const oldItemIndex = state.inventory.findIndex(x => x.name == oldItem.name);\r\n      console.log(`INSIDE equipItem(): Player has another item of the same type equipped. Unequipping old item.`);\r\n      itemsWorn.replace(oldItem.name.toLowerCase(), '');\r\n      console.log(`INSIDE equipItem(): Removing worn status from ${oldItem.name}.`);\r\n      oldItem.status = 'in inventory';\r\n      state.inventory[oldItemIndex] = oldItem;\r\n    }\r\n\r\n    itemToBeEquipped.status = 'worn';\r\n    state.inventory[itemToBeEquippedIndex] = itemToBeEquipped;\r\n    itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n      .map((k) => {\r\n        console.log(`INSIDE equipItem(): worn item found in inventory -> ${k.name}`);\r\n        return k.name;\r\n      }).join('/ ');\r\n\r\n    console.log(`INSIDE equipItem(): finished building new WORN string -> ${itemsWorn}`);\r\n    playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n    updateWorldEntry(\r\n      state.worldInfoIndex,\r\n      playerWorldInfo.keys,\r\n      playerWorldInfo.entry,\r\n      false\r\n    );\r\n\r\n    console.log(`END equipItem(): ${itemToBeEquipped.name} has been equipped.`);\r\n    return `\\nYou are now ${itemToBeEquipped.type == 'weapon' ? 'wielding' : 'wearing'} ${itemToBeEquipped.name}.`;\r\n  }\r\n\r\n  console.log(`END equipItem(): Player does not have \"${itemNameLowerCase}\" in their inventory.`);\r\n  return `\\nYou do not have \"${itemNameLowerCase}\" in your inventory.`;\r\n}\r\n\r\n/**\r\n * Debugs your inventory and corrects the player's WI in case it fails\r\n */\r\nconst debugInventory = () => {\r\n  console.log(`START debugInventory(): debugging player's inventory`);\r\n  state.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes('you'));\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n\r\n  let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n\r\n  itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n    .map((k) => {\r\n      console.log(`INSIDE debugInventory(): Updating player WI with worn items`);\r\n      return k.name;\r\n    }).join('/ ');\r\n\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE debugInventory(): Updating player WI with inventory items`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/ ');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n\r\n  updateWorldEntry(\r\n    state.worldInfoIndex,\r\n    playerWorldInfo.keys,\r\n    playerWorldInfo.entry,\r\n    false\r\n  );\r\n\r\n  console.log(\"INSIDE debugInventory(): Fixed player WI with inventory's items.\");\r\n  console.log(`END debugInventory(): Player's WI saved at index ${state.worldInfoIndex}.`);\r\n}\r\n\r\n/**\r\n * Updates the player's inventory and corrects the WI\r\n */\r\nconst updateInventory = () => {\r\n  console.log(`START updateInventory(): updating player's inventory and WI with current items`);\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE updateInventory(): Sorting inventory items and quantities into player WI`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/ ');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n  updateWorldEntry(\r\n    state.worldInfoIndex,\r\n    playerWorldInfo.keys,\r\n    playerWorldInfo.entry,\r\n    false\r\n  );\r\n\r\n  console.log(`END updateInventory(): updated player's inventory and WI with current items`);\r\n}\r\n\r\n/**\r\n * Function to determine item type\r\n * \r\n * @param {string} itemType\r\n */\r\nconst getType = (itemName) => {\r\n  const checker = (input) => {\r\n    return WEAPONS.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'weapon' :\r\n      CLOTHING.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'clothing' : 'misc';\r\n  }\r\n\r\n  return checker(itemName);\r\n}",
                        "onModelContext": "const modifier = (text) => {\r\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : '';\r\n  const context = info.memoryLength ? text.slice(info.memoryLength) : text;\r\n  const lines = context.split(\"\\n\");\r\n  const lowered = text.toLowerCase();\r\n  let stop = false;\r\n\r\n  if (state.shouldStop) {\r\n    state.shouldStop = false;\r\n    stop = true;\r\n  }\r\n\r\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength));\r\n  const finalText = [contextMemory, combinedLines].join(\"\");\r\n  return { text: finalText, stop: stop };\r\n}\r\n\r\nmodifier(text);"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [
                        {
                                "publicId": "0ae4ea50-8f1d-11eb-a1a9-8de45256bcdd",
                                "title": "Inventory system test",
                                "createdAt": "2021-03-27T16:54:06.453Z"
                        },
                        {
                                "publicId": "5e5505c0-934c-11eb-bc8d-6d621bc4a061",
                                "title": "RPGmech integration test",
                                "createdAt": "2021-04-02T00:42:57.436Z"
                        },
                        {
                                "publicId": "50ad0070-98c0-11eb-9369-c1c981dd0c5f",
                                "title": "(donation prompt)",
                                "createdAt": "2021-04-08T23:15:31.959Z"
                        }
                ]
        },
        {
                "id": "1368671",
                "publicId": "785edfd0-739f-11eb-82ca-357002d1d0c8",
                "published": false,
                "title": "Adventure Call with Falconhoof",
                "description": "For those that used to love watching Limmy's Show, specifically Adventure Call, here's the AID version of it!\n\nTo play it, use the Story mode. The AI will generate the lines of speech, you just have to enter\nFalconhoof: \"\nCaller: \"\n\nAnd the AI will fill in the gaps. Check out my profile for some playtests to understand it better. Works better with Classic or Griffin... because of randomness.",
                "tags": [],
                "createdAt": "2021-02-20T17:17:12.141Z",
                "updatedAt": "2021-04-18T03:19:08.551Z",
                "memory": "",
                "authorsNote": "Writing style: telephone call, verbose, detailed, text adventure, lengthy",
                "mode": "creative",
                "prompt": "For those that used to love watching Limmy's Show, specifically Adventure Call, here's the AID version of it!\n\nTo play it, use the Story mode. The AI will generate the lines of speech, you just have to enter\nFalconhoof: \"\nCaller: \"\n\nAnd the AI will fill in the gaps. Check out my profile for some playtests to understand it better. Works better with Classic or Griffin... because of randomness.",
                "quests": [],
                "worldInfo": [],
                "gameCode": {
                        "onInput": "\n// Checkout the repo examples to get an idea of other ways you can use scripting \n// https://github.com/latitudegames/Scripting/blob/master/examples\n\nconst modifier = (text) => {\n  let modifiedText = text\n  const lowered = text.toLowerCase()\n    \n  // The text passed in is either the user's input or players output to modify.\n  if(lowered.includes('you become king') || lowered.includes('you are now king')) {    \n    // You can modify the state variable to keep track of state throughout the adventure\n    state.isKing = true\n    \n    // Setting state.memory.context will cause that to be used instead of the user set memory\n    state.memory = { context: 'You are now the king.' }\n\n    // You can modify world info entries using the below commands\n    // addWorldEntry(keys, entry)\n    // removeWorldEntry(index)\n    // updateWorldEntry(index, keys, entry)\n\n    // You can read world info keys with worldInfo \n    const entries = worldInfo\n    \n    // Setting state.message will set an info message that will be displayed in the game\n    // This can be useful for debugging\n    state.message = JSON.stringify(entries)\n    \n    // You can log things to the side console when testing with console.log\n    console.log('Player is now king')\n    \n    modifiedText = text + '\\nYou are now the king!'\n  }\n  \n  // You must return an object with the text property defined.\n  return { text: modifiedText }\n}\n\n// Don't modify this part\nmodifier(text)\n",
                        "onOutput": "\n// Checkout the repo examples to get an idea of other ways you can use scripting \n// https://github.com/latitudegames/Scripting/blob/master/examples\n\nconst modifier = (text) => {\n  let modifiedText = text\n  const lowered = text.toLowerCase()\n    \n  // The text passed in is either the user's input or players output to modify.\n  if(lowered.includes('you become king') || lowered.includes('you are now king')) {    \n    // You can modify the state variable to keep track of state throughout the adventure\n    state.isKing = true\n    \n    // Setting state.memory.context will cause that to be used instead of the user set memory\n    state.memory = { context: 'You are now the king.' }\n\n    // You can modify world info entries using the below commands\n    // addWorldEntry(keys, entry)\n    // removeWorldEntry(index)\n    // updateWorldEntry(index, keys, entry)\n\n    // You can read world info keys with worldInfo \n    const entries = worldInfo\n    \n    // Setting state.message will set an info message that will be displayed in the game\n    // This can be useful for debugging\n    state.message = JSON.stringify(entries)\n    \n    // You can log things to the side console when testing with console.log\n    console.log('Player is now king')\n    \n    modifiedText = text + '\\nYou are now the king!'\n  }\n  \n  // You must return an object with the text property defined.\n  return { text: modifiedText }\n}\n\n// Don't modify this part\nmodifier(text)\n",
                        "sharedLibrary": "// Any functions you define here will be available in your other modifier scripts.\n\nfunction bringJoy(string) {\n  return string.replace(/\\b(sad|angry)\\b/g, 'happy')\n}\n",
                        "onModelContext": "\n// Checkout the repo examples to get an idea of other ways you can use scripting\n// https://github.com/latitudegames/Scripting/blob/master/examples\n\n// info.memoryLength is the length of the memory section of text.\n// info.maxChars is the maximum length that text can be. The server will truncate the text you return to this length.\n\n// This modifier re-implements Author's Note as an example.\nconst modifier = (text) => {\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : ''\n  const context = info.memoryLength ? text.slice(info.memoryLength) : text\n  const lines = context.split(\"\\n\")\n  if (lines.length > 2) {\n    // Uncomment to use this!\n    // const authorsNote = \"Everyone in this story is an AI programmer.\"\n    // lines.splice(-3, 0, `[Author's note: ${authorsNote}]`)\n  }\n  // Make sure the new context isn't too long, or it will get truncated by the server.\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength))\n  const finalText = [contextMemory, combinedLines].join(\"\")\n  return { text: finalText }\n}\n\n// Don't modify this part\nmodifier(text)\n"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [
                        {
                                "publicId": "8569ef80-7647-11eb-8216-cd319579a239",
                                "title": "Adventure Call with Falconhoof: plain English",
                                "createdAt": "2021-02-24T02:25:11.800Z"
                        },
                        {
                                "publicId": "a8dd40c0-7647-11eb-8216-cd319579a239",
                                "title": "Adventure Call with Falconhoof: Scottish accent",
                                "createdAt": "2021-02-24T02:26:11.277Z"
                        }
                ]
        },
        {
                "id": "1355902",
                "publicId": "e58f62b0-70ab-11eb-ba16-1d8c91f19677",
                "published": false,
                "title": "Tamriel: Random Generators",
                "description": "This scenario generates random stuff for your adventure or TRPG campaign. It doesn't use any specific system, it just generates character data randomly. \n\nUse it with dragon for a better experience. \n\nThis scenario was based on @tra38's idea for a character generator. I altered it a bit so it generates Elder Scrolls compatible stuff.",
                "tags": [
                        "skyrim",
                        "elder scrolls",
                        "cyrodiil",
                        "oblivion",
                        "morrowind",
                        "tamriel",
                        "eso",
                        "generator"
                ],
                "createdAt": "2021-02-16T23:08:35.804Z",
                "updatedAt": "2021-04-19T16:03:09.132Z",
                "memory": "",
                "authorsNote": "",
                "mode": "creative",
                "prompt": "Answer the questions the scenario will ask and let the AI do the rest. If you don't like the results, you can hit \"Retry\" and the AI will generate another profile. If the AI generates random text instead of an actual profile, hit \"Retry\" as well.\n\nYou can make the AI keep generating stuff. Just use prompts like\n- Jordis now thinks of a background for <NAME OF THE CHARACTER GENERATED>. She writes:\n- Jordis continues writing <NAME OF THE CHARACTER>'s story. She writes:\n- Jordis now generates another character profile. She writes:\n\nAlways try to end the lines with a colon. This way, the AI will complete your input by continuing the backstory generated or generating a new background from scratch. Both examples of input work for both backstory generation and character profile generation. \n\nI recommend to stick to character profile generator. Once your character has been generated, tell the AI Jordis now thinks of a background. The AI will use the info in the profile to create a backstory. If you would like to see real results, play my Tamriel scenario and select the random character option. All characters you get to play were generated using this tool.",
                "quests": [],
                "worldInfo": null,
                "gameCode": {
                        "onInput": "const modifier = (text) => {\n  let modifiedText = nameReplace(text);\n\n  return { text: modifiedText }\n};\n\nmodifier(text);\n",
                        "onOutput": "const modifier = (text) => {\n  modifiedText = nameReplace(text);\n\n  return { text: modifiedText }\n};\n\nmodifier(text);\n",
                        "sharedLibrary": "// TO USE: Put in something like 'modifiedText = nameReplace(modifiedText);' in Input&Output Modifiers.\r\n\r\n// List the names you wish to replace with random ones in this const.\r\nconst BADNAMES = ['Ackerson','Alison','Annah','Anu','Arat','Arrorn','Ashton','Azajaja','Big Red',\r\n'Brot','Brother Gray','Bucklesberg','Captain Dario','Captain Eckard','Captain Hayes','Captain Ian','Captain Illam','Carn',\r\n'Castus','Cloudpeak','Count Gray','Count Grey','Dark Order','David','Delantium','Delerg','Dendrin','Derg',\r\n'Dert','Dessel','Dorna','Dr. Kessel','Dr. Kovas','Drake','Draven','Durge','Ebony Claw','Elam',\r\n'Eldolith','Eliza','Eternals','Father Féval','Father Tomas','Felkan','Flog','Garrick','Grolik',\"Gro'tesk\",'Haygarth',\r\n'Hessla','Holgard','Isabella',\"J'Arel\",'Jacob','Jicol','Karth','Kelso',\r\n'Klemto','Klyton','Kralmer','Kyros','Lenay','Lord Rostov','Ludmilla','Magos Cern','Meliodas',\r\n'Merk','Mihrab','Mr. Demar','Mr. Gaange','Mr. Reynolds','Nalin','Nolazir','Null','Nuro','Oalkwardner',\r\n'Olive','Olivia','Oren','Quala','Ragnor','Ral','Rask','Retlad','Roldan','Rolomag','Sheriff Buckly',\r\n'Sir Ignate','Sodran','Svelk','Talia','Teckleville','The Craxil','The Ghoul King','The Great Lich Lord',\r\n'The Nightmare Tyrant','Theo','Trelik','Tulan','Ulivik','Vaughn','Velzix','Wessel','Zalan','Zalmora','Zuzu'];\r\n\r\n// This shuffles the arrays.\r\nconst shuffle = array =>\r\n    [...Array(array.length)]\r\n        .map((...args) => Math.floor(Math.random() * (args[1] + 1)))\r\n        .reduce((a, rv, i) => ([a[i], a[rv]] = [a[rv], a[i]]) && a, array);\r\n\r\n// Generates and saves arrays; ran only once.\r\nfunction makeArrays() {\r\n  state.mid = [];\r\n  state.end = [];\r\n  list = state.names.map(x => x.substring(1)); // Trim beginning.\r\n  list.forEach(addMid);\r\n}\r\n\r\nfunction addMid(seg) { // Generate array of possible mid-segments.\r\n  while (seg.length > 3) {\r\n    if (state.mid.indexOf(seg.substring(0,4)) === -1) { state.mid.push(seg.substring(0,4)) };\r\n    seg = seg.substring(1);\r\n  }\r\n  state.end.push(seg);\r\n}\r\n\r\nfunction synthName() {\r\n  var name_length = state.names[Math.floor(Math.random() * state.names.length)].length - 1;\r\n  var base = state.names[Math.floor(Math.random() * state.names.length)];\r\n  if (base.length < 3) { return Base; } \r\n  else {\r\n    var nomen = base.substring(0,3);\r\n    while (nomen.length < name_length)\r\n    {\r\n      mid = shuffle(state.mid).find( x => nomen.substring(nomen.length - 2, nomen.length) == x.substring(0,2))\r\n      if (mid) { nomen += mid.substring(2); }\r\n      else { name_length = 0; } // No valid segments found, just skip ahead.\r\n    }\r\n    var end = shuffle(state.end).find( x => nomen.substring(nomen.length -1, nomen.length) == x.substring(0,1));\r\n    if (end) { nomen += end.substring(1); }\r\n\treturn nomen;\r\n  }\r\n}\r\n\r\nfunction nameReplace(text) {\r\n  if (!state.names_setup) { setupNamelist(); }\r\n  for (name of BADNAMES) {\r\n    if (text.includes(name)) { text = text.replace(name, synthName()); }\r\n  }\r\n  return text;\r\n}\r\n\r\n// This giant list is the list of names that this generator uses as examples to synthesize new names.\r\n// You can replace it with a more specific list, such as names from certain culture.\r\n// To work well, you need at least 100 names on the list.\r\nfunction setupNamelist() {\r\n state.names_setup = true;\r\n state.names = [\"Aby\",\"Aage\",\"Aakesh\",\"Aanon\",\"Aarlen\",\"Aaron\",\"Aart\",\"Aasta\",\"Abarden\",\"Abbathor\",\"Abbathorn\",\"Abraham\",\"Abryn\",\r\n  \"Abu\",\"Acadia\",\"Achard\",\"Acheron\",\"Achim\",\"Achlarg\",\"Ada\",\"Adair\",\"Adalbert\",\"Adanac\",\"Adario\",\"Adeisteen\",\"Adelaide\",\r\n  \"Adelin\",\"Adelot\",\"Adeen\",\"Aden\",\"Adena\",\"Aderyn\",\"Adeva\",\"Adger\",\"Adia\",\"Adin\",\"Adina\",\"Aditu\",\"Adlay\",\r\n  \"Adolf\",\"Adolmus\",\"Adoniram\",\"Adraeran\",\"Adriaan\",\"Adriel\",\"Adrienne\",\"Aedha\",\"Aeiran\",\"Ael\",\"Aelgifu\",\"Aelis\",\"Aerdrie\",\r\n  \"Aeriel\",\"Aerin\",\"Aeris\",\"Aeriss\",\"Aeron\",\"Aeru'in\",\"Aeruin\",\"Aethelweard\",\"Aethon\",\"Aethyr\",\"Afra\",\"Agate\",\"Agatha\",\r\n  \"Agathon\",\"Agathos\",\"Agenor\",\"Agidius\",\"Agnar\",\"Agora\",\"Agrias\",\"Aguidran\",\"Aguilla\",\"Ahanna\",\"Ahmre\",\"Aicha\",\"Aidan\",\r\n  \"Aidaron\",\"Aiden\",\"Aidred\",\"Aidro\",\"Aidwin\",\"Aifreda\",\"Aifrida\",\"Aiker\",\"Aikikia\",\"Aikman\",\"Ailcaer\",\"Aileen\",\"Ailric\",\r\n  \"Ailvar\",\"Aimee\",\"Aimo\",\"Aino\",\"Ainu\",\"Aipheus\",\"Airalyn\",\"Aircristir\",\"Airen\",\"Airis\",\"Airmid\",\"Aisha\",\"Aislinn\",\r\n  \"Aithne\",\"Aitken\",\"Akebia\",\"Aki\",\"Akira\",\"Aksel\",\"Al\",\"Aladan\",\"Aladar\",\"Aladdin\",\"Alain\",\"Alaine\",\"Alais\",\r\n  \"Alan\",\"Alana\",\"Alanson\",\"Alardan\",\"Alaric\",\"Alarion\",\"Alaris\",\"Alaron\",\"Alastair\",\"Alastrina\",\"Alastyr\",\"Albaral\",\"Alberich\",\r\n  \"Alberik\",\"Alberon\",\"Albert\",\"Alberta\",\"Albin\",\"Albion\",\"Albrecht\",\"Albright\",\"Alcan\",\"Alcina\",\"Alda\",\"Aldaren\",\"Aldegond\",\r\n  \"Alden\",\"Aldert\",\"Aldhelm\",\"Aldis\",\"Aldrich\",\"Aldridge\",\"Aldus\",\"Aldwerth\",\"Aldwin\",\"Aldwulf\",\"Alea\",\"Alec\",\"Alena\",\r\n  \"Alers\",\"Ales\",\"Alessandra\",\"Alexander\",\"Alexei\",\"Alf\",\"Alfdis\",\"Alfgeir\",\"Alfhid\",\"Alfons\",\"Alford\",\"Alfred\",\"Algernon\",\r\n  \"Algus\",\"Alhana\",\"Ali\",\"Alia\",\"Alicia\",\"Aliendre\",\"Alienor\",\"Alin\",\"Aline\",\"Alineric\",\"Alisbone\",\"Alison\",\"Alistair\",\r\n  \"Alister\",\"Allaire\",\"Allard\",\"Allart\",\"Allene\",\"Alliston\",\"Almas\",\"Almer\",\"Almira\",\"Almroth\",\"Almu\",\"Aloise\",\"Alor\",\r\n  \"Alora\",\"Alorosaz\",\"Aloysius\",\"Alphons\",\"Alrik\",\"Alsop\",\"Althalus\",\"Altin\",\"Alton\",\"Alured\",\"Alvan\",\"Alvey\",\"Alvina\",\r\n  \"Alvord\",\"Alvred\",\"Alwen\",\"Alwyn\",\"Alya\",\"Alyanna\",\"Alyce\",\"Alyssa\",\"Alyvia\",\"Ama\",\"Amadis\",\"Amain\",\"Amalina\",\r\n  \"Aman\",\"Amanfea\",\"Amar\",\"Amarah\",\"Amber\",\"Ambros\",\"Amelia\",\"Ames\",\"Amethyst\",\"Amilion\",\"Amin\",\"Amina\",\"Amineh\",\r\n  \"Ammdar\",\"Amschel\",\"Amundi\",\"Anandra\",\"Anastasia\",\"Anatol\",\"Anatolia\",\"Ancarion\",\"Ancelyn\",\"Anclaiar\",\"Ancla´ar\",\"Andara'an\",\"Andaraan\",\r\n  \"Andemon\",\"Andni\",\"Andolan\",\"Andre\",\"Andrei\",\"Andrew\",\"Andrus\",\"Aneurin\",\"Anfar\",\"Angelica\",\"Angelina\",\"Angharad\",\"Angheryn\",\r\n  \"Angmar\",\"Angus\",\"Anici\",\"Anigh\",\"Anika\",\"Anita\",\"Anitra\",\"Anlaf\",\"Anna\",\"Annion\",\"Annora\",\"Anouar\",\"Anseim\",\r\n  \"Ansel\",\"Anskar\",\"Anson\",\"Antal\",\"Antalya´ar\",\"Antares\",\"Antheirne\",\"Anton\",\"Antone\",\"Antony\",\"Antrim\",\"Anvar\",\"Anya\",\r\n  \"Anzie\",\"Apad\",\"April\",\"Apthorp\",\"Aquill\",\"Arabel\",\"Arabella\",\"Arabeth\",\"Aradan\",\"Aradh\",\"Aragon\",\"Aragorn\",\"Arakin\",\r\n  \"Aralik\",\"Aranel\",\"Arania\",\"Arathorn\",\"Aravis\",\"Arawn\",\"Arax\",\"Araz\",\"Archibald\",\"Arcarune\",\"Arctor\",\"Ardal\",\"Arden\",\r\n  \"Arder\",\"Ardesh\",\"Ardis\",\"Areagne\",\"Arell\",\"Areta\",\"Aretas\",\"Argethlam\",\"Argoeth\",\"Ari\",\"Aria\",\"Ariad\",\"Arian\",\r\n  \"Arianth\",\"Aribeth\",\"Aric\",\"Arid\",\"Ariel\",\"Aries\",\"Arilyn\",\"Arioch\",\"Arka\",\"Arkadia\",\"Arkron\",\"Arkwright\",\"Arlaith\",\r\n  \"Arlan\",\"Arlana\",\"Arlean\",\"Arleano\",\"Arlo\",\"Arlya\",\"Armand\",\"Armar\",\"Armin\",\"Armitage\",\"Armo\",\"Armod\",\"Arn\",\r\n  \"Arnbella\",\"Arnesen\",\"Arnfinn\",\"Arngrim\",\"Arni\",\"Arnlaug\",\"Arno\",\"Arnold\",\"Arnor\",\"Arnora\",\"Arnot\",\"Arnthora\",\"Arnuif\",\r\n  \"Arnulf\",\"Arnvid\",\"Aron\",\"Arrah\",\"Arronax\",\"Arshavir\",\"Arshel\",\"Artemis\",\"Artemus\",\"Arthol\",\"Arthryn\",\"Arthur\",\"Artnistead\",\r\n  \"Artreyu\",\"Artur\",\"Arun\",\"Arvid\",\"Arvida\",\"Arving\",\"Arvo\",\"Arwen\",\"Arwin\",\"Aryen\",\"Aryion\",\"Aryon\",\"Aryus\",\r\n  \"Arzamark\",\"Asa\",\"Asaf\",\"Aschar\",\"Asfrid\",\"Asgard\",\"Asger\",\"Asgerd\",\"Asgrim\",\"Ash\",\"Ashan\",\"Ashane\",\"Ashburton\",\r\n  \"Ashcar\",\"Ashdown\",\"Ashgaroth\",\"Ashley\",\"Ashlyn\",\"Ashne'e\",\"Ashnici\",\"Ashur\",\"Asiria\",\"Askew\",\"Askold\",\"Aslak\",\"Aslan\",\r\n  \"Asleif\",\"Aslior\",\"Asperon\",\"Asta\",\"Astar\",\"Astinus\",\"Astnid\",\"Astnild\",\"Astoiphe\",\"Astra\",\"Astraea\",\"Astran\",\"Astrid\",\r\n  \"Astrin\",\"Atazra\",\"Athabasca\",\"Athana\",\"Athol\",\"Atiaran\",\"Atli\",\"Atmeh\",\"Atreyu\",\"Atropos\",\"Atticus\",\"Attor\",\"Atul\",\r\n  \"Aturin\",\"Atyre\",\"Aubrey\",\"Aud\",\"Audrey\",\"Audrianna\",\"Audric\",\"August\",\"Augustus\",\"Aule\",\"Aulius\",\"Aun\",\"Aura\",\r\n  \"Aurian\",\"Auril\",\"Aurion\",\"Aurora\",\"Avall\",\"Avarath\",\"Avascaen\",\"Avedar\",\"Aveole\",\"Avery\",\"Avon\",\"Avril\",\"Axel\",\r\n  \"Aya\",\"Ayame\",\"Ayaron\",\"Ayarèn\",\"Ayin\",\"Ayir\",\"Aylin\",\"Aylmer\",\"Ayrie\",\"Azeal\",\"Azeezeh\",\"Azgoth\",\"Azhrarn\",\r\n  \"Aziz\",\"Azmodeus\",\"Azrean\",\"Azreck\",\"Azriaz\",\"Aztira\",\"Azure\",\"Azuth\",\"Baba\",\"Babacar\",\"Babrak\",\"Babrine\",\"Babylos\",\r\n  \"Baduk\",\"Baern\",\"Baeron\",\"Baervan\",\"Bag\",\"Bahamut\",\"Baird\",\"Bal\",\"Balain\",\"Baldor\",\"Baldrick\",\"Balduin\",\"Baldur\",\r\n  \"Baldwin\",\"Balendar\",\"Balfour\",\"Balin\",\"Baliol\",\"Ballard\",\"Balor\",\"Balthasard\",\"Balthazar\",\"Bandobras\",\"Bane\",\"Baraca\",\"Barahir\",\r\n  \"Barak\",\"Baralan\",\"Baravar\",\"Barbara\",\"Bardach\",\"Bardel\",\"Bardi\",\"Bardsley\",\"Bardwell\",\"Barend\",\"Barent\",\"Baring\",\"Barll\",\r\n  \"Barlo\",\"Barlow\",\"Barnabas\",\"Barnas\",\"Barnus\",\"Barr\",\"Barret\",\"Barron\",\"Barry\",\"Barstow\",\"Barthel\",\"Bartle\",\"Bartnel\",\r\n  \"Barton\",\"Baslayan\",\"Bayard\",\"Beams\",\"Beatrix\",\"Bechir\",\"Beck\",\"Bede\",\"Bedegran\",\"Begnus\",\"Beldaran\",\"Beldas\",\"Belerion\",\r\n  \"Belgarath\",\"Belgarion\",\"Belita\",\"Bella\",\"Belle\",\"Bellin\",\"Bellinus\",\"Belloc\",\"Belrene\",\"Beltane\",\"Belva\",\"Ben\",\"Benekander\",\r\n  \"Bengt\",\"Benita\",\"Benoist\",\"Beorn\",\"Beowulf\",\"Bera\",\"Bercan\",\"Berek\",\"Berem\",\"Beren\",\"Bergen\",\"Bergthor\",\"Berim\",\r\n  \"Bern\",\"Berna\",\"Bernhart\",\"Bernt\",\"Berronar\",\"Berryn\",\"Bersi\",\"Berta\",\"Bertil\",\"Bertilde\",\"Bertram\",\"Bertran\",\"Bertrem\",\r\n  \"Beryl\",\"Besma\",\"Bestagar\",\"Beth\",\"Bevil\",\"Beyash\",\"Beylard\",\"Bhimrao\",\"Bhoskar\",\"Bhupindar\",\"Bidwell\",\"Bilbo\",\"Bile\",\r\n  \"Bilmar\",\"Bindon\",\"Bion\",\"Bipin\",\"Birath\",\"Birbeck\",\"Birchard\",\"Birger\",\"Birgit\",\"Birket\",\"Bisuneh\",\"Bjarni\",\"Bjorn\",\r\n  \"Bjornstern\",\"Blackwood\",\"Blade\",\"Blaen\",\"Blair\",\"Blame\",\"Blasco\",\"Blaze\",\"Bledsoe\",\"Blenda\",\"Bleran\",\"Blount\",\"Blunyc\",\r\n  \"Bninna\",\"Bo\",\"Bodil\",\"Bodvar\",\"Bolthorn\",\"Boner\",\"Booker\",\"Boott\",\"Boris\",\"Bork\",\"Borlace\",\"Bormor\",\"Boromir\",\r\n  \"Bors\",\"Botho\",\"Botolf\",\"Bourke\",\"Bowie\",\"Boyd\",\"Bracca\",\"Brace\",\"Bracken\",\"Brand\",\"Brandec\",\"Brangwen\",\"Brann\",\r\n  \"Brannon\",\"Branwell\",\"Branwen\",\"Breanon\",\"Bremen\",\"Brenna\",\"Brenner\",\"Brent\",\"Bress\",\"Bretaine\",\"Breyugar\",\"Brianna\",\"Bridget\",\r\n  \"Brielle\",\"Brigantu\",\"Brighton\",\"Brinn\",\"Brion\",\"Bristan\",\"Brita\",\"Brithael\",\"Brock\",\"Brockden\",\"Brodhead\",\"Brodribb\",\"Brogan\",\r\n  \"Bron\",\"Brona\",\"Bronwyn\",\"Bror\",\"Broun\",\"Bruna\",\"Bruno\",\"Brunt\",\"Brynhild\",\"Brynit\",\"Bryoni\",\"Bunnvor\",\"Bupu\",\r\n  \"Burcan\",\"Buri\",\"Burkard\",\"Buzurg\",\"Byam\",\"Byblos\",\"Byre\",\"Byrna\",\"Byrne\",\"Bysshe\",\"Cabell\",\"Cabillo\",\"Caddor\",\r\n  \"Caden\",\"Cadfael\",\"Cadmar\",\"Cadrach\",\"Cadwallader\",\"Caecyn\",\"Cael\",\"Caelon\",\"Caer\",\"Cai\",\"Cail\",\"Cairn\",\"Caitlin\",\r\n  \"Caladon\",\"Calandria\",\"Calbraith\",\"Calder\",\"Cale\",\"Caleb\",\"Calera\",\"Caliban\",\"Callan\",\"Callcott\",\"Calmic\",\"Calrohir\",\"Calumn\",\r\n  \"Calvert\",\"Camber\",\"Cambree\",\"Camiya\",\"Canina\",\"Caprice\",\"Cardon\",\"Caramon\",\"Carelia\",\"Carey\",\"Caribou\",\"Caris\",\"Carl\",\r\n  \"Carless\",\"Carli\",\"Carlyle\",\"Caryne\",\"Caron\",\"Carsten\",\"Carvell\",\"Caryl\",\"Cashin\",\"Caspian\",\"Cassandra\",\"Cassaway\",\"Cathal\",\r\n  \"Catherine\",\"Cathla'in\",\"Cathlain\",\"Cathlin\",\"Cayl\",\"Caylin\",\"Cecilia\",\"Cecily\",\"Cedric\",\"Cedrick\",\"Cedrim\",\"Celadae\",\"Celebdil\",\r\n  \"Celeborn\",\"Celeren\",\"Celes\",\"Celeste\",\"Celestine\",\"Celia\",\"Celowen\",\"Cemark\",\"Ceomyr\",\"Ceowulf\",\"Cercyon\",\"Ceremon\",\"Cerimon\",\r\n  \"Cerindar\",\"Cermor\",\"Cernd\",\"Ceryx\",\"Cespar\",\"Cevir\",\"Ceylinn\",\"Chaka\",\"Chalfant\",\"Challen\",\"Chamon\",\"Chanti\",\"Chard\",\r\n  \"Charissa\",\"Charlene\",\"Charlotte\",\"Chauncey\",\"Chauntea\",\"Chavir\",\"Chaya\",\"Checotah\",\"Chevonne\",\"Chevran\",\"Chichester\",\"Chimaera\",\"Chiodwig\",\r\n  \"Chiron\",\"Chittenden\",\"Chloe\",\"Christopher\",\"Chronepsis\",\"Chronos\",\"Chrowder\",\"Chuz\",\"Cid\",\"Cilmar\",\"Cinerva\",\"Cirkin\",\"Civar\",\r\n  \"Claed\",\"Clafin\",\"Claire\",\"Clarinda\",\"Claudia\",\"Cleghorn\",\"Clerihew\",\"Clinch\",\"Clipster\",\"Clopton\",\"Cloud\",\"Clover\",\"Clovis\",\r\n  \"Cnud\",\"Cnut\",\"Coalter\",\"Cobryn\",\"Coddry\",\"Coel\",\"Coela\",\"Cohn\",\"Colden\",\"Colgan\",\"Colmen\",\"Colon\",\"Colwyn\",\r\n  \"Coma\",\"Conall\",\"Conan\",\"Congal\",\"Conlan\",\"Conn\",\"Connell\",\"Connidas\",\"Connon\",\"Connop\",\"Conor\",\"Conrad\",\"Constantius\",\r\n  \"Conwy\",\"Conyasal\",\"Coprates\",\"Cora\",\"Coral\",\"Corbin\",\"Corellon\",\"Coren\",\"Corin\",\"Corinne\",\"Corinth\",\"Cormac\",\"Cornelius\",\r\n  \"Corrowr\",\"Corry\",\"Corryn\",\"Corwin\",\"Cotton\",\"Cowan\",\"Cowden\",\"Cowper\",\"Coyan\",\"Craigh\",\"Cray\",\"Crewzel\",\"Creydah\",\r\n  \"Cronyn\",\"Croyble\",\"Crundall\",\"Crynal\",\"Crysania\",\"Cryshandylin\",\"Cryunnos\",\"Cuall\",\"Cuane\",\"Cuddry\",\"Cuhaid\",\"Culiross\",\"Culkin\",\r\n  \"Cullen\",\"Cullyn\",\"Cuthalion\",\"Cuthbert\",\"Cylarus\",\"Cylie\",\"Cylmar\",\"Cymbeline\",\"Cyndor\",\"Cynoril\",\"Cyria\",\"Cyriel\",\"Cyrilla\",\r\n  \"Cyrillus\",\"Cyrus\",\"Cyryl\",\"Cythnar\",\"Cyton\",\"Daburn\",\"Daen\",\"Dagar\",\"Dagda\",\"Dagmar\",\"Dagni\",\"Dagny\",\"Dagwyn\",\r\n  \"Dahil\",\"Daikkah\",\"Daila\",\"Daila'in\",\"Daimhin\",\"Daimon\",\"Daisy\",\"Dakamon\",\"Dakoda\",\"Dalamar\",\"Dall\",\"Dalla\",\"Dallandra\",\r\n  \"Dalziel\",\"Damar\",\"Damien\",\"Damon\",\"Dana\",\"Danforth\",\"Daniel\",\"Dannun\",\"Dannyn\",\"Danu\",\"Danuvius\",\"Daood\",\"Daphin\",\r\n  \"Dara\",\"Daragor\",\"Darandriel\",\"Darell\",\"Darien\",\"Dario\",\"Darius\",\"Darkash\",\"Darkboon\",\"Darkspur\",\"Darlis\",\"Daron\",\"Darrell\",\r\n  \"Darrin\",\"Darvin\",\"Daryan\",\"Dashiell\",\"Dashwood\",\"Dasyani\",\"Dathan\",\"Dathanja\",\"Daugas\",\"David\",\"Davnet\",\"Davros\",\"Dawn\",\r\n  \"Dayyan\",\"Dekteon\",\"Delevan\",\"Delita\",\"Dell\",\"Dellin\",\"Delmund\",\"Demarest\",\"Demi\",\"Deminar\",\"Demtris\",\"Denethor\",\"Denhain\",\r\n  \"Denor\",\"Denton\",\"Denzil\",\"Deogol\",\"Derfel\",\"Derian\",\"Dermaria\",\"Derran\",\"Derroll\",\"Derval\",\"Dervilia\",\"Desmona\",\"Devabriel\",\r\n  \"Devaron\",\"Deveron\",\"Devra\",\"Dexter\",\"Dhakos\",\"Dhan\",\"Dharijor\",\"Dholemtrix\",\"Dhur\",\"Diadra\",\"Diagur\",\"Dian\",\"Diarmud\",\r\n  \"Diderik\",\"Diehi\",\"Dighton\",\"Dillon\",\"Dimura\",\"Dinham\",\"Dinivan\",\"Dino\",\"Dionetta\",\"Diony\",\"Dirk\",\"Dirrach\",\"Divos\",\r\n  \"Djamal\",\"Dmitri\",\"Doak\",\"Dolman\",\"Dolyan\",\"Domnu\",\"Donagh\",\"Donal\",\"Donblas\",\"Dongal\",\"Doniol\",\"Donivesh\",\"Donovan\",\r\n  \"Doral\",\"Dorea\",\"Dorian\",\"Dorin\",\"Dorn\",\"Dornhnall\",\"Dorr\",\"Dorsan\",\"Dorvai\",\"Dotta\",\"Doud\",\"Dougal\",\"Doust\",\r\n  \"Draco\",\"Dragan\",\"Dragus\",\"Dragutin\",\"Draka\",\"Drake\",\"Drako\",\"Dran\",\"Draoi\",\"Draven\",\"Drax\",\"Drayko\",\"Dred\",\r\n  \"Dreed\",\"Drexel\",\"Drezael\",\"Drezaem\",\"Drin\",\"Drinda\",\"Drion\",\"Drusilla\",\"Drynn\",\"Dréagg\",\"Duain\",\"Duald\",\"Duana\",\r\n  \"Duer\",\"Dugal\",\"Dugald\",\"Dugdale\",\"Dulasiri\",\"Dumathoin\",\"Dunbar\",\"Dundas\",\"Dunglas\",\"Dunnabar\",\"Dunstan\",\"Dunwody\",\"Duny\",\r\n  \"Dunya\",\"Dur-Shuk\",\"Duran\",\"Durek\",\"Durin\",\"Durnik\",\"Durward\",\"Dwarkanath\",\"Dweomer\",\"Dwyer\",\"Dyce\",\"Dyer\",\"Dygardo\",\r\n  \"Dyke\",\"Dylan\",\"Dymphna\",\"Dynar\",\"Dyneley\",\"Dynera\",\"Dynie\",\"Dytan\",\"Dyvim\",\"E'thane\",\"Eadweard\",\"Eager\",\"Eamon\",\r\n  \"Eanger\",\"Eardley\",\"Earle\",\"Earnest\",\"Eastman\",\"Ebany\",\"Ebba\",\"Eberhard\",\"Ebony\",\"Echael\",\"Eckert\",\"Eckhard\",\"Ector\",\r\n  \"Edcyl\",\"Edda\",\"Edeva\",\"Edgar\",\"Edina\",\"Edla\",\"Edmond\",\"Edmondstone\",\"Edric\",\"Edrie\",\"Edson\",\"Eduard\",\"Edwin\",\r\n  \"Edwina\",\"Edwyn\",\"Eevin\",\"Efiath\",\"Efrem\",\"Egan\",\"Egbert\",\"Egerton\",\"Egil\",\"Egon\",\"Egron\",\"Ehlreth\",\"Ehrman\",\r\n  \"Eilhard\",\"Eilif\",\"Eilinud\",\"Einar\",\"Eindrini\",\"Eirech\",\"Eirik\",\"Eiron\",\"Eithne\",\"Eivind\",\"Ekaterina\",\"Elaine\",\"Elath\",\r\n  \"Elbert\",\"Eldath\",\"Eldavon\",\"Eldgrim\",\"Eldid\",\"Eldin\",\"Eldon\",\"Eldred\",\"Eldric\",\"Eldrin\",\"Eldron\",\"Eldìvèn\",\"Eleanor\",\r\n  \"Eleazar\",\"Electa\",\"Elelil\",\"Elena\",\"Elendil\",\"Eleno'in\",\"Elentari\",\"Elerion\",\"Elessar\",\"Elfnida\",\"Elfnide\",\"Elfnieda\",\"Elford\",\r\n  \"Elhanan\",\"Eliakini\",\"Eliard\",\"Elinor\",\"Elion\",\"Eliseth\",\"Elispeth\",\"Elisseer\",\"Elistan\",\"Eliwood\",\"Elizabeth\",\"Ella\",\"Ellanath\",\r\n  \"Ellen\",\"Ellin\",\"Ellingwood\",\"Ellydryr\",\"Ellynor\",\"Elmeric\",\"Elmira\",\"Eloisa\",\"Elora\",\"Elowen\",\"Elrad\",\"Elric\",\"Elrik\",\r\n  \"Elrodin\",\"Elron\",\"Elrond\",\"Elsa\",\"Elsbeth\",\"Elsdon\",\"Elspeth\",\"Elswyth\",\"Elton\",\"Elu\",\"Elva\",\"Elvalind\",\"Elvarion\",\r\n  \"Elvin\",\"Elvina\",\"Elvira\",\"Elvrit\",\"Elvérion\",\"Elwell\",\"Elwin\",\"Elwyn\",\"Elysia\",\"Emberyl\",\"Emerynn\",\"Emirah\",\"Emma\",\r\n  \"Emna\",\"Emory\",\"Endemian\",\"Endicott\",\"Endoray\",\"Endrede\",\"Endsor\",\"Engeihard\",\"Enigma\",\"Enn\",\"Ennorath\",\"Envi\",\"Enzoray\",\r\n  \"Eolair\",\"Eomer\",\"Eosin\",\"Eowyn\",\"Ephyre\",\"Erana\",\"Erard\",\"Ercan\",\"Erdmann\",\"Erebor\",\"Ergon\",\"Erian\",\"Eric\",\r\n  \"Erich\",\"Erie\",\"Erik\",\"Erika\",\"Erilyth\",\"Erland\",\"Erlend\",\"Erling\",\"Ernald\",\"Ernan\",\"Ernata\",\"Errine\",\"Ervin\",\r\n  \"Eryka\",\"Eryn\",\"Esghar\",\"Eslin\",\"Esmeralda\",\"Esmond\",\"Esnar\",\"Essa\",\"Esselin\",\"Estheria\",\"Estrella\",\"Etelka\",\"Ethelbearn\",\r\n  \"Ethelbert\",\"Ethelburga\",\"Ethelred\",\"Ethelreda\",\"Eudo\",\"Eugene\",\"Eulala\",\"Evadne\",\"Evaine\",\"Evald\",\"Evan\",\"Evarts\",\"Evelina\",\r\n  \"Evelyn\",\"Everard\",\"Evert\",\"Evind\",\"Evo\",\"Evolyn\",\"Evska\",\"Ewald\",\"Ewen\",\"Ewugan\",\"Eystein\",\"Eyulf\",\"Eyvind\",\r\n  \"Ezail\",\"Ezellohar\",\"Ezirith\",\"Ezme\",\"Ezrabar\",\"Ezri\",\"Faber\",\"Fabian\",\"Fael\",\"Faelyn\",\"Fahs\",\"Fairfax\",\"Fairtnan\",\r\n  \"Falathar\",\"Falcon\",\"Falgar\",\"Fali\",\"Falias\",\"Falkiner\",\"Falmalinnar\",\"Falyrias\",\"Fanchon\",\"Fangorn\",\"Fanshaw\",\"Faraday\",\"Farah\",\r\n  \"Farale\",\"Faramir\",\"Faran\",\"Farathar\",\"Farid\",\"Farith\",\"Farli\",\"Farnham\",\"Farouk\",\"Farquhar\",\"Farrin\",\"Farwehl\",\"Fatima\",\r\n  \"Fausto\",\"Fawn\",\"Faysal\",\"Fea\",\"Feargus\",\"Fedor\",\"Feike\",\"Felam\",\"Felladin\",\"Fellador\",\"Fellathor\",\"Fellow\",\"Fenella\",\r\n  \"Fenton\",\"Fenwick\",\"Fera\",\"Ferantay\",\"Ferazhin\",\"Ferdinand\",\"Fergus\",\"Fernand\",\"Feron\",\"Feustmann\",\"Fhinders\",\"Fhorgeir\",\"Fiana\",\r\n  \"Fiathna\",\"Fielding\",\"Fikir\",\"Filippe\",\"Finarfin\",\"Finbar\",\"Findegil\",\"Findley\",\"Finegan\",\"Fingal\",\"Fingalla\",\"Fingil\",\"Finias\",\r\n  \"Finn\",\"Finnbogi\",\"Finos\",\"Fiona\",\"Fiorag\",\"Fiori\",\"Firca\",\"Firin\",\"Firon\",\"Firozhan\",\"Fistandantilus\",\"Fistar\",\"Fistor\",\r\n  \"Fitzedward\",\"Fitzroy\",\"Fizban\",\"Fjolnir\",\"Flandrena\",\"Flare\",\"Flavius\",\"Flint\",\"Floki\",\"Florimund\",\"Flosi\",\"Flygare\",\"Flynn\",\r\n  \"Fnida\",\"Fomorii\",\"Forbus\",\"Forester\",\"Fornost\",\"Foronte\",\"Fothergill\",\"Francisco\",\"Frayja\",\"Freda\",\"Frederic\",\"Frederica\",\"Frederick\",\r\n  \"Fredrick\",\"Fredrik\",\"Freeborn\",\"Freeman\",\"Frey\",\"Freya\",\"Freydis\",\"Fridgeir\",\"Frodo\",\"Fryniwyd\",\"Fuad\",\"Fumorak\",\"Furnifold\",\r\n  \"Fury\",\"Fyodor\",\"Fyodr\",\"Fyza\",\"Gaarn\",\"Gabniela\",\"Gabriel\",\"Gadsby\",\"Gaea\",\"Gael\",\"Gaelinar\",\"Gaena\",\"Gaerdal\",\r\n  \"Gaillard\",\"Gairdner\",\"Galach\",\"Galadren\",\"Galan\",\"Galanna\",\"Galapas\",\"Galaphon\",\"Galar\",\"Galbard\",\"Galderon\",\"Galdor\",\"Gale\",\r\n  \"Galeia\",\"Galen\",\"Galfrey\",\"Galion\",\"Galrandar\",\"Galrion\",\"Gama\",\"Gandalf\",\"Ganduil\",\"Ganith\",\"Gannon\",\"Ganvan\",\"Gardi\",\r\n  \"Garet\",\"Gareth\",\"Garion\",\"Garith\",\"Garl\",\"Garland\",\"Garlenon\",\"Garn\",\"Garon\",\"Garrick\",\"Garrott\",\"Garth\",\"Gartnas\",\r\n  \"Garvin\",\"Garwood\",\"Gaston\",\"Gavendra\",\"Gavin\",\"Gavina\",\"Gawain\",\"Gealsgiath\",\"Gebhard\",\"Geir\",\"Geirmund\",\"Geirstein\",\"Gelonna\",\r\n  \"Genevieve\",\"Geoffrey\",\"Georgii\",\"Gerald\",\"Gerard\",\"Gerd\",\"Gerhard\",\"Gerhart\",\"Gerloc\",\"Gerrard\",\"Gerreint\",\"Gerrish\",\"Gertrude\",\r\n  \"Gervaise\",\"Gesin\",\"Gest\",\"Ghirra\",\"Ghislain\",\"Gholson\",\"Gia\",\"Gibbon\",\"Gilberta\",\"Gilda\",\"Gilden\",\"Gildersleeve\",\"Giles\",\r\n  \"Gilfanon\",\"Gilian\",\"Gilir\",\"Gilli\",\"Gillion\",\"Gillyn\",\"Gilm\",\"Gilraen\",\"Gilthanas\",\"Gimli\",\"Gird\",\"Girin\",\"Gisgin\",\r\n  \"Gizur\",\"Gladstone\",\"Glassford\",\"Glebur\",\"Gleda\",\"Gleocyn\",\"Gleridower\",\"Glida\",\"Glogan\",\"Gloisur\",\"Glorfindel\",\"Glugwyn\",\"Glum\",\r\n  \"Glyn\",\"Glynn\",\"Gnazia\",\"Godfred\",\"Godfrey\",\"Godwin\",\"Goibhniu\",\"Golding\",\"Goldwin\",\"Gollum\",\"Gongalo\",\"Goodhue\",\"Gorbash\",\r\n  \"Gordalius\",\"Gorias\",\"Gorion\",\"Gorm\",\"Gotthard\",\"Govier\",\"Govind\",\"Gowen\",\"Grace\",\"Graham\",\"Graine\",\"Gralon\",\"Grani\",\r\n  \"Grania\",\"Gravin\",\"Greegan\",\"Greenleaf\",\"Gregor\",\"Gregory\",\"Grendahl\",\"Greyfell\",\"Grian\",\"Gridley\",\"Griffid\",\"Griffin\",\"Griffith\",\r\n  \"Griggs\",\"Grim\",\"Grima\",\"Grimhilda\",\"Grimnir\",\"Grindan\",\"Griniing\",\"Grisha\",\"Griswold\",\"Groa\",\"Grover\",\"Grunak\",\"Grunnhild\",\r\n  \"Gruumsh\",\"Gualat\",\"Gudmund\",\"Gudmundur\",\"Gudrid\",\"Gudris\",\"Gudrun\",\"Guibert\",\"Guida\",\"Guido\",\"Gulian\",\"Gunila\",\"Gunnar\",\r\n  \"Gunning\",\"Gunther\",\"Gurnarok\",\"Gurney\",\"Gustav\",\"Guthorm\",\"Guthrie\",\"Guthum\",\"Gutzon\",\"Guy\",\"Gwacyn\",\"Gwaihir\",\"Gweddyn\",\r\n  \"Gwen\",\"Gwenca\",\"Gwenda\",\"Gwendolyn\",\"Gwenevere\",\"Gweniver\",\"Gwildor\",\"Gwoc\",\"Gwomyr\",\"Gwydion\",\"Gwyn\",\"Gwyneth\",\"Gwynfryd\",\r\n  \"Gwyran\",\"Gwythinn\",\"Gyda\",\"Gylian\",\"Gymir\",\"Haakon\",\"Habib\",\"Hablot\",\"Hack\",\"Haddon\",\"Hadrian\",\"Haestan\",\"Hafez\",\r\n  \"Hafgrim\",\"Hagar\",\"Haigh\",\"Hakatri\",\"Haki\",\"Hakon\",\"Halbert\",\"Halcyon\",\"Haldane\",\"Haldor\",\"Hale\",\"Halfdan\",\"Haliina\",\r\n  \"Hall\",\"Halldis\",\"Halldor\",\"Halley\",\"Hallfred\",\"Hallfrid\",\"Hallgerd\",\"Hallkel\",\"Hallock\",\"Halloweii\",\"Hallveig\",\"Halvord\",\"Hamlin\",\r\n  \"Hamnet\",\"Hanford\",\"Hani\",\"Haninah\",\"Hannibal\",\"Hanoran\",\"Hansine\",\"Hapweth\",\"Harald\",\"Harbaugh\",\"Harcourt\",\"Hardernan\",\"Hardon\",\r\n  \"Hardwicke\",\"Harek\",\"Harkness\",\"Harlan\",\"Harlo\",\"Harold\",\"Haroon\",\"Harpo\",\"Harren\",\"Harthan\",\"Harthran\",\"Hartpole\",\"Hartwig\",\r\n  \"Harwood\",\"Hasket\",\"Hassan\",\"Hastein\",\"Hatcher\",\"Hattrick\",\"Hauk\",\"Havard\",\"Havelock\",\"Hayvan\",\"Hazard\",\"Hazel\",\"Haziran\",\r\n  \"Hazrond\",\"Healdon\",\"Heardred\",\"Heaslip\",\"Heather\",\"Hector\",\"Hedda\",\"Hedin\",\"Hedwig\",\"Heimer\",\"Helena\",\"Helga\",\"Helgi\",\r\n  \"Helir\",\"Helix\",\"Helm\",\"Helma\",\"Helmi\",\"Heman\",\"Hemming\",\"Hendrik\",\"Hengist\",\"Henna\",\"Henrick\",\"Henry\",\"Geramon\",\r\n  \"Herdis\",\"Herekin\",\"Hereward\",\"Herijar\",\"Hermione\",\"Heron\",\"Hertha\",\"Heryom\",\"Herzog\",\"Heward\",\"Hhaba'id\",\"Hhabezur\",\"Hickling\",\r\n  \"Hidohebhi\",\"Hifryn\",\"Hild\",\"Hilda\",\"Hildebrand\",\"Hildegarde\",\"Hildric\",\"Himli\",\"Hisar\",\"Hislop\",\"Hjalmar\",\"Hjalti\",\"Hjeldin\",\r\n  \"Hjort\",\"Hjorth\",\"Hlif\",\"Hoadley\",\"Hoar\",\"Hobart\",\"Hodgdon\",\"Hogg\",\"Hogni\",\"Holbrook\",\"Holger\",\"Holgi\",\"Hollister\",\r\n  \"Holly\",\"Homli\",\"Hookham\",\"Horan\",\"Horatio\",\"Hord\",\"Horik\",\"Hormstein\",\"Horsa\",\"Hortensia\",\"Horton\",\"Hoskuld\",\"Hosni\",\r\n  \"Hossein\",\"Howarth\",\"Howland\",\"Hrafn\",\"Hrapp\",\"Hrefna\",\"Hrethel\",\"Hring\",\"Hroald\",\"Hrodyn\",\"Hrolf\",\"Hrothgar\",\"Hrugan\",\r\n  \"Hruggek\",\"Hruse\",\"Hrut\",\"Huffatn\",\"Hulbeart\",\"Hulda\",\"Hultz\",\"Humbert\",\"Hunter\",\"Hurd\",\"Hurgal\",\"Hurvin\",\"Hussain\",\r\n  \"Hustana\",\"Hyarantar\",\"Hyarante\",\"Hyder\",\"Hyfryn\",\"Hygelac\",\"Hylissa\",\"Hynman\",\"Hyrak\",\"Ian\",\"Iana\",\"Ibitz\",\"Ibrahim\",\r\n  \"Ibrandul\",\"Ica\",\"Icarus\",\"Icava\",\"Ick\",\"Ida\",\"Idarolan\",\"Iden\",\"Idris\",\"Iduna\",\"Iduné\",\"Ies'lorn\",\"Igjaru\",\r\n  \"Igor\",\"Ikarin\",\"Ilena\",\"Ilermath\",\"Ilia\",\"Iliriya\",\"Illentik\",\"Illuin\",\"Illyana\",\"Ilmare\",\"Ilniora\",\"Ilthoss\",\"Iluvatar\",\r\n  \"Ilya\",\"Ilyesha\",\"Imajin\",\"Imnar\",\"Imoen\",\"Imphela\",\"Imrador\",\"Imrahan\",\"Imrahim\",\"Imril\",\"Imryr\",\"Inahwen\",\"Indech\",\r\n  \"Indigo\",\"Indira\",\"Indreju\",\"Indria\",\"Ingald\",\"Ingeborg\",\"Ingen\",\"Ingi\",\"Ingirid\",\"Ingolf\",\"Ingram\",\"Ingrid\",\"Ingunn\",\r\n  \"Inifael\",\"Inigo\",\"Inisfa'il\",\"Iosaz\",\"Iosef\",\"Irgash\",\"Irial\",\"Irian\",\"Iris\",\"Irma\",\"Irphilin\",\"Irsai\",\"Irvin\",\r\n  \"Irwick\",\"Isael\",\"Isak\",\"Isambard\",\"Isbeorn\",\"Iscal\",\"Iselore\",\"Isengard\",\"Isengrim\",\"Iserion\",\"Isgrimnur\",\"Ishmael\",\"Isidora\",\r\n  \"Isiki\",\"Isildur\",\"Isilith\",\"Isleif\",\"Ismail\",\"Isolde\",\"Isorn\",\"Issak\",\"Ithaca\",\"Iuz\",\"Ivan\",\"Ivar\",\"Ivor\",\r\n  \"Ivy\",\"Iwanda\",\"Iyu'nigato\",\"Izard\",\"Izebel\",\"Izvire\",\"Jace\",\"Jacinth\",\"Jacoby\",\"Jacor\",\"Jade\",\"Jaden\",\"Jadzia\",\r\n  \"Jael\",\"Jaffar\",\"Jagadis\",\"Jaheira\",\"Jahrec\",\"Jahverbhai\",\"Jalasil\",\"Jalavier\",\"Jaligal\",\"Jamila\",\"Janda'nan\",\"Jandanan\",\"Janix\",\r\n  \"Janna\",\"Janus\",\"Janvel\",\"Jarak\",\"Jarazal\",\"Jared\",\"Jarek\",\"Jarnagua\",\"Jarriel\",\"Jarvin\",\"Jasara\",\"Jasek\",\"Jaseve\",\r\n  \"Jasha\",\"Jasmine\",\"Jason\",\"Javair\",\"Javon\",\"Jawaharial\",\"Jayce\",\"Jayden\",\"Jaylidan\",\"Jayna\",\"Jaysen\",\"Jazhara\",\"Jazrel\",\r\n  \"Jedd\",\"Jeffen\",\"Jehryn\",\"Jelyn\",\"Jenantar\",\"Jenkin\",\"Jennifer\",\"Jens\",\"Jensine\",\"Jephson\",\"Jerec\",\"Jeryth\",\"Jesiper\",\r\n  \"Jespar\",\"Jesslyn\",\"Jestyn\",\"Jethis\",\"Jevan\",\"Jevist\",\"Jezryanadar\",\"Jhael\",\"Jhaelen\",\"Jhany\",\"Jhardamòr\",\"Jharkor\",\"Jhary\",\r\n  \"Jihad\",\"Jillian\",\"Jingizu\",\"Jintah\",\"Jiriki\",\"Jirnost\",\"Jocelyn\",\"Jochan\",\"Johannes\",\"John\",\"Jolan\",\"Jomano\",\"Jonaya\",\r\n  \"Joran\",\"Jordan\",\"Joriel\",\"Jornadesh\",\"Jorunn\",\"Joscelyn\",\"Joseph\",\"Josephine\",\"Josette\",\"Joshua\",\"Jotham\",\"Jovena\",\"Jubini\",\r\n  \"Jullana\",\"Junius\",\"Juno\",\"Juntalin\",\"Jura\",\"Jurim\",\"Jusif\",\"Juss\",\"Jyresh\",\"K'aarna\",\"Kaarna\",\"Kael\",\"Kaelin\",\r\n  \"Kaffa\",\"Kai\",\"Kaia\",\"Kailyn\",\"Kaimana\",\"Kaitlinn\",\"Kaja\",\"Kalan\",\"Kalantir\",\"Kalar\",\"Kaldar\",\"Kaleen\",\"Kalen\",\r\n  \"Kalf\",\"Kalia\",\"Kalina\",\"Kalvan\",\"Kalvaro\",\"Kalyra\",\"Kalysha\",\"Kamril\",\"Kamshir\",\"Kanoa\",\"Kaori\",\"Kaprin\",\"Kara\",\r\n  \"Karali\",\"Karel\",\"Karelia\",\"Kari\",\"Karim\",\"Karinca\",\"Karine\",\"Karis\",\"Karitsa\",\"Karker\",\"Karl\",\"Karlsefni\",\"Karran\",\r\n  \"Karya\",\"Kaschak\",\"Kasia\",\"Kaspar\",\"Kasreyn\",\"Kathena\",\"Kathran\",\"Katishimo\",\"Katla\",\"Katnina\",\"Katrin\",\"Katrina\",\"Kavalam\",\r\n  \"Kavalnir\",\"Kaylianna\",\"Kaylin\",\"Kazairl\",\"Kazalim\",\"Kazir\",\"Keavy\",\"Keelan\",\"Kegan\",\"Keiko\",\"Keldorn\",\"Kelin\",\"Kellin\",\r\n  \"Kelma'in\",\"Kelson\",\"Kelth\",\"Kelvin\",\"Kemble\",\"Kendall\",\"Kendra\",\"Kendrick\",\"Kenesaw\",\"Kenin\",\"Kenny\",\"Kenobi\",\"Kenrick\",\r\n  \"Kerik\",\"Kerish\",\"Kermit\",\"Kerrigan\",\"Keshar\",\"Kesrick\",\"Kethios\",\"Ketial\",\"Ketil\",\"Kettali\",\"Kevan\",\"Keven\",\"Kevlin\",\r\n  \"Keyrnon\",\"Khader\",\"Khalia\",\"Khalid\",\"Khanzadian\",\"Kharas\",\"Khealynn\",\"Khelben\",\"Kheldor\",\"Khelen\",\"Khelin\",\"Khelyn\",\"Khendraja'aro\",\r\n  \"Khenel\",\"Khezeed\",\"Khindawe\",\"Khirsha\",\"Khlor\",\"Khris\",\"Khyved\",\"Ki'ushapo\",\"Kian\",\"Kiborno\",\"Kiera\",\"Kieran\",\"Kikkasut\",\r\n  \"Kilas\",\"Kilian\",\"Killion\",\"Kimmuriel\",\"Kimura\",\"Kinloch\",\"Kinson\",\"Kippler\",\"Kira\",\"Kiri\",\"Kirjava\",\"Kirk\",\"Kirren\",\r\n  \"Kirsopp\",\"Kirsten\",\"Kishin\",\"Kisin\",\"Kitiara\",\"Kjeldor\",\"Kjindar\",\"Klaus\",\"Klean\",\"Klerak\",\"Knud\",\"Knut\",\"Knute\",\r\n  \"Koabon\",\"Kolbein\",\"Kolchash\",\"Kolskegg\",\"Kolya\",\"Kona\",\"Konrad\",\"Konstantine\",\"Korban\",\"Kord\",\"Koreth\",\"Korgan\",\"Korm\",\r\n  \"Kormar\",\"Kornag\",\"Korska\",\"Kosh\",\"Kota\",\"Kovelir\",\"Krinn\",\"Krishnalai\",\"Kroh\",\"Krom\",\"Kronos\",\"Kuno\",\"Kurd\",\r\n  \"Kurn\",\"Kurt\",\"Kurin\",\"Kuros\",\"Kurtulmak\",\"Ky'ishi\",\"Ky'varan\",\"Kyle\",\"Kylindra\",\"Kypros\",\"Kyrie\",\"Kyriel\",\"La'ahl\",\r\n  \"Lachesis\",\"Lachian\",\"Ladia\",\"Ladoros\",\"Laeli\",\"Laelia\",\"Laerrui\",\"Lahar\",\"Lahsai\",\"Lalely\",\"Lamar\",\"Lambi\",\"Lan\",\r\n  \"Lana\",\"Lance\",\"Lancelot\",\"Landailyn\",\"Landoris\",\"Landrea\",\"Laneth\",\"Langhorne\",\"Langrian\",\"Langston\",\"Lanthal\",\"Lanthorn\",\"Larad\",\r\n  \"Lardner\",\"Larisa\",\"Larkin\",\"Larn\",\"Larnea\",\"Lars\",\"Larz\",\"Lashar\",\"Lateia\",\"Lathander\",\"Laurana\",\"Laurelin\",\"Laxton\",\r\n  \"Lazar\",\"Lazlo\",\"Lea\",\"Leareth\",\"Leathian\",\"Lec\",\"Ledyard\",\"Leela\",\"Legolas\",\"Legrand\",\"Leif\",\"Leighton\",\"Leika\",\r\n  \"Leila\",\"Leilah\",\"Leli\",\"Lembar\",\"Lenka\",\"Lenox\",\"Leo\",\"Leofric\",\"Leon\",\"Leonard\",\"Leonardo\",\"Leopond\",\"Lesesne\",\r\n  \"Lestyn\",\"Leta\",\"Letor\",\"Lev\",\"Lewellyri\",\"Lexan\",\"Lexx\",\"Lhuc\",\"Lia\",\"Liana\",\"Liena\",\"Lightfoot\",\"Liliane\",\r\n  \"Lilin\",\"Lina\",\"Lindar\",\"Linmer\",\"Linnea\",\"Lios\",\"Liphar\",\"Lippard\",\"Liptrot\",\"Lirith\",\"Lithar\",\"Littleton\",\"Livermore\",\r\n  \"Livia\",\"Ljot\",\"Ljotolf\",\"Lluth\",\"Llyn\",\"Llythin\",\"Lobelia\",\"Lobryn\",\"Lobur\",\"Locke\",\"Lockwood\",\"Loddlaen\",\"Lodica\",\r\n  \"Lodin\",\"Loella\",\"Logan\",\"Loibur\",\"Loili\",\"Lola\",\"Lonvan\",\"Lore\",\"Loric\",\"Lorin\",\"Lormyr\",\"Lothar\",\"Lothrop\",\r\n  \"Lott\",\"Lotta\",\"Loudon\",\"Louisa\",\"Lovegood\",\"Lovva\",\"Lovyan\",\"Luas\",\"Lucan\",\"Lucca\",\"Lucia\",\"Lucian\",\"Lucinda\",\r\n  \"Lucius\",\"Lucrecia\",\"Ludmila\",\"Luella\",\"Lufkin\",\"Lugh\",\"Luhsane\",\"Lum\",\"Lumbar\",\"Luna\",\"Lunar\",\"Lunetta\",\"Lupin\",\r\n  \"Lurican\",\"Lurue\",\"Luscan\",\"Luther\",\"Luthian\",\"Luvina\",\"Lycias\",\"Lydia\",\"Lylas\",\"Lyle\",\"Lymo\",\"Lyndall\",\"Lyndon\",\r\n  \"Lynette\",\"Lynis\",\"Lynn\",\"Lypilla\",\"Lyra\",\"Lyrian\",\"Lyrin\",\"Lyron\",\"Lysander\",\"Lyssa\",\"Lythia\",\"Lythian\",\"Lytler\",\r\n  \"Lyzandra\",\"Lyzette\",\"Lórien\",\"Mabon\",\"Macallan\",\"Macaulay\",\"Macer\",\"Mackim\",\"Macvey\",\"Maddern\",\"Maddock\",\"Madelon\",\"Madhao\",\r\n  \"Madora\",\"Maec\",\"Maegwin\",\"Mael\",\"Maerraent\",\"Mafka\",\"Magda\",\"Magh\",\"Magill\",\"Magna\",\"Magnus\",\"Magus\",\"Mahion\",\r\n  \"Mahmud\",\"Mahri\",\"Maia\",\"Maidah\",\"Maidak\",\"Maihar\",\"Makoma\",\"Malach\",\"Malachias\",\"Maladack\",\"Malador\",\"Malak\",\"Malar\",\r\n  \"Malcoff\",\"Malcolm\",\"Malfar\",\"Malia\",\"Maliforin\",\"Malkil\",\"Malto\",\"Malvin\",\"Malvtha\",\"Mama\",\"Mamba\",\"Mana\",\"Manala\",\r\n  \"Manaverr\",\"Manfred\",\"Mankey\",\"Mannin\",\"Manon\",\"Mansour\",\"Manton\",\"Manwe\",\"Maoll\",\"March\",\"Marcus\",\"Marena\",\"Margarita\",\r\n  \"Margery\",\"Mariandor\",\"Marid\",\"Marina\",\"Marion\",\"Marissa\",\"Marisse\",\"Mark\",\"Markham\",\"Maroof\",\"Marques\",\"Marsden\",\"Marshtnan\",\r\n  \"Marsineh\",\"Marta\",\"Martin\",\"Martus\",\"Mary\",\"Maryn\",\"Mathilda\",\"Mathilde\",\"Matilda\",\"Matthew\",\"Matthias\",\"Maudlin\",\"Maura\",\r\n  \"Mavis\",\"Maxander\",\"Maxfield\",\"Maximilian\",\"Maximus\",\"Maya\",\"Mayhew\",\"Mazrak\",\"Medar\",\"Medart\",\"Medea\",\"Meder\",\"Medrom\",\r\n  \"Megan\",\"Meghnad\",\"Mehmet\",\"Mekeesha\",\"Melba\",\"Melchior\",\"Meleri\",\"Meliadoul\",\"Melian\",\"Melisande\",\"Melkor\",\"Mellyora\",\"Melnyth\",\r\n  \"Melora\",\"Melva\",\"Melvaig\",\"Memor\",\"Men\",\"Menard\",\"Mendolin\",\"Menelvagor\",\"Mennefer\",\"Meoran\",\"Mephistopheles\",\"Merah\",\"Merasye\",\r\n  \"Meredith\",\"Meriadoc\",\"Merifa\",\"Merivan\",\"Merlin\",\"Merrilee\",\"Merryn\",\"Mervyn\",\"Merwold\",\"Merwolf\",\"Mes'ard\",\"Meta\",\"Methos\",\r\n  \"Methuen\",\"Michael\",\"Michel\",\"Mideya\",\"Midhat\",\"Midra\",\"Mignon\",\"Miguel\",\"Mikhail\",\"Mila\",\"Milada\",\"Milander\",\"Milandro\",\r\n  \"Mileaha\",\"Millard\",\"Milo\",\"Mimir\",\"Mina\",\"Minella\",\"Miner\",\"Minna\",\"Minx\",\"Mira\",\"Miragon\",\"Miranda\",\"Mirandros\",\r\n  \"Miriel\",\"Mirrash\",\"Mirromi\",\"Miryam\",\"Misha\",\"Mishanti\",\"Misin\",\"Mist\",\"Mithrandir\",\"Mithryl\",\"Mitre\",\"Miwa\",\"Mizra\",\r\n  \"Moda\",\"Modeus\",\"Moffett\",\"Mohammed\",\"Mohieddin\",\"Moina\",\"Moira\",\"Moiriane\",\"Moisur\",\"Molina\",\"Mona\",\"Monach\",\"Montfort\",\r\n  \"Mora\",\"Moradin\",\"Mord\",\"Moredlin\",\"Morgan\",\"Morgon\",\"Morgwin\",\"Moriana\",\"Morik\",\"Morin\",\"Morley\",\"Morna\",\"Morpheus\",\r\n  \"Morrigan\",\"Mortos\",\"Mortrock\",\"Morven\",\"Moya\",\"Muammar\",\"Mubur\",\"Muhammed\",\"Muhlwena\",\"Mujibur\",\"Muktar\",\"Munin\",\"Murdo\",\r\n  \"Murias\",\"Murina\",\"Murrough\",\"Mussa\",\"Mustadio\",\"Mustafa\",\"Mylin\",\"Mylé\",\"Myna\",\"Myra\",\"Myriam\",\"Myrick\",\"Myrmeen\",\r\n  \"Myrna\",\"Myron\",\"Myrrdyn\",\"Myrrha\",\"Myshella\",\"Mythil\",\"Myvor\",\"N'hadha\",\"Nada\",\"Nadezhda\",\"Nadia\",\"Nadir\",\"Nagai\",\r\n  \"Nagel\",\"Nagvar\",\"Nahar\",\"Naia\",\"Naidel\",\"Najib\",\"Nakea\",\"Nalia\",\"Nall\",\"Nanorion\",\"Naois\",\"Naomi\",\"Napollo\",\r\n  \"Narasen\",\"Narcista\",\"Narisa\",\"Narvi\",\"Nasir\",\"Nasser\",\"Natalia\",\"Natasha\",\"Nathalia\",\"Nathalie\",\"Natty\",\"Nazar\",\"Nebron\",\r\n  \"Nedda\",\"Nedstar\",\"Neelix\",\"Negley\",\"Nemm\",\"Nemuel\",\"Neral\",\"Neri\",\"Nerian\",\"Nerilka\",\"Nerissa\",\"Nerull\",\"Nesbit\",\r\n  \"Nesta\",\"Nethuan\",\"Neva\",\"Nevaeh\",\"Nevard\",\"Nevena\",\"Nevile\",\"Nevyn\",\"Newall\",\"Newbold\",\"Newman\",\"Neysa\",\"Neza\",\r\n  \"Nibbidard\",\"Nichol\",\"Nicor\",\"Nienna\",\"Night\",\"Nigil\",\"Nikolai\",\"Nikua\",\"Nila\",\"Nimir\",\"Nimrodel\",\"Nina\",\"Ninian\",\r\n  \"Niomir\",\"Nira'in\",\"Nirnir\",\"Nita\",\"Nivek\",\"Nivilian\",\"Nizam\",\"Nizar\",\"Nobanion\",\"Nodaran\",\"Noela\",\"Nolan\",\"Nona\",\r\n  \"Noora\",\"Nor\",\"Nordri\",\"Noreen\",\"Norine\",\"Norle\",\"Norna\",\"Norval\",\"Norvin\",\"Norwood\",\"Nova\",\"Novalis\",\"Novita\",\r\n  \"Novomira\",\"Nu'endo\",\"Nuada\",\"Nuadi\",\"Nuala\",\"Nuale\",\"Nuanni\",\"Nungo\",\"Nunila\",\"Nura\",\"Nurdoch\",\"Nurgan\",\"Nuri\",\r\n  \"Nushia\",\"Nyassa\",\"Nylan\",\"Nymara\",\"Nynaeve\",\"Nyra\",\"Nytasa\",\"Oakes\",\"Oalyn\",\"Obed\",\"Oberon\",\"Ocar\",\"Oda\",\r\n  \"Odar\",\"Odd\",\"Oden\",\"Odilia\",\"Odimus\",\"Odo\",\"Odona\",\"Ofeig\",\"Ogden\",\"Oghma\",\"Ogma\",\"Ogmund\",\"Ogrus\",\r\n  \"Okander\",\"Olac\",\"Olaf\",\"Oldac\",\"Oldham\",\"Olga\",\"Olissa\",\"Olof\",\"Olorin\",\"Oloru\",\"Olvir\",\"Olya\",\"Omandras\",\r\n  \"Omar\",\"Omassus\",\"Ombrum\",\"Omer\",\"Onslow\",\"Onufrio\",\"Onund\",\"Onyx\",\"Ooma\",\"Oona\",\"Oonai\",\"Opal\",\"Ophelia\",\r\n  \"Orah\",\"Orcrist\",\"Ordway\",\"Oriana\",\"Orin\",\"Orion\",\"Orius\",\"Orivaen\",\"Orlandu\",\"Orlata\",\"Orm\",\"Ormsby\",\"Orome\",\r\n  \"Oron\",\"Orren\",\"Orridge\",\"Orsola\",\"Orson\",\"Osa\",\"Osiris\",\"Oskavar\",\"Ospar\",\"Osric\",\"Oswin\",\"Othello\",\"Othilia\",\r\n  \"Otho\",\"Othran\",\"Otiluke\",\"Otkel\",\"Otrygg\",\"Ottar\",\"Ottilia\",\"Otto\",\"Overton\",\"Owain\",\"Owen\",\"Owyn\",\"Ozatras\",\r\n  \"Ozto\",\"Ozur\",\"Padraic\",\"Padrias\",\"Paget\",\"Pala\",\"Palma\",\"Pamar\",\"Pan\",\"Parbha\",\"Pargascor\",\"Parr\",\"Pasca\",\r\n  \"Paschal\",\"Passmore\",\"Patnas\",\"Pattabhai\",\"Pavel\",\"Pean\",\"Pearl\",\"Pearsall\",\"Peffer\",\"Peiham\",\"Peitar\",\"Peleg\",\"Pelipi\",\r\n  \"Pellin\",\"Pendleton\",\"Penfield\",\"Pengolod\",\"Penhallow\",\"Penniman\",\"Penrhyn\",\"Pepperell\",\"Pereban\",\"Peredon\",\"Peregrin\",\"Peregrine\",\"Perith\",\r\n  \"Peronn\",\"Perrin\",\"Persifor\",\"Pestivar\",\"Peter\",\"Pethros\",\"Petra\",\"Petrea\",\"Petronella\",\"Pflarr\",\"Phanuel\",\"Pharatnond\",\"Pharcellus\",\r\n  \"Phelim\",\"Philo\",\"Philpot\",\"Phimister\",\"Phoenix\",\"Phyrrus\",\"Pia\",\"Picar\",\"Pickman\",\"Pigot\",\"Pike\",\"Pine\",\"Pinkham\",\r\n  \"Pinkney\",\"Pinkstone\",\"Piotr\",\"Pittheus\",\"Plaisted\",\"Plunimer\",\"Plunkett\",\"Polassar\",\"Pollard\",\"Pollock\",\"Polonius\",\"Polycarp\",\"Pomeroy\",\r\n  \"Porthios\",\"Powell\",\"Prafulla\",\"Prendergast\",\"Preston\",\"Prichard\",\"Proctor\",\"Prospero\",\"Provida\",\"Psilofyr\",\"Puck\",\"Pue\",\"Pulisk\",\r\n  \"Pulteney\",\"Purdon\",\"Pyke\",\"Pyros\",\"Pysander\",\"Quaan\",\"Quagel\",\"Qualin\",\"Quan\",\"Quarles\",\"Quasar\",\"Quascar\",\"Quass\",\r\n  \"Quebba\",\"Quelfinas\",\"Quesan\",\"Queygo\",\"Quiddle\",\"Quinn\",\"Quiss\",\"Quixano\",\"Quora\",\"Quvar\",\"Quvean\",\"Raagon\",\"Raban\",\r\n  \"Rabind\",\"Rabur\",\"Rach\",\"Rachid\",\"Rackafel\",\"Rackhir\",\"Radagast\",\"Radija\",\"Rae\",\"Rael\",\"Raen\",\"Rafa\",\"Rafael\",\r\n  \"Rafur\",\"Ragen\",\"Ragna\",\"Ragnal\",\"Ragnar\",\"Ragnhild\",\"Rahaz\",\"Rai\",\"Raikes\",\"Rails\",\"Raimon\",\"Raina\",\"Raine\",\r\n  \"Raisa\",\"Raistlin\",\"Ralina\",\"Ralmanor\",\"Ralph\",\"Ramen\",\"Ramli\",\"Ramman\",\"Ramona\",\"Ramora\",\"Ramous\",\"Ramza\",\"Ranald\",\r\n  \"Ranath\",\"Rancor\",\"Rand\",\"Randar\",\"Randoer\",\"Randolf\",\"Randor\",\"Ranfurly\",\"Ranjan\",\"Rankin\",\"Rannuif\",\"Rannveig\",\"Raphael\",\r\n  \"Rary\",\"Rashiel\",\"Rasputin\",\"Rathack\",\"Rathanos\",\"Rathgar\",\"Rattray\",\"Rauros\",\"Ravenor\",\"Ravi\",\"Rayne\",\"Razamor\",\"Raziel\",\r\n  \"Razzan\",\"Rebecca\",\"Recoun\",\"Redcliffe\",\"Regalorn\",\"Regnar\",\"Reina\",\"Reis\",\"Relm\",\"Rem\",\"Remi\",\"Remnor\",\"Remus\",\r\n  \"Renar\",\"Renata\",\"Rendel\",\"Rengoll\",\"Reoc\",\"Resha\",\"Rethral\",\"Reva\",\"Rex\",\"Reyna\",\"Rezah\",\"Rhadry\",\"Rhaederle\",\r\n  \"Rhaeryn\",\"Rhea\",\"Rhiannon\",\"Rhiow\",\"Rhodhy\",\"Rhona\",\"Rhonda\",\"Rhora\",\"Rhorleif\",\"Rhorvald\",\"Rhundas\",\"Rhymer\",\"Rhynn\",\r\n  \"Rhys\",\"Riallus\",\"Riamon\",\"Rickard\",\"Ricyn\",\"Rigolio\",\"Rilir\",\"Rinaldus\",\"Ringgold\",\"Risaya\",\"Riss\",\"Rith\",\"Riven\",\r\n  \"Roach\",\"Roark\",\"Rockhill\",\"Rodefer\",\"Roderic\",\"Rodhan\",\"Rognvald\",\"Roignar\",\"Roland\",\"Rolf\",\"Rollo\",\"Roman\",\"Romelia\",\r\n  \"Romer\",\"Romney\",\"Ronan\",\"Root\",\"Rorik\",\"Rosalyn\",\"Rosamund\",\"Roscoe\",\"Rose\",\"Rosefyre\",\"Roseline\",\"Roshena\",\"Rosskeen\",\r\n  \"Roundell\",\"Rowena\",\"Ruadan\",\"Ruan\",\"Rubar\",\"Ruben\",\"Rubrick\",\"Ruby\",\"Rucker\",\"Rudyard\",\"Rufina\",\"Rufus\",\"Ruggles\",\r\n  \"Ruhollah\",\"Ruinar\",\"Rulian\",\"Rulinian\",\"Rumil\",\"Runa\",\"Runold\",\"Runolf\",\"Runus\",\"Rurik\",\"Rusgar\",\"Ruth\",\"Rutland\",\r\n  \"Ruwen\",\"Ryana\",\"Rycaro\",\"Rychanna\",\"Rygar\",\"Ryll\",\"Rylla\",\"Rynnyn\",\"Ryodan\",\"Ryoga\",\"Ryoka\",\"Saalem\",\"Sabal\",\r\n  \"Sabhel\",\"Sabriel\",\"Sabrok\",\"Sacheverall\",\"Sackville\",\"Saddam\",\"Sadler\",\"Sador\",\"Saedd\",\"Saermund\",\"Saeunn\",\"Safrin\",\"Saia\",\r\n  \"Said\",\"Saifai\",\"Saiwyn\",\"Salina\",\"Salmon\",\"Salter\",\"Sam\",\"Sambrea\",\"Samia\",\"Samira\",\"Sammel\",\"Samuel\",\"Sanfrid\",\r\n  \"Sano'rye\",\"Sanoreya\",\"Sanoria\",\"Sarcyn\",\"Sardior\",\"Sardul\",\"Sarel\",\"Sarevok\",\"Sargonus\",\"Saria\",\"Sarina\",\"Sarisin\",\"Sariya\",\r\n  \"Sarrask\",\"Saruman\",\"Sasha\",\"Saska\",\"Saturn\",\"Sauron\",\"Savah\",\"Savion\",\"Sawdon\",\"Sayan\",\"Scenesefa\",\"Scudamore\",\"Scythe\",\r\n  \"Sebastian\",\"Sebrinth\",\"Sechier\",\"Sedgely\",\"Seersha\",\"Segojan\",\"Sehanine\",\"Seitarin\",\"Selema\",\"Selena\",\"Selene\",\"Selig\",\"Selim\",\r\n  \"Selina\",\"Selis\",\"Selith\",\"Selune\",\"Selwyn\",\"Semuta\",\"Senith\",\"Senna\",\"Sephia\",\"Sephya\",\"Sepiroth\",\"Seramir\",\"Seraphina\",\r\n  \"Serena\",\"Serenyi\",\"Sergei\",\"Seriozha\",\"Seryan\",\"Seryl\",\"Seryth\",\"Seth\",\"Sethron\",\"Sevadia\",\"Severin\",\"Sevros\",\"Sevy\",\r\n  \"Sha'dar\",\"Sha'rell\",\"Shackerley\",\"Shadizad\",\"Shadrach\",\"Shadworth\",\"Shaera\",\"Shaivar\",\"Shaivir\",\"Shala\",\"Shalamar\",\"Shalandain\",\"Shalat\",\r\n  \"Shalhassan\",\"Shalindra\",\"Shalon\",\"Shalpan\",\"Shamane\",\"Shamir\",\"Shana\",\"Shandalar\",\"Shanell\",\"Shar\",\"Sharada\",\"Sharaq\",\"Shard\",\r\n  \"Sharif\",\"Sharilla\",\"Sharl\",\"Sharla\",\"Sharmaine\",\"Sharman\",\"Sharna\",\"Sharnira\",\"Sharra\",\"Sharteel\",\"Shaundra\",\"Sharyn\",\"Shayera\",\r\n  \"Shayla\",\"Shayll\",\"Shayonea\",\"Shea\",\"Sheegoth\",\"Sheeryl\",\"Sheherazad\",\"Shemsin\",\"Sheridan\",\"Sherif\",\"Sherry\",\"Shezael\",\"Shima'onari\",\r\n  \"Shintaro\",\"Shiza\",\"Shuinn\",\"Shuna\",\"Shurakai\",\"Shurik\",\"Shushila\",\"Shylock\",\"Siandar\",\"Sibert\",\"Sibyl\",\"Sidhe\",\"Siglinde\",\r\n  \"Sigmund\",\"Signe\",\"Sigred\",\"Sigrid\",\"Sigtrydd\",\"Sigurd\",\"Sigvaldi\",\"Silatasar\",\"Silius\",\"Silma\",\"Silmariel\",\"Silphane\",\"Silvain\",\r\n  \"Silvan\",\"Silvanus\",\"Silvera\",\"Silveron\",\"Silvia\",\"Silvyn\",\"Simir\",\"Simmu\",\"Sinbad\",\"Sindarin\",\"Sinir\",\"Sinjin\",\"Siranush\",\r\n  \"Sirisir\",\"Sirli'in\",\"Sirona\",\"Sirranon\",\"Sirwin\",\"Sisimar\",\"Siski\",\"Sivesh\",\"Siveth\",\"Siward\",\"Sjerdi\",\"Skamkel\",\"Skelmar\",\r\n  \"Skorian\",\"Slade\",\"Slania\",\"Slater\",\"Slava\",\"Sligh\",\"Slingsby\",\"Smedley\",\"Snargg\",\"Snorri\",\"Snyder\",\"Sodorn\",\"Soilir\",\r\n  \"Soisil\",\"Sokki\",\"Solaris\",\"Solera\",\"Solevig\",\"Solmund\",\"Solomon\",\"Solvi\",\"Sonnet\",\"Sooth\",\"Sora\",\"Sorass\",\"Sorcha\",\r\n  \"Sorin\",\"Sornovas\",\"Soth\",\"Southall\",\"Sovaz\",\"Soveh\",\"Soyadi\",\"Sparrow\",\"Sprigg\",\"Squall\",\"Srass\",\"Stabyl\",\"Stanwood\",\r\n  \"Starkad\",\"Starke\",\"Stedman\",\"Stefan\",\"Stehman\",\"Stein\",\"Steinkel\",\"Steinthor\",\"Stelectra\",\"Stenger\",\"Stenwulf\",\"Steponas\",\"Sterndale\",\r\n  \"Stetson\",\"Stetter\",\"Stiliman\",\"Stilingfleet\",\"Stopford\",\"Storm\",\"Stowna\",\"Strachan\",\"Straygoth\",\"Stroud\",\"Strudwick\",\"Strybyorn\",\"Strykar\",\r\n  \"Sturla\",\"Sturm\",\"Styx\",\"Sudeha\",\"Suleiman\",\"Sulimo\",\"Sulkas\",\"Sumarlidi\",\"Suras\",\"Surridge\",\"Susin\",\"Susur\",\"Sutan\",\r\n  \"Svala\",\"Svan\",\"Svante\",\"Svatopluk\",\"Sveata\",\"Sven\",\"Swain\",\"Swartwout\",\"Sydnor\",\"Syllva\",\"Sylvane\",\"Sylvia\",\"Sylvin\",\r\n  \"Sylvine\",\"Syndarra\",\"Synnyn\",\"Syranita\",\"Syrioll\",\"Tabar\",\"Tabitha\",\"Tabor\",\"Tabu\",\"Tacey\",\"Tachel\",\"Tadashi\",\"Tadeus\",\r\n  \"Tadia\",\"Tadisha\",\"Tadra\",\"Taennyn\",\"Taeynnyn\",\"Taggart\",\"Tahir\",\"Tailabar\",\"Taina\",\"Takhisis\",\"Taleen\",\"Talen\",\"Taleth\",\r\n  \"Talia\",\"Taliesin\",\"Talin\",\"Talmora\",\"Talobar\",\"Talona\",\"Taloxi\",\"Taltos\",\"Talus\",\"Tamar\",\"Tamara\",\"Tameryn\",\"Tamias\",\r\n  \"Tamlin\",\"Tamoreya\",\"Tanina\",\"Tanis\",\"Tanith\",\"Tanyc\",\"Tar\",\"Tara\",\"Taran\",\"Tarcia\",\"Taria\",\"Tarik\",\"Taromas\",\r\n  \"Taron\",\"Tarran\",\"Taryn\",\"Tas\",\"Tasharra\",\"Tasker\",\"Tatyana\",\"Taurus\",\"Taveli\",\"Taylian\",\"Taylin\",\"Tedra\",\"Tegan\",\r\n  \"Tekia\",\"Telena\",\"Tell\",\"Tench\",\"Tenna\",\"Tenser\",\"Teoddry\",\"Ter\",\"Teralyn\",\"Teressa\",\"Terix\",\"Teruah\",\"Tesin\",\r\n  \"Tesla\",\"Tessa\",\"Tevran\",\"Thaal\",\"Thacker\",\"Thaddeus\",\"Thaki\",\"Thal\",\"Thalen\",\"Thalessa\",\"Thalia\",\"Thalna\",\"Tham\",\r\n  \"Thana\",\"Thane\",\"Thanatos\",\"Thantos\",\"Thar\",\"Tharbad\",\"Tharkesh\",\"Tharn\",\"Thax\",\"Thecla\",\"Theda\",\"Theleb\",\"Theoden\",\r\n  \"Theodor\",\"Theodoric\",\"Theodosia\",\"Theodric\",\"Theoric\",\"Thera\",\"Therad\",\"Theresa\",\"Therios\",\"Theros\",\"Thesius\",\"Thieras\",\"Thieryn\",\r\n  \"Thingyr\",\"Thio\",\"Tholan\",\"Thomas\",\"Thomulor\",\"Thora\",\"Thoran\",\"Thorarin\",\"Thorburn\",\"Thord\",\"Thordarson\",\"Thordis\",\"Thorfel\",\r\n  \"Thorfinn\",\"Thorfinna\",\"Thorgeir\",\"Thorgerd\",\"Thorgest\",\"Thorgils\",\"Thorgrim\",\"Thorgunna\",\"Thorhall\",\"Thorhalla\",\"Thorhild\",\"Thorin\",\"Thorir\",\r\n  \"Thorkatla\",\"Thorkell\",\"Thorkild\",\"Thormod\",\"Thormodr\",\"Thormond\",\"Thorn\",\"Thorndike\",\"Thornwell\",\"Thorold\",\"Thorolf\",\"Thorsager\",\"Thorstein\",\r\n  \"Thorunn\",\"Thorvald\",\"Thorvaldur\",\"Thorvar\",\"Thorzyl\",\"Thoth\",\"Thrain\",\"Thrand\",\"Throck\",\"Thule\",\"Thurid\",\"Thylda\",\"Thyra\",\r\n  \"Thyri\",\"Thyrza\",\"Thyssa\",\"Tiana\",\"Tiffany\",\"Tihan\",\"Tika\",\"Tilford\",\"Tilica\",\"Tilir\",\"Tillinghast\",\"Tilloch\",\"Timon\",\r\n  \"Tioniel\",\"Tirion\",\"Tisha\",\"Tisheri\",\"Titania\",\"Titia\",\"Titiana\",\"Tivernee\",\"Tiyagar\",\"Tnin\",\"Tobias\",\"Tobis\",\"Todhunter\",\r\n  \"Tolbert\",\"Tolenka\",\"Topaz\",\"Topham\",\"Torc\",\"Tortbold\",\"Tosti\",\"Tosya\",\"Toulac\",\"Tovi\",\"Trafford\",\"Trebor\",\"Trelane\",\r\n  \"Trelawny\",\"Trella\",\"Trevel\",\"Trick\",\"Trigg\",\"Trill\",\"Triona\",\"Trir\",\"Tristam\",\"Tristan\",\"Trost\",\"Trotwood\",\"Trowbridge\",\r\n  \"Truesdell\",\"Tuane\",\"Tufnell\",\"Tugan\",\"Tuilleth\",\"Tulio\",\"Tulkas\",\"Tundine\",\"Tunstall\",\"Tuor\",\"Turan\",\"Turgoz\",\"Turhan\",\r\n  \"Turin\",\"Turpin\",\"Tuttle\",\"Tuula\",\"Twyla\",\"Tylden\",\"Tyldoran\",\"Tylen\",\"Tylien\",\"Tylynn\",\"Tymar\",\"Tymora\",\"Tymoriel\",\r\n  \"Tynnyn\",\"Tyr\",\"Tyra\",\"Tyranina\",\"Tyreen\",\"Tyrwhitt\",\"Uamian\",\"Ubriani\",\"Ucarsh\",\"Uda\",\"Uhier\",\"Uhlain\",\"Uhlume\",\r\n  \"Uholedil\",\"Uinen\",\"Ula\",\"Ulf\",\"Ulgor\",\"Ulis\",\"Uljas\",\"Ulji\",\"Ulmaerr\",\"Ulmo\",\"Ulosh\",\"Ulric\",\"Ulrich\",\r\n  \"Ultron\",\"Umaiar\",\"Umbar\",\"Umda\",\"Umgalad\",\"Una\",\"Uneitna\",\"Ungon\",\"Unius\",\"Unn\",\"Unrak\",\"Unwin\",\"Upal\",\r\n  \"Upton\",\"Urabi\",\"Urania\",\"Uranos\",\"Uranus\",\"Uriel\",\"Urish\",\"Urokoz\",\"Ursula\",\"Usher\",\"Uta\",\"Utumno\",\"Uusoae\",\r\n  \"Uvanimor\",\"Uziel\",\"Vabryn\",\"Vadarin\",\"Vadi\",\"Vaeddyn\",\"Vagn\",\"Vai\",\"Val\",\"Valadan\",\"Valandario\",\"Valandor\",\"Valarindi\",\r\n  \"Valborg\",\"Valda\",\"Valdain\",\"Valdemar\",\"Valen\",\"Valenka\",\"Valentia\",\"Valerand\",\"Valeria\",\"Valerian\",\"Valeska\",\"Valgar\",\"Valgard\",\r\n  \"Valgerd\",\"Valiah\",\"Valion\",\"Valisa\",\"Valiss\",\"Valistor\",\"Valkor\",\"Valla\",\"Vallo\",\"Valmar\",\"Valminder\",\"Valor\",\"Valsera\",\r\n  \"Valurian\",\"Valya\",\"Valynard\",\"Vandrad\",\"Vane\",\"Vanechka\",\"Vanidor\",\"Vanion\",\"Vannevar\",\"Vannyn\",\"Vanya\",\"Vanyar\",\"Vanyel\",\r\n  \"Varda\",\"Vardis\",\"Varina\",\"Varion\",\"Varken\",\"Varnum\",\"Vasava\",\"Vash\",\"Vasha\",\"Vasilii\",\"Vasin\",\"Vaydin\",\"Vaydir\",\r\n  \"Vayi\",\"Vecna\",\"Veda\",\"Veldahar\",\"Veldan\",\"Velex\",\"Velior\",\"Venable\",\"Vendor\",\"Veorcyn\",\"Vercyn\",\"Verdina\",\"Vereesa\",\r\n  \"Verline\",\"Vermund\",\"Verna\",\"Ves\",\"Vespar\",\"Vestein\",\"Veva\",\"Vevina\",\"Vexter\",\"Viasta\",\"Vicarr\",\"Vicat\",\"Vicentia\",\r\n  \"Viconia\",\"Victor\",\"Vida\",\"Vidkun\",\"Vidron\",\"Vieno\",\"Viera\",\"Vierna\",\"Vigdis\",\"Vigfus\",\"Vilhelm\",\"Vilka\",\"Vilrna\",\r\n  \"Vinatta\",\"Vincas\",\"Vincent\",\"Vintar\",\"Violet\",\"Vircyn\",\"Vishali\",\"Viveka\",\"Vladimir\",\"Vladislav\",\"Vlaric\",\"Vobur\",\"Voirath\",\r\n  \"Vokos\",\"Voldor\",\"Volkan\",\"Volney\",\"Volodya\",\"Volund\",\"Vonya\",\"Voranor\",\"Vrashin\",\"Vulpen\",\"Vurog\",\"Vusil\",\"Vyecheslav\",\r\n  \"Vyner\",\"Wadleigh\",\"Waenwryht\",\"Wager\",\"Waisham\",\"Waivan\",\"Wakeman\",\"Wakkar\",\"Walborg\",\"Walda\",\"Waldan\",\"Waldegrave\",\"Waldemar\",\r\n  \"Waleran\",\"Walford\",\"Walid\",\"Walker\",\"Wanhim\",\"Waring\",\"Wariv\",\"Wark\",\"Warne\",\"Warrender\",\"Warrigel\",\"Warwick\",\"Waryk\",\r\n  \"Watson\",\"Watt\",\"Waylan\",\"Wayland\",\"Waylon\",\"Wealin\",\"Wedlake\",\"Weilborn\",\"Weiryn\",\"Wel\",\"Wemick\",\"Wendolyn\",\"Wertha\",\r\n  \"Westcott\",\"Westen\",\"Weyrn\",\"Wharrom\",\"Whitwell\",\"Whyte\",\"Wicca\",\"Wideman\",\"Wightman\",\"Wildhair\",\"Wilfrid\",\"Wilhelm\",\"Wilhelmina\",\r\n  \"Wilibald\",\"Will\",\"Willa\",\"William\",\"Willock\",\"Willow\",\"Wilma\",\"Wilmar\",\"Wilner\",\"Wilven\",\"Windham\",\"Winfrey\",\"Winian\",\r\n  \"Winslow\",\"Winton\",\"Wisp\",\"Wisuth\",\"Wivianne\",\"Wizlow\",\"Woart\",\"Wodan\",\"Wolfgang\",\"Wolmar\",\"Womal\",\"Woodfin\",\"Woodruff\",\r\n  \"Wooligar\",\"Wortley\",\"Wotan\",\"Wulf\",\"Wulfgar\",\"Wulfric\",\"Wulgar\",\"Wychnor\",\"Wycliffe\",\"Wyllows\",\"Wyly\",\"Wynkyn\",\"Wynne\",\r\n  \"Wynston\",\"Wyvan\",\"Xaandria\",\"Xaath\",\"Xabian\",\"Xabiel\",\"Xabu\",\"Xain\",\"Xalthan\",\"Xan\",\"Xanaphel\",\"Xanathar\",\"Xander\",\r\n  \"Xandra\",\"Xandria\",\"Xanthon\",\"Xanthus\",\"Xarek\",\"Xarolith\",\"Xaver\",\"Xavier\",\"Xavin\",\"Xela\",\"Xelmonth\",\"Xena\",\"Xenia\",\r\n  \"Xenoba\",\"Xera\",\"Xercon\",\"Xerravin\",\"Xiombarg\",\"Xoncarg\",\"Xoran\",\"Xulan\",\"Xyas\",\"Xydra\",\"Xyko\",\"Xylah\",\"Xylia\",\r\n  \"Xymoya\",\"Xystus\",\"Xythrin\",\"Xytrin\",\"Yacima\",\"Yaheira\",\"Yahira\",\"Yaigin\",\"Yakov\",\"Yalan\",\"Yali\",\"Yalin\",\"Yalniz\",\r\n  \"Yamari\",\"Yana\",\"Yandell\",\"Yangin\",\"Yanira\",\"Yannul\",\"Yara\",\"Yaraia\",\"Yarali\",\"Yardim\",\"Yardley\",\"Yari\",\"Yarim\",\r\n  \"Yarin\",\"Yarir\",\"Yaritza\",\"Yartrina\",\"Yasimina\",\"Yasir\",\"Yasmina\",\"Yasser\",\"Yastar\",\"Yatay\",\"Yavana\",\"Yazihane\",\"Yelain\",\r\n  \"Yeni\",\"Yetne\",\"Yevgenii\",\"Yezade\",\"Ygerna\",\"Ygraine\",\"Yishana\",\"Ynryc\",\"Ynvar\",\"Yoda\",\"Yolanda\",\"Yondalla\",\"York\",\r\n  \"Yradry\",\"Yreoddyn\",\"Yrrkoon\",\"Yrsa\",\"Yrun\",\"Yryllyn\",\"Ysabel\",\"Ysgerryn\",\"Ysolde\",\"Yuri\",\"Yvain\",\"Yvette\",\"Yvonne\",\r\n  \"Yvyr\",\"Yénisar\",\"Yérusha\",\"Zabdiel\",\"Zacarias\",\"Zachary\",\"Zachris\",\"Zadock\",\"Zahara\",\"Zahra\",\"Zaidh\",\"Zalazar\",\"Zalbar\",\r\n  \"Zan\",\"Zandra\",\"Zanifa\",\"Zanthar\",\"Zara\",\"Zaranthe\",\"Zared\",\"Zarimarth\",\"Zarquan\",\"Zathras\",\"Zavel\",\"Zaviv\",\"Zay\",\r\n  \"Zazumel\",\"Zebalane\",\"Zebulon\",\"Zehir\",\"Zelda\",\"Zemenar\",\"Zenda\",\"Zendrac\",\"Zenith\",\"Zenobia\",\"Zenon\",\"Zepher\",\"Zephyr\",\r\n  \"Zerika\",\"Zerin\",\"Zeswick\",\"Zhalore\",\"Zhanna\",\"Zharvek\",\"Zhenya\",\"Zhirek\",\"Zhirem\",\"Zhoreb\",\"Zia\",\"Zigmal\",\"Zilar\",\r\n  \"Zinaida\",\"Zincir\",\"Zion\",\"Ziona\",\"Zircon\",\"Zirzihin\",\"Zita\",\"Zoe\",\"Zolabar\",\"Zoltan\",\"Zona\",\"Zora\",\"Zorashad\",\r\n  \"Zorayas\",\"Zorlan\",\"Zosia\",\"Zotar\",\"Zumurrud\",\"Zurrog\",\"Zykhiralamshad\"];\r\n  makeArrays();\r\n}",
                        "onModelContext": "const modifier = (text) => {\n\n  return { text: text }\n}\n\n// Don't modify this part\nmodifier(text)\n"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [
                        {
                                "publicId": "03113fc0-70ac-11eb-ba16-1d8c91f19677",
                                "title": "Character generator",
                                "createdAt": "2021-02-16T23:09:25.308Z"
                        },
                        {
                                "publicId": "d7db7190-70b0-11eb-bd99-3743697fb2e3",
                                "title": "Background generator",
                                "createdAt": "2021-02-16T23:44:00.297Z"
                        },
                        {
                                "publicId": "bb062d00-a128-11eb-8354-6b6ac67b4164",
                                "title": "Prompt generator",
                                "createdAt": "2021-04-19T16:03:07.344Z"
                        }
                ]
        },
        {
                "id": "1326606",
                "publicId": "004c0590-6a67-11eb-8695-2f116d79a2fd",
                "published": false,
                "title": "Tamriel: The Third Era",
                "description": "Tamriel is a continent in the planet Nirn, and is divided into 9 different countries, forming the Empire of Tamriel. There are 10 races living in these countries, and they're not always nice to each other. \n\nPLEASE READ THE INSTRUCTIONS!!!!!",
                "tags": [
                        "skyrim",
                        "elder scrolls",
                        "cyrodiil",
                        "oblivion",
                        "morrowind",
                        "tamriel",
                        "eso",
                        "fantasy",
                        "medieval"
                ],
                "createdAt": "2021-02-08T23:40:18.409Z",
                "updatedAt": "2021-04-19T00:57:28.105Z",
                "memory": "",
                "authorsNote": "",
                "mode": "creative",
                "prompt": "The year is 3E 153, and Katariah Ra'athim is Empress of Tamriel. The Empire is in peace under her rule, after decades of wars and schisms. Potema, Kintyra II, Uriel III, Pelagius the Mad are all gone, and under Pelagius' wife, the Empire has a chance for stability. \n\nIMPORTANT INSTRUCTIONS:\nThings are in very early steps, so it still needs a lot of work. You can play with any of the class options or even use the random character option. For now, there are 99 + 1 (the protagonist) WIs. This is a constant work in progress, so I'll be releasing updates every week.\n\nThis scenario also has some systems of its own, which are still under development. It parses your data and saves it so the AI knows who you are. This scenario features an inventory system that is currently being worked on. You can add and remove items to/from your inventory, check the items you have and equip weapons, clothes and armor. Please note that this inventory system is still in its early steps, so it will not be perfect. You simple need to use these commands and your inventory will be manageable.\n\n\"/invAdd <item> <number>\" -> You have added <number> <item> to your inventory.\n\"/invRemove <item> <number>\" -> You have removed <number> <item> from your inventory.\n\"/invEquip <item>\" -> You are now wearing/wielding <item>. || You do not have <item> in your inventory.\n\"/invCheck\" -> Your inventory contains: item, item, item. Items equipped: item, item.\n\"/invDebug\" -> Debugs your inventory and corrects issues with player WI. Use it only if you run into issues.\n\"/scenarioHelp\" -> Shows the list of available commands (including EWIJSON commands).\n\"/scenarioHelp <command>\" -> Shows instructions on how to use the command provided.",
                "quests": [],
                "worldInfo": [],
                "gameCode": {
                        "onInput": "\r\n// Checkout the repo examples to get an idea of other ways you can use scripting \r\n// https://github.com/latitudegames/Scripting/blob/master/examples\r\n\r\nconst modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n\r\n  // The text passed in is either the user's input or players output to modify.\r\n  if (lowered.includes('you become king') || lowered.includes('you are now king')) {\r\n    // You can modify the state variable to keep track of state throughout the adventure\r\n    state.isKing = true\r\n\r\n    // Setting state.memory.context will cause that to be used instead of the user set memory\r\n    state.memory = { context: 'You are now the king.' }\r\n\r\n    // You can modify world info entries using the below commands\r\n    // addWorldEntry(keys, entry)\r\n    // removeWorldEntry(index)\r\n    // updateWorldEntry(index, keys, entry)\r\n\r\n    // You can read world info keys with worldInfo \r\n    const entries = worldInfo\r\n\r\n    // Setting state.message will set an info message that will be displayed in the game\r\n    // This can be useful for debugging\r\n    state.message = JSON.stringify(entries)\r\n\r\n    // You can log things to the side console when testing with console.log\r\n    console.log('Player is now king')\r\n\r\n    modifiedText = text + '\\nYou are now the king!'\r\n  }\r\n\r\n  // You must return an object with the text property defined.\r\n  return { text: modifiedText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n",
                        "onOutput": "\r\n// Checkout the repo examples to get an idea of other ways you can use scripting \r\n// https://github.com/latitudegames/Scripting/blob/master/examples\r\n\r\nconst modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n\r\n  // The text passed in is either the user's input or players output to modify.\r\n  if (lowered.includes('you become king') || lowered.includes('you are now king')) {\r\n    // You can modify the state variable to keep track of state throughout the adventure\r\n    state.isKing = true\r\n\r\n    // Setting state.memory.context will cause that to be used instead of the user set memory\r\n    state.memory = { context: 'You are now the king.' }\r\n\r\n    // You can modify world info entries using the below commands\r\n    // addWorldEntry(keys, entry)\r\n    // removeWorldEntry(index)\r\n    // updateWorldEntry(index, keys, entry)\r\n\r\n    // You can read world info keys with worldInfo \r\n    const entries = worldInfo\r\n\r\n    // Setting state.message will set an info message that will be displayed in the game\r\n    // This can be useful for debugging\r\n    state.message = JSON.stringify(entries)\r\n\r\n    // You can log things to the side console when testing with console.log\r\n    console.log('Player is now king')\r\n\r\n    modifiedText = text + '\\nYou are now the king!'\r\n  }\r\n\r\n  // You must return an object with the text property defined.\r\n  return { text: modifiedText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n",
                        "sharedLibrary": "// Any functions you define here will be available in your other modifier scripts.\r\n\r\nfunction bringJoy(string) {\r\n  return string.replace(/\\b(sad|angry)\\b/g, 'happy')\r\n}\r\n",
                        "onModelContext": "\r\n// Checkout the repo examples to get an idea of other ways you can use scripting\r\n// https://github.com/latitudegames/Scripting/blob/master/examples\r\n\r\n// info.memoryLength is the length of the memory section of text.\r\n// info.maxChars is the maximum length that text can be. The server will truncate the text you return to this length.\r\n\r\n// This modifier re-implements Author's Note as an example.\r\nconst modifier = (text) => {\r\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : ''\r\n  const context = info.memoryLength ? text.slice(info.memoryLength) : text\r\n  const lines = context.split(\"\\n\")\r\n  if (lines.length > 2) {\r\n    // Uncomment to use this!\r\n    // const authorsNote = \"Everyone in this story is an AI programmer.\"\r\n    // lines.splice(-3, 0, `[Author's note: ${authorsNote}]`)\r\n  }\r\n  // Make sure the new context isn't too long, or it will get truncated by the server.\r\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength))\r\n  const finalText = [contextMemory, combinedLines].join(\"\")\r\n  return { text: finalText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [
                        {
                                "publicId": "e9157a20-6ca3-11eb-8c3a-2d8999c45f76",
                                "title": "(OLD VERSION - WILL BE DELETED) Skyrim: the Old Kingdom of Mereth",
                                "createdAt": "2021-02-11T20:01:21.090Z"
                        },
                        {
                                "publicId": "e8f205d0-a0a7-11eb-8bbe-5f4ba14ef800",
                                "title": "Skyrim: the Old Kingdom of Mereth",
                                "createdAt": "2021-04-19T00:40:59.309Z"
                        }
                ]
        },
        {
                "id": "1622647",
                "publicId": "0ae4ea50-8f1d-11eb-a1a9-8de45256bcdd",
                "published": false,
                "title": "Inventory system test",
                "description": null,
                "tags": [],
                "createdAt": "2021-03-27T16:54:06.453Z",
                "updatedAt": "2021-04-23T00:36:58.433Z",
                "memory": "",
                "authorsNote": "",
                "mode": "creative",
                "prompt": "INVENTORY COMMANDS\n\"/invAdd <item> <number>\" -> You have added <number> <item> to your inventory.\n\"/invRemove <item> <number>\" -> You have removed <number> <item> from your inventory.\n\"/invEquip <item>\" -> You are now wearing/wielding <item>. || You do not have <item> in your inventory.\n\"/invCheck\" -> Your inventory contains: item, item, item. Items equipped: item, item.\n\"/invDebug\" -> Debugs your inventory and corrects issues with player WI. Use it only if you run into issues.\n\"/scenarioHelp\" -> Shows the list of available commands (including EWIJSON commands).\n\"/scenarioHelp <command>\" -> Shows instructions on how to use the command provided.\n-------------------------------\nYou are a commoner in the Kingdom of Larion. You're wearing your commoner clothes and wielding a rusty iron sword. You look around and see a couple of muggers trying to rob a woman and her son.\n",
                "quests": [],
                "worldInfo": [],
                "gameCode": {
                        "onInput": "const { prefix, prefixSymbol } = regex.commands;\r\nconst modifier = (text) => {\r\n  let stop = false;\r\n  let modifiedText = text;\r\n  const lowered = text.toLowerCase();\r\n  delete state.message;\r\n\r\n  if (info.actionCount < 1) {\r\n    playerWorldInfo = {\r\n      keys: `you`,\r\n      hidden: false,\r\n      entry: 'you:['\r\n        + `WORN<you>:nothing;`\r\n        + `INV<you>:nothing.`\r\n        + ']'\r\n    };\r\n\r\n    addWorldEntry(playerWorldInfo.keys, playerWorldInfo.entry, false);\r\n\r\n    setUpInventoryFramework();\r\n    addToInventory('Rusty Sword', 1);\r\n    addToInventory('Commoner clothes', 1);\r\n    equipItem('Commoner clothes');\r\n    equipItem('Rusty Sword');\r\n  }\r\n\r\n  if (commandMatcher = modifiedText.match(prefix)) {\r\n    console.log(`Command detected`);\r\n    console.log(commandMatcher);\r\n\r\n    stop = true;\r\n    modifiedText = '';\r\n\r\n    const commandName = commandMatcher[1].split(' ')[0];\r\n    const args = commandMatcher[1].replace(commandName, '') != null ? commandMatcher[1].replace(commandName, '').trim() : '';\r\n    if (!(commandName in commandList)) {\r\n      state.message = `Invalid command! Type ${prefixSymbol}scenarioHelp for a list of commands and ${prefixSymbol}scenarioHelp <command> for instructions on a specific command.`;\r\n      return { text: modifiedText, stop: stop };\r\n    }\r\n\r\n    const command = commandList[commandName];\r\n    if (command.args && !args.length) {\r\n      let reply = `You didn't provide any arguments!\\n`;\r\n      if (command.usage) {\r\n        reply += `Example: ${prefixSymbol}${command.name} ${command.usage}\\n`;\r\n      }\r\n\r\n      if (command.description) {\r\n        reply += `${command.description}`;\r\n      }\r\n\r\n      state.message = reply;\r\n      return { text: modifiedText, stop: stop };\r\n    }\r\n\r\n    try {\r\n      command.execute(args);\r\n      return { text: modifiedText, stop: stop };\r\n    } catch (error) {\r\n      state.message = `There was an error. Stacktrace:\\n${error}`;\r\n      console.log(`There was an error. Stacktrace:${error}`);\r\n    }\r\n  }\r\n\r\n  return { text: modifiedText, stop: stop };\r\n}\r\n\r\nmodifier(text);",
                        "onOutput": "const modifier = (text) => {\r\n  let modifiedText = text;\r\n  const lowered = text.toLowerCase();\r\n  return { text: modifiedText }\r\n}\r\n\r\nmodifier(text);\r\n",
                        "sharedLibrary": "const regex = {\r\n  commands: {\r\n    prefix: /\\n? ?(?:> You |> You say \"|)\\/(.+?)[\"]?[.]?\\n?$/i,\r\n    prefixSymbol: '/'\r\n  },\r\n  general: {\r\n    letter: /[0-9]/gi,\r\n    digit: /\\D/g,\r\n    punctuation: /[^\\w\\s]/gi\r\n  },\r\n  inventory: {\r\n    shootingWeapons: /(crossbow|bow)/i,\r\n    wornItem: /(?<=WORN<you>:)(.*)(?=;)/gi,\r\n    playerInv: /(?<=INV<you>:)(.*)(?=.)/gi,\r\n    ammunition: /(?:(arrow(s|)|bullet(s|)))/i,\r\n    weapons: /(crossbow|gun|bazooka|dagger|knife|shuriken|chakhram|sword|claymore|zweihander|rapier|epee|kukri|trident|katana|cutlass|scimitar|nodachi|tanto|naginata|spear|pike|axe|halberd|mace|flail|hammer|pickaxe|stiletto|bow)/gi,\r\n    clothing: /(pant(ie|)s|tunic|breeches|loincloth|doublet|cloak|robe|surcoat|tabard|trousers|skirt|dress|gown|socks|gloves|hat|waistcoat|kilt|cummerbund|bowtie|necktie|tuxedo|kimono|karate gi|toe socks|sarong|scarf|legwarmers|trenchcoat|jacket|shorts|leggings|blouse|sweater|cardigantutu|rags|armor|jerkin|shirt|clothes|leathers|hood|cuirass|chainmail|gauntlets|vambraces|bracers|tights)/gi\r\n  }\r\n}\r\n\r\n/**\r\n * Function that executes exactly once when, the adventure starts\r\n */\r\nfunction setUpInventoryFramework() {\r\n  console.log(`START setUpInventoryFramework(): Initializing framework.`);\r\n  state.invSystem = {\r\n    inventory: [],\r\n    config: {\r\n      enableFramework: true\r\n    }\r\n  }\r\n  console.log(`END setUpInventoryFramework(): Framework initialized.`);\r\n}\r\n\r\n/**\r\n * Simple frunction to capitalize the first letter of a string\r\n * \r\n * @param {string} string \r\n */\r\nfunction capitalize(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Finds an item in the player's inventory\r\n * @param {string} itemName \r\n */\r\nfunction findItemInInventory(itemName) {\r\n  console.log(`START findItemInInventory(): Looking for item \"${itemName}\" in player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(regex.general.punctuation, '');\r\n  let itemFound = getInventory().find((item) => {\r\n    return item.name == loweredName;\r\n  });\r\n\r\n  if (typeof itemFound != 'undefined') {\r\n    console.log(`END findItemInInventory(): Item \"${itemName}\" found. Returning it.`);\r\n    return itemFound;\r\n  }\r\n\r\n  console.log(`END findItemInInventory(): Item \"${itemName}\" not found in inventory.`);\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Removes an item from player's inventory\r\n * \r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nfunction removeFromInventory(itemName, itemQuantity) {\r\n  console.log(`START removeFromInventory(): Removing ${itemQuantity} instances of \"${itemName}\" from player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(regex.general.punctuation, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (typeof item == 'undefined') {\r\n    console.log(`END removeFromInventory(): Did not find ${itemName} in player's inventory.`);\r\n    return `\\nYou do not have ${itemName} in your inventory.`;\r\n  } else if (!(item.quantity == itemQuantity) && (item.quantity > 1 && item.quantity >= itemQuantity)) {\r\n    console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n    item.quantity -= itemQuantity;\r\n    return `\\nYou have removed ${itemQuantity} ${loweredName} from your inventory.`;\r\n  }\r\n\r\n  let index = getInventory().indexOf(item);\r\n  getInventory().splice(index, 1);\r\n  updateInventory();\r\n  console.log(`END removeFromInventory(): Removed all instances of ${itemName} from player's inventory.`);\r\n  return `\\nYou have removed all ${loweredName} from your inventory.`;\r\n}\r\n\r\n/**\r\n * Checks player's inventory and returns what's inside\r\n */\r\nfunction checkInventory() {\r\n  console.log(`START checkInventory(): Checking player's inventory.`);\r\n  if (getInventory().length > 0) {\r\n    let items = getInventory().map((item) => item.name).join(', ');\r\n    let itemsWorn = getInventory().filter((item) => item.status == 'worn').map((item) => item.name).join(', ');\r\n    console.log(`END checkInventory(): Player's inventory contains: ${items}.`);\r\n    return `\\nYour inventory contains: ${items}. Items equipped: ${itemsWorn}.`;\r\n  }\r\n\r\n  console.log(`END checkInventory(): Player's inventory is empty.`);\r\n  return `\\nYour inventory is empty.`;\r\n}\r\n\r\n/**\r\n * Returns player's inventory. If the array in undefined, define it\r\n */\r\nfunction getInventory() {\r\n  console.log(`START getInventory(): verifying player's inventory.`);\r\n  if (typeof state.invSystem.inventory == 'undefined') {\r\n    console.log(`INSIDE getInventory(): Inventory array is undefined. Declaring it with an empty array.`);\r\n    state.invSystem.inventory = [];\r\n  }\r\n\r\n  console.log(`END getInventory(): player's inventory exists. Returning its contents.`);\r\n  return state.invSystem.inventory;\r\n}\r\n\r\n/**\r\n * Adds item to player's inventory\r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nfunction addToInventory(itemName, itemQuantity) {\r\n\r\n  console.log(`START addToInventory(): adding ${itemQuantity} instances of \"${itemName}\" to player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(regex.general.punctuation, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (typeof item == 'undefined') {\r\n    console.log(`INSIDE addToInventory(): Player has no other instances of this item in their inventory. Adding these.`);\r\n    item = {\r\n      name: loweredName,\r\n      quantity: itemQuantity,\r\n      status: 'in inventory',\r\n      type: getType(itemName)\r\n    };\r\n\r\n    state.invSystem.inventory.push(item);\r\n  } else {\r\n    console.log(`INSIDE addToInventory(): Player already has other instances of this item in their inventory. Incrementing the quantity by ${itemQuantity}.`);\r\n    item.quantity = item.quantity + itemQuantity;\r\n  }\r\n\r\n  updateInventory();\r\n  console.log(`END addToInventory(): ${itemQuantity} instances of \"${itemName}\" added to player's inventory.`);\r\n  return `\\nYou have added ${itemQuantity} ${loweredName} to your inventory.`;\r\n}\r\n\r\n/**\r\n * Simple function to make the player equip something.\r\n * \r\n * @param {string} itemName \r\n */\r\nfunction equipItem(itemName) {\r\n  console.log(`START equipItem(): equipping ${itemName}`);\r\n  const itemNameLowerCase = itemName.toLowerCase();\r\n  let itemToBeEquipped = findItemInInventory(itemNameLowerCase);\r\n  if (typeof itemToBeEquipped != 'undefined') {\r\n    const itemToBeEquippedIndex = state.invSystem.inventory.findIndex(x => x.name == itemToBeEquipped.name);\r\n    console.log(`INSIDE equipItem(): ${itemName} exists in player's inventory`);\r\n    if (itemToBeEquipped.type != 'weapon' && itemToBeEquipped.type != 'clothing' && itemToBeEquipped.type != 'ammo') {\r\n      console.log(`END equipItem(): item is not equippable.`);\r\n      return `\\n${capitalize(itemNameLowerCase)} is not an equippable item.`;\r\n    }\r\n\r\n    let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n    let itemsWorn = playerWorldInfo.entry.match(regex.inventory.wornItem)[0];\r\n    let oldItem = getInventory().find(oldItem => oldItem.status == 'worn' && oldItem.type == itemToBeEquipped.type);\r\n    if (typeof oldItem != 'undefined') {\r\n      const oldItemIndex = state.invSystem.inventory.findIndex(x => x.name == oldItem.name);\r\n      console.log(`INSIDE equipItem(): Player has another item of the same type equipped. Unequipping old item.`);\r\n      itemsWorn.replace(oldItem.name.toLowerCase(), '');\r\n      console.log(`INSIDE equipItem(): Removing worn status from ${oldItem.name}.`);\r\n      oldItem.status = 'in inventory';\r\n      state.invSystem.inventory[oldItemIndex] = oldItem;\r\n    }\r\n\r\n    itemToBeEquipped.status = 'worn';\r\n    state.invSystem.inventory[itemToBeEquippedIndex] = itemToBeEquipped;\r\n    itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n      .map((k) => {\r\n        console.log(`INSIDE equipItem(): worn item found in inventory -> ${k.name}`);\r\n        return k.name;\r\n      }).join('&');\r\n\r\n    console.log(`INSIDE equipItem(): finished building new WORN string -> ${itemsWorn}`);\r\n    playerWorldInfo.entry = playerWorldInfo.entry.replace(regex.inventory.wornItem, itemsWorn);\r\n\r\n    console.log(`END equipItem(): ${itemToBeEquipped.name} has been equipped.`);\r\n    return `\\nYou are now equipping ${itemToBeEquipped.name}.`;\r\n  }\r\n\r\n  console.log(`END equipItem(): Player does not have \"${itemNameLowerCase}\" in their inventory.`);\r\n  return `\\nYou do not have \"${itemNameLowerCase}\" in your inventory.`;\r\n}\r\n\r\n/**\r\n * Debugs your inventory and corrects the player's WI in case it fails\r\n */\r\nfunction debugInventory() {\r\n  console.log(`START debugInventory(): debugging player's inventory`);\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n\r\n  let itemsWorn = playerWorldInfo.entry.match(regex.inventory.wornItem)[0];\r\n  let itemsInInventory = playerWorldInfo.entry.match(regex.inventory.playerInv)[0];\r\n\r\n  itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n    .map((k) => {\r\n      console.log(`INSIDE debugInventory(): Updating player WI with worn items`);\r\n      return k.name;\r\n    }).join('&');\r\n\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE debugInventory(): Updating player WI with inventory items`);\r\n    return `${k.name}`;\r\n  }).join('&');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(regex.inventory.wornItem, itemsWorn);\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(regex.inventory.playerInv, itemsInInventory);\r\n\r\n  console.log(\"INSIDE debugInventory(): Fixed player WI with inventory's items.\");\r\n  console.log(`END debugInventory(): Player's WI fixed.`);\r\n}\r\n\r\n/**\r\n * Updates the player's inventory and corrects the WI\r\n */\r\nfunction updateInventory() {\r\n  console.log(`START updateInventory(): updating player's inventory and WI with current items`);\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n  let itemsInInventory = playerWorldInfo.entry.match(regex.inventory.playerInv)[0];\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE updateInventory(): Sorting inventory items and quantities into player WI. Current item: ${k.name}`);\r\n    return `${k.name}`;\r\n  }).join('&');\r\n\r\n  console.log(`INSIDE updateInventory(): Inserting items into WI: ${itemsInInventory}`);\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(regex.inventory.playerInv, itemsInInventory);\r\n  console.log(`END updateInventory(): updated player's inventory and WI with current items. Updated entry: ${playerWorldInfo.entry}`);\r\n}\r\n\r\n/**\r\n * Function to determine item type\r\n * \r\n * @param {string} itemType\r\n */\r\nfunction getType(itemName) {\r\n  if (itemName.match(regex.inventory.weapons)) {\r\n    return 'weapon';\r\n  } else if (itemName.match(regex.inventory.clothing)) {\r\n    return 'clothing';\r\n  } else if (itemName.match(regex.inventory.ammunition)) {\r\n    return 'ammo';\r\n  }\r\n  return 'misc';\r\n}\r\n\r\ncommandList = {\r\n  scenarioHelp: {\r\n    name: \"scenarioHelp\",\r\n    description: \"Prints a list of commands\",\r\n    args: false,\r\n    usage: `Really? You need help with the help command and expected this to work? I don't blame you. Hit me at AIDcord for help.`,\r\n    execute: (args) => {\r\n      console.log(`Begin help command.`);\r\n      let availableCommands = '';\r\n      Object.keys(state.invSystem.commandList).forEach(key => {\r\n        availableCommands += ` ${state.invSystem.commandList[key].name}`\r\n      });\r\n\r\n      availableCommands = availableCommands.trim().replace(/\\s/g, ', ');\r\n      console.log(`Begin help command.`);\r\n      if (args == '') {\r\n        state.message = `List of available commands: ${availableCommands}`;\r\n      } else if ((!(args in commandList))) {\r\n        state.message = `This command was not found. List of available commands: ${availableCommands}`;\r\n      } else {\r\n        let cmd = commandList[args];\r\n        state.message = `Example: /${cmd.name} ${cmd.usage}\\n${cmd.description}`;\r\n      }\r\n\r\n      console.log(`End help command.`);\r\n    }\r\n  },\r\n  invAdd: {\r\n    name: \"invAdd\",\r\n    description: \"Adds objects to the player's inventory\",\r\n    args: true,\r\n    usage: '<object name> <quantity>',\r\n    execute: (args) => {\r\n      console.log(`invadd: ${state.invSystem.config.enableFramework}`)\r\n      console.log(`Begin inventory add.`);\r\n      if (state.invSystem.config.enableFramework) {\r\n        const itemName = args.replace(regex.general.letter, '').trim();\r\n        const itemQuantity = Number.isNaN(parseInt(args.replace(regex.general.digit, '').trim())) ? 1 : parseInt(args.replace(regex.general.digit, '').trim());\r\n\r\n        if (itemQuantity >= 1) {\r\n          state.message = `${addToInventory(itemName, itemQuantity)}`;\r\n        } else {\r\n          state.message = `You cannot add less than 1 unit of an item to your inventory.`;\r\n        }\r\n      } else {\r\n        console.log(`Mechanics are disabled.`);\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n\r\n      console.log(`End inventory add.`);\r\n    }\r\n  },\r\n  invRemove: {\r\n    name: \"invRemove\",\r\n    description: \"Removes objects from the player's inventory\",\r\n    args: true,\r\n    usage: '<object name> <quantity>',\r\n    execute: (args) => {\r\n      console.log(`Begin inventory remove.`);\r\n      if (state.invSystem.config.enableFramework) {\r\n        const itemName = args.replace(regex.general.letter, '').trim();\r\n        const itemQuantity = Number.isNaN(parseInt(args.replace(regex.general.digit, '').trim())) ? 1 : parseInt(args.replace(regex.general.digit, '').trim());\r\n\r\n        if (itemQuantity >= 1) {\r\n          state.message = `${removeFromInventory(itemName, itemQuantity)}`;\r\n        } else {\r\n          state.message = `You cannot remove less than 1 unit of an item from your inventory.`;\r\n        }\r\n      } else {\r\n        console.log(`Mechanics are disabled.`);\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n\r\n      console.log(`End inventory remove.`);\r\n    }\r\n  },\r\n  invEquip: {\r\n    name: \"invEquip\",\r\n    description: \"Equips objects from the player's inventory\",\r\n    args: true,\r\n    usage: '<object name>',\r\n    execute: (args) => {\r\n      console.log(`Begin inventory equip.`);\r\n      if (state.invSystem.config.enableFramework) {\r\n        const itemName = args.replace(regex.general.letter, '').trim();\r\n        state.message = `${equipItem(itemName)}`;\r\n      } else {\r\n        console.log(`Mechanics are disabled.`);\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n      console.log(`End inventory equip.`);\r\n    }\r\n  },\r\n  invCheck: {\r\n    name: \"invCheck\",\r\n    description: \"Checks the player's inventory\",\r\n    args: false,\r\n    usage: '',\r\n    execute: (args) => {\r\n      console.log(`Begin inventory check.`);\r\n      if (state.invSystem.config.enableFramework) {\r\n        state.message = `${checkInventory()}`;\r\n      } else {\r\n        console.log(`Mechanics are disabled.`);\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n\r\n      console.log(`End inventory check.`);\r\n    }\r\n  },\r\n  invDebug: {\r\n    name: \"invDebug\",\r\n    description: \"Debugs player's inventory\",\r\n    args: false,\r\n    usage: '',\r\n    execute: (args) => {\r\n      console.log(`Begin inventory debug.`);\r\n      if (state.invSystem.config.enableFramework) {\r\n        debugInventory();\r\n        state.message = `Your inventory and player WI have been debugged.`;\r\n      } else {\r\n        console.log(`Mechanics are disabled.`);\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n\r\n      console.log(`End inventory debug.`);\r\n    }\r\n  },\r\n  invMechanics: {\r\n    name: \"invMechanics\",\r\n    description: \"Toggles inventory system mechanics\",\r\n    args: false,\r\n    usage: '<enable or disable>',\r\n    execute: (args) => {\r\n      console.log(`Begin inventory toggle.`);\r\n      if (args != '') {\r\n        if (args == 'disable') {\r\n          state.invSystem.config.enableFramework = false;\r\n          state.message = 'You have disabled the inventory system mechanics.';\r\n          console.log(`Disabled inventory mechanics toggle.`);\r\n        } else if (args == 'enable') {\r\n          state.invSystem.config.enableFramework = true;\r\n          state.message = 'You have enabled the inventory system mechanics.';\r\n          console.log(`Enabled inventory mechanics toggle.`);\r\n        } else {\r\n          console.log('Wrong rpg mechanic toggle arg supplied.');\r\n          state.message = 'Invalid agument. Usage: /invMechanics <enable or disable>.';\r\n        }\r\n      } else {\r\n        console.log(`Checking inventory mechanics state.`);\r\n        state.message = `Inventory system mechanics are ${state.invSystem.config.enableFramework ? 'enabled' : 'disabled'}`;\r\n      }\r\n\r\n      console.log(`End inventory toggle.`);\r\n    }\r\n  }\r\n}",
                        "onModelContext": "const modifier = (text) => {\r\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : '';\r\n  const context = info.memoryLength ? text.slice(info.memoryLength) : text;\r\n  const lines = context.split(\"\\n\");\r\n  const lowered = text.toLowerCase();\r\n  let stop = false;\r\n\r\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength));\r\n  const finalText = [contextMemory, combinedLines].join(\"\");\r\n  return { text: finalText, stop: stop };\r\n}\r\n\r\nmodifier(text);"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1648049",
                "publicId": "5e5505c0-934c-11eb-bc8d-6d621bc4a061",
                "published": true,
                "title": "RPGmech integration test",
                "description": null,
                "tags": [],
                "createdAt": "2021-04-02T00:42:57.436Z",
                "updatedAt": "2021-04-07T04:55:45.453Z",
                "memory": "",
                "authorsNote": "",
                "mode": "creative",
                "prompt": "Your name is [${character.name}], and you are a [${Enter your character's gender...}] [${Choose a race: Altmer (High Elf), Bosmer (Wood Elf), Dunmer (Dark Elf), Orsimer (Orc), Nord, Imperial, Breton, Khajiit, Argonian or Redguard}] [${Choose a class: Mage, Warrior, Ranger, Thief or Nightblade}] that has just arrived in the city of Whiterun. You are [${Enter your age...}] years old, and your personality traits are: [${Enter your personality traits separated by commas...}]. You eyes are [${Enter your eye color...}], and your hair is of the style [${Enter your hair style...}] and of color [${Enter your hair color...}]. You are [${Enter your height in centimeters...}] centimeters tall, and you weigh [${Enter your weight in kilos...}] kg. Your physical features are: [${Enter your physical features...}].\n\n---------------------------------------\n\nWhiterun is one of the nine-major cities in the province of Skyrim, serving as the capital of Whiterun Hold and its vast open tundra. It is found in the heart of Skyrim, and because of this, it is the center of trade across the province. It has been described as the \"Imperial City of Skyrim\" and its large palace, called Dragonsreach, has been compared to Cyrodilic castles. But it has a rich and important history that dates back to the Five Hundred Companions and the mythical forge known as the Skyforge.\n\nYou are at the Bloated Goat, the local tavern and inn. It is owned by a Nord called Isekaid and his wife, Sigrid. \nIsekaid looks at you and says \"",
                "quests": [],
                "worldInfo": [
                        {
                                "id": "0.9765384539248597",
                                "keys": "Katariah,Empress of Cyrodill,Empress of Tamriel,the Empress,the Emperor,Emperor of Tamriel,the Emperor",
                                "entry": "[  Katariah description:< name ≡ Katariah / Empress Katariah/ Katariah Ra'athim>/< age ≡ 38y>/< ♀>/<race ≡ Dunmer>. Katariah appearance:< body ≡ 170cm_height/ 40kg_weight/ slim/ slender/ hair< long& black>/ red eyes/ dark grey skin>. Katariah mental:< just/ smart/ clever/ fair/ happy/ calm>.  Katariah moniker:< Empress& Emperor of Cyrodiil& Tamriel>.  Katariah traits:< just/ smart/ clever/ fair/ happy>.  Katariah speech:< harsh& sweet& calm voice>.]",
                                "hidden": false,
                                "worldInfoId": "12653612"
                        },
                        {
                                "id": "0.745118808720757",
                                "keys": "Ungvid,Jarl of Winterhold,Ruler of Winterhold",
                                "entry": "[ Ungvid description:< name ≡ Ungvid / Jarl Ungvid>/< age  ≡ 62y>/< ♂>/<race ≡ Nord>. Ungvid appearance:< body ≡ 179cm_height/ 65kg_weight/ slim/ slender/ full beard/ long hair/ dark blonde hair>. Ungvid mental:< stubborn/ serious/ arrogant/ prepotent/ pretentious>. Ungvid moniker:< Ruler of Winterhold>. Ungvid traits:< arrogant/ pretentious/ stubborn>. Ungvid speech:< harsh& deep voice>.]",
                                "hidden": false,
                                "worldInfoId": "12653610"
                        },
                        {
                                "id": "0.47441051249600963",
                                "keys": "Yolanda,Jarl of Whiterun,Ruler of Whiterun",
                                "entry": "[ Yolanda description:< name ≡ Yolanda/ Jarl Yolanda>/< age ≡ 30y>/< ♀>/<race ≡ Nord>. Yolanda appearance:< body ≡ slim/ 178cm_height/ 50kg_weight/ blonde hair/ blue eyes/ small breasts>. Yolanda mental:< party animal& happy& likes the nightlife& likes having fun& fools around>. Yolanda moniker:< Ruler of Whiterun>. Yolanda traits:< naughty/ dirty/ manipulative>. Yolanda speech:<sweet voice>.]",
                                "hidden": false,
                                "worldInfoId": "12653611"
                        },
                        {
                                "id": "0.21837675048437033",
                                "keys": "Argo,Jarl of Riften,Jarl of the Rift,Ruler of Riften,Ruler of the Rift",
                                "entry": "[Argo description:< name ≡ Argo / Jarl Argo>/< age  ≡ 57y>/< ♂>/<race ≡ Nord>. Argo appearance:< body ≡ 180cm_height/ 90kg_weight/ slim/ shaved beard/ bald head>. Argo mental:< arrogant& pedantic& self-righteous& tightly wound>. Argo moniker:< Ruler of the Rift/ Ruler of Riften>. Argo traits:< arrogant& pedantic& self-righteous>. Argo speech:< harsh& deep voice>.]",
                                "hidden": false,
                                "worldInfoId": "12653615"
                        },
                        {
                                "id": "0.2826822841965928",
                                "keys": "Vrage,Vrage the Gifted,King of Skyrim,High King of Skyrim,Jarl of Haafingar,Jarl of Solitude,Ruler of Haafingar,Ruler of Solitude,Ruler of Skyrim",
                                "entry": "[ Vrage description:< name ≡ Vrage / High King Vrage/ King Vrage/ Jarl Vrage/ Vrage the Gifted>/< age ≡ 42y>/< ♂>/<race ≡ Nord>. Vrage appearance:< body ≡ 198cm_height/ 80kg_weight/ tall/ muscular/ fair skin/ brown hair/ full beard>. Vrage mental:< assertive/ strong/ good leader/ loyal>. Vrage moniker:< High King of Skyrim/ King of Skyrim>. Vrage traits:< good leader/ loyal>. Vrage speech:< deep voice& heavy nord accent>.]",
                                "hidden": false,
                                "worldInfoId": "12653623"
                        },
                        {
                                "id": "0.456758676983456345758",
                                "keys": "Uror,Ruler of Falkreath,Jarl of Falkreath",
                                "entry": "[    Uror description:< name ≡ Uror / Jarl Uror/< age ≡ 55y>/< ♂>/<race ≡ Nord>.   Uror appearance:< body ≡ 180cm_height/ 75kg_weight/ tall/ muscular body/ red beard and hair>.   Uror mental:< courageous/ brave/ good humored/ optimistic/ intelligent/ talkative/ stubborn>.    Uror moniker:< Ruler of Falkreath>.    Uror traits:< courageous/ brave/ good humored>.    Uror speech:< deep voice& thick nord accent>.]",
                                "hidden": false,
                                "worldInfoId": "12653624"
                        },
                        {
                                "id": "0.6754768658567867",
                                "keys": "Atmor,Ruler of Eastmarch,Jarl of Eastmarch,Ruler of Windhelm,Jarl of Windhelm",
                                "entry": "[  Atmor description:< name ≡ Atmor / Jarl Atmor/< age ≡ 48y>/< ♂>/<race ≡ Nord>.  Atmor appearance:< body ≡ 180cm_height/ 75kg_weight/ tall/ muscular/ fit/ short dark blond hair>.  Atmor mental:< grumpy,sarcastic,hopeful,curious>.  Atmor moniker:< Ruler of Eastmarch& Windhelm>.  Atmor traits:< grumpy/ sarcastic/ hopeful/ curious>.  Atmor speech:< thick nord accent>.]",
                                "hidden": false,
                                "worldInfoId": "12653625"
                        },
                        {
                                "id": "0.498746768876574541654654",
                                "keys": "Bolgeir,Ruler of Markarth,Jarl of Markarth,Ruler of the Reach,Jarl of the Reach",
                                "entry": "[ Bolgeir description:< name ≡ Bolgeir / Jarl Bolgeir/< age ≡ 73y>/< ♂>/<race ≡ Nord>.  Bolgeir appearance:< body ≡ 174cm_height/ 70kg_weight/ tall/ muscular/ reddish hair/ beard>.  Bolgeir mental:< very brave and bold, rather arrogant, a natural leader>.  Bolgeir moniker:< Ruler of the Reach& Markarth>.  Bolgeir traits:< natural leader& very brave and bold>.  Bolgeir speech:< thick nord accent>.]",
                                "hidden": false,
                                "worldInfoId": "12653626"
                        },
                        {
                                "id": "0.57632498934634",
                                "keys": "Dagny,Ruler of the Pale,Jarl of the Pale,Ruler of Dawnstar,Jarl of Dawnstar",
                                "entry": "[  Dagny description:< name ≡ Dagny / Jarl Dagny/< age ≡ 58y>/< ♀>/<race ≡ Nord>.  Dagny appearance:< body ≡ 159cm_height/ 40kg_weight/ tall/ muscular/ fit/ short dark blond hair>.  Dagny mental:< courageous/ fearless/ brave/ friendly/ optimistic/ determined>.  Dagny moniker:< Ruler of Dawnstar& the Pale>.  Dagny traits:< friendly& optimistic>.  Dagny speech:< thick nord accent>.]",
                                "hidden": false,
                                "worldInfoId": "12653627"
                        },
                        {
                                "id": "0.76858732657834643564357",
                                "keys": "Thora,Ruler of Hjaalmarch,Jarl of Hjaalmarch,Ruler of Morthal,Jarl of Morthal",
                                "entry": "[  Thora description:< name ≡ Thora / Jarl Thora/< age ≡ 58y>/< ♂>/<race ≡ Nord>.  Thora appearance:< body ≡ 185cm_height/ 62kg_weight/ tall/ muscular/ athletic body/ blonde hair/ blue>.  Thora mental:< brave/ courageous/ strong-willed/ fearless/ adventurous/ determined>.  Thora moniker:< Ruler of Morthal& Hjaalmarch>.  Thora traits:< courageous/ strong-willed>.  Thora speech:< sweet voice>.]",
                                "hidden": false,
                                "worldInfoId": "12653628"
                        },
                        {
                                "id": "0.3364947531043463",
                                "keys": "skyrim, province of skyrim, land of the nords, home of the nords",
                                "entry": " Skyrim:[ CLIMATE< Skyrim>: snowy and freezing to the north/ temperate and warm to the south/ tundras to the west/ deep woods to the south/ grasslands in the center/ temperate to the east; GEOGRAPHY< Skyrim>: mountainous/ full of valleys/ rivers/ forests/ woods/ wildlife; DESC< Skyrim>: The current ruler& high king of skyrim is Vrage. Homeland of the nords/ province of the empire/ high king is the title of the ruler/ solitude is the capital city/ is divided into nine holds/ each hold is governed by a jarl/ jarl is the ruler of a hold.]",
                                "hidden": false,
                                "worldInfoId": "12653629"
                        },
                        {
                                "id": "0.4958877490012459",
                                "keys": "Whiterun Hold",
                                "entry": " Whiterun Hold:[ CLIMATE< Whiterun Hold>: temperate/ warm; GEOGRAPHY< Whiterun Hold>: grassy tundras/ white river/ open fields; DESC< Whiterun Hold>: The current ruler& jarl of whiterun is Yolanda. Whiterun Hold is the centermost hold of Skyrim/ being located right in the middle of the province. It borders the Rift/ the Pale/ Falkreath and Hjaalmarch. It is home to the ancient town of Rorikstead/ as well as the small town of Riverwood. The city of Whiterun is the capital of the hold/and is known as the economic capital of Skyrim due to its proximity to the Cyrodiil border.]",
                                "hidden": false,
                                "worldInfoId": "12653630"
                        },
                        {
                                "id": "0.8858901310060372",
                                "keys": "Whiterun,Whiterun City,City of Whiterun",
                                "entry": " Whiterun:[ CLIMATE< Whiterun>: temperate/ warm; GEOGRAPHY< Whiterun>: on top of a hill/ big city; DESC< Whiterun>: The current ruler& jarl of whiterun is Yolanda. Whiterun is one of the richest cities in Skyrim/ and one of the oldest. It is located in the Whiterun Hold/ and is known for Jorrvaskr and the Skyforge/ both locations being known from ancient times/ in the Merethic Era when Ysgramor himself arrived in Tamriel. It is also known for Dragonsreach/ the city castle and Jarl's palace. Dragonsreach was built to trap dragons/ and there is the skull of a dragon on top the Jarl's throne. The city is divided into three districts: the Plains District/ where commerce is located/as well as the inn and the market square. The Winds District/ where houses and the temple are located/ as well as the entrance to Jorrvaskr and the Skyforge. The Cloud District/ where Dragonsreach is located.]",
                                "hidden": false,
                                "worldInfoId": "12653631"
                        },
                        {
                                "id": "0.5565239795951209",
                                "keys": "the rift,rift hold",
                                "entry": " The Rift:[ CLIMATE< The Rift>: temperate/ warm/ sunny; GEOGRAPHY< The Rift>: temperate woods/ grasslands/ mountainous; DESC< The Rift>: The current ruler& jarl of the Rift is Argo. The rift is a beautiful place/ a warm place/ mountainous/ home to lake honrich/ the capital of the rift is riften/ yellow and beautiful trees/ beautiful lake/ beautiful sights/ jerall mountains to the south/ velothi mountains to the east/ borders morrowind to the east/ borders cyrodiil to the south.]",
                                "hidden": false,
                                "worldInfoId": "12653632"
                        },
                        {
                                "id": "0.29560338203552283",
                                "keys": "riften,city of riften",
                                "entry": " Riften:[ CLIMATE< Riften>: temperate/ warm/ sunny; GEOGRAPHY< Riften>: temperate woods/ grasslands/ mountainous/ fishing port at lake honrich; DESC< Riften>: The current ruler& jarl of Riften is Argo. Riften is a beautiful fishing city/ a big city/ capital of the rift/ capital of the rift hold/ the mad mammoth is the local inn/ the mad mammoth is the local tavern/ the city is dedicated to the goddess mara/ the temple of mara is located in riften.]",
                                "hidden": false,
                                "worldInfoId": "12653634"
                        },
                        {
                                "id": "0.7557881723928688",
                                "keys": "winterhold, city of winterhold, winter hold",
                                "entry": " Winterhold:[ CLIMATE< Winterhold>: polar/ cold/ freezing/ snowy; GEOGRAPHY< Winterhold>: rocky/ mountainous/ frozen mountains/ coastal; DESC< Winterhold>: The current ruler& jarl of Winterhold is Ungvid. Winterhold is a cold place/ full of mountains/ home to the college of winterhold/ fronzen hearth is the local inn/ frozen hearth is the local tavern/ sea of ghosts to the north/ jarl is the title of the ruler.]",
                                "hidden": false,
                                "worldInfoId": "12653633"
                        },
                        {
                                "id": "0.465198479866984165",
                                "keys": "Falkreath,Falkreath Hold",
                                "entry": " Falkreath:[  CLIMATE< Falkreath>: temperate/ sunny/ rainy/ rainforest climate;  GEOGRAPHY< Falkreath>: Falkreath lies in the southern forests of Skyrim, on a strategic crossroad in the middle of its respective hold and the provincial border towards Hammerfell's wilder country, the Dragon's Teeth Mountains, and with Cyrodiil through the Pale Pass in the Jerall Mountains. Home of Skyrim's famous Pine Forest, Falkreath Hold is covered in a fine mist that makes the land seem without season. It borders the Skyrim holds of Whiterun, the Reach and the Rift.; DESC< Falkreath>: Uror is the current Jarl of Falkreath. It is a city that is heavily reliant to the lumber industry, due to the abundance of resources around them.; ]",
                                "hidden": false,
                                "worldInfoId": "12653635"
                        },
                        {
                                "id": "0.65374578856786794567456437",
                                "keys": "the reach",
                                "entry": " The Reach:[  CLIMATE< The Reach>: temperate/ sunny/ warm/ hot;  GEOGRAPHY< The Reach>: Near the southwestern corner, the capital Markarth, formerly a Dwemer stronghold, emerges from the living rock of the Druadach Mountains, which transition into the Jerall Mountains near the hold's southeast corner. The Karth River begins in the southern region and drains the mountains, running like a deep gouge through the middle of the hold called the Karth River Canyon. The peaks of the Druadach range lie to the west of it, and high bluffs typically rise on the east leading to grassland and tundra;  DESC< The Reach>: Bolgeir is the current Jarl of the Reach. The Reach is the westernmost hold of Skyrim, bordering the provinces of Cyrodiil, Hammerfell and High Rock. It is a vast tundra made of grasslands, and is famous because the Karth River begins here before passing through Haafingar and connecting to the See of Ghosts in the north. The native people of the Reach are known as Reachmen.;]",
                                "hidden": false,
                                "worldInfoId": "12653636"
                        },
                        {
                                "id": "0.48569468597795675",
                                "keys": "markarth,city of stone,markarth side",
                                "entry": " Markarth:[  CLIMATE< Markarth>: temperate/ sunny/ warm/ hot;  GEOGRAPHY< Markarth>: Nestled in the river valley of the Druadach Mountains. It is unique in that the city's layout is intricately built into the mountain of Karthmad, dividing the city into two districts. The northern end, Dryside has streets that ascend above each other with well-refined homes, below the main square and marketplace where the populace tend to congregate. The city's southern end is the Riverside, the basin populated by the lower-class and the bustling silver mines. These districts meet each other at either end of the city, at the main gates on the east side, while on the west side, they ascend high towards the top of the crag and at Understone Keep, which contains the Mournful Throne, the seat of power in the Reach.; DESC< Markarth>: Bolgeir is the current Jarl of Markarh. Markarth is one of the nine major cities in the province of Skyrim, found in the river valley of the Reach. Known colloquially as the Ci",
                                "hidden": false,
                                "worldInfoId": "12653637"
                        },
                        {
                                "id": "0.984516878451",
                                "keys": "the pale",
                                "entry": "The Pale:[  CLIMATE< The Pale>: cold& snowy/ freezing;  GEOGRAPHY< The Pale>: It stretches from the center of Skyrim all the way to its Northern Coast. Dominated by ice fields and glacial deposits, especially along its northern shore, some scattered ragged peaks, snow-covered ground, and little sunshine means most of the Nords congregate at the city of Dawnstar, a popular port and mining town.The Pale lacks waterways, save for Lake Yorgrim, located in the southeastern corner of the Hold.;  DESC< The Pale>: Dagny is the current Jarl of the Pale. The Pale, named for the pallid Tundra and pigmentation of its Nord inhabitants, is one of the four oldest Holds in Skyrim. The harsh environment here makes life a chore rather than a joy, and the shape of the Hold has led some to refer to it as “the old boot.”;]",
                                "hidden": false,
                                "worldInfoId": "12653638"
                        },
                        {
                                "id": "0.1654984165468746878945123546854745311234",
                                "keys": "dawnstar",
                                "entry": " Dawnstar:[  CLIMATE< Dawnstar>: cold& snowy/ freezing;  GEOGRAPHY< Dawnstar>: The city has two mines, Iron-Breaker Mine and Quicksilver Mine, which supply iron and quicksilver respectively. It is home to many fishermen and is an important port.;  DESC< Dawnstar>: Dagny is the current Jarl of Dawnstar. Dawnstar is a settlement on the northern coast of Skyrim, and the hold capital of the Pale. t was once a garrison town, which served as an exile post due to the cold harsh climate and notorious gales. The settlement seemingly got its name due to its reputation for greeting the sun as it begins its journey.;]",
                                "hidden": false,
                                "worldInfoId": "12653639"
                        },
                        {
                                "id": "0.465167984",
                                "keys": "Hjaalmarch",
                                "entry": " Hjaalmarch:[  CLIMATE< Hjaalmarch>: temperate/ warm/ hot;  GEOGRAPHY< Hjaalmarch>: Roughly half the hold consists of the Drajkmyr marsh, although some farms dot the tundra. The region is veined with waterways that empty into the Sea of Ghosts, and the Skyborn Range further isolates the area from the east and southern border. Hjaalmarch is home to the Karth delta where the mighty Karth River and the smaller River Hjaal empty into the Sea of Ghosts through a variety of intricate channels.  The Deathbell flower is known to be abundant throughout the swamps.;  DESC< Hjaalmarch>: Thora is the current Jarl of Hjaalmarch. Hjaalmarch, or Hjaalmarch Hold, is a lowland coastal hold in Skyrim. Morthal is the capital and the only settlement in the hold. Combined with the fog that surrounds the marshes and the creatures that stalk the land (Wispmothers purportedly originated here), Hjaalmarch is considered one of the more mysterious holds in Skyrim. Many ruins dot the hold, including the legendary",
                                "hidden": false,
                                "worldInfoId": "12653640"
                        },
                        {
                                "id": "0.65849879/84541",
                                "keys": "morthal",
                                "entry": " Morthal:[  CLIMATE< Morthal>: temperate/ warm/ hot;  GEOGRAPHY< Morthal>: swamps, rivers, marsh;  DESC< Morthal>: Thora is the current Jarl of Morthal. Morthal, supposedly named after the great Nord hero Morihaus, is the capital of Hjaalmarch, although it is a fairly small, humble town of little economic or strategic importance besides its small lumber mill. The town's symbol is a green triskelion.;]",
                                "hidden": false,
                                "worldInfoId": "12653641"
                        },
                        {
                                "id": "0.97894615",
                                "keys": "eastmarch",
                                "entry": " Eastmarch:[  CLIMATE< Eastmarch>: freezing cold in the north/ temperate and warm in the south near the water springs;  GEOGRAPHY< Eastmarch>: Darkwater River winds north from Lake Geir into this treacherous hot spot, where it meets the White River which then drains into the Sea of Ghosts as it passes Windhelm. The Skyrim part of the Velothi mountains are in Eastmarch.  Windhelm is the only sizable city in the otherwise rural province due to the expansive hot springs which dominate the hold.;  DESC< Eastmarch>: Atmor is the current Jarl of Eastmarch. Eastmarch is the eastern hold of Skyrim, and one of the four known collectively as the Old Holds. As its name suggests, it lies against the province's eastern border, close to the Dunmeth Pass, the only passage to and from Morrowind in the area due to the high and rugged Velothi Mountains.;]",
                                "hidden": false,
                                "worldInfoId": "12653642"
                        },
                        {
                                "id": "0.587486516",
                                "keys": "windhelm",
                                "entry": " Windhelm:[  CLIMATE< Windhelm>: cold/ freezing/ snowy;  GEOGRAPHY< Windhelm>: city build from stone, its entrance bridge above the White River;  DESC< Windhelm>: Atmor is the current Jarl of Windhelm. Windhelm is a city in northeastern Skyrim, close to the border with Morrowind, and is the only substantial city in the Hold of Eastmarch. It is not only the oldest city in Skyrim, but is the oldest continuously inhabited human settlement in Tamriel.Windhelm was once the capital of the First Empire of the Nords and the old palace of the Ysgramor dynasty, the Palace of the Kings, still stands in the center of the city.;]",
                                "hidden": false,
                                "worldInfoId": "12653643"
                        },
                        {
                                "id": "0.5297422967695256",
                                "keys": "Haafingar,haafingar hold",
                                "entry": "Haafingar:[CLIMATE<Haafingar>:temperate and warm and sunny to the south/cold to and frozen to the north;GEOGRAPHY<Haafingar>:mountainous/karth river cuts the hold and goes out in the sea of ghosts to the north/kilkreath mountain/druadach mountains;DESC<Haafingar>:haafingar is currently the imperial seat in skyrim/solitude is the capital city of haafingar/solitude is the capital of skyrim/dragon bridge is a settlement south of solitude/the kilkreath temple is a temple dedicated to the daedric prince meridia/kilkreath temple has a huge statue of meridia/kilkreath temple is south of solitude/haafingar borders high rock to the west.]",
                                "hidden": false,
                                "worldInfoId": "12653644"
                        },
                        {
                                "id": "0.059520193664433174",
                                "keys": "solitude,city of solitude",
                                "entry": "Solitude:[CLIMATE<Solitude>:temperate and warm and sunny to the south/cold to and frozen to the north;GEOGRAPHY<Solitude>:mountainous/karth river cuts the hold and goes out in the sea of ghosts to the north/kilkreath mountain/druadach mountains;DESC<Solitude>:solitude is a big city/solitude is the capital of skyrim/solitude has a huge keep called castle dour/solitude has the biggest temple in skyrim that is dedicated to the nine divines/the seat of the king in solitude is the blue palace/solitude is located on top of a huge stone arch/solitude port is the most important port in skyrim and goes out to the sea of ghosts/the east empire company headquarters in skyrim is located in solitude.]",
                                "hidden": false,
                                "worldInfoId": "12653645"
                        },
                        {
                                "id": "0.5734576345345",
                                "keys": "bards college,college of bards",
                                "entry": " Bards College: { < The Bards College is an ancient institution dedicated to the formation of the arts>, < It is the most prestigious school of art in Tamriel, and the most ancient>, < It was founded some time in the First Era, during the reign of High King Olaf>, < Most of the best bards and painters in the history of Tamriel have studied here>, < It is a very prestigious academy of art located in the city of Solitude> }",
                                "hidden": false,
                                "worldInfoId": "12653646"
                        },
                        {
                                "id": "0.547564756867876575467",
                                "keys": "antiquarians circle,antiquarian circle",
                                "entry": " Antiquarians Circle: { < The Antiquarians Circle is the name of the campus of the University of Gwyllim that is dedicated to the study of History, Archaelogy and Paleontology, and is located in the city of Solitude>, < It is one of the most prestigious institutions of education in Tamriel, and many of the most prestigious historians and archaelogists studied at the Antiquarians Circle>, < It is located in the city of Solitude, while the other campi of the Unviersity of Gwyllim are located in Cyrodiil> }",
                                "hidden": false,
                                "worldInfoId": "12653647"
                        },
                        {
                                "id": "0.4936504478941153",
                                "keys": "college of winterhold",
                                "entry": "College of Winterhold:[TYPE<College of Winterhold>:guild/university/school/academy/college/guild of mages/college of mages/arcane school/university for learning magic/school of magic;LOCATION<College of Winterhold>:Winterhold;LEADER TITLE<College of Winterhold>:Arch-Mage;VICE LEADER TITLE<College of Winterhold>:Master Wizard;CITY<College of Winterhold>:Winterhold;REGION<College of Winterhold>:Winterhold;DESC<College of Winterhold>:the college of winterhold is a school of magic/the leader of the college has the title of arch-mage/the vice-leader has the title of master wizard/it is a big building in the city of winterhold/it is a big construction/it is a big castle/it is a beautiful construction/the college is thousands of years old/the college was founded by arch-mage shalidor/the college is a famous school of magic.]",
                                "hidden": false,
                                "worldInfoId": "12653648"
                        },
                        {
                                "id": "0.3756130377106148",
                                "keys": "Companions",
                                "entry": "[ Companions description:< leader_title ≡ harbinger/ details ≡ The Companions are a group of fighters that date back to the Merethic Era, and were founded by Ysgramor. They're the oldest guild in Tamriel, and their headquarters is Jorrvaskr, in the city of Whiterun. They do contracts for those willing to pay, and also fight for the good and for the honor of Skyrim when need be>. Companions headquarters< Jorrvaskr>. Companions location< The Companions are in the city of Whiterun. Their headquarters is the ancient ship of Ysgramor, called Jorrvaskr>. ]",
                                "hidden": false,
                                "worldInfoId": "12653649"
                        },
                        {
                                "id": "0.7877515302308626",
                                "keys": "hermaeus mora, hermorah, herma-mora",
                                "entry": "[ Hermaeus Mora description:< name ≡ Hermaeus Mora/ Herma-Mora/ Hermorah>/< age ≡ unknown>/< genderless>.  Hermaeus Mora summ:< Usually referred to as a male, his plane of Oblivion is Apocrypha>.  Hermaeus Mora appearance:< body ≡ tentacles/ many eyes/ floating monster/ wretched abyss/ dark purple vortex>.  Hermaeus Mora mental:< smart& intelligent& knows all& possessive& manipulative& arrogant& deceiver>. Hermaeus Mora occupation:< god of knowledge/ daedric prince of knowledge>. Hermaeus Mora traits:< arrogant/ prepotent/ manipulative>.  Hermaeus Mora speech:< telepathy>.  Hermaeus Mora abilities:< knowing all>/< manipulation>/< mind puppeteer>/< controlling people>.]",
                                "hidden": false,
                                "worldInfoId": "12653650"
                        },
                        {
                                "id": "0.798461458",
                                "keys": "sheogorath,daedric prince of madness,god of madness",
                                "entry": "[    Sheogorath description:< name ≡ Sheogorath>/ < age ≡ old as time>.   Sheogorath summ:< Usually referred to as a male, his plane of Oblivion is the Shivering Isles>.   Sheogorath appearance:< body ≡ 162cm_height/ 60kg_weight/ slim/ thin/ hair< greying& short>/ eyes< cat-like& light brown>/ full greying beard>.    Sheogorath mental:< crazy/ insane/ funny/ jokester/ sarcastic/ mad>.    Sheogorath moniker:< Daedric Prince of Madness/ God of Madness>.    Sheogorath traits:< sarcastic& crazy>.   Sheogorath speech:< thick accent>. ]",
                                "hidden": false,
                                "worldInfoId": "12653651"
                        },
                        {
                                "id": "0.5441",
                                "keys": "boethiah,boethia,boethra",
                                "entry": "[ Boethiah description:< name ≡ Boethiah& Boethia& Boethra>/< age ≡ primeval>. Boethiah summary:< appears ≡ female>/< location ≡ Realm of Boethia>. Boethiah appearance:< any form she wants>. Boethiah mental:< arrogant& prepotent& bossy& pedantic& sarcastic>. Boethiah occupation:< Daedric Prince of Plots/ God of Plots>. Boethiah speech:< commanding>.]",
                                "hidden": false,
                                "worldInfoId": "12653652"
                        },
                        {
                                "id": "0.88748",
                                "keys": "clavicus vile,vile,clavicus",
                                "entry": "[ Clavicus Vile description:< name ≡ Clavicus Vile& Vile>/< age ≡ primeval>. Clavicus Vile summary:< appears ≡ male>/< location ≡ The Fields of Regret>/< almost always with his hound Barbas by his side>. Clavicus Vile appearance:< skin ≡ yellow>/< long black horns>/< eyes ≡ red>. Clavicus Vile mental:< jokester& sarcastic& trickster& manipulative>. Clavicus Vile occupation:< Daedric Prince of Trickery and Bargains/ God of Trickery and Bargains>. Clavicus Vile speech:< mocking tone>.]",
                                "hidden": false,
                                "worldInfoId": "12653653"
                        },
                        {
                                "id": "0.78511",
                                "keys": "barbas,hound of clavicus vile",
                                "entry": "[ Barbas description:< name ≡ Barbas>/< age ≡ primeval>. Barbas summary:< appears ≡ male>/< location ≡ The Fields of Regret>/< almost always with his owner Clavicus Vile>. Barbas appearance:< skin ≡ yellow>/< long black horns>/< eyes ≡ red>/< most times appears in the form of a dog>. Barbas mental:< jokester& sarcastic& trickster& manipulative>. Barbas occupation:< Hound of Clavicus Vile>. Barbas speech:< mocking tone>.]",
                                "hidden": false,
                                "worldInfoId": "12653654"
                        },
                        {
                                "id": "0.874111",
                                "keys": "meridia,merid-nunda",
                                "entry": "[ Meridia description:< name ≡ Meridia& Merid-Nunda>/< age ≡ primeval>. Meridia summary:< appears ≡ female>/< location ≡ The Colored Rooms>/< considers the undead and such aberrations>. Meridia appearance:< height ≡ 162cm>/< weight ≡ 60kg& slim& thin>/< skin ≡ pale>/< hair ≡ shoulder_length& dark brown>/< eyes ≡ dark brown>. Meridia mental:< arrogant& pedantic& bossy>. Meridia occupation:< Daedric Prince of Light and Life>. Meridia speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "12653655"
                        },
                        {
                                "id": "0.9964572",
                                "keys": "mehrunes,dagon,merrunz",
                                "entry": "[ Mehrunes Dagon description:< name ≡ Mehrunes Dagon& Merrunz& Dagon& Mehrunes>/< age ≡ primeval>. Mehrunes Dagon summary:< appears ≡ male>/< location ≡ The Deadlands>. Mehrunes Dagon appearance:< skin ≡ red>/< hair ≡ shaved>/< eyes ≡ red>/< gigantic form with four arms and muscular figure>. Mehrunes Dagon mental:< arrogant& pedantic& violent>. Mehrunes Dagon occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Mehrunes Dagon speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "12653656"
                        },
                        {
                                "id": "0.45454177",
                                "keys": "sanguine",
                                "entry": "[ Sanguine description:< name ≡ Sanguine>/< age ≡ primeval>. Sanguine summary:< appears ≡ male>/< location ≡ The Deadlands>. Sanguine appearance:< skin ≡ jet_black>/< hair ≡ black& long>/< eyes ≡ black>/< long black horns& pointed ears>. Sanguine mental:< nice& drunk& funny>. Sanguine occupation:< Daedric Prince of Revelry and Debauchery>. Sanguine speech:< drunk& nice>.]",
                                "hidden": false,
                                "worldInfoId": "12653657"
                        },
                        {
                                "id": "0.5787786326537",
                                "keys": "molag bal,bal",
                                "entry": "[ Molag Bal description:< name ≡ Molag Bal& Bal>/< age ≡ primeval>. Molag Bal summary:< appears ≡ male>/< location ≡ Coldharbour>/< almost always wielding his mace>. Molag Bal appearance:< skin ≡ blue-grey>/< hair ≡ shaved>/< eyes ≡ neon blue>/< body ≡ extremely muscular>/< horns coming out of his ears>. Molag Bal mental:< arrogant& pedantic& violent& sadistic>. Molag Bal occupation:< Daedric Prince of Domination and Enslavement>. Molag Bal speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "12653658"
                        },
                        {
                                "id": "0.57856537",
                                "keys": "mephala,mafala",
                                "entry": "[ Mephala description:< name ≡ Mephala& Mafala>/< age ≡ primeval>. Mephala summary:< appears ≡ female>/< location ≡ Spiral Skein>. Mephala appearance:< skin ≡ dark grey>/< hair ≡ long& black>/< eyes ≡ red>/< she may also take the form of a spider>. Mephala mental:< arrogant& pedantic& belittling>. Mephala occupation:< Daedric Prince of Duality, Sex and Murder, Truth and Falsehood>. Mephala speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "12653659"
                        },
                        {
                                "id": "0.578666537",
                                "keys": "Malacath,Malauch,Mauloch,Malak,Orkey,Orkha,Malooc",
                                "entry": "[ Malacath description:< name ≡ Malacath& Malauch& Mauloch& Malak& Orkey& Orkha& Malooc>/< age ≡ primeval>. Malacath summary:< appears ≡ male>/< location ≡ Ashpit>. Malacath appearance:< skin ≡ grayish-green>/< hair ≡ shaved>/< body ≡ extremely muscular/ looks like an orc>. Malacath mental:< stubborn& arrogant& violent>. Malacath occupation:< Daedric Prince of the Bloody Oath, Flesh and Bone>. Malacath speech:< commanding>.]",
                                "hidden": false,
                                "worldInfoId": "12653660"
                        },
                        {
                                "id": "0.8687678",
                                "keys": "hircine",
                                "entry": "[ Hircine description:< name ≡ Hircine>/< age ≡ primeval>. Hircine summary:< appears ≡ male>/< location ≡ Hunting Grounds>. Hircine appearance:< skin ≡ pale>/< eyes ≡ red>/< has the head of a horned elk>. Hircine mental:< values hunters and bravery& >. Hircine occupation:< Daedric Prince of the Hunt>. Hircine speech:< commanding tone>.]",
                                "hidden": false,
                                "worldInfoId": "12653661"
                        },
                        {
                                "id": "0.578634537",
                                "keys": "nocturnal,noctra",
                                "entry": "[ Nocturnal description:< name ≡ Nocturnal& Noctra >/< age ≡ primeval>. Nocturnal summary:< appears ≡ female>/< location ≡ Evergloam>. Nocturnal appearance:< skin ≡ pale>/< hair ≡ long& black>. Nocturnal wearing:< long dark blue dress with cleavage and a hood>. Nocturnal mental:< arrogant& pedantic>. Nocturnal occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Nocturnal speech:< pretentious& arrogant>.]",
                                "hidden": false,
                                "worldInfoId": "12653662"
                        },
                        {
                                "id": "0.5788766535437",
                                "keys": "peryite,taskmaster",
                                "entry": "[ Peryite description:< name ≡ Peryite& Taskmaster>/< age ≡ primeval>. Peryite summary:< appears ≡ male>/< location ≡ Realm of Peryite>. Peryite appearance:< usually takes the form of a four-legged dragon>. Peryite mental:< sadistic& pestilent>. Peryite occupation:< Daedric Prince of Pestilence>.]",
                                "hidden": false,
                                "worldInfoId": "12653663"
                        },
                        {
                                "id": "0.5786537",
                                "keys": "jyggalag",
                                "entry": "[ Jyggalag description:< name ≡ Jyggalag>/< age ≡ primeval>. Jyggalag summary:< appears ≡ male>/< location ≡ Jyggalag's Realm>/< is the antithesis of Sheogorath>. Jyggalag appearance:< has the form of a humanoid made of shiny silver crystals>. Jyggalag mental:< arrogant& obsessive& pretentious>. Jyggalag occupation:< Daedric Prince of Order>.]",
                                "hidden": false,
                                "worldInfoId": "12653664"
                        },
                        {
                                "id": "0.8639915656760206",
                                "keys": "karth river",
                                "entry": "Karth River:[TYPE<Karth River>:river;LOCATION<Karth River>:haafingar/the reach;DESC<Karth River>:the karth river is a big river that starts in the reach and empties in haafingar/into the sea of ghosts. The Karth is well-known for its violent rapids and the dangerous terrain/such as jutted sharp stones and the crashing torrents on the river valley. But despite this/the Karth River provides a wealth of resource and life to the local people..]",
                                "hidden": false,
                                "worldInfoId": "12653665"
                        },
                        {
                                "id": "0.13894551310988978",
                                "keys": "white river",
                                "entry": "White River:[TYPE<White River>:river;LOCATION<White River>:whiterun hold/eastmarch/falkreath;DESC<White River>:The White River is the longest river in Skyrim/stretching from the south of the province to the northeast corner. Its source is Lake Ilinalta/north of Falkreath. It flows northeast to join the Sea of Ghosts past Windhelm. Along the way/it passes through Riverwood and near Whiterun..]",
                                "hidden": false,
                                "worldInfoId": "12653666"
                        },
                        {
                                "id": "0.5164146546794",
                                "keys": "Lake Geir",
                                "entry": " Lake Geir: {  < Lake Geir is a lake in the western Rift. Ivarstead is built on its western shores>,  < The lake is fed by Treva River and is drained by Darkwater River>,  < It is named after Archmage Geirmund, a First Era wizard who died nearby in a duel with Sigdis Gauldurson, the son of Archmage Gauldur>,  < A tomb for the Archmage can still be found on the largest island in the lake> }",
                                "hidden": false,
                                "worldInfoId": "12653667"
                        },
                        {
                                "id": "0.5645",
                                "keys": "Lake Ilinalta",
                                "entry": " Lake Ilinalta: {  < Lake Ilinalta is a lake in west-central Falkreath Hold, in the middle of Skyrim's pine forest>,  < It is the source of the White River, and a notable Skyrim landmark. The town of Helgen was less than a day's ride to the southeast,[2] and the Hold's capital of Falkreath is directly south>,  < The Imperial Legion used to have a fort along its shore, until the entire facility mysteriously sank into the water in a single day>,  < According to local legend, the place is cursed and travelers are known to go missing> }",
                                "hidden": false,
                                "worldInfoId": "12653668"
                        },
                        {
                                "id": "0.65777",
                                "keys": "Lake Yorgrim",
                                "entry": " Lake Yorgrim: {  < Lake Yorgrim is a lake in the eastern the Pale, to the west of Windhelm. It is the source of River Yorgrim>,  < In or around the time of the Dragon War, the dragon Viinturuth was killed and then interred in a burial mound near the shores of the lake> }",
                                "hidden": false,
                                "worldInfoId": "12653669"
                        },
                        {
                                "id": "0.55577757",
                                "keys": "Darkwater River",
                                "entry": " Darkwater River: {  < Darkwater River, or simply the Darkwater, is a river in eastern Skyrim connecting Lake Geir to the White River>,  < Lake Geir drains into it at the western end of the Rift. The river flows northeast into Eastmarch, cascading down the famous cliff which divides the two holds>,  < After this series of pools and waterfalls, the river bends northwest, and merges with the White River a few miles downstream, south-southwest of Windhelm and west of the famous fetid swamps of Eastmarch>,  < The fishing is said to be good. A large tributary flows separately from Lake Geir>,  < It passes north through Ivarstead, then curves northeast and creates its own series of waterfalls down the cliff, then connects with Darkwater River in Eastmarch, which then merges shortly after with the White River and terminates> }",
                                "hidden": false,
                                "worldInfoId": "12653670"
                        },
                        {
                                "id": "0.257272472742752",
                                "keys": "River Hjaal",
                                "entry": " River Hjaal: {  < The River Hjaal is the main river that flows through the center of Hjaalmarch in Skyrim>,  < Its headwaters are located in northwestern Whiterun Hold, in the highlands south of Morthal. After dropping down a series of waterfalls and entering Hjaalmarch, the river passes northeast through Morthal>,  < Then spreads out and drains into the Karth delta, the marshy area where the River Hjaal and the larger Karth River empty into the icy Sea of Ghosts through a variety of intricate channels>,  < Fishermen can collect a wide range of fish from the river> }",
                                "hidden": false,
                                "worldInfoId": "12653671"
                        },
                        {
                                "id": "0.2573272",
                                "keys": "River Yorgrim",
                                "entry": " River Yorgrim: {   < The River Yorgrim is a short tributary in Skyrim which connects Lake Yorgrim to the White River>,   < It flows east out of the eponymous lake in the Pale and enters Eastmarch, dropping through a series of waterfalls and rapids until it merges with the White River near the entrance to Windhelm> }",
                                "hidden": false,
                                "worldInfoId": "12653672"
                        },
                        {
                                "id": "0.5775757",
                                "keys": "Treva River",
                                "entry": " Treva River: {  < The Treva River is a small river at the center of the Rift in southeastern Skyrim>,  < It flows northwest from Lake Honrich to Lake Geir>,  < It was perhaps named after the eponymous founder of Treva's Farm on its eastern bank> }",
                                "hidden": false,
                                "worldInfoId": "12653673"
                        },
                        {
                                "id": "0.534634564356",
                                "keys": " Jerall Mountains,Jeralls",
                                "entry": " Jerall Mountains: {  < The Jerall Mountains, also called the Jeralls, are a mountain range on the border between Cyrodiil and Skyrim>,  < They meet the Velothi and Valus Mountains at the Morrowind border, and the Dragontail Mountains at the Hammerfell border>,  < The Jeralls are rugged, steep, and inhospitable, with only a few traversable passes>,  < Of particular note is the Pale Pass, which was the site of the abrupt end to the First Akaviri Invasion in 1E 2703, after which its location was lost> }",
                                "hidden": false,
                                "worldInfoId": "12653674"
                        },
                        {
                                "id": "0.8867098",
                                "keys": "Valus Mountains",
                                "entry": " Valus Mountains: {  < The Valus Mountains are a mountain range on the border between Cyrodiil and Morrowind>,  < They meet the Jerall Mountains at the Skyrim border. They are sometimes considered an extension of the Velothi Mountains> }",
                                "hidden": false,
                                "worldInfoId": "12653675"
                        },
                        {
                                "id": "0.8674553",
                                "keys": "Dragontail Mountains",
                                "entry": " Dragontail Mountains: {   < The Dragontail Mountains are a mountain range in western Skyrim>,   < They are the limit of Skyrim's territory, where it borders Hammerfell>,   < On the other side of the Dragontail Mountains is the region of Hammerfell called Craglorn> }",
                                "hidden": false,
                                "worldInfoId": "12653676"
                        },
                        {
                                "id": "0.744132532",
                                "keys": "Dragon's Teeth Mountains",
                                "entry": " Dragon's Teeth Mountains: {   < The Dragon's Teeth Mountains is an expansive mountain range that spans a large portion of western Tamriel>,   < stretching from the frozen summits of High Rock all the way to the forests of Valenwood, passing through Cyrodiil, Skyrim, and Hammerfell>,   < The Dragon's Teeth Mountains are found near the Nordic town of Falkreath> }",
                                "hidden": false,
                                "worldInfoId": "12653677"
                        },
                        {
                                "id": "0.9878675",
                                "keys": "Druadach Mountains",
                                "entry": " Druadach Mountains: {   < The Druadach Mountains are a mountain range which separate western Skyrim and eastern High Rock and Hammerfell>,   < The misty peaks tower over Markarth and Karthwasten in the Reach, though they gradually diminish closer to Haafingar and Solitude>,   < The range curves around the Karth River, and nearly stretches into Falkreath Hold>,   < The mountains border the High Rock regions of Wrothgar and Bangkorai to the east> }",
                                "hidden": false,
                                "worldInfoId": "12653678"
                        },
                        {
                                "id": "0.977844114",
                                "keys": "Velothi Mountains",
                                "entry": " Velothi Mountains: {  < The Velothi Mountains are the mountain range separating Morrowind from Skyrim>,  < They are named after the Chimer prophet Veloth who led the Chimer to leave their ancestral homes and resettle in Morrowind>,  < The mountains form the eastern border of the Skyrim regions of Eastmarch and The Rift>,  < At the southern tip of the mountain range, where it meets the Jerall and Valus Mountains> }",
                                "hidden": false,
                                "worldInfoId": "12653679"
                        },
                        {
                                "id": "0.844l89474",
                                "keys": "Throat of the World,Snow Throat",
                                "entry": " Throat of the World: {   < The Throat of the World, also called Snow Throat, is the highest peak in the province of Skyrim>,   < Seven thousand steps lead up the mountain to its summit, where the settlement of High Hrothgar is located, where the Greybeards live their lives of absolute silence>,   < The legends of the Nords state that mankind was formed on the mountain when the sky breathed onto the land>,   < Many pilgrims travel to the mountain and climb the seven thousand steps to its peak> }",
                                "hidden": false,
                                "worldInfoId": "12653680"
                        },
                        {
                                "id": "0.7741966482043361",
                                "keys": "Jorrvaskr",
                                "entry": " Jorrvaskr: { <Jorrvask is the meadhall that is home to the Companions in the city of Whiterun>, <Jorrvaskr is made from the boat that brought Ysgramor from Atmora to Tamriel>, <Jorrvaskr is made of wood, since it is a ship upside down> }",
                                "hidden": false,
                                "worldInfoId": "12653681"
                        },
                        {
                                "id": "0.13524379575253298",
                                "keys": "Skyforge",
                                "entry": " Skyforge: { <The Skyforge is an ancient forge located in Whiterun>, <Only the blacksmith of the Companions is allowed to use it>, <It is said that the Skyforge is magical and this is the reason equipment made there is so good>, <It is said that the Skyforge was blessed by Kyne herself>, <There is a huge hawk statue on top of the Skyforge> }",
                                "hidden": false,
                                "worldInfoId": "12653682"
                        },
                        {
                                "id": "0.7920305945087891",
                                "keys": "Dragonsreach,palace of the jarl",
                                "entry": " Dragonsreach: { <Dragonsreach is the palace of the Jarl of Whiterun, a huge castle on top of the hill where the city of Whiterun is located>, <Dragonsreach was build to trap dragons before they became extinct>, <It is said that a dragon called Numinex was trapped in Dragonsreach by High King Olaf One-Eye in the First Era>, <The skull of Numinex lies on top of the Jarl's throne until today> }",
                                "hidden": false,
                                "worldInfoId": "12653683"
                        },
                        {
                                "id": "0.6546465498798",
                                "keys": "understone keep",
                                "entry": " Understone Keep:{  <Understone Keep is the seat of power in the Reach, located in the city of Markarth>,  <In ancient times, it used to be part of the Dwemer city of Nchuand-Zel, one of the many cities built by the Dwemer inside mountains and underground>,  <Because of this fact, the old name Nchuand-Zel stopped being used in favor of the new name, Understone Keep>,  <The Jarl of the Reach resides in Understone Keep>}",
                                "hidden": false,
                                "worldInfoId": "12653684"
                        },
                        {
                                "id": "0.63464396745487985476",
                                "keys": "palace of the kings,palace of kings",
                                "entry": " Palace of the Kings:{   <The Palace of the Kings, known historically as the Palace of Ysgramor, is a large castle at the far end of the Valunstrad district in Windhelm>,   <It is one of the last remaining structures from the days of the First Empire of the Nords and is home to the hold's Jarl>,   <Ysgramor built the palace so as to tower over the city, showing man's dominion over the very winds that had caused Yngol's death on the voyage from Atmora>,   <It is made of stone blocks, in a unique architecture found only in Windhelm> }",
                                "hidden": false,
                                "worldInfoId": "12653685"
                        },
                        {
                                "id": "0.9530940012940066",
                                "keys": "nord religion,acient nord religion,traditional nord religion",
                                "entry": "Nord Religion:[TYPE<Nord Religion>:religion;DESC<Nord Religion>:The Ancient Nords worshiped Totems/that became gods with their own names after Ysgramor came back to Skyrim. Each of these Totems became a god of the nord pantheon. These animals were there the Snake/the Hawk/the Dragon/the Fox/the Whale/the Owl/the Bear/the Wolf and the Moth. Just by listening to which animals the nords worshiped/you might be able to guess which gods they represent..]",
                                "hidden": false,
                                "worldInfoId": "12653686"
                        },
                        {
                                "id": "0.989329231849934",
                                "keys": "jhunal",
                                "entry": "Jhunal:[TYPE<Jhunal>:god;SPHERE<Jhunal>:knowledge/widsom/mathematics;DESC<Jhunal>:Jhunal is represented by the Owl. He is the Rune God/and represents language/mathematics/knowledge and wisdom. He became Julianos in the Imperial Pantheon/and orders dedicated to him became keepers of the Elder Scrolls..]",
                                "hidden": false,
                                "worldInfoId": "12653687"
                        },
                        {
                                "id": "0.7248995633897974",
                                "keys": "kyne",
                                "entry": "Kyne:[TYPE<Kyne>:god;SPHERE<Kyne>:storms/mother god/wind;DESC<Kyne>:Kyne is the Hawk/and is out goddess of storms/the mother of all Nords. Kyne created the Nords atop the Snow Throat/and sent us to Altmora to fight against the elves. She is the wife of Shor/the nord Chief of Gods. With her aid/the Nords of old managed to learn to speak as dragons The Tongues and the Greybeards were created with her and because of her/to fight against the tyranny of Alduin. The Thu'um spoken by the dragons is roughly translated to Tamrielic as \"Storm Voice\"/in a reference to her. | Even the dragons acknowledge her/and call her Kaan. When Nords die/Kyne leads us to rest in Sovngarde..]",
                                "hidden": false,
                                "worldInfoId": "12653688"
                        },
                        {
                                "id": "0.022990195127124524",
                                "keys": "orkey",
                                "entry": "Orkey:[TYPE<Orkey>:god;SPHERE<Orkey>:death;DESC<Orkey>:Orkey is the Snake/and is the God of Death. He is a Testing God. Nords used to live as long as elves in the times of old. Orkey summoned Alduin/and the lifespan of the nords was eaten down to six years old/or \"bound them to the count of winters\" as the saying goes. High King Ysmir Wulfharth/who was turned into a boy/pleaded to Shor for help. Shor fought Alduin in Sovngarde/just as he did before Time had begun/and won the battle. | Most of the curse was thrown onto the nearby Orcs who worshiped Orkey as their patron. It was during this battle that Ysmir learned to use the Thu'um. Unfortunately/this battle cost his life. | In the Imperial Pantheon/Orkey became Arkay/the God of Life..]",
                                "hidden": false,
                                "worldInfoId": "12653689"
                        },
                        {
                                "id": "0.3151155897995812",
                                "keys": "shor",
                                "entry": "Shor:[TYPE<Shor>:god;SPHERE<Shor>:humankind/chief god;DESC<Shor>:Shor is the Fox/and is the Chief God of the nord pantheon. He's the husband of Kyne/and is the patron of mankind. The old Imperial religion knows him as Shezarr/while Bretons call him Sheor. He might also be known as Doom Drum/Sep/Lorkhan/Lorkh and Lorkhaj by other races. Shor/Stuhn and Tsun led the Nords against the elven armies of Auri-El and Trinimac in Atmora/in a war known as the War of Manifest Metaphors. After the war ended/the Nords settled there. This led to the death of Shor and Tsun. Trinimac tore out Shor's heart and hid it from the Nords/so the nords would never get their Chief God back..]",
                                "hidden": false,
                                "worldInfoId": "12653690"
                        },
                        {
                                "id": "0.06384271959154919",
                                "keys": "mara",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love;DESC<Mara>:Mara is the Wolf. She's the goddess of love/and is the handmaiden of Kyne. When Alessia took the Nord Pantheon and modified it/she kept Mara as the goddess of love. But for the Empire/she is a matron goddess. The Nords know her as Kyne's handmaiden..]",
                                "hidden": false,
                                "worldInfoId": "12653691"
                        },
                        {
                                "id": "0.03891031103246201",
                                "keys": "dibella",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/art/music;DESC<Dibella>:Dibella is the Moth/and she represents beauty/art and music. Some claim she was the mistress of Shor/but some believe that to be heresy. She is still worshiped in the Empire/but some places think her cult to be vulgar and inappropriate. That is also heresy to some..]",
                                "hidden": false,
                                "worldInfoId": "12653692"
                        },
                        {
                                "id": "0.3226602575939199",
                                "keys": "tsun",
                                "entry": "Tsun:[TYPE<Tsun>:god;SPHERE<Tsun>:adversity;DESC<Tsun>:Tsun is the Bear/and is the God of Adversity. He died during the War of Manifest Metaphors while protecting Shor/and his death is remembered as the beginning of the current world. He guards the Whalebone Bridge in Sovngarde/and only lets those worthy to pass the bridge and go into the Hall of Valor. He had great respect for magic/and was a master of the Voice..]",
                                "hidden": false,
                                "worldInfoId": "12653693"
                        },
                        {
                                "id": "0.08577198333505698",
                                "keys": "Stuhn",
                                "entry": "Stuhn:[TYPE<Stuhn>:god;SPHERE<Stuhn>:random/justice;DESC<Stuhn>:Stuhn is the Whale/and is the God of Ransom and Justice. He was the shield-thane of Shor/and brother of Tsun. He fought in the war against the ancient elves in Altmora/but lost his brother Tsun in the process. In the Imperial Pantheon/he became Stendarr..]",
                                "hidden": false,
                                "worldInfoId": "12653694"
                        },
                        {
                                "id": "0.21949257720023918",
                                "keys": "sigrid",
                                "entry": " Sigrid:[      DESC: nord/ female/ 38y/ 169cm/ 45kg/ born in riften/ inkeeper of the bloated goat;      WORN: green dress;      MIND: good& good humored& solidary& fun;  ]",
                                "hidden": false,
                                "worldInfoId": "12653695"
                        },
                        {
                                "id": "0.40410765739865107",
                                "keys": "isekaid,innkeeper of bloated goat",
                                "entry": " Isekaid:[      DESC: nord/ male/ 40y/ 175cm/ 80kg/ born in rorikstead/ inkeeper of the bloated goat;      WORN: brown leather jerkin/ green breeches;      MIND: good& good humored& solidary& fun;  ]",
                                "hidden": false,
                                "worldInfoId": "12653696"
                        },
                        {
                                "id": "0.33787729259857935",
                                "keys": "toli",
                                "entry": "Toli:[DESC<Toli>:male/40y/180cm/80kg/small and weak for a nord/fair skin/hazel eyes/light brown hair/meek/timid/kind hearted/naive/innocence/wants to run the best inn in all of skyrim/born in solitude;WORN<Toli>:brown tunic/dark brown hose;RACE<Toli>:nord;SUMMARY<Toli>:male/40y/180cm/80kg/small and weak for a nord/fair skin/hazel eyes/light brown hair/meek/timid/kind hearted/naive/innocence/wants to run the best inn in all of skyrim/born in solitude;MIND<Toli>:meek/timid/kind hearted/naive/innocence.]",
                                "hidden": false,
                                "worldInfoId": "12653697"
                        },
                        {
                                "id": "0.643240642392414",
                                "keys": "winterhold innkeeper, winterhold bartender",
                                "entry": "Bjormar:[DESC<Bjormar>:male/185cm/muscular body/big arms/big hands/47y/auburn hair/short hair/hardworking/heavy nord accent;WORN<Bjormar>:brown jerkin/tight pants/leather shoes;RACE<Bjormar>:nord;SUMMARY<Bjormar>:nord/male/47y/born in winterhold/owner of the frozen hearth/innkeeper by trade/185cm/100kg;MIND<Bjormar>:good humor/funny/nice/jokester/dislikes argonians/dislikes elves/short fused;RELATIONS<Bjormar>:wife<astrid>/friend<aengvir>.]",
                                "hidden": false,
                                "worldInfoId": "12653698"
                        },
                        {
                                "id": "0.4517321761638551",
                                "keys": "winterhold innkeeper, winterhold bartender",
                                "entry": " Astrid:[DESC<Astrid>:female/180cm/60kg/thin body/small hands/small feet/thin/long hair/blonde hair/38y/heavy nord accent/hardworking/working class;WORN<Astrid>:white jerkin/tight pants/leather apron;RACE<Astrid>:nord;SUMMARY<Astrid>:nord/female/38y/born in windhelm/wife of Bjormar/married to Bjormar/owner of the frozen hearth/innkeeper by trade/180cm/60kg;MIND<Astrid>:shy/funny/quiet/dislikes elves/dislikes argonians;RELATIONS<Astrid>:husband<Bjormar>/friend<aengvir>.]",
                                "hidden": false,
                                "worldInfoId": "12653699"
                        },
                        {
                                "id": "0.044367797985053636",
                                "keys": "balor",
                                "entry": " Balor:[DESC<Balor>:male/170cm/fat body/big hands/hardworking/heavy nord accent/26y/120kg/toupet hair/dark brown hair;WORN<Balor>:blue mage robes;RACE<Balor>:nord;SUMMARY<Balor>:nord/male/26y/170cm/120kg/born in whiterun/member of the college of winterhold/mage/wizard/middle class;MIND<Balor>:smart/intelligent/serious/funny/technical/nice/polite/educated.]",
                                "hidden": false,
                                "worldInfoId": "12653700"
                        },
                        {
                                "id": "0.8083626610017034",
                                "keys": "mélanie,arch-mage,arch mage,archmage",
                                "entry": " Mélanie:[DESC:breton/female/60y/165cm/40kg/arch-mage of the college of winterhold;APPE:thin/delicate/stunning/blue eyes/light brown hair/long straight hair;WORN:blue master wizard robes/fur collar/fur hood/gold diamond necklace/leather gloves/leather boots;MIND:serious/smart/intelligent/strategic/technical/well read;SUMM:friend<ahmad/rostfa/ungvid>;]",
                                "hidden": false,
                                "worldInfoId": "12653701"
                        },
                        {
                                "id": "0.6864424343697011",
                                "keys": "ahmad,master wizard of winterhold",
                                "entry": " Ahmad:[DESC:redguard/male/42y/172cm/80kg/master wizard of winterhold;APPE:strong/black eyes/dark brown hair/dreadlock hair:WORN:red master wizard robes/leather boots/gold emerald necklace/gold ruby ring;MIND:good humor/smart/intelligent/strategic/technical/funny/well read;SUMM:friend<rostfa/mélanie/ungvid>;]",
                                "hidden": false,
                                "worldInfoId": "12653702"
                        },
                        {
                                "id": "0.649148444342674",
                                "keys": "aengvir",
                                "entry": " Aengvir:[DESC<Aengvir>:male/170cm/70kg/thin body/slender/weak body/drunkard/drunk/drinks a lot/55y/fisherman by trade/long hair/aurburn hair;WORN<Aengvir>:brown tunic/dark brown hose;RACE<Aengvir>:nord;SUMMARY<Aengvir>:nord/male/55y170cm/70kg/born in winterhold/fisherman by trade/peasant/drunk/drunkard/mead is favorite drink;MIND<Aengvir>:short fuse/irritated/bad mood/unpolite;RELATIONS<Aengvir>:friend<rostfa>/wife<snolfi>/daughter<britte>.]",
                                "hidden": false,
                                "worldInfoId": "12653703"
                        },
                        {
                                "id": "0.13092095227421896",
                                "keys": "rostfa",
                                "entry": " Rostfa:[DESC<Rostfa>:female/170cm/fat body/big hands/hardworking/heavy nord accent/45y/100kg/long curly hair/dark brown hair;WORN<Rostfa>:blue mage robes;RACE<Rostfa>:nord;SUMMARY<Rostfa>:nord/male/45y/170cm/100kg/born in riften/member of the college of winterhold/mage/wizard/middle class/court mage of winterhold;MIND<Rostfa>:smart/intelligent/serious/funny/technical/nice/polite/educated;RELATIONS<Rostfa>:friend<ungvid/balor/ahmad kareem/méliane sindeaux>.]",
                                "hidden": false,
                                "worldInfoId": "12653704"
                        },
                        {
                                "id": "0.818803105546712",
                                "keys": "riften inn,riften tavern,mad mammoth",
                                "entry": "The Mad Mammoth:[TYPE<The Mad Mammoth>:inn/bar/pub/tavern;OWNER<The Mad Mammoth>:andkvar;INHABITANTS<The Mad Mammoth>:Andkvar/Narca/Bujela/Freyte/Torbndir;LOCATION<The Mad Mammoth>:Riften;CITY<The Mad Mammoth>:Riften;DESC<The Mad Mammoth>:the mad mammoth is the local inn and tavern in riften/it is owned by andkvar/has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/andkvar lives here/narca lives here/bujela lives here/freyte lives here/torbndir lives here/five people live here;EXIT<The Mad Mammoth>:one exit goes out to riften in the market square/one exit goes to riften in the entrance bridge.]",
                                "hidden": false,
                                "worldInfoId": "12653705"
                        },
                        {
                                "id": "0.8251141022498825",
                                "keys": "winterhold inn, frozen hearth, winterhold tavern",
                                "entry": "The Frozen Hearth:[TYPE<The Frozen Hearth>:inn/bar/pub/tavern;OWNER<The Frozen Hearth>:Bjormar;INHABITANTS<The Frozen Hearth>:Bjormar/Astrid/Aengvir/Balor;LOCATION<The Frozen Hearth>:Winterhold;CITY<The Frozen Hearth>:Winterhold;DESC<The Frozen Hearth>:the frozen hearth is the local inn and tavern in winterhold/it is owned by Bjormar/it has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/balor lives here/Bjormar owns the place/astrid lives here/aengvir lives here/there are four people here/balor lives here;EXIT<The Frozen Hearth>:exit that goes out to the city of winterhold.]",
                                "hidden": false,
                                "worldInfoId": "12653706"
                        },
                        {
                                "id": "0.3548538694560268",
                                "keys": "bloated goat, whiterun inn, whiterun tavern",
                                "entry": "The Bloated Goat:[TYPE<The Bloated Goat>:inn/bar/pub/tavern;OWNER<The Bloated Goat>:Isekaid;INHABITANTS<The Bloated Goat>:Isekaid/Sigrid;LOCATION<The Bloated Goat>:whiterun/city of whiterun;CITY<The Bloated Goat>:whiterun/city of whiterun;DESC<The Bloated Goat>:The Bloated Goat is the inn and tavern in the city of Whiterun/owned by Isekaid and his wife Sigrid. They both live at the inn/in their private room in the ground floor. The inn is a two story building with 10 rooms for rent.;EXIT<The Bloated Goat>:One main exit goes out to the Whiterun market square/located in the Plains District..]",
                                "hidden": false,
                                "worldInfoId": "12653707"
                        },
                        {
                                "id": "0.13879806616371204",
                                "keys": "temple of kyne",
                                "entry": "Temple of Kyne:[TYPE<Temple of Kyne>:temple/church/cathedral;INHABITANTS<Temple of Kyne>:Irene/Mauricius/Nonnata;LOCATION<Temple of Kyne>:whiterun/city of whiterun;CITY<Temple of Kyne>:whiterun/city of whiterun;DESC<Temple of Kyne>:Temple dedicated to Kyne/the goddess of wind and air. It's the main temple to Kyne in Skyrim/located in the Winds District.;EXIT<Temple of Kyne>:One main exit goes out to the Whiterun tree square/located in the Winds District.]",
                                "hidden": false,
                                "worldInfoId": "12653708"
                        }
                ],
                "gameCode": {
                        "onInput": "const modifier = (text) => {\r\n  console.log(`Player input: ${text}`)\r\n  state.shouldStop = false;\r\n  let stop = false;\r\n  let stopBot = false;\r\n  let modifiedText = nameReplace(text);\r\n  const lowered = modifiedText.toLowerCase();\r\n  const commandMatcher = modifiedText.match(/\\n? ?(?:> You |> You say \"|)\\/(.+?)[\"]?[.]?\\n?$/i);\r\n  const actionMatcher = modifiedText.match(/\\n? ?(?:> You |> You say \")(\\w+?)( [\\w ]+)?[\".]?\\n?$/i);\r\n\r\n  if (info.actionCount < 1 || !state.init) {\r\n    RPGstate = {};\r\n    state.RPGstate = {};\r\n    state.RPGstate.init = false;\r\n    state.init = true;\r\n    state.enableRpg = true;\r\n\r\n    grabAllBrackets(modifiedText);\r\n    state.character = {\r\n      name: state.placeholders[0].trim(),\r\n      gender: state.placeholders[1].trim(),\r\n      race: state.placeholders[2].trim(),\r\n      class: state.placeholders[3].trim(),\r\n      age: state.placeholders[4].trim(),\r\n      personality: state.placeholders[5].trim().replace(/,/g, '/ '),\r\n      stats: [],\r\n      skills: classDB[state.placeholders[3].trim().toLowerCase()].skills,\r\n      eyes: {\r\n        eyeColor: state.placeholders[6].trim()\r\n      },\r\n      hair: {\r\n        hairStyle: state.placeholders[7].trim(),\r\n        hairColor: state.placeholders[8].trim(),\r\n      },\r\n      appearance: {\r\n        height: state.placeholders[9].trim().replace('cm', '').replace('centimeters', ''),\r\n        weight: state.placeholders[10].trim().replace('kg', '').replace('kilos', ''),\r\n        features: state.placeholders[11].trim().replace(/,/g, '/ ')\r\n      }\r\n    };\r\n\r\n    playerWorldInfo = {\r\n      keys: `${state.character.name},you`,\r\n      hidden: false,\r\n      entry: ' You:['\r\n        + `NAME:${state.character.name};`\r\n        + `SUMM:age<${state.character.age}>/race<${state.character.race}>/${state.character.appearance.features}/eyes<${state.character.eyes.eyeColor}>/hair<${state.character.hair.hairStyle}&${state.character.hair.hairColor}/${state.character.appearance.height}cm&${state.character.appearance.weight}kg>;`\r\n        + `MIND:${state.character.personality};`\r\n        + `WORN:nothing;`\r\n        + `INV:nothing.`\r\n        + ']'\r\n    };\r\n\r\n    addWorldEntry(playerWorldInfo.keys, playerWorldInfo.entry, false);\r\n    state.character.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes(state.character.name));\r\n\r\n    charSheet = {\r\n      name: state.character.name,\r\n      class: state.character.class,\r\n      stats: state.character.stats,\r\n      skills: state.character.skills\r\n    }\r\n\r\n    for (let bracket in introBracketConfig.brackets) {\r\n      charSheet[introBracketConfig.brackets[bracket]] = grabBracket(bracket)\r\n    }\r\n\r\n    RPGmechsLog(`Read character information from intro prompt:`)\r\n    RPGmechsLog(charSheet)\r\n\r\n    RPGstate.charSheet = charSheet\r\n\r\n    getInventory();\r\n    parseRace(state.character);\r\n    parseClass(state.character);\r\n    state.shouldStop = false;\r\n    state.disableHardcoreMode = true;\r\n    modifiedText = modifiedText.replace(BRACKETS, '') + generatePrompt();\r\n    delete state.placeholders;\r\n  }\r\n\r\n  if (commandMatcher) {\r\n    console.log(`Command detected`);\r\n    console.log(commandMatcher);\r\n\r\n    stop = true;\r\n    modifiedText = '';\r\n\r\n    const cmd = commandMatcher[1].split(' ')[0];\r\n    const params = commandMatcher[1].replace(cmd, '') != null ? commandMatcher[1].replace(cmd, '').trim() : '';\r\n    if (cmd == 'toggleMechanics') {\r\n      console.log(`Begin mechanics toggle.`);\r\n      if (state.enableRpg) {\r\n        state.enableRpg = false;\r\n        state.message = 'You have disabled RPG mechanics and inventory system.';\r\n        console.log(`Disabled mechanics toggle.`);\r\n      } else {\r\n        state.enableRpg = true;\r\n        state.message = 'You have enabled RPG mechanics and inventory system.';\r\n        console.log(`Enabled mechanics toggle.`);\r\n      }\r\n\r\n      console.log(`End mechanics toggle.`);\r\n    } else if (!state.enableRpg) {\r\n      state.message = 'RPGMechanics are disabled. Please use /toggleMechanics to re-enable it and be able to use commands again.';\r\n    } else if (cmd == 'invCheck' && state.enableRpg) {\r\n      console.log(`Begin inventory check.`);\r\n      state.shouldStop = true;\r\n      state.message = `${checkInventory()}`;\r\n      modifiedText = '';\r\n      console.log(`End inventory check.`);\r\n    } else if (cmd == 'invAdd' && state.enableRpg) {\r\n      console.log(`Begin inventory add.`);\r\n      state.shouldStop = true;\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        state.message = `${addToInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        state.message = `You cannot add less than 1 unit of an item to your inventory.`;\r\n      }\r\n\r\n      modifiedText = '';\r\n      console.log(`End inventory add.`);\r\n    } else if (cmd == 'invRemove' && state.enableRpg) {\r\n      console.log(`Begin inventory remove.`);\r\n      state.shouldStop = true;\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        state.message = `${removeFromInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        state.message = `You cannot remove less than 1 unit of an item from your inventory.`;\r\n      }\r\n\r\n      modifiedText = '';\r\n      console.log(`End inventory remove.`);\r\n    } else if (cmd == 'invEquip' && state.enableRpg) {\r\n      console.log(`Begin inventory equip.`);\r\n      state.shouldStop = true;\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      state.message = `${equipItem(itemName)}`;\r\n      modifiedText = '';\r\n      console.log(`End inventory equip.`);\r\n    } else if (cmd == 'invDebugWi' && state.enableRpg) {\r\n      console.log(`Begin inventory debug.`);\r\n      debugInventory();\r\n      state.shouldStop = true;\r\n      state.message = `Your inventory and player WI have been debugged.`;\r\n      modifiedText = '';\r\n      console.log(`End inventory debug.`);\r\n    } else if (cmd == 'invHardcoreMode') {\r\n      console.log(`Begin toggle hardcore mode.`);\r\n      if (params == 'enable') {\r\n        state.disableHardcoreMode = false;\r\n        state.message = `You have enabled hardcore mode. Failed inventory actions will now have consequences.`;\r\n      } else if (params == 'disable') {\r\n        state.disableHardcoreMode = true;\r\n        state.message = `You have disabled hardcore mode. Failed inventory actions will no longer have consequences and will be ignored.`;\r\n      } else {\r\n        state.message = `Invalid parameter. Use either \"enable\" or \"disable\".`;\r\n      }\r\n\r\n      state.shouldStop = true;\r\n      modifiedText = '';\r\n      console.log(`End toggle hardcore mode.`);\r\n    } else if (cmd == 'r' && state.enableRpg) {\r\n      state.RPGstate.init = false;\r\n      state.message = \"Init reset done.\";\r\n    } else if (cmd == 'showdc' && state.enableRpg) {\r\n      if (state.RPGstate.showDC === true) {\r\n        state.RPGstate.showDC = false;\r\n        state.message = \"Turned DC display off.\";\r\n      } else {\r\n        state.RPGstate.showDC = true;\r\n        state.message = \"Turned DC display on.\";\r\n      }\r\n    } else {\r\n      state.message = \"Invalid command used. Use /tesHelp for a list of available commands.\";\r\n    }\r\n  } else if (actionMatcher && state.enableRpg) {\r\n    console.log(`Action detected.`);\r\n    console.log(actionMatcher);\r\n    state.inputAction = actionMatcher[1].trim();\r\n    const params = actionMatcher[2] ? actionMatcher[2].trim() : '';\r\n    if (state.inputAction == 'shoot') {\r\n      console.log(`Action: begin shooting weapon.`);\r\n      const shootingWeapon = findShootingWeapon(params);\r\n      console.log(`findShootingWeapon() return: ${shootingWeapon}`);\r\n      if (typeof shootingWeapon != 'undefined') {\r\n        console.log(`Action: shooting a \"${shootingWeapon.name}\". Looking for ammo: \"${shootingWeapon.ammo}\".`);\r\n        if (getAmmo(shootingWeapon.ammo)) {\r\n          modifiedText += `${shootingWeapon.succesfulOutcome[Math.floor(Math.random() * shootingWeapon.succesfulOutcome.length)]}`;\r\n        } else {\r\n          state.shouldStop = state.disableHardcoreMode;\r\n          if (state.shouldStop) {\r\n            modifiedText = '';\r\n            state.message = `You don't have any ${shootingWeapon.ammo}s for your ${shootingWeapon.name}. Try a different action.`;\r\n          } else {\r\n            modifiedText += `${shootingWeapon.noAmmoOutcome[Math.floor(Math.random() * shootingWeapon.noAmmoOutcome.length)]}`;\r\n          }\r\n        }\r\n      } else {\r\n        state.shouldStop = state.disableHardcoreMode;\r\n        if (state.shouldStop) {\r\n          modifiedText = '';\r\n          state.message = `You don't have this weapon in your inventory. Try a different action.`;\r\n        } else {\r\n          modifiedText += `You try to shoot your weapon, but you can't. You just remembered don't have one of those.`;\r\n        }\r\n      }\r\n      console.log('Action: end shooting weapon.');\r\n    }\r\n  }\r\n\r\n  /*********************/\r\n  /* RPGMech by Gnurro */\r\n  /*********************/\r\n  if (state.enableRpg) {\r\n    if (!state.RPGstate.init) {\r\n      state.RPGstate.doLog = true;\r\n      RPGmechsLog(`Initializing menus...`)\r\n      if (!state.stats) {\r\n        RPGmechsLog(`Initializing stats object`)\r\n        state.stats = { stats: {} }\r\n      }\r\n\r\n      RPGmechsLog(`Stats object is initialized`)\r\n      for (let statID in statConfig.statList) {\r\n        if (!statConfig.statList[statID].ignoreForMenu == true) {\r\n          state.stats.stats[statConfig.statList[statID].name] = { level: statConfig.starting.level, cost: statConfig.starting.cost }\r\n          RPGmechsLog(`Added '${statID}' stat to stats menu as '${statConfig.statList[statID].name}'.`)\r\n        } else {\r\n          RPGmechsLog(`Ignored '${statID}' stat for stats menu adding.`)\r\n        }\r\n      }\r\n\r\n      state.stats.statPoints = statConfig.starting.points\r\n      state.skills = {}\r\n\r\n      sheetSkillLoop:\r\n      for (let curSkillID of charSheet.skills) {\r\n        RPGmechsLog(`Trying to add '${curSkillID}' skill from character sheet to menu.`)\r\n        for (let skillDef in skillDB) {\r\n          if (skillDef === curSkillID) {\r\n            RPGmechsLog(`Found fitting skill definition '${skillDef}' matching '${curSkillID}' in skillDB.`)\r\n            state.skills[skillDB[skillDef].menuString] = skillConfig.starting.level\r\n            RPGmechsLog(`Added '${skillDB[skillDef].menuString}' to skills menu.`)\r\n            continue sheetSkillLoop\r\n          }\r\n        }\r\n\r\n        RPGmechsLog(`ERROR: Couldn't find fitting skill definition for '${curSkillID}' in skillDB!`)\r\n      }\r\n\r\n      state.skillPoints = skillConfig.starting.points\r\n      state.disableRandomSkill = skillConfig.forbidRandom\r\n      state.RPGstate.XP = 0\r\n      state.RPGstate.init = true\r\n    }\r\n\r\n    if (statConfig.raise) {\r\n      for (let stat in state.stats.stats) {\r\n        for (let curRaise of statConfig.raise) {\r\n          if (state.stats.stats[stat].level >= curRaise.threshold) {\r\n            state.stats.stats[stat][\"cost\"] = 2\r\n          } else {\r\n            RPGmechsLog(`Raising stat costs: Level of '${stat}' below threshold.`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // state.RPGstate = RPGstate\r\n\r\n    if (statConfig?.locking) {\r\n      for (let trigger of statConfig.locking.lockTriggers) {\r\n        let curRegEx = new RegExp(trigger, 'gi')\r\n        if (modifiedText.match(curRegEx)) {\r\n          RPGmechsLog(`Found '${trigger}' locking trigger, locking inputBot!`)\r\n          stopBot = true\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let skill in state.skills) {\r\n      let skillMod = state.skills[skill]\r\n      for (let skillDef in skillDB) {\r\n        if (skillDB[skillDef].menuString === skill) {\r\n          for (let triggerStr of skillDB[skillDef].triggers) {\r\n            let triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            let caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              RPGmechsLog(`Caught '${caughtTrigger}' of '${skillDB[skillDef].menuString}'!`)\r\n              if (!state.RPGstate.chkSkillBonus) {\r\n                state.RPGstate.chkSkillBonus = 0\r\n              }\r\n\r\n              if (skillMod > state.RPGstate.chkSkillBonus) {\r\n                state.RPGstate.chkSkillBonus = skillMod\r\n                state.RPGstate.chkSitSkill = skillDB[skillDef]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!stop && info.actionCount > 1 && !stopBot) {\r\n      state.inputBot = statConfig.inputBot\r\n    }\r\n  }\r\n  return { text: modifiedText, stop: stop };\r\n}\r\n\r\nmodifier(text);\r\n",
                        "onOutput": "const SHOOT_AGAIN = new RegExp(/(?:(another|more) arrow(s|)|shoot bow( again|)|you (try to |)shoot)/i);\r\nconst AMMO_REGEX = new RegExp(/(?:(arrow(s|)|bullet(s|)))/i);\r\n\r\nconst modifier = (text) => {\r\n  let modifiedText = nameReplace(text);\r\n  const lowered = text.toLowerCase();\r\n\r\n  if (state.inputAction == 'shoot') {\r\n    const shotAgain = lowered.match(SHOOT_AGAIN);\r\n    const ammoUsed = lowered.match(AMMO_REGEX);\r\n    if (ammoUsed && shotAgain) {\r\n      removeFromInventory(ammoUsed[0], 1);\r\n    }\r\n\r\n    state.inputAction = '';\r\n  }\r\n\r\n  return { text: modifiedText }\r\n}\r\n\r\nmodifier(text);\r\n",
                        "sharedLibrary": "const LETTER_REGEX = /[0-9]/g;\r\nconst DIGIT_REGEX = /\\D/g;\r\nconst PUNCTUATION_REMOVE = /[^\\w\\s]/gi;\r\nconst WORN_REGEX = new RegExp(`(?<=WORN:)(.*)(?=;)`);\r\nconst INVENTORY_REGEX = new RegExp(`(?<=INV:)(.*)(?=.)`);\r\nconst BRACKETED = /\\[(.*?)\\]/g;\r\nconst BRACKETS = /\\[|\\]/g;\r\nconst MATERIAL_REGEX = /(maple|oak|beech|hickory|yew|birch|ash|mahogany|nighwood|ruby ash|iron|steel|mithril|ebony|silver|brass|dwarven|rubedite|voidstone|calcinium|galatite|quicksilver|voidstone|orichalcum)/gi;\r\n\r\nconst WEAPONS = [\r\n  'sword', 'knife', 'spear', 'hammer', 'axe', 'battleaxe', 'sledgehammer', 'longsword', 'bow', 'pickaxe'\r\n];\r\n\r\nconst CLOTHING = [\r\n  'rags', 'armor', 'dress', 'kilt', 'skirt', 'jerkin', 'shirt', 'clothes', 'robes', 'leathers', 'hooded', 'cuirass', 'chainmail', 'gauntlets', 'vambraces', 'tights'\r\n];\r\n\r\nconst AMMO = [\r\n  'arrow', 'bullet'\r\n];\r\n\r\nconst AMMO_PLURAL = [\r\n  'arrows', 'bullets'\r\n];\r\n\r\nconst possibleLines = [\r\n  '\"Welcome to the Bloated Goat! If you need anything, talk to me or to my wife Sigrid. We have warm beds and quality mead!\". Isekaid smiles.\\n',\r\n  '\"Need a room? We have warm beds and nice mead!\". Isekaid smiles.\\n',\r\n  `\"Need a room? Talk to me or my wife Sigrid, and we'll set you up!\"\\n`,\r\n];\r\n\r\nconst SHOOTING_WEAPONS = [\r\n  {\r\n    name: 'bow',\r\n    ammo: 'arrow',\r\n    succesfulOutcome: [\r\n      `You aim your bow at your opponent, and let exactly one arrow go. The arrow goes out swiftly, and`,\r\n      `You shoot one arrow at your opponent, and`,\r\n      `You're determined to kill your foe, and so you aim your bow at them, hoping to get a clear shot in their throat`,\r\n      `You shoot your bow aiming at your opponent's face. Your arrow goes out swiftly and`,\r\n      `You release the string of your bow, and the arrow goes out fast as wind.`\r\n    ],\r\n    noAmmoOutcome: [\r\n      \"You don't have any arrows for your bow.\",\r\n      \"You try to shoot your bow, but when you release the string you realize there is no arrow there. You stand there looking like an idiot.\",\r\n      \"You try to shoot your bow, but then realize you don't have any arrows. Your finger gets entangled in the bow's string, and you can't untie it.\",\r\n      \"You try to shoot your bow, but then realize you don't have any arrows to do so. The string goes and comes back, and smacks you in the face.\",\r\n      \"You realize you don't have any arrows. You throw your bow at your opponent instead.\",\r\n      \"When you ready your bow, you realize you don't have any arrows, so you wield it like a sword and charge at your enemy.\"\r\n    ]\r\n  },\r\n  {\r\n    name: 'crossbow',\r\n    ammo: 'bolt',\r\n    succesfulOutcome: [\r\n      `You quickly put a bolt in your crossbow, and aim it at your opponent. You pull the trigger and`,\r\n      `You aim your crossbow at your opponent, and the bolt goes fast as wind. The bolt`,\r\n      `You shoot your cross bow aiming at your opponent's throat. The bolt goes out fast as wind and`\r\n    ],\r\n    noAmmoOutcome: [\r\n      \"You don't have any bolts for your crossbow.\",\r\n      \"You try to shoot your crossbow, but you don't have any bolts in it. Its recoil makes you drop it, and you bend down to get it, looking like an idiot.\",\r\n      \"You shoot your crossbow, but no bolt comes out of it. That's because you don't have any bolts. You realize how dumb you are and stand there like an idiot.\"\r\n    ]\r\n  }\r\n];\r\n\r\n/**\r\n * Simple frunction to capitalize the first letter of a string\r\n * \r\n * @param {string} string \r\n */\r\nfunction capitalize(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Finds an item in the player's inventory\r\n * @param {string} itemName \r\n */\r\nfunction findItemInInventory(itemName) {\r\n  console.log(`START findItemInInventory(): Looking for item \"${itemName}\" in player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let itemFound = getInventory().find((item) => {\r\n    return item.name == loweredName;\r\n  });\r\n\r\n  if (typeof itemFound != 'undefined') {\r\n    console.log(`END findItemInInventory(): Item \"${itemName}\" found. Returning it.`);\r\n    return itemFound;\r\n  }\r\n\r\n  console.log(`END findItemInInventory(): Item \"${itemName}\" not found in inventory.`);\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Removes an item from player's inventory\r\n * \r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nfunction removeFromInventory(itemName, itemQuantity) {\r\n  console.log(`START removeFromInventory(): Removing ${itemQuantity} instances of \"${itemName}\" from player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (!(item.quantity == itemQuantity) && (item.quantity > 1 && item.quantity >= itemQuantity)) {\r\n    console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n    item.quantity -= itemQuantity;\r\n    return `\\nYou have removed ${itemQuantity} ${loweredName} from your inventory.`;\r\n  }\r\n\r\n  let index = getInventory().indexOf(item);\r\n  getInventory().splice(index, 1);\r\n  updateInventory();\r\n  console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n  return `\\nYou have removed all ${loweredName} from your inventory.`;\r\n}\r\n\r\n/**\r\n * Checks player's inventory and returns what's inside\r\n */\r\nfunction checkInventory() {\r\n  console.log(`START checkInventory(): Checking player's inventory.`);\r\n  if (getInventory().length > 0) {\r\n    let items = getInventory().map((item) => item.name).join(', ');\r\n    let itemsWorn = getInventory().filter((item) => item.status == 'worn').map((item) => item.name).join(', ');\r\n    console.log(`END checkInventory(): Player's inventory contains: ${items}.`);\r\n    return `\\nYour inventory contains: ${items}. Items equipped: ${itemsWorn}.`;\r\n  }\r\n\r\n  console.log(`END checkInventory(): Player's inventory is empty.`);\r\n  return `\\nYour inventory is empty.`;\r\n}\r\n\r\n/**\r\n * Returns player's inventory. If the array in undefined, define it\r\n */\r\nfunction getInventory() {\r\n  console.log(`START getInventory(): verifying player's inventory.`);\r\n  if (typeof state.inventory == 'undefined') {\r\n    console.log(`INSIDE getInventory(): Inventory array is undefined. Declaring it with an empty array.`);\r\n    state.inventory = [];\r\n  }\r\n\r\n  console.log(`END getInventory(): player's inventory exists. Returning its contents.`);\r\n  return state.inventory;\r\n}\r\n\r\n/**\r\n * Adds item to player's inventory\r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nfunction addToInventory(itemName, itemQuantity) {\r\n  console.log(`START addToInventory(): adding ${itemQuantity} instances of \"${itemName}\" to player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (typeof item == 'undefined') {\r\n    console.log(`INSIDE addToInventory(): Player has no other instances of this item in their inventory. Adding these.`);\r\n    material = itemName.match(MATERIAL_REGEX) ? itemName.match(MATERIAL_REGEX)[0] : '';\r\n    item = {\r\n      name: loweredName,\r\n      quantity: itemQuantity,\r\n      status: 'in inventory',\r\n      type: getType(itemName),\r\n      material: material\r\n    };\r\n\r\n    if (item.type == 'weapon' || item.type == 'clothing') {\r\n      switch (item.material) {\r\n        /* metals */\r\n        case 'iron':\r\n          item.bonusDamage = 1;\r\n          break;\r\n        case 'steel':\r\n          item.bonusDamage = 2;\r\n          break;\r\n        case 'mithril':\r\n          item.bonusDamage = 3;\r\n          break;\r\n        case 'silver':\r\n          item.bonusDamage = 3;\r\n          break;\r\n        case 'brass':\r\n          item.bonusDamage = 3;\r\n          break;\r\n        case 'dwarven':\r\n          item.bonusDamage = 3;\r\n          break;\r\n        case 'galatite':\r\n          item.bonusDamage = 3;\r\n          break;\r\n        case 'calcinium':\r\n          item.bonusDamage = 3;\r\n          break;\r\n        case 'quicksilver':\r\n          item.bonusDamage = 4;\r\n          break;\r\n        case 'orichalcum':\r\n          item.bonusDamage = 4;\r\n          break;\r\n        case 'ebony':\r\n          item.bonusDamage = 5;\r\n          break;\r\n        case 'voidstone':\r\n          item.bonusDamage = 5;\r\n          break;\r\n        case 'rubedite':\r\n          item.bonusDamage = 5;\r\n          break;\r\n\r\n        /* wood */\r\n        case 'maple':\r\n          item.bonusDamage = 1;\r\n          break;\r\n        case 'oak':\r\n          item.bonusDamage = 1;\r\n          break;\r\n        case 'beech':\r\n          item.bonusDamage = 1;\r\n          break;\r\n        case 'hickory':\r\n          item.bonusDamage = 2;\r\n          break;\r\n        case 'yew':\r\n          item.bonusDamage = 2;\r\n          break;\r\n        case 'birch':\r\n          item.bonusDamage = 2;\r\n          break;\r\n        case 'ash':\r\n          item.bonusDamage = 3;\r\n          break;\r\n        case 'mahogany':\r\n          item.bonusDamage = 3;\r\n          break;\r\n        case 'nighwood':\r\n          item.bonusDamage = 4;\r\n          break;\r\n        case 'ruby ash':\r\n          item.bonusDamage = 5;\r\n          break;\r\n\r\n        /* no match */\r\n        default:\r\n          item.bonusDamage = 0;\r\n          break;\r\n      }\r\n    }\r\n\r\n    state.inventory.push(item);\r\n  } else {\r\n    console.log(`INSIDE addToInventory(): Player already has other instances of this item in their inventory. Incrementing the quantity by ${itemQuantity}.`);\r\n    item.quantity = item.quantity + itemQuantity;\r\n  }\r\n\r\n  updateInventory();\r\n  console.log(`END addToInventory(): ${itemQuantity} instances of \"${itemName}\" added to player's inventory.`);\r\n  return `\\nYou have added ${itemQuantity} ${loweredName} to your inventory.`;\r\n}\r\n\r\n/**\r\n * Simple function to make the player equip something.\r\n * \r\n * @param {string} itemName \r\n */\r\nfunction equipItem(itemName) {\r\n  console.log(`START equipItem(): equipping ${itemName}`);\r\n  const itemNameLowerCase = itemName.toLowerCase();\r\n  let itemToBeEquipped = findItemInInventory(itemNameLowerCase);\r\n  if (typeof itemToBeEquipped != 'undefined') {\r\n    const itemToBeEquippedIndex = getInventory().findIndex(x => x.name == itemToBeEquipped.name);\r\n    console.log(`INSIDE equipItem(): ${itemName} exists in player's inventory`);\r\n    if (itemToBeEquipped.type != 'weapon' && itemToBeEquipped.type != 'clothing') {\r\n      console.log(`END equipItem(): item is not equippable.`);\r\n      return `\\n${capitalize(itemNameLowerCase)} is not an equippable item.`;\r\n    }\r\n\r\n    let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n    let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n    let oldItem = getInventory().find(oldItem => oldItem.status == 'worn' && oldItem.type == itemToBeEquipped.type);\r\n    if (typeof oldItem != 'undefined') {\r\n      const oldItemIndex = getInventory().findIndex(x => x.name == oldItem.name);\r\n      console.log(`INSIDE equipItem(): Player has another item of the same type equipped. Unequipping old item.`);\r\n      itemsWorn.replace(oldItem.name.toLowerCase(), '');\r\n      console.log(`INSIDE equipItem(): Removing worn status from ${oldItem.name}.`);\r\n      oldItem.status = 'in inventory';\r\n      state.inventory[oldItemIndex] = oldItem;\r\n    }\r\n\r\n    itemToBeEquipped.status = 'worn';\r\n    state.inventory[itemToBeEquippedIndex] = itemToBeEquipped;\r\n    itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n      .map((k) => {\r\n        console.log(`INSIDE equipItem(): worn item found in inventory -> ${k.name}`);\r\n        return k.name;\r\n      }).join('/ ');\r\n\r\n    console.log(`INSIDE equipItem(): finished building new WORN string -> ${itemsWorn}`);\r\n    playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n\r\n    console.log(`END equipItem(): ${itemToBeEquipped.name} has been equipped.`);\r\n    return `\\nYou are now ${itemToBeEquipped.type == 'weapon' ? 'wielding' : 'wearing'} ${itemToBeEquipped.name}.`;\r\n  }\r\n\r\n  console.log(`END equipItem(): Player does not have \"${itemNameLowerCase}\" in their inventory.`);\r\n  return `\\nYou do not have \"${itemNameLowerCase}\" in your inventory.`;\r\n}\r\n\r\n/**\r\n * Debugs your inventory and corrects the player's WI in case it fails\r\n */\r\nfunction debugInventory() {\r\n  console.log(`START debugInventory(): debugging player's inventory`);\r\n  state.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes('you'));\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n\r\n  let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n\r\n  itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n    .map((k) => {\r\n      console.log(`INSIDE debugInventory(): Updating player WI with worn items`);\r\n      return k.name;\r\n    }).join('/ ');\r\n\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE debugInventory(): Updating player WI with inventory items`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/ ');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n\r\n  console.log(\"INSIDE debugInventory(): Fixed player WI with inventory's items.\");\r\n  console.log(`END debugInventory(): Player's WI saved at index ${state.worldInfoIndex}.`);\r\n}\r\n\r\n/**\r\n * Updates the player's inventory and corrects the WI\r\n */\r\nfunction updateInventory() {\r\n  console.log(`START updateInventory(): updating player's inventory and WI with current items`);\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE updateInventory(): Sorting inventory items and quantities into player WI`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/ ');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n  console.log(`END updateInventory(): updated player's inventory and WI with current items`);\r\n}\r\n\r\n/**\r\n * Function to determine item type\r\n * \r\n * @param {string} itemName\r\n */\r\nfunction getType(itemName) {\r\n  const checker = (input) => {\r\n    return WEAPONS.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'weapon' :\r\n      CLOTHING.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'clothing' : 'misc';\r\n  }\r\n\r\n  return checker(itemName);\r\n}\r\n\r\n/**\r\n * Finds the weapon the player is currently wearing\r\n * \r\n * @returns {object} currently equipped weapon\r\n */\r\nfunction getEquippedWeapon() {\r\n  console.log(`BEGIN getEquippedWeapon(): getting current weapon player's equipping`);\r\n  return getInventory().find(w => {\r\n    if (w.type == 'weapon' && w.status == 'worn') {\r\n      console.log(`INSIDE getEquippedWeapon(): found \"${w.name}\", currently equipped.`);\r\n      return w;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Gets currently equipped weapon's bonus damage for rolls\r\n * \r\n * @returns {number} weapon damage\r\n */\r\nfunction getEquippedWeaponDamage() {\r\n  if (typeof getEquippedWeapon() != 'undefined') {\r\n    return getEquippedWeapon().bonusDamage;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Finds shooting weapon based on parameter\r\n * \r\n * @param {string} action\r\n */\r\nfunction findShootingWeapon(action) {\r\n  console.log(`BEGIN findShootingWeapon(): getting shooting weapon from regex. Input action: \"${action}\"`);\r\n  const weaponInput = SHOOTING_WEAPONS.find(i => (action.match(WEAPON_REGEX) != null) && (action.match(WEAPON_REGEX)[0] == i.name));\r\n  let weaponReturn = undefined;\r\n  getInventory().some(w => {\r\n    if ((typeof weaponInput != 'undefined') && weaponInput.name.toLowerCase().trim().includes(w.name.toLowerCase().trim())) {\r\n      console.log(`INSIDE findShootingWeapon(): Input extracted with regex: ${weaponInput.name}. Found weapon extracted from input in player's inventory.`);\r\n      if (w.status != 'worn') {\r\n        console.log(`INSIDE findShootingWeapon(): ${w.name} is not equipped. Equipping item.`);\r\n        equipItem(w.name);\r\n        state.message = `You are now equipping your ${w.name} and ${weaponInput.ammo} for ammo. `;\r\n      }\r\n\r\n      console.log(`END findShootingWeapon(): ${weaponInput.name} matches item in inventory.`);\r\n      weaponReturn = weaponInput;\r\n      return true;\r\n    } else if (typeof weaponInput == 'undefined') {\r\n      console.log(`INSIDE findShootingWeapon(): weaponInput is undefined. Searching inventory for item that matches a shooting weapon.`);\r\n      let currentMatch = SHOOTING_WEAPONS.find(i => {\r\n        if (w.name.match(WEAPON_REGEX) != null) {\r\n          return w.name.match(WEAPON_REGEX)[0] == i.name;\r\n        }\r\n      });\r\n\r\n      if (typeof currentMatch != 'undefined') {\r\n        if (w.status != 'worn') {\r\n          console.log(`INSIDE findShootingWeapon(): ${w.name} is not equipped. Equipping item.`);\r\n          equipItem(w.name);\r\n          state.message = `You are now equipping your ${w.name} and ${currentMatch.ammo} for ammo. `;\r\n        }\r\n\r\n        console.log(`END findShootingWeapon(): ${w.name} is a shooting weapon, returning this item.`);\r\n        weaponReturn = currentMatch;\r\n        return true;\r\n      }\r\n    }\r\n\r\n    console.log(`END findShootingWeapon(): did not find matching shooting weapon in player's inventory.`);\r\n    return false;\r\n  });\r\n\r\n  return weaponReturn;\r\n}\r\n\r\n/**\r\n * Verifies if player has ammo\r\n *\r\n * @param {string} itemName \r\n */\r\nfunction getAmmo(itemName) {\r\n  console.log(`START getAmmo(): Looking for ammo item: ${itemName}.`);\r\n  return getInventory().find(item => {\r\n    console.log(`INSIDE getAmmo(): looking up items in inventory. Current item: ${item.name}`);\r\n    if (item.type == 'ammo' && (itemName.includes(item.name) || item.name.includes(itemName))) {\r\n      if (item.status != 'worn') {\r\n        equipItem(item.name);\r\n        state.message = `You weren't equipping your ammo! You are now. `;\r\n      }\r\n\r\n      console.log(`INSIDE getAmmo(): found \"${item.name}\", which has correct type.`);\r\n      item.quantity -= 1;\r\n      return true;\r\n    }\r\n\r\n    console.log(`INSIDE getAmmo(): did not find any items with correct type.`);\r\n    return false;\r\n  });\r\n}\r\n\r\n/**\r\n * Function that generates the initial prompt for the adventure\r\n */\r\nfunction generatePrompt() {\r\n  return possibleLines[Math.floor(Math.random() * possibleLines.length)];\r\n}\r\n\r\n/**\r\n * Function that parses the character's race when they're created. This determines the innkeeper's behavior towards the player.\r\n * \r\n * @param {object} character\r\n */\r\nfunction parseRace(character) {\r\n  let race = character.race.toLowerCase();\r\n  if (race.includes(\"orsimer\") || race.includes(\"orc\")) {\r\n    race = 'Orsimer/Orc';\r\n    possibleLines.push(\r\n      `\"Oh, great. An Orc. Don't bash into my stuff, freak.\". You notice disdain in his voice.\\n`,\r\n      `\"An Orc? Damn brutes. If you so much break a cup, I'll have the guards kick you from the city.\". You notice disdain in his voice.\\n`\r\n    );\r\n  } else if (race.includes(\"altmer\") || race.includes(\"high elf\")) {\r\n    race = 'Altmer/High Elf';\r\n    possibleLines.push(\r\n      '\"What do you want here, elf?\"\\n',\r\n      '\"Another elf? Your kind is not welcome here.\"\\n',\r\n      `\"You may stay, but I'm watching you, damn elf. One false movement and I'll have you thrown in the White River!\"\\n`,\r\n      `\"Good, an Altmer. Now I'm happy.\". He speech seems sarcastic.\\n`\r\n    );\r\n  } else if (race.includes(\"dunmer\") || race.includes(\"dark elf\")) {\r\n    race = 'Dunmer/Dark Elf';\r\n    possibleLines.push(\r\n      '\"What do you want here, elf?\"\\n',\r\n      '\"Another elf? Your kind is not welcome here.\"\\n',\r\n      `\"You may stay, but I'm watching you, damn elf. One false movement and I'll have you thrown in the White River!\"\\n`,\r\n      `\"What do you want here? Is your kind trying to take over Skyrim? Now a damn Dunmer is Empress!\". You notice disdain in his voice.\\n`\r\n    );\r\n  } else if (race.includes(\"bosmer\") || race.includes(\"wood elf\")) {\r\n    race = 'Bosmer/Wood Elf';\r\n    possibleLines.push(\r\n      '\"What do you want here, elf?\"\\n',\r\n      '\"Another elf? Your kind is not welcome here.\"\\n',\r\n      `\"You may stay, but I'm watching you, damn elf. One false movement and I'll have you thrown in the White River!\"\\n`,\r\n      `\"Are you... a Bosmer? I've never seen one in real life. You ain't gonna eat me, right?\". He seems frightened.\\n`,\r\n      `\"You're a Bosmer? Is it true that you eat people's flesh?\". He seems frightened.\\n`\r\n    );\r\n  } else if (race == 'nord') {\r\n    possibleLines.push(\r\n      `\"Welcome, friend! How can I help a ${character.gender == 'male' ? 'brother' : 'sister'} Nord?\"\\n`,\r\n      `\"You must be cold, friend. Here, have a mug of mead on the house.\". He hands you a mug of mead.\\n`\r\n    );\r\n  } else if (race == 'breton') {\r\n    possibleLines.push(\r\n      `\"Oh, a midget. How can I help you, friend?\", Isekaid laughs.\\n`,\r\n      `\"A Breton in these parts? Are you lost, friend?\"\\n`\r\n    );\r\n  } else if (race == 'imperial') {\r\n    possibleLines.push(\r\n      `\"An Imperial in these parts? Are you lost, friend?\"\\n`,\r\n      `\"An Imperial? It's a long way from Cyrodiil, friend. Need a bed to rest?\"\\n`\r\n    );\r\n  } else if (race == 'khajiit') {\r\n    possibleLines.push(\r\n      `\"Here, kitty kitty kitty.\". He laughs out loud. \"I'm just joking, friend. What do you need?\"\\n`,\r\n      `\"Oh, a cat on two legs. Don't leave fur in our stuff. We're a hygienic bunch.\"\\n`\r\n    );\r\n  } else if (race == 'argonian') {\r\n    possibleLines.push(\r\n      `\"Good day, lizard. How may I help you?\"\\n`,\r\n      `\"A lizard? Nasty.\". He seems disgusted at you.\\n`\r\n    );\r\n  } else if (race == 'redguard') {\r\n    possibleLines.push(\r\n      `\"Good day, friend. Keeping well? It's a long way from Hammerfell. Enjoy your stay in Whiterun.\"\\n`,\r\n      `\"A Redguard? You're good people. Strong and foolhardy like us Nords, not a bunrch of milk-drinkers like these damned elves.\"\\n`\r\n    );\r\n  } else {\r\n    possibleLines.push(\r\n      `\"Oh, you're a weird one, aren't you?\". He laughs. \"What race are you, ${character.gender == 'male' ? 'lad' : 'lass'}?\"`,\r\n      `\"Oh, you're a weird one. What race are you? Doesn't matter, my family and I don't judge. What do you need, friend?\". Isekaid smiles.\\n`,\r\n      `\"Oh... hello...\". Isekaid looks at you and raises his eyebrow. He's clearly confused because you don't look like any known race. \"Do... you... need something?\"\\n`,\r\n      `\"Oh... you're on of those... people.\". Isekaid looks at you and raises his eyebrow. He's clearly confused because you don't look like any known race. \"Do you... need something?\"\\n`\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Function that parses the character's race when they're created. This determines the innkeeper's behavior towards the player.\r\n * \r\n * @param {object} character\r\n */\r\nfunction parseClass(character) {\r\n  let charClass = character.class.toLowerCase();\r\n  switch (charClass) {\r\n    case 'mage':\r\n      state.charClass = classDB.mage.skills;\r\n      addToInventory('Apprentice Mage Robes', 1);\r\n      equipItem('Apprentice Mage Robes');\r\n      possibleLines.push(\r\n        `\"Oh, a mage? That's an impressive craft, friend. Have a mug of mead on the house!\". Isekaid smiles.\\n`,\r\n        `\"Oh, a mage? I'm impressed your types haven't blown up all of the world yet. No magic allowed in my inn!\". Isekaid seems annoyed by the fact that you're a mage.\\n\"`\r\n      );\r\n      break;\r\n    case 'warrior':\r\n      state.charClass = classDB.warrior.skills;\r\n      addToInventory('Rusty Iron Sword', 1);\r\n      addToInventory('Rusty Iron Armor', 1);\r\n      equipItem('Rusty Iron Sword');\r\n      equipItem('Rusty Iron Armor');\r\n      possibleLines.push(\r\n        `\"You look strong, friend. Here to join the Companions? Go up to Jorrvaskr. They need folk like you.\". Isekaid smiles.\\n`,\r\n        `\"A fellow warrior? ${character.race.toLowerCase().includes('nord') ? `A true Nord. Here's a mug od mead. And that's on me, friend! May you be worthy of Sovngarde!`\r\n          : `I respect warriors. Here's a mug of mead on the house!`}\". Isekaid smiles.\\n`\r\n      );\r\n      break;\r\n    case 'ranger':\r\n      state.charClass = classDB.ranger.skills;\r\n      addToInventory('Wooden Bow', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Wooden Bow');\r\n      equipItem('Leather Tights');\r\n      possibleLines.push(\r\n        `\"Oh, you fancy the bow? Smart techniques. Bet you never run out of good meat to eat, huh?\". Isekaid laughs.\\n`,\r\n        `\"A hunter! Hunters and farmers alike are the ones who provide us with food. May your hunt be fruitful, friend!\". Isekaid smiles.\\n`\r\n      );\r\n      break;\r\n    case 'thief':\r\n      state.charClass = classDB.thief.skills;\r\n      addToInventory('Rusty Iron Dagger', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Rusty Iron Dagger');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    case 'nightblade':\r\n      state.charClass = classDB.nightblade.skills;\r\n      addToInventory('Rusty Iron Dagger', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Rusty Iron Dagger');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    case 'bard':\r\n      state.charClass = classDB.bard.skills;\r\n      addToInventory('Rusty Iron Dagger', 1);\r\n      addToInventory('Linen Quilted Clothes', 1);\r\n      addToInventory('Lute', 1);\r\n      equipItem('Rusty Iron Dagger');\r\n      equipItem('Linen Quilted Clothes');\r\n      break;\r\n    default:\r\n      state.message = 'You have chosen a class that is not one of the options. You have no items.';\r\n      console.log('No valid class selected.');\r\n      break;\r\n  }\r\n}\r\n\r\n/**\r\n * Grabs placeholders inside brackets and store them in state\r\n * \r\n * @param {string} text\r\n */\r\nfunction grabAllBrackets(text) {\r\n  for (var entry of text.match(BRACKETED)) {\r\n    entry = entry.replace(BRACKETS, '');\r\n    if (!state.placeholders) {\r\n      state.placeholders = [];\r\n    }\r\n    state.placeholders.push(entry);\r\n  }\r\n  console.log(state.placeholders);\r\n  console.log(\"Grabbed brackets:\" + state.placeholders.join(\", \"))\r\n}\r\n\r\n/**\r\n * Removes brackets from bracketed words so they're usable in prompt\r\n * @param {string} index \r\n * @returns \r\n */\r\nfunction grabBracket(index) {\r\n  return (text.match(BRACKETED)[index].replace(BRACKETS, ''))\r\n}\r\n\r\nconst introBracketConfig = {\r\n  brackets: [\r\n    \"name\",\r\n    \"class\",\r\n    \"petType\",\r\n    \"petName\"\r\n  ]\r\n}\r\n\r\nconst miscConfig = {\r\n  successMessage: `Success!`,\r\n  failMessage: `Fail!`,\r\n  messageStatIcon: true,\r\n  showXP: true,\r\n}\r\n\r\n/**\r\n * Gets the skill list for the players' characters\r\n */\r\nconst skillDB = {\r\n  lockpick: {\r\n    menuString: \"Lockpicking\",\r\n    triggers: [\"(break(ing|)|pick(ing|)).*(a|the) lock\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You manage to break the lock succesfully.\"],\r\n      negative: [\"You break your pick trying to break the lock.\"]\r\n    }\r\n  },\r\n  speechcraft: {\r\n    menuString: \"Speechcraft\",\r\n    triggers: [\"(intimidat(e|ing)|convinc(e|ing)|persuad(e|ing)).*(her|him|you|them)\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"Your honeyed words work!\"],\r\n      negative: [\"Thank the Gods you're not a diplomat, huh? You fail at your speechcraft attempt.\"]\r\n    }\r\n  },\r\n  pickpocket: {\r\n    menuString: \"Pickpocketing\",\r\n    triggers: [\"((rob(bing|)|mug(ging)).*(him|her|them))|(pick(ing|)( the | her | his | their |)pocket(ing|))\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You manage to pick this person's pocket and steal their things without being noticed.\"],\r\n      negative: [`\"What the fuck?\", the person says. \"A fucking thief! Guards! Someone!\", they start yelling.`]\r\n    }\r\n  },\r\n  arts: {\r\n    menuString: \"Arts\",\r\n    triggers: [\"(draw|play|paint(ing|)).*(((guitar|lute|flute)|(picture|portrait)|(drawing))|)\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You're an artist! You art is amazing!\"],\r\n      negative: [\"Your art skills are pretty bad.\"]\r\n    }\r\n  },\r\n  alchemy: {\r\n    menuString: \"Alchemy\",\r\n    triggers: [\"((mash|ferment|brew)(ing|)|((mak|prepar|infus)(e|ing))).*((brew|mixture|philter|elixir|medicine|tonic|draft|tincture|potion|concoction|infusion)(s|))\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You finish working the mortar and pestle, and manage to brew the concoction.\"],\r\n      negative: [\"You drop the mortar and pestle, and the ingredients are all over the floor. You wasted your ingredients and failed making the mixture.\"]\r\n    }\r\n  },\r\n  conjuration: {\r\n    menuString: \"Conjuration\",\r\n    triggers: [\"(((summon)(ing|))|(conjur(e|ing)|))\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You move your hands around, making the gestures of a summoning ritual. A portal opens in front of you, and a figure starts coming out of it.\"],\r\n      negative: [\"You don't manage to concentrate enough, and you waste your Magicka in a failed attempt at conjuring\"]\r\n    }\r\n  },\r\n  restoration: {\r\n    menuString: \"Restoration\",\r\n    triggers: [\"((cast|heal)(ing|)).((spell|magic)(s|))\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You concentrate your Magicka in your hands, and you feel the energy take over you. Healing energy goes out of your hands and into\"],\r\n      negative: [\"You concentrate your Magicka in your hands, but it is too much for you to bear. Instead of healing, you end up accidentaly burning your own hands.\"]\r\n    }\r\n  },\r\n  destruction: {\r\n    menuString: \"Destruction\",\r\n    triggers: [\"((cast)(ing|)).*(spell|fire|water|wind|flame|frost)\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You concentrate your Magicka in your hands, and do a smirky face looking at your opponent. You aim at them, and let it all go out of your hands, hitting them\"],\r\n      negative: [\"You concentrate your Magicka in your hands, but you lose control of your energy, and your spell hurts you instead.\"]\r\n    }\r\n  },\r\n  alteration: {\r\n    menuString: \"Alteration\",\r\n    triggers: [\"((cast(ing|)).*(transmut(e|ation)|paralyz(ation|e|ing)|telekinesis|waterbreath(ing|)|flesh)|teleport(ation|ing|))\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You cast your spell.\"],\r\n      negative: [\"You fail at casting your spell.\"]\r\n    }\r\n  },\r\n  illusion: {\r\n    menuString: \"Illusion\",\r\n    triggers: [\"((cast(ing|)).*(illusion|clairvoyance|calm|fear|frenzy|muffle)(ing|))\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You cast your spell.\"],\r\n      negative: [\"You fail at casting your spell.\"]\r\n    }\r\n  },\r\n  blade: {\r\n    menuString: \"Blade\",\r\n    triggers: [\"((fight|attack|thrust|hack)(ing|)|(stab(bing|))|(charg(e|ing))).*((blade|sword|dagger|sabre|katana|knife|ax(e|))|(him|her|them))\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You hold your weapon and squint at your opponent. You brandish your blade and hit them with it.\"],\r\n      negative: [\"You charge at your opponent, trying to hit them with your blade, but it falls from your hand.\"]\r\n    }\r\n  },\r\n  blunt: {\r\n    menuString: \"Blunt\",\r\n    triggers: [\"((attack|blow|beat)(ing|)|(charg(e|ing))|(hit(ting|))).*((hammer(ing|)|club)|(him|her|them))\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You hold your weapon and squint at your opponent. You brandish it and hit them with it.\"],\r\n      negative: [\"You charge at your opponent, trying to hit them with your weapon, but it falls from your hand.\"]\r\n    }\r\n  },\r\n  melee: {\r\n    menuString: \"Melee\",\r\n    triggers: [\"((attack|beat)(ing|)|(charg(e|ing))|(hit(ting|))).*((hand|fist)(s|)|(him|her|them))\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You are great at setting this up.\"],\r\n      negative: [\"You mess up the construction.\"]\r\n    }\r\n  },\r\n  block: {\r\n    menuString: \"Block\",\r\n    triggers: [\"((defend|block)(ing|)).*(from|).*(him|them|his|her(s|)|their(s|))(.*(blow|attack|sword|ax(e|)|hammer|club|dagger|sabre|katana|knife|blade)|)\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"Your enemy attacks you, but you manage to block their attack very well.\"],\r\n      negative: [\"Your enemy attacks you, and you try to block their move, but you're too slow. Your enemy hits you.\"]\r\n    }\r\n  },\r\n  marksmanship: {\r\n    menuString: \"Marksmanship\",\r\n    triggers: [\"((us(e|ing))|shoot(ing|))(.*(((cross|)bow|arrow)(s|))|)\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You shoot your foe, and it hits them swiftly.\"],\r\n      negative: [\"You fail to shoot your enemy.\"]\r\n    }\r\n  },\r\n  sneak: {\r\n    menuString: \"Sneaking\",\r\n    triggers: [\"((sneak|crouch|stealth)(ing|)|noiseless|without making (any |)noise)\"],\r\n    overrideAtt: true,\r\n    results: {\r\n      positive: [\"You go in full stealth, and is not detected.\"],\r\n      negative: [\"You try to go stealthly, but you trip and make a lot of noise.\"]\r\n    }\r\n  },\r\n};\r\n\r\n/**\r\n * Gets the class list for the players' characters\r\n */\r\nconst classDB = {\r\n  mage: {\r\n    skills: ['melee', 'alchemy', 'conjuration', 'restoration', 'destruction', 'alteration', 'illusion']\r\n  },\r\n  warrior: {\r\n    skills: ['melee', 'blunt', 'blade', 'block']\r\n  },\r\n  ranger: {\r\n    skills: ['melee', 'marksmanship', 'sneak', 'acrobatics', 'athletics']\r\n  },\r\n  thief: {\r\n    skills: ['melee', 'sneak', 'acrobatics', 'athletics', 'lockpick', 'speechcraft', 'pickpocket']\r\n  },\r\n  nightblade: {\r\n    skills: ['melee', 'blunt', 'blade', 'sneak', 'acrobatics', 'athletics']\r\n  },\r\n  bard: {\r\n    skills: ['melee', 'speechcraft', 'arts', 'blunt', 'blade', 'restoration', 'illusion']\r\n  }\r\n};\r\n\r\nstatConfig = {\r\n  inputBot: \"ElderScrollsInputDCAttributeBot\",\r\n  botOutputs: {\r\n    stat: `Attribute`,\r\n    dc: `DC`,\r\n    cuz: `reason`,\r\n  },\r\n  rolling: {\r\n    checkRollRange: [1, 20],\r\n  },\r\n  //statList: {\r\n  // unknown: {\r\n  //   name: \"Unknown\",\r\n  //   tag: \"UNK\",\r\n  //   icon: \"???\",\r\n  //   successAdjective: \"good\",\r\n  //   failAdjective: \"bad\",\r\n  //   ignoreForMenu: true\r\n  // },\r\n  //   strength: {\r\n  //     name: \"Strength\",\r\n  //     tag: \"STR\",\r\n  //     icon: \"💪\",\r\n  //     successAdjective: \"strong\",\r\n  //     failAdjective: \"weak\",\r\n  //     ignoreForMenu: true\r\n  //   },\r\n  //   agility: {\r\n  //     name: \"Agility\",\r\n  //     tag: \"AGL\",\r\n  //     icon: \"🏃‍♂️\",\r\n  //     successAdjective: \"agile\",\r\n  //     failAdjective: \"stiff\",\r\n  //     ignoreForMenu: true\r\n  //   },\r\n  //   constitution: {\r\n  //     name: \"Constitution\",\r\n  //     tag: \"CON\",\r\n  //     icon: \"🦵\",\r\n  //     successAdjective: \"nimble\",\r\n  //     failAdjective: \"clumsy\",\r\n  //     ignoreForMenu: true\r\n  //   },\r\n  //   intelligence: {\r\n  //     name: \"Intelligence\",\r\n  //     tag: \"INT\",\r\n  //     icon: \"🧠\",\r\n  //     successAdjective: \"smart\",\r\n  //     failAdjective: \"dumb\",\r\n  //     ignoreForMenu: true\r\n  //   },\r\n  //   wisdom: {\r\n  //     name: \"Wisdom\",\r\n  //     tag: \"WIS\",\r\n  //     icon: \"🦉\",\r\n  //     successAdjective: \"wise\",\r\n  //     failAdjective: \"oblivious\",\r\n  //     ignoreForMenu: true\r\n  //   },\r\n  //   personality: {\r\n  //     name: \"Personality\",\r\n  //     tag: \"PER\",\r\n  //     icon: \"😎\",\r\n  //     successAdjective: \"cool\",\r\n  //     failAdjective: \"annoying\",\r\n  //     ignoreForMenu: true\r\n  //   },\r\n  //   willpower: {\r\n  //     name: \"Willpower\",\r\n  //     tag: \"WPR\",\r\n  //     icon: \"🔥\",\r\n  //     successAdjective: \"sheer\",\r\n  //     failAdjective: \"thick-headed\",\r\n  //     ignoreForMenu: true\r\n  //   }\r\n  // },\r\n  statList: {\r\n    unknown: {\r\n      name: \"Unknown\",\r\n      tag: \"UNK\",\r\n      icon: \"???\",\r\n      successAdjective: \"good\",\r\n      failAdjective: \"bad\",\r\n      ignoreForMenu: true\r\n    },\r\n    intelligence: {\r\n      name: \"Intelligence\",\r\n      tag: \"INT\",\r\n      icon: \"🧠\",\r\n      successAdjective: \"smart\",\r\n      failAdjective: \"dumb\",\r\n    },\r\n    wisdom: {\r\n      name: \"Wisdom\",\r\n      tag: \"WIS\",\r\n      icon: \"🤔\",\r\n      successAdjective: \"wise\",\r\n      failAdjective: \"oblivious\",\r\n    },\r\n    charisma: {\r\n      name: \"Charisma\",\r\n      tag: \"CHA\",\r\n      icon: \"😎\",\r\n      successAdjective: \"impressive\",\r\n      failAdjective: \"annoying\",\r\n    },\r\n    strength: {\r\n      name: \"Strength\",\r\n      tag: \"STR\",\r\n      icon: \"💪\",\r\n      successAdjective: \"strong\",\r\n      failAdjective: \"weak\",\r\n    },\r\n    dexterity: {\r\n      name: \"Dexterity\",\r\n      tag: \"DEX\",\r\n      icon: \"💃\",\r\n      successAdjective: \"nimble\",\r\n      failAdjective: \"clumsy\",\r\n    },\r\n    constitution: {\r\n      name: \"Constitution\",\r\n      tag: \"CON\",\r\n      icon: \"😣\",\r\n      successAdjective: \"tough\",\r\n      failAdjective: \"scrawny\",\r\n    },\r\n  },\r\n  starting: {\r\n    level: 0,\r\n    points: 5,\r\n    cost: 1,\r\n  },\r\n  raise: [\r\n    { threshold: 4, newCost: 2 },\r\n    { threshold: 9, newCost: 3 },\r\n  ],\r\n  locking: {\r\n    lockTriggers: [`walk`, `breathe`, 'ask', 'say', 'head', 'run', 'go', 'shout', 'yell', 'question', 'follow', 'laugh', 'smile'],\r\n    lockArbitraryChecks: true\r\n  }\r\n}\r\n\r\nconst skillConfig = {\r\n  starting: {\r\n    points: 10,\r\n    level: 0,\r\n  },\r\n  forbidRandom: true\r\n}\r\n\r\n/**\r\n * Stuff that does context notes independent of skill use or checks and prolly sth for checks as well\r\n * @returns object with feats\r\n */\r\nconst featDB = {}\r\n\r\n/**\r\n * Misc helper function that gets random number\r\n * @param {number} min \r\n * @param {number} max \r\n * @returns random number within given limits\r\n */\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\n/**\r\n * Misc helper function that picks an item from a list\r\n * @param {array} list \r\n * @returns random item from given list\r\n */\r\nfunction getRndFromList(list) {\r\n  return (list[getRndInteger(0, list.length)]);\r\n}\r\n\r\n/**\r\n * Makes neat modifier strings with adaptive +/- depending on given value\r\n * @param {number} int \r\n * @returns \r\n */\r\nfunction makeModString(int) {\r\n  if (Number.isInteger(int)) {\r\n    if (int >= 0) {\r\n      string = \"+\" + int;\r\n    } else {\r\n      string = \"-\" + Math.abs(int);\r\n    }\r\n  } else {\r\n    string = \"\";\r\n  }\r\n  return (string);\r\n}\r\n\r\nfunction inputTypeCheck(inputText) {\r\n  let doTriggered = inputText.match(/> You /gi)\r\n  let sayTriggered = inputText.match(/> You (say|ask)/gi)\r\n  let greaterTriggered = inputText.match(/> /gi)\r\n\r\n  if (sayTriggered) {\r\n    RPGmechsLog(\"'> You say' in input - [say] triggered!\")\r\n    return (`say`)\r\n  } else if (doTriggered) {\r\n    RPGmechsLog(\"'> You' in input - [do] triggered!\")\r\n    return (`do`)\r\n  } else if (greaterTriggered) {\r\n    RPGmechsLog(\"'>' in input - [>story] triggered!\")\r\n    return (`greater`)\r\n  } else {\r\n    RPGmechsLog(\"No '>' or '> You' in input - [story] triggered!\")\r\n    return (`story`)\r\n  }\r\n}\r\n\r\nfunction RPGmechsLog(msg) {\r\n  if (state.RPGstate.doLog) {\r\n    console.log(msg)\r\n  }\r\n}\r\n\r\nfunction capFirstLetter(string) {\r\n  return (string.charAt(0).toUpperCase() + string.slice(1))\r\n}\r\n\r\nfunction displayStatsUpdate([inKey, inValue, inColor]) {\r\n  if (!state.displayStats) {\r\n    state.displayStats = []\r\n  }\r\n\r\n  let displayStatUpdated = false\r\n  for (let displayStat of state.displayStats) {\r\n    RPGmechsLog(`Checking '${displayStat.key}' displayStats entry...`)\r\n    let curDisplayStatIndex = state.displayStats.indexOf(displayStat)\r\n    if (displayStat.key === inKey || displayStat.key === '\\n' + inKey) {\r\n      RPGmechsLog(`Found '${inKey}' displayStats entry: ${state.displayStats[curDisplayStatIndex].key}, ${state.displayStats[curDisplayStatIndex].value}, ${state.displayStats[curDisplayStatIndex].color}, updating!`)\r\n      if (inValue) {\r\n        if (typeof (inValue) == 'string') {\r\n          RPGmechsLog(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        } else {\r\n          RPGmechsLog(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        }\r\n      } else {\r\n        RPGmechsLog(`No value to update displayStat inputted, removing entry.`)\r\n        state.displayStats.splice(curDisplayStatIndex, 1)\r\n        displayStatUpdated = true\r\n        break\r\n      }\r\n\r\n      if (inColor) {\r\n        state.displayStats[curDisplayStatIndex].color = inColor\r\n      }\r\n\r\n      displayStatUpdated = true\r\n      break\r\n    }\r\n  }\r\n\r\n  if (displayStatUpdated === false && inValue?.length > 0) {\r\n    RPGmechsLog(`No ${inKey} displayStats entry found, adding it!`)\r\n    if (state.displayStats.length > 0) {\r\n      inKey = '\\n' + inKey\r\n    }\r\n\r\n    state.displayStats.push({ 'key': inKey, 'value': inValue, 'color': inColor })\r\n  }\r\n}\r\n\r\n/********************************/\r\n/*** Zaltys' name synthesizer ***/\r\n/********************************/\r\nBADNAMES = ['Ackerson', 'Alison', 'Annah', 'Anu', 'Arat', 'Arrorn', 'Ashton', 'Azajaja', 'Big Red',\r\n  'Brot', 'Brother Gray', 'Bucklesberg', 'Captain Dario', 'Captain Eckard', 'Captain Hayes', 'Captain Ian', 'Captain Illam', 'Carn',\r\n  'Castus', 'Cloudpeak', 'Count Gray', 'Count Grey', 'Dark Order', 'David', 'Delantium', 'Delerg', 'Dendrin', 'Derg',\r\n  'Dert', 'Dessel', 'Dorna', 'Dr. Kessel', 'Dr. Kovas', 'Drake', 'Draven', 'Durge', 'Ebony Claw', 'Elam',\r\n  'Eldolith', 'Eliza', 'Eternals', 'Father Féval', 'Father Tomas', 'Felkan', 'Flog', 'Garrick', 'Grolik', \"Gro'tesk\", 'Haygarth',\r\n  'Hessla', 'Holgard', 'Isabella', \"J'Arel\", 'Jacob', 'Jicol', 'Karth', 'Kelso',\r\n  'Klemto', 'Klyton', 'Kralmer', 'Kyros', 'Lenay', 'Lord Rostov', 'Ludmilla', 'Magos Cern', 'Meliodas',\r\n  'Merk', 'Mihrab', 'Mr. Demar', 'Mr. Gaange', 'Mr. Reynolds', 'Nalin', 'Nolazir', 'Null', 'Nuro', 'Oalkwardner',\r\n  'Olive', 'Olivia', 'Oren', 'Quala', 'Ragnor', 'Rask', 'Retlad', 'Roldan', 'Rolomag', 'Sheriff Buckly',\r\n  'Sir Ignate', 'Sodran', 'Svelk', 'Talia', 'Teckleville', 'The Craxil', 'The Ghoul King', 'The Great Lich Lord',\r\n  'The Nightmare Tyrant', 'Theo', 'Trelik', 'Tulan', 'Ulivik', 'Vaughn', 'Velzix', 'Wessel', 'Zalan', 'Zalmora', 'Zuzu'];\r\n\r\n// This shuffles the arrays.\r\nconst shuffle = array =>\r\n  [...Array(array.length)]\r\n    .map((...args) => Math.floor(Math.random() * (args[1] + 1)))\r\n    .reduce((a, rv, i) => ([a[i], a[rv]] = [a[rv], a[i]]) && a, array);\r\n\r\n// Generates and saves arrays; ran only once.\r\nfunction makeArrays() {\r\n  state.mid = [];\r\n  state.end = [];\r\n  list = state.names.map(x => x.substring(1)); // Trim beginning.\r\n  list.forEach(addMid);\r\n}\r\n\r\nfunction addMid(seg) { // Generate array of possible mid-segments.\r\n  while (seg.length > 3) {\r\n    if (state.mid.indexOf(seg.substring(0, 4)) === -1) { state.mid.push(seg.substring(0, 4)) };\r\n    seg = seg.substring(1);\r\n  }\r\n  state.end.push(seg);\r\n}\r\n\r\nfunction synthName() {\r\n  var name_length = state.names[Math.floor(Math.random() * state.names.length)].length - 1;\r\n  var base = state.names[Math.floor(Math.random() * state.names.length)];\r\n  if (base.length < 3) { return Base; }\r\n  else {\r\n    var nomen = base.substring(0, 3);\r\n    while (nomen.length < name_length) {\r\n      mid = shuffle(state.mid).find(x => nomen.substring(nomen.length - 2, nomen.length) == x.substring(0, 2))\r\n      if (mid) { nomen += mid.substring(2); }\r\n      else { name_length = 0; } // No valid segments found, just skip ahead.\r\n    }\r\n    var end = shuffle(state.end).find(x => nomen.substring(nomen.length - 1, nomen.length) == x.substring(0, 1));\r\n    if (end) { nomen += end.substring(1); }\r\n    return nomen;\r\n  }\r\n}\r\n\r\nfunction nameReplace(text) {\r\n  if (!state.names_setup) { setupNamelist(); }\r\n  for (name of BADNAMES) {\r\n    if (text.includes(name)) { text = text.replace(name, synthName()); }\r\n  }\r\n  return text;\r\n}\r\n\r\n// This giant list is the list of names that this generator uses as examples to synthesize new names.\r\n// You can replace it with a more specific list, such as names from certain culture.\r\n// To work well, you need at least 100 names on the list.\r\nfunction setupNamelist() {\r\n  state.names_setup = true;\r\n  state.names = [\"Aby\", \"Aage\", \"Aakesh\", \"Aanon\", \"Aarlen\", \"Aaron\", \"Aart\", \"Aasta\", \"Abarden\", \"Abbathor\", \"Abbathorn\", \"Abraham\", \"Abryn\",\r\n    \"Abu\", \"Acadia\", \"Achard\", \"Acheron\", \"Achim\", \"Achlarg\", \"Ada\", \"Adair\", \"Adalbert\", \"Adanac\", \"Adario\", \"Adeisteen\", \"Adelaide\",\r\n    \"Adelin\", \"Adelot\", \"Adeen\", \"Aden\", \"Adena\", \"Aderyn\", \"Adeva\", \"Adger\", \"Adia\", \"Adin\", \"Adina\", \"Aditu\", \"Adlay\",\r\n    \"Adolf\", \"Adolmus\", \"Adoniram\", \"Adraeran\", \"Adriaan\", \"Adriel\", \"Adrienne\", \"Aedha\", \"Aeiran\", \"Ael\", \"Aelgifu\", \"Aelis\", \"Aerdrie\",\r\n    \"Aeriel\", \"Aerin\", \"Aeris\", \"Aeriss\", \"Aeron\", \"Aeru'in\", \"Aeruin\", \"Aethelweard\", \"Aethon\", \"Aethyr\", \"Afra\", \"Agate\", \"Agatha\",\r\n    \"Agathon\", \"Agathos\", \"Agenor\", \"Agidius\", \"Agnar\", \"Agora\", \"Agrias\", \"Aguidran\", \"Aguilla\", \"Ahanna\", \"Ahmre\", \"Aicha\", \"Aidan\",\r\n    \"Aidaron\", \"Aiden\", \"Aidred\", \"Aidro\", \"Aidwin\", \"Aifreda\", \"Aifrida\", \"Aiker\", \"Aikikia\", \"Aikman\", \"Ailcaer\", \"Aileen\", \"Ailric\",\r\n    \"Ailvar\", \"Aimee\", \"Aimo\", \"Aino\", \"Ainu\", \"Aipheus\", \"Airalyn\", \"Aircristir\", \"Airen\", \"Airis\", \"Airmid\", \"Aisha\", \"Aislinn\",\r\n    \"Aithne\", \"Aitken\", \"Akebia\", \"Aki\", \"Akira\", \"Aksel\", \"Al\", \"Aladan\", \"Aladar\", \"Aladdin\", \"Alain\", \"Alaine\", \"Alais\",\r\n    \"Alan\", \"Alana\", \"Alanson\", \"Alardan\", \"Alaric\", \"Alarion\", \"Alaris\", \"Alaron\", \"Alastair\", \"Alastrina\", \"Alastyr\", \"Albaral\", \"Alberich\",\r\n    \"Alberik\", \"Alberon\", \"Albert\", \"Alberta\", \"Albin\", \"Albion\", \"Albrecht\", \"Albright\", \"Alcan\", \"Alcina\", \"Alda\", \"Aldaren\", \"Aldegond\",\r\n    \"Alden\", \"Aldert\", \"Aldhelm\", \"Aldis\", \"Aldrich\", \"Aldridge\", \"Aldus\", \"Aldwerth\", \"Aldwin\", \"Aldwulf\", \"Alea\", \"Alec\", \"Alena\",\r\n    \"Alers\", \"Ales\", \"Alessandra\", \"Alexander\", \"Alexei\", \"Alf\", \"Alfdis\", \"Alfgeir\", \"Alfhid\", \"Alfons\", \"Alford\", \"Alfred\", \"Algernon\",\r\n    \"Algus\", \"Alhana\", \"Ali\", \"Alia\", \"Alicia\", \"Aliendre\", \"Alienor\", \"Alin\", \"Aline\", \"Alineric\", \"Alisbone\", \"Alison\", \"Alistair\",\r\n    \"Alister\", \"Allaire\", \"Allard\", \"Allart\", \"Allene\", \"Alliston\", \"Almas\", \"Almer\", \"Almira\", \"Almroth\", \"Almu\", \"Aloise\", \"Alor\",\r\n    \"Alora\", \"Alorosaz\", \"Aloysius\", \"Alphons\", \"Alrik\", \"Alsop\", \"Althalus\", \"Altin\", \"Alton\", \"Alured\", \"Alvan\", \"Alvey\", \"Alvina\",\r\n    \"Alvord\", \"Alvred\", \"Alwen\", \"Alwyn\", \"Alya\", \"Alyanna\", \"Alyce\", \"Alyssa\", \"Alyvia\", \"Ama\", \"Amadis\", \"Amain\", \"Amalina\",\r\n    \"Aman\", \"Amanfea\", \"Amar\", \"Amarah\", \"Amber\", \"Ambros\", \"Amelia\", \"Ames\", \"Amethyst\", \"Amilion\", \"Amin\", \"Amina\", \"Amineh\",\r\n    \"Ammdar\", \"Amschel\", \"Amundi\", \"Anandra\", \"Anastasia\", \"Anatol\", \"Anatolia\", \"Ancarion\", \"Ancelyn\", \"Anclaiar\", \"Ancla´ar\", \"Andara'an\", \"Andaraan\",\r\n    \"Andemon\", \"Andni\", \"Andolan\", \"Andre\", \"Andrei\", \"Andrew\", \"Andrus\", \"Aneurin\", \"Anfar\", \"Angelica\", \"Angelina\", \"Angharad\", \"Angheryn\",\r\n    \"Angmar\", \"Angus\", \"Anici\", \"Anigh\", \"Anika\", \"Anita\", \"Anitra\", \"Anlaf\", \"Anna\", \"Annion\", \"Annora\", \"Anouar\", \"Anseim\",\r\n    \"Ansel\", \"Anskar\", \"Anson\", \"Antal\", \"Antalya´ar\", \"Antares\", \"Antheirne\", \"Anton\", \"Antone\", \"Antony\", \"Antrim\", \"Anvar\", \"Anya\",\r\n    \"Anzie\", \"Apad\", \"April\", \"Apthorp\", \"Aquill\", \"Arabel\", \"Arabella\", \"Arabeth\", \"Aradan\", \"Aradh\", \"Aragon\", \"Aragorn\", \"Arakin\",\r\n    \"Aralik\", \"Aranel\", \"Arania\", \"Arathorn\", \"Aravis\", \"Arawn\", \"Arax\", \"Araz\", \"Archibald\", \"Arcarune\", \"Arctor\", \"Ardal\", \"Arden\",\r\n    \"Arder\", \"Ardesh\", \"Ardis\", \"Areagne\", \"Arell\", \"Areta\", \"Aretas\", \"Argethlam\", \"Argoeth\", \"Ari\", \"Aria\", \"Ariad\", \"Arian\",\r\n    \"Arianth\", \"Aribeth\", \"Aric\", \"Arid\", \"Ariel\", \"Aries\", \"Arilyn\", \"Arioch\", \"Arka\", \"Arkadia\", \"Arkron\", \"Arkwright\", \"Arlaith\",\r\n    \"Arlan\", \"Arlana\", \"Arlean\", \"Arleano\", \"Arlo\", \"Arlya\", \"Armand\", \"Armar\", \"Armin\", \"Armitage\", \"Armo\", \"Armod\", \"Arn\",\r\n    \"Arnbella\", \"Arnesen\", \"Arnfinn\", \"Arngrim\", \"Arni\", \"Arnlaug\", \"Arno\", \"Arnold\", \"Arnor\", \"Arnora\", \"Arnot\", \"Arnthora\", \"Arnuif\",\r\n    \"Arnulf\", \"Arnvid\", \"Aron\", \"Arrah\", \"Arronax\", \"Arshavir\", \"Arshel\", \"Artemis\", \"Artemus\", \"Arthol\", \"Arthryn\", \"Arthur\", \"Artnistead\",\r\n    \"Artreyu\", \"Artur\", \"Arun\", \"Arvid\", \"Arvida\", \"Arving\", \"Arvo\", \"Arwen\", \"Arwin\", \"Aryen\", \"Aryion\", \"Aryon\", \"Aryus\",\r\n    \"Arzamark\", \"Asa\", \"Asaf\", \"Aschar\", \"Asfrid\", \"Asgard\", \"Asger\", \"Asgerd\", \"Asgrim\", \"Ash\", \"Ashan\", \"Ashane\", \"Ashburton\",\r\n    \"Ashcar\", \"Ashdown\", \"Ashgaroth\", \"Ashley\", \"Ashlyn\", \"Ashne'e\", \"Ashnici\", \"Ashur\", \"Asiria\", \"Askew\", \"Askold\", \"Aslak\", \"Aslan\",\r\n    \"Asleif\", \"Aslior\", \"Asperon\", \"Asta\", \"Astar\", \"Astinus\", \"Astnid\", \"Astnild\", \"Astoiphe\", \"Astra\", \"Astraea\", \"Astran\", \"Astrid\",\r\n    \"Astrin\", \"Atazra\", \"Athabasca\", \"Athana\", \"Athol\", \"Atiaran\", \"Atli\", \"Atmeh\", \"Atreyu\", \"Atropos\", \"Atticus\", \"Attor\", \"Atul\",\r\n    \"Aturin\", \"Atyre\", \"Aubrey\", \"Aud\", \"Audrey\", \"Audrianna\", \"Audric\", \"August\", \"Augustus\", \"Aule\", \"Aulius\", \"Aun\", \"Aura\",\r\n    \"Aurian\", \"Auril\", \"Aurion\", \"Aurora\", \"Avall\", \"Avarath\", \"Avascaen\", \"Avedar\", \"Aveole\", \"Avery\", \"Avon\", \"Avril\", \"Axel\",\r\n    \"Aya\", \"Ayame\", \"Ayaron\", \"Ayarèn\", \"Ayin\", \"Ayir\", \"Aylin\", \"Aylmer\", \"Ayrie\", \"Azeal\", \"Azeezeh\", \"Azgoth\", \"Azhrarn\",\r\n    \"Aziz\", \"Azmodeus\", \"Azrean\", \"Azreck\", \"Azriaz\", \"Aztira\", \"Azure\", \"Azuth\", \"Baba\", \"Babacar\", \"Babrak\", \"Babrine\", \"Babylos\",\r\n    \"Baduk\", \"Baern\", \"Baeron\", \"Baervan\", \"Bag\", \"Bahamut\", \"Baird\", \"Bal\", \"Balain\", \"Baldor\", \"Baldrick\", \"Balduin\", \"Baldur\",\r\n    \"Baldwin\", \"Balendar\", \"Balfour\", \"Balin\", \"Baliol\", \"Ballard\", \"Balor\", \"Balthasard\", \"Balthazar\", \"Bandobras\", \"Bane\", \"Baraca\", \"Barahir\",\r\n    \"Barak\", \"Baralan\", \"Baravar\", \"Barbara\", \"Bardach\", \"Bardel\", \"Bardi\", \"Bardsley\", \"Bardwell\", \"Barend\", \"Barent\", \"Baring\", \"Barll\",\r\n    \"Barlo\", \"Barlow\", \"Barnabas\", \"Barnas\", \"Barnus\", \"Barr\", \"Barret\", \"Barron\", \"Barry\", \"Barstow\", \"Barthel\", \"Bartle\", \"Bartnel\",\r\n    \"Barton\", \"Baslayan\", \"Bayard\", \"Beams\", \"Beatrix\", \"Bechir\", \"Beck\", \"Bede\", \"Bedegran\", \"Begnus\", \"Beldaran\", \"Beldas\", \"Belerion\",\r\n    \"Belgarath\", \"Belgarion\", \"Belita\", \"Bella\", \"Belle\", \"Bellin\", \"Bellinus\", \"Belloc\", \"Belrene\", \"Beltane\", \"Belva\", \"Ben\", \"Benekander\",\r\n    \"Bengt\", \"Benita\", \"Benoist\", \"Beorn\", \"Beowulf\", \"Bera\", \"Bercan\", \"Berek\", \"Berem\", \"Beren\", \"Bergen\", \"Bergthor\", \"Berim\",\r\n    \"Bern\", \"Berna\", \"Bernhart\", \"Bernt\", \"Berronar\", \"Berryn\", \"Bersi\", \"Berta\", \"Bertil\", \"Bertilde\", \"Bertram\", \"Bertran\", \"Bertrem\",\r\n    \"Beryl\", \"Besma\", \"Bestagar\", \"Beth\", \"Bevil\", \"Beyash\", \"Beylard\", \"Bhimrao\", \"Bhoskar\", \"Bhupindar\", \"Bidwell\", \"Bilbo\", \"Bile\",\r\n    \"Bilmar\", \"Bindon\", \"Bion\", \"Bipin\", \"Birath\", \"Birbeck\", \"Birchard\", \"Birger\", \"Birgit\", \"Birket\", \"Bisuneh\", \"Bjarni\", \"Bjorn\",\r\n    \"Bjornstern\", \"Blackwood\", \"Blade\", \"Blaen\", \"Blair\", \"Blame\", \"Blasco\", \"Blaze\", \"Bledsoe\", \"Blenda\", \"Bleran\", \"Blount\", \"Blunyc\",\r\n    \"Bninna\", \"Bo\", \"Bodil\", \"Bodvar\", \"Bolthorn\", \"Boner\", \"Booker\", \"Boott\", \"Boris\", \"Bork\", \"Borlace\", \"Bormor\", \"Boromir\",\r\n    \"Bors\", \"Botho\", \"Botolf\", \"Bourke\", \"Bowie\", \"Boyd\", \"Bracca\", \"Brace\", \"Bracken\", \"Brand\", \"Brandec\", \"Brangwen\", \"Brann\",\r\n    \"Brannon\", \"Branwell\", \"Branwen\", \"Breanon\", \"Bremen\", \"Brenna\", \"Brenner\", \"Brent\", \"Bress\", \"Bretaine\", \"Breyugar\", \"Brianna\", \"Bridget\",\r\n    \"Brielle\", \"Brigantu\", \"Brighton\", \"Brinn\", \"Brion\", \"Bristan\", \"Brita\", \"Brithael\", \"Brock\", \"Brockden\", \"Brodhead\", \"Brodribb\", \"Brogan\",\r\n    \"Bron\", \"Brona\", \"Bronwyn\", \"Bror\", \"Broun\", \"Bruna\", \"Bruno\", \"Brunt\", \"Brynhild\", \"Brynit\", \"Bryoni\", \"Bunnvor\", \"Bupu\",\r\n    \"Burcan\", \"Buri\", \"Burkard\", \"Buzurg\", \"Byam\", \"Byblos\", \"Byre\", \"Byrna\", \"Byrne\", \"Bysshe\", \"Cabell\", \"Cabillo\", \"Caddor\",\r\n    \"Caden\", \"Cadfael\", \"Cadmar\", \"Cadrach\", \"Cadwallader\", \"Caecyn\", \"Cael\", \"Caelon\", \"Caer\", \"Cai\", \"Cail\", \"Cairn\", \"Caitlin\",\r\n    \"Caladon\", \"Calandria\", \"Calbraith\", \"Calder\", \"Cale\", \"Caleb\", \"Calera\", \"Caliban\", \"Callan\", \"Callcott\", \"Calmic\", \"Calrohir\", \"Calumn\",\r\n    \"Calvert\", \"Camber\", \"Cambree\", \"Camiya\", \"Canina\", \"Caprice\", \"Cardon\", \"Caramon\", \"Carelia\", \"Carey\", \"Caribou\", \"Caris\", \"Carl\",\r\n    \"Carless\", \"Carli\", \"Carlyle\", \"Caryne\", \"Caron\", \"Carsten\", \"Carvell\", \"Caryl\", \"Cashin\", \"Caspian\", \"Cassandra\", \"Cassaway\", \"Cathal\",\r\n    \"Catherine\", \"Cathla'in\", \"Cathlain\", \"Cathlin\", \"Cayl\", \"Caylin\", \"Cecilia\", \"Cecily\", \"Cedric\", \"Cedrick\", \"Cedrim\", \"Celadae\", \"Celebdil\",\r\n    \"Celeborn\", \"Celeren\", \"Celes\", \"Celeste\", \"Celestine\", \"Celia\", \"Celowen\", \"Cemark\", \"Ceomyr\", \"Ceowulf\", \"Cercyon\", \"Ceremon\", \"Cerimon\",\r\n    \"Cerindar\", \"Cermor\", \"Cernd\", \"Ceryx\", \"Cespar\", \"Cevir\", \"Ceylinn\", \"Chaka\", \"Chalfant\", \"Challen\", \"Chamon\", \"Chanti\", \"Chard\",\r\n    \"Charissa\", \"Charlene\", \"Charlotte\", \"Chauncey\", \"Chauntea\", \"Chavir\", \"Chaya\", \"Checotah\", \"Chevonne\", \"Chevran\", \"Chichester\", \"Chimaera\", \"Chiodwig\",\r\n    \"Chiron\", \"Chittenden\", \"Chloe\", \"Christopher\", \"Chronepsis\", \"Chronos\", \"Chrowder\", \"Chuz\", \"Cid\", \"Cilmar\", \"Cinerva\", \"Cirkin\", \"Civar\",\r\n    \"Claed\", \"Clafin\", \"Claire\", \"Clarinda\", \"Claudia\", \"Cleghorn\", \"Clerihew\", \"Clinch\", \"Clipster\", \"Clopton\", \"Cloud\", \"Clover\", \"Clovis\",\r\n    \"Cnud\", \"Cnut\", \"Coalter\", \"Cobryn\", \"Coddry\", \"Coel\", \"Coela\", \"Cohn\", \"Colden\", \"Colgan\", \"Colmen\", \"Colon\", \"Colwyn\",\r\n    \"Coma\", \"Conall\", \"Conan\", \"Congal\", \"Conlan\", \"Conn\", \"Connell\", \"Connidas\", \"Connon\", \"Connop\", \"Conor\", \"Conrad\", \"Constantius\",\r\n    \"Conwy\", \"Conyasal\", \"Coprates\", \"Cora\", \"Coral\", \"Corbin\", \"Corellon\", \"Coren\", \"Corin\", \"Corinne\", \"Corinth\", \"Cormac\", \"Cornelius\",\r\n    \"Corrowr\", \"Corry\", \"Corryn\", \"Corwin\", \"Cotton\", \"Cowan\", \"Cowden\", \"Cowper\", \"Coyan\", \"Craigh\", \"Cray\", \"Crewzel\", \"Creydah\",\r\n    \"Cronyn\", \"Croyble\", \"Crundall\", \"Crynal\", \"Crysania\", \"Cryshandylin\", \"Cryunnos\", \"Cuall\", \"Cuane\", \"Cuddry\", \"Cuhaid\", \"Culiross\", \"Culkin\",\r\n    \"Cullen\", \"Cullyn\", \"Cuthalion\", \"Cuthbert\", \"Cylarus\", \"Cylie\", \"Cylmar\", \"Cymbeline\", \"Cyndor\", \"Cynoril\", \"Cyria\", \"Cyriel\", \"Cyrilla\",\r\n    \"Cyrillus\", \"Cyrus\", \"Cyryl\", \"Cythnar\", \"Cyton\", \"Daburn\", \"Daen\", \"Dagar\", \"Dagda\", \"Dagmar\", \"Dagni\", \"Dagny\", \"Dagwyn\",\r\n    \"Dahil\", \"Daikkah\", \"Daila\", \"Daila'in\", \"Daimhin\", \"Daimon\", \"Daisy\", \"Dakamon\", \"Dakoda\", \"Dalamar\", \"Dall\", \"Dalla\", \"Dallandra\",\r\n    \"Dalziel\", \"Damar\", \"Damien\", \"Damon\", \"Dana\", \"Danforth\", \"Daniel\", \"Dannun\", \"Dannyn\", \"Danu\", \"Danuvius\", \"Daood\", \"Daphin\",\r\n    \"Dara\", \"Daragor\", \"Darandriel\", \"Darell\", \"Darien\", \"Dario\", \"Darius\", \"Darkash\", \"Darkboon\", \"Darkspur\", \"Darlis\", \"Daron\", \"Darrell\",\r\n    \"Darrin\", \"Darvin\", \"Daryan\", \"Dashiell\", \"Dashwood\", \"Dasyani\", \"Dathan\", \"Dathanja\", \"Daugas\", \"David\", \"Davnet\", \"Davros\", \"Dawn\",\r\n    \"Dayyan\", \"Dekteon\", \"Delevan\", \"Delita\", \"Dell\", \"Dellin\", \"Delmund\", \"Demarest\", \"Demi\", \"Deminar\", \"Demtris\", \"Denethor\", \"Denhain\",\r\n    \"Denor\", \"Denton\", \"Denzil\", \"Deogol\", \"Derfel\", \"Derian\", \"Dermaria\", \"Derran\", \"Derroll\", \"Derval\", \"Dervilia\", \"Desmona\", \"Devabriel\",\r\n    \"Devaron\", \"Deveron\", \"Devra\", \"Dexter\", \"Dhakos\", \"Dhan\", \"Dharijor\", \"Dholemtrix\", \"Dhur\", \"Diadra\", \"Diagur\", \"Dian\", \"Diarmud\",\r\n    \"Diderik\", \"Diehi\", \"Dighton\", \"Dillon\", \"Dimura\", \"Dinham\", \"Dinivan\", \"Dino\", \"Dionetta\", \"Diony\", \"Dirk\", \"Dirrach\", \"Divos\",\r\n    \"Djamal\", \"Dmitri\", \"Doak\", \"Dolman\", \"Dolyan\", \"Domnu\", \"Donagh\", \"Donal\", \"Donblas\", \"Dongal\", \"Doniol\", \"Donivesh\", \"Donovan\",\r\n    \"Doral\", \"Dorea\", \"Dorian\", \"Dorin\", \"Dorn\", \"Dornhnall\", \"Dorr\", \"Dorsan\", \"Dorvai\", \"Dotta\", \"Doud\", \"Dougal\", \"Doust\",\r\n    \"Draco\", \"Dragan\", \"Dragus\", \"Dragutin\", \"Draka\", \"Drake\", \"Drako\", \"Dran\", \"Draoi\", \"Draven\", \"Drax\", \"Drayko\", \"Dred\",\r\n    \"Dreed\", \"Drexel\", \"Drezael\", \"Drezaem\", \"Drin\", \"Drinda\", \"Drion\", \"Drusilla\", \"Drynn\", \"Dréagg\", \"Duain\", \"Duald\", \"Duana\",\r\n    \"Duer\", \"Dugal\", \"Dugald\", \"Dugdale\", \"Dulasiri\", \"Dumathoin\", \"Dunbar\", \"Dundas\", \"Dunglas\", \"Dunnabar\", \"Dunstan\", \"Dunwody\", \"Duny\",\r\n    \"Dunya\", \"Dur-Shuk\", \"Duran\", \"Durek\", \"Durin\", \"Durnik\", \"Durward\", \"Dwarkanath\", \"Dweomer\", \"Dwyer\", \"Dyce\", \"Dyer\", \"Dygardo\",\r\n    \"Dyke\", \"Dylan\", \"Dymphna\", \"Dynar\", \"Dyneley\", \"Dynera\", \"Dynie\", \"Dytan\", \"Dyvim\", \"E'thane\", \"Eadweard\", \"Eager\", \"Eamon\",\r\n    \"Eanger\", \"Eardley\", \"Earle\", \"Earnest\", \"Eastman\", \"Ebany\", \"Ebba\", \"Eberhard\", \"Ebony\", \"Echael\", \"Eckert\", \"Eckhard\", \"Ector\",\r\n    \"Edcyl\", \"Edda\", \"Edeva\", \"Edgar\", \"Edina\", \"Edla\", \"Edmond\", \"Edmondstone\", \"Edric\", \"Edrie\", \"Edson\", \"Eduard\", \"Edwin\",\r\n    \"Edwina\", \"Edwyn\", \"Eevin\", \"Efiath\", \"Efrem\", \"Egan\", \"Egbert\", \"Egerton\", \"Egil\", \"Egon\", \"Egron\", \"Ehlreth\", \"Ehrman\",\r\n    \"Eilhard\", \"Eilif\", \"Eilinud\", \"Einar\", \"Eindrini\", \"Eirech\", \"Eirik\", \"Eiron\", \"Eithne\", \"Eivind\", \"Ekaterina\", \"Elaine\", \"Elath\",\r\n    \"Elbert\", \"Eldath\", \"Eldavon\", \"Eldgrim\", \"Eldid\", \"Eldin\", \"Eldon\", \"Eldred\", \"Eldric\", \"Eldrin\", \"Eldron\", \"Eldìvèn\", \"Eleanor\",\r\n    \"Eleazar\", \"Electa\", \"Elelil\", \"Elena\", \"Elendil\", \"Eleno'in\", \"Elentari\", \"Elerion\", \"Elessar\", \"Elfnida\", \"Elfnide\", \"Elfnieda\", \"Elford\",\r\n    \"Elhanan\", \"Eliakini\", \"Eliard\", \"Elinor\", \"Elion\", \"Eliseth\", \"Elispeth\", \"Elisseer\", \"Elistan\", \"Eliwood\", \"Elizabeth\", \"Ella\", \"Ellanath\",\r\n    \"Ellen\", \"Ellin\", \"Ellingwood\", \"Ellydryr\", \"Ellynor\", \"Elmeric\", \"Elmira\", \"Eloisa\", \"Elora\", \"Elowen\", \"Elrad\", \"Elric\", \"Elrik\",\r\n    \"Elrodin\", \"Elron\", \"Elrond\", \"Elsa\", \"Elsbeth\", \"Elsdon\", \"Elspeth\", \"Elswyth\", \"Elton\", \"Elu\", \"Elva\", \"Elvalind\", \"Elvarion\",\r\n    \"Elvin\", \"Elvina\", \"Elvira\", \"Elvrit\", \"Elvérion\", \"Elwell\", \"Elwin\", \"Elwyn\", \"Elysia\", \"Emberyl\", \"Emerynn\", \"Emirah\", \"Emma\",\r\n    \"Emna\", \"Emory\", \"Endemian\", \"Endicott\", \"Endoray\", \"Endrede\", \"Endsor\", \"Engeihard\", \"Enigma\", \"Enn\", \"Ennorath\", \"Envi\", \"Enzoray\",\r\n    \"Eolair\", \"Eomer\", \"Eosin\", \"Eowyn\", \"Ephyre\", \"Erana\", \"Erard\", \"Ercan\", \"Erdmann\", \"Erebor\", \"Ergon\", \"Erian\", \"Eric\",\r\n    \"Erich\", \"Erie\", \"Erik\", \"Erika\", \"Erilyth\", \"Erland\", \"Erlend\", \"Erling\", \"Ernald\", \"Ernan\", \"Ernata\", \"Errine\", \"Ervin\",\r\n    \"Eryka\", \"Eryn\", \"Esghar\", \"Eslin\", \"Esmeralda\", \"Esmond\", \"Esnar\", \"Essa\", \"Esselin\", \"Estheria\", \"Estrella\", \"Etelka\", \"Ethelbearn\",\r\n    \"Ethelbert\", \"Ethelburga\", \"Ethelred\", \"Ethelreda\", \"Eudo\", \"Eugene\", \"Eulala\", \"Evadne\", \"Evaine\", \"Evald\", \"Evan\", \"Evarts\", \"Evelina\",\r\n    \"Evelyn\", \"Everard\", \"Evert\", \"Evind\", \"Evo\", \"Evolyn\", \"Evska\", \"Ewald\", \"Ewen\", \"Ewugan\", \"Eystein\", \"Eyulf\", \"Eyvind\",\r\n    \"Ezail\", \"Ezellohar\", \"Ezirith\", \"Ezme\", \"Ezrabar\", \"Ezri\", \"Faber\", \"Fabian\", \"Fael\", \"Faelyn\", \"Fahs\", \"Fairfax\", \"Fairtnan\",\r\n    \"Falathar\", \"Falcon\", \"Falgar\", \"Fali\", \"Falias\", \"Falkiner\", \"Falmalinnar\", \"Falyrias\", \"Fanchon\", \"Fangorn\", \"Fanshaw\", \"Faraday\", \"Farah\",\r\n    \"Farale\", \"Faramir\", \"Faran\", \"Farathar\", \"Farid\", \"Farith\", \"Farli\", \"Farnham\", \"Farouk\", \"Farquhar\", \"Farrin\", \"Farwehl\", \"Fatima\",\r\n    \"Fausto\", \"Fawn\", \"Faysal\", \"Fea\", \"Feargus\", \"Fedor\", \"Feike\", \"Felam\", \"Felladin\", \"Fellador\", \"Fellathor\", \"Fellow\", \"Fenella\",\r\n    \"Fenton\", \"Fenwick\", \"Fera\", \"Ferantay\", \"Ferazhin\", \"Ferdinand\", \"Fergus\", \"Fernand\", \"Feron\", \"Feustmann\", \"Fhinders\", \"Fhorgeir\", \"Fiana\",\r\n    \"Fiathna\", \"Fielding\", \"Fikir\", \"Filippe\", \"Finarfin\", \"Finbar\", \"Findegil\", \"Findley\", \"Finegan\", \"Fingal\", \"Fingalla\", \"Fingil\", \"Finias\",\r\n    \"Finn\", \"Finnbogi\", \"Finos\", \"Fiona\", \"Fiorag\", \"Fiori\", \"Firca\", \"Firin\", \"Firon\", \"Firozhan\", \"Fistandantilus\", \"Fistar\", \"Fistor\",\r\n    \"Fitzedward\", \"Fitzroy\", \"Fizban\", \"Fjolnir\", \"Flandrena\", \"Flare\", \"Flavius\", \"Flint\", \"Floki\", \"Florimund\", \"Flosi\", \"Flygare\", \"Flynn\",\r\n    \"Fnida\", \"Fomorii\", \"Forbus\", \"Forester\", \"Fornost\", \"Foronte\", \"Fothergill\", \"Francisco\", \"Frayja\", \"Freda\", \"Frederic\", \"Frederica\", \"Frederick\",\r\n    \"Fredrick\", \"Fredrik\", \"Freeborn\", \"Freeman\", \"Frey\", \"Freya\", \"Freydis\", \"Fridgeir\", \"Frodo\", \"Fryniwyd\", \"Fuad\", \"Fumorak\", \"Furnifold\",\r\n    \"Fury\", \"Fyodor\", \"Fyodr\", \"Fyza\", \"Gaarn\", \"Gabniela\", \"Gabriel\", \"Gadsby\", \"Gaea\", \"Gael\", \"Gaelinar\", \"Gaena\", \"Gaerdal\",\r\n    \"Gaillard\", \"Gairdner\", \"Galach\", \"Galadren\", \"Galan\", \"Galanna\", \"Galapas\", \"Galaphon\", \"Galar\", \"Galbard\", \"Galderon\", \"Galdor\", \"Gale\",\r\n    \"Galeia\", \"Galen\", \"Galfrey\", \"Galion\", \"Galrandar\", \"Galrion\", \"Gama\", \"Gandalf\", \"Ganduil\", \"Ganith\", \"Gannon\", \"Ganvan\", \"Gardi\",\r\n    \"Garet\", \"Gareth\", \"Garion\", \"Garith\", \"Garl\", \"Garland\", \"Garlenon\", \"Garn\", \"Garon\", \"Garrick\", \"Garrott\", \"Garth\", \"Gartnas\",\r\n    \"Garvin\", \"Garwood\", \"Gaston\", \"Gavendra\", \"Gavin\", \"Gavina\", \"Gawain\", \"Gealsgiath\", \"Gebhard\", \"Geir\", \"Geirmund\", \"Geirstein\", \"Gelonna\",\r\n    \"Genevieve\", \"Geoffrey\", \"Georgii\", \"Gerald\", \"Gerard\", \"Gerd\", \"Gerhard\", \"Gerhart\", \"Gerloc\", \"Gerrard\", \"Gerreint\", \"Gerrish\", \"Gertrude\",\r\n    \"Gervaise\", \"Gesin\", \"Gest\", \"Ghirra\", \"Ghislain\", \"Gholson\", \"Gia\", \"Gibbon\", \"Gilberta\", \"Gilda\", \"Gilden\", \"Gildersleeve\", \"Giles\",\r\n    \"Gilfanon\", \"Gilian\", \"Gilir\", \"Gilli\", \"Gillion\", \"Gillyn\", \"Gilm\", \"Gilraen\", \"Gilthanas\", \"Gimli\", \"Gird\", \"Girin\", \"Gisgin\",\r\n    \"Gizur\", \"Gladstone\", \"Glassford\", \"Glebur\", \"Gleda\", \"Gleocyn\", \"Gleridower\", \"Glida\", \"Glogan\", \"Gloisur\", \"Glorfindel\", \"Glugwyn\", \"Glum\",\r\n    \"Glyn\", \"Glynn\", \"Gnazia\", \"Godfred\", \"Godfrey\", \"Godwin\", \"Goibhniu\", \"Golding\", \"Goldwin\", \"Gollum\", \"Gongalo\", \"Goodhue\", \"Gorbash\",\r\n    \"Gordalius\", \"Gorias\", \"Gorion\", \"Gorm\", \"Gotthard\", \"Govier\", \"Govind\", \"Gowen\", \"Grace\", \"Graham\", \"Graine\", \"Gralon\", \"Grani\",\r\n    \"Grania\", \"Gravin\", \"Greegan\", \"Greenleaf\", \"Gregor\", \"Gregory\", \"Grendahl\", \"Greyfell\", \"Grian\", \"Gridley\", \"Griffid\", \"Griffin\", \"Griffith\",\r\n    \"Griggs\", \"Grim\", \"Grima\", \"Grimhilda\", \"Grimnir\", \"Grindan\", \"Griniing\", \"Grisha\", \"Griswold\", \"Groa\", \"Grover\", \"Grunak\", \"Grunnhild\",\r\n    \"Gruumsh\", \"Gualat\", \"Gudmund\", \"Gudmundur\", \"Gudrid\", \"Gudris\", \"Gudrun\", \"Guibert\", \"Guida\", \"Guido\", \"Gulian\", \"Gunila\", \"Gunnar\",\r\n    \"Gunning\", \"Gunther\", \"Gurnarok\", \"Gurney\", \"Gustav\", \"Guthorm\", \"Guthrie\", \"Guthum\", \"Gutzon\", \"Guy\", \"Gwacyn\", \"Gwaihir\", \"Gweddyn\",\r\n    \"Gwen\", \"Gwenca\", \"Gwenda\", \"Gwendolyn\", \"Gwenevere\", \"Gweniver\", \"Gwildor\", \"Gwoc\", \"Gwomyr\", \"Gwydion\", \"Gwyn\", \"Gwyneth\", \"Gwynfryd\",\r\n    \"Gwyran\", \"Gwythinn\", \"Gyda\", \"Gylian\", \"Gymir\", \"Haakon\", \"Habib\", \"Hablot\", \"Hack\", \"Haddon\", \"Hadrian\", \"Haestan\", \"Hafez\",\r\n    \"Hafgrim\", \"Hagar\", \"Haigh\", \"Hakatri\", \"Haki\", \"Hakon\", \"Halbert\", \"Halcyon\", \"Haldane\", \"Haldor\", \"Hale\", \"Halfdan\", \"Haliina\",\r\n    \"Hall\", \"Halldis\", \"Halldor\", \"Halley\", \"Hallfred\", \"Hallfrid\", \"Hallgerd\", \"Hallkel\", \"Hallock\", \"Halloweii\", \"Hallveig\", \"Halvord\", \"Hamlin\",\r\n    \"Hamnet\", \"Hanford\", \"Hani\", \"Haninah\", \"Hannibal\", \"Hanoran\", \"Hansine\", \"Hapweth\", \"Harald\", \"Harbaugh\", \"Harcourt\", \"Hardernan\", \"Hardon\",\r\n    \"Hardwicke\", \"Harek\", \"Harkness\", \"Harlan\", \"Harlo\", \"Harold\", \"Haroon\", \"Harpo\", \"Harren\", \"Harthan\", \"Harthran\", \"Hartpole\", \"Hartwig\",\r\n    \"Harwood\", \"Hasket\", \"Hassan\", \"Hastein\", \"Hatcher\", \"Hattrick\", \"Hauk\", \"Havard\", \"Havelock\", \"Hayvan\", \"Hazard\", \"Hazel\", \"Haziran\",\r\n    \"Hazrond\", \"Healdon\", \"Heardred\", \"Heaslip\", \"Heather\", \"Hector\", \"Hedda\", \"Hedin\", \"Hedwig\", \"Heimer\", \"Helena\", \"Helga\", \"Helgi\",\r\n    \"Helir\", \"Helix\", \"Helm\", \"Helma\", \"Helmi\", \"Heman\", \"Hemming\", \"Hendrik\", \"Hengist\", \"Henna\", \"Henrick\", \"Henry\", \"Geramon\",\r\n    \"Herdis\", \"Herekin\", \"Hereward\", \"Herijar\", \"Hermione\", \"Heron\", \"Hertha\", \"Heryom\", \"Herzog\", \"Heward\", \"Hhaba'id\", \"Hhabezur\", \"Hickling\",\r\n    \"Hidohebhi\", \"Hifryn\", \"Hild\", \"Hilda\", \"Hildebrand\", \"Hildegarde\", \"Hildric\", \"Himli\", \"Hisar\", \"Hislop\", \"Hjalmar\", \"Hjalti\", \"Hjeldin\",\r\n    \"Hjort\", \"Hjorth\", \"Hlif\", \"Hoadley\", \"Hoar\", \"Hobart\", \"Hodgdon\", \"Hogg\", \"Hogni\", \"Holbrook\", \"Holger\", \"Holgi\", \"Hollister\",\r\n    \"Holly\", \"Homli\", \"Hookham\", \"Horan\", \"Horatio\", \"Hord\", \"Horik\", \"Hormstein\", \"Horsa\", \"Hortensia\", \"Horton\", \"Hoskuld\", \"Hosni\",\r\n    \"Hossein\", \"Howarth\", \"Howland\", \"Hrafn\", \"Hrapp\", \"Hrefna\", \"Hrethel\", \"Hring\", \"Hroald\", \"Hrodyn\", \"Hrolf\", \"Hrothgar\", \"Hrugan\",\r\n    \"Hruggek\", \"Hruse\", \"Hrut\", \"Huffatn\", \"Hulbeart\", \"Hulda\", \"Hultz\", \"Humbert\", \"Hunter\", \"Hurd\", \"Hurgal\", \"Hurvin\", \"Hussain\",\r\n    \"Hustana\", \"Hyarantar\", \"Hyarante\", \"Hyder\", \"Hyfryn\", \"Hygelac\", \"Hylissa\", \"Hynman\", \"Hyrak\", \"Ian\", \"Iana\", \"Ibitz\", \"Ibrahim\",\r\n    \"Ibrandul\", \"Ica\", \"Icarus\", \"Icava\", \"Ick\", \"Ida\", \"Idarolan\", \"Iden\", \"Idris\", \"Iduna\", \"Iduné\", \"Ies'lorn\", \"Igjaru\",\r\n    \"Igor\", \"Ikarin\", \"Ilena\", \"Ilermath\", \"Ilia\", \"Iliriya\", \"Illentik\", \"Illuin\", \"Illyana\", \"Ilmare\", \"Ilniora\", \"Ilthoss\", \"Iluvatar\",\r\n    \"Ilya\", \"Ilyesha\", \"Imajin\", \"Imnar\", \"Imoen\", \"Imphela\", \"Imrador\", \"Imrahan\", \"Imrahim\", \"Imril\", \"Imryr\", \"Inahwen\", \"Indech\",\r\n    \"Indigo\", \"Indira\", \"Indreju\", \"Indria\", \"Ingald\", \"Ingeborg\", \"Ingen\", \"Ingi\", \"Ingirid\", \"Ingolf\", \"Ingram\", \"Ingrid\", \"Ingunn\",\r\n    \"Inifael\", \"Inigo\", \"Inisfa'il\", \"Iosaz\", \"Iosef\", \"Irgash\", \"Irial\", \"Irian\", \"Iris\", \"Irma\", \"Irphilin\", \"Irsai\", \"Irvin\",\r\n    \"Irwick\", \"Isael\", \"Isak\", \"Isambard\", \"Isbeorn\", \"Iscal\", \"Iselore\", \"Isengard\", \"Isengrim\", \"Iserion\", \"Isgrimnur\", \"Ishmael\", \"Isidora\",\r\n    \"Isiki\", \"Isildur\", \"Isilith\", \"Isleif\", \"Ismail\", \"Isolde\", \"Isorn\", \"Issak\", \"Ithaca\", \"Iuz\", \"Ivan\", \"Ivar\", \"Ivor\",\r\n    \"Ivy\", \"Iwanda\", \"Iyu'nigato\", \"Izard\", \"Izebel\", \"Izvire\", \"Jace\", \"Jacinth\", \"Jacoby\", \"Jacor\", \"Jade\", \"Jaden\", \"Jadzia\",\r\n    \"Jael\", \"Jaffar\", \"Jagadis\", \"Jaheira\", \"Jahrec\", \"Jahverbhai\", \"Jalasil\", \"Jalavier\", \"Jaligal\", \"Jamila\", \"Janda'nan\", \"Jandanan\", \"Janix\",\r\n    \"Janna\", \"Janus\", \"Janvel\", \"Jarak\", \"Jarazal\", \"Jared\", \"Jarek\", \"Jarnagua\", \"Jarriel\", \"Jarvin\", \"Jasara\", \"Jasek\", \"Jaseve\",\r\n    \"Jasha\", \"Jasmine\", \"Jason\", \"Javair\", \"Javon\", \"Jawaharial\", \"Jayce\", \"Jayden\", \"Jaylidan\", \"Jayna\", \"Jaysen\", \"Jazhara\", \"Jazrel\",\r\n    \"Jedd\", \"Jeffen\", \"Jehryn\", \"Jelyn\", \"Jenantar\", \"Jenkin\", \"Jennifer\", \"Jens\", \"Jensine\", \"Jephson\", \"Jerec\", \"Jeryth\", \"Jesiper\",\r\n    \"Jespar\", \"Jesslyn\", \"Jestyn\", \"Jethis\", \"Jevan\", \"Jevist\", \"Jezryanadar\", \"Jhael\", \"Jhaelen\", \"Jhany\", \"Jhardamòr\", \"Jharkor\", \"Jhary\",\r\n    \"Jihad\", \"Jillian\", \"Jingizu\", \"Jintah\", \"Jiriki\", \"Jirnost\", \"Jocelyn\", \"Jochan\", \"Johannes\", \"John\", \"Jolan\", \"Jomano\", \"Jonaya\",\r\n    \"Joran\", \"Jordan\", \"Joriel\", \"Jornadesh\", \"Jorunn\", \"Joscelyn\", \"Joseph\", \"Josephine\", \"Josette\", \"Joshua\", \"Jotham\", \"Jovena\", \"Jubini\",\r\n    \"Jullana\", \"Junius\", \"Juno\", \"Juntalin\", \"Jura\", \"Jurim\", \"Jusif\", \"Juss\", \"Jyresh\", \"K'aarna\", \"Kaarna\", \"Kael\", \"Kaelin\",\r\n    \"Kaffa\", \"Kai\", \"Kaia\", \"Kailyn\", \"Kaimana\", \"Kaitlinn\", \"Kaja\", \"Kalan\", \"Kalantir\", \"Kalar\", \"Kaldar\", \"Kaleen\", \"Kalen\",\r\n    \"Kalf\", \"Kalia\", \"Kalina\", \"Kalvan\", \"Kalvaro\", \"Kalyra\", \"Kalysha\", \"Kamril\", \"Kamshir\", \"Kanoa\", \"Kaori\", \"Kaprin\", \"Kara\",\r\n    \"Karali\", \"Karel\", \"Karelia\", \"Kari\", \"Karim\", \"Karinca\", \"Karine\", \"Karis\", \"Karitsa\", \"Karker\", \"Karl\", \"Karlsefni\", \"Karran\",\r\n    \"Karya\", \"Kaschak\", \"Kasia\", \"Kaspar\", \"Kasreyn\", \"Kathena\", \"Kathran\", \"Katishimo\", \"Katla\", \"Katnina\", \"Katrin\", \"Katrina\", \"Kavalam\",\r\n    \"Kavalnir\", \"Kaylianna\", \"Kaylin\", \"Kazairl\", \"Kazalim\", \"Kazir\", \"Keavy\", \"Keelan\", \"Kegan\", \"Keiko\", \"Keldorn\", \"Kelin\", \"Kellin\",\r\n    \"Kelma'in\", \"Kelson\", \"Kelth\", \"Kelvin\", \"Kemble\", \"Kendall\", \"Kendra\", \"Kendrick\", \"Kenesaw\", \"Kenin\", \"Kenny\", \"Kenobi\", \"Kenrick\",\r\n    \"Kerik\", \"Kerish\", \"Kermit\", \"Kerrigan\", \"Keshar\", \"Kesrick\", \"Kethios\", \"Ketial\", \"Ketil\", \"Kettali\", \"Kevan\", \"Keven\", \"Kevlin\",\r\n    \"Keyrnon\", \"Khader\", \"Khalia\", \"Khalid\", \"Khanzadian\", \"Kharas\", \"Khealynn\", \"Khelben\", \"Kheldor\", \"Khelen\", \"Khelin\", \"Khelyn\", \"Khendraja'aro\",\r\n    \"Khenel\", \"Khezeed\", \"Khindawe\", \"Khirsha\", \"Khlor\", \"Khris\", \"Khyved\", \"Ki'ushapo\", \"Kian\", \"Kiborno\", \"Kiera\", \"Kieran\", \"Kikkasut\",\r\n    \"Kilas\", \"Kilian\", \"Killion\", \"Kimmuriel\", \"Kimura\", \"Kinloch\", \"Kinson\", \"Kippler\", \"Kira\", \"Kiri\", \"Kirjava\", \"Kirk\", \"Kirren\",\r\n    \"Kirsopp\", \"Kirsten\", \"Kishin\", \"Kisin\", \"Kitiara\", \"Kjeldor\", \"Kjindar\", \"Klaus\", \"Klean\", \"Klerak\", \"Knud\", \"Knut\", \"Knute\",\r\n    \"Koabon\", \"Kolbein\", \"Kolchash\", \"Kolskegg\", \"Kolya\", \"Kona\", \"Konrad\", \"Konstantine\", \"Korban\", \"Kord\", \"Koreth\", \"Korgan\", \"Korm\",\r\n    \"Kormar\", \"Kornag\", \"Korska\", \"Kosh\", \"Kota\", \"Kovelir\", \"Krinn\", \"Krishnalai\", \"Kroh\", \"Krom\", \"Kronos\", \"Kuno\", \"Kurd\",\r\n    \"Kurn\", \"Kurt\", \"Kurin\", \"Kuros\", \"Kurtulmak\", \"Ky'ishi\", \"Ky'varan\", \"Kyle\", \"Kylindra\", \"Kypros\", \"Kyrie\", \"Kyriel\", \"La'ahl\",\r\n    \"Lachesis\", \"Lachian\", \"Ladia\", \"Ladoros\", \"Laeli\", \"Laelia\", \"Laerrui\", \"Lahar\", \"Lahsai\", \"Lalely\", \"Lamar\", \"Lambi\", \"Lan\",\r\n    \"Lana\", \"Lance\", \"Lancelot\", \"Landailyn\", \"Landoris\", \"Landrea\", \"Laneth\", \"Langhorne\", \"Langrian\", \"Langston\", \"Lanthal\", \"Lanthorn\", \"Larad\",\r\n    \"Lardner\", \"Larisa\", \"Larkin\", \"Larn\", \"Larnea\", \"Lars\", \"Larz\", \"Lashar\", \"Lateia\", \"Lathander\", \"Laurana\", \"Laurelin\", \"Laxton\",\r\n    \"Lazar\", \"Lazlo\", \"Lea\", \"Leareth\", \"Leathian\", \"Lec\", \"Ledyard\", \"Leela\", \"Legolas\", \"Legrand\", \"Leif\", \"Leighton\", \"Leika\",\r\n    \"Leila\", \"Leilah\", \"Leli\", \"Lembar\", \"Lenka\", \"Lenox\", \"Leo\", \"Leofric\", \"Leon\", \"Leonard\", \"Leonardo\", \"Leopond\", \"Lesesne\",\r\n    \"Lestyn\", \"Leta\", \"Letor\", \"Lev\", \"Lewellyri\", \"Lexan\", \"Lexx\", \"Lhuc\", \"Lia\", \"Liana\", \"Liena\", \"Lightfoot\", \"Liliane\",\r\n    \"Lilin\", \"Lina\", \"Lindar\", \"Linmer\", \"Linnea\", \"Lios\", \"Liphar\", \"Lippard\", \"Liptrot\", \"Lirith\", \"Lithar\", \"Littleton\", \"Livermore\",\r\n    \"Livia\", \"Ljot\", \"Ljotolf\", \"Lluth\", \"Llyn\", \"Llythin\", \"Lobelia\", \"Lobryn\", \"Lobur\", \"Locke\", \"Lockwood\", \"Loddlaen\", \"Lodica\",\r\n    \"Lodin\", \"Loella\", \"Logan\", \"Loibur\", \"Loili\", \"Lola\", \"Lonvan\", \"Lore\", \"Loric\", \"Lorin\", \"Lormyr\", \"Lothar\", \"Lothrop\",\r\n    \"Lott\", \"Lotta\", \"Loudon\", \"Louisa\", \"Lovegood\", \"Lovva\", \"Lovyan\", \"Luas\", \"Lucan\", \"Lucca\", \"Lucia\", \"Lucian\", \"Lucinda\",\r\n    \"Lucius\", \"Lucrecia\", \"Ludmila\", \"Luella\", \"Lufkin\", \"Lugh\", \"Luhsane\", \"Lum\", \"Lumbar\", \"Luna\", \"Lunar\", \"Lunetta\", \"Lupin\",\r\n    \"Lurican\", \"Lurue\", \"Luscan\", \"Luther\", \"Luthian\", \"Luvina\", \"Lycias\", \"Lydia\", \"Lylas\", \"Lyle\", \"Lymo\", \"Lyndall\", \"Lyndon\",\r\n    \"Lynette\", \"Lynis\", \"Lynn\", \"Lypilla\", \"Lyra\", \"Lyrian\", \"Lyrin\", \"Lyron\", \"Lysander\", \"Lyssa\", \"Lythia\", \"Lythian\", \"Lytler\",\r\n    \"Lyzandra\", \"Lyzette\", \"Lórien\", \"Mabon\", \"Macallan\", \"Macaulay\", \"Macer\", \"Mackim\", \"Macvey\", \"Maddern\", \"Maddock\", \"Madelon\", \"Madhao\",\r\n    \"Madora\", \"Maec\", \"Maegwin\", \"Mael\", \"Maerraent\", \"Mafka\", \"Magda\", \"Magh\", \"Magill\", \"Magna\", \"Magnus\", \"Magus\", \"Mahion\",\r\n    \"Mahmud\", \"Mahri\", \"Maia\", \"Maidah\", \"Maidak\", \"Maihar\", \"Makoma\", \"Malach\", \"Malachias\", \"Maladack\", \"Malador\", \"Malak\", \"Malar\",\r\n    \"Malcoff\", \"Malcolm\", \"Malfar\", \"Malia\", \"Maliforin\", \"Malkil\", \"Malto\", \"Malvin\", \"Malvtha\", \"Mama\", \"Mamba\", \"Mana\", \"Manala\",\r\n    \"Manaverr\", \"Manfred\", \"Mankey\", \"Mannin\", \"Manon\", \"Mansour\", \"Manton\", \"Manwe\", \"Maoll\", \"March\", \"Marcus\", \"Marena\", \"Margarita\",\r\n    \"Margery\", \"Mariandor\", \"Marid\", \"Marina\", \"Marion\", \"Marissa\", \"Marisse\", \"Mark\", \"Markham\", \"Maroof\", \"Marques\", \"Marsden\", \"Marshtnan\",\r\n    \"Marsineh\", \"Marta\", \"Martin\", \"Martus\", \"Mary\", \"Maryn\", \"Mathilda\", \"Mathilde\", \"Matilda\", \"Matthew\", \"Matthias\", \"Maudlin\", \"Maura\",\r\n    \"Mavis\", \"Maxander\", \"Maxfield\", \"Maximilian\", \"Maximus\", \"Maya\", \"Mayhew\", \"Mazrak\", \"Medar\", \"Medart\", \"Medea\", \"Meder\", \"Medrom\",\r\n    \"Megan\", \"Meghnad\", \"Mehmet\", \"Mekeesha\", \"Melba\", \"Melchior\", \"Meleri\", \"Meliadoul\", \"Melian\", \"Melisande\", \"Melkor\", \"Mellyora\", \"Melnyth\",\r\n    \"Melora\", \"Melva\", \"Melvaig\", \"Memor\", \"Men\", \"Menard\", \"Mendolin\", \"Menelvagor\", \"Mennefer\", \"Meoran\", \"Mephistopheles\", \"Merah\", \"Merasye\",\r\n    \"Meredith\", \"Meriadoc\", \"Merifa\", \"Merivan\", \"Merlin\", \"Merrilee\", \"Merryn\", \"Mervyn\", \"Merwold\", \"Merwolf\", \"Mes'ard\", \"Meta\", \"Methos\",\r\n    \"Methuen\", \"Michael\", \"Michel\", \"Mideya\", \"Midhat\", \"Midra\", \"Mignon\", \"Miguel\", \"Mikhail\", \"Mila\", \"Milada\", \"Milander\", \"Milandro\",\r\n    \"Mileaha\", \"Millard\", \"Milo\", \"Mimir\", \"Mina\", \"Minella\", \"Miner\", \"Minna\", \"Minx\", \"Mira\", \"Miragon\", \"Miranda\", \"Mirandros\",\r\n    \"Miriel\", \"Mirrash\", \"Mirromi\", \"Miryam\", \"Misha\", \"Mishanti\", \"Misin\", \"Mist\", \"Mithrandir\", \"Mithryl\", \"Mitre\", \"Miwa\", \"Mizra\",\r\n    \"Moda\", \"Modeus\", \"Moffett\", \"Mohammed\", \"Mohieddin\", \"Moina\", \"Moira\", \"Moiriane\", \"Moisur\", \"Molina\", \"Mona\", \"Monach\", \"Montfort\",\r\n    \"Mora\", \"Moradin\", \"Mord\", \"Moredlin\", \"Morgan\", \"Morgon\", \"Morgwin\", \"Moriana\", \"Morik\", \"Morin\", \"Morley\", \"Morna\", \"Morpheus\",\r\n    \"Morrigan\", \"Mortos\", \"Mortrock\", \"Morven\", \"Moya\", \"Muammar\", \"Mubur\", \"Muhammed\", \"Muhlwena\", \"Mujibur\", \"Muktar\", \"Munin\", \"Murdo\",\r\n    \"Murias\", \"Murina\", \"Murrough\", \"Mussa\", \"Mustadio\", \"Mustafa\", \"Mylin\", \"Mylé\", \"Myna\", \"Myra\", \"Myriam\", \"Myrick\", \"Myrmeen\",\r\n    \"Myrna\", \"Myron\", \"Myrrdyn\", \"Myrrha\", \"Myshella\", \"Mythil\", \"Myvor\", \"N'hadha\", \"Nada\", \"Nadezhda\", \"Nadia\", \"Nadir\", \"Nagai\",\r\n    \"Nagel\", \"Nagvar\", \"Nahar\", \"Naia\", \"Naidel\", \"Najib\", \"Nakea\", \"Nalia\", \"Nall\", \"Nanorion\", \"Naois\", \"Naomi\", \"Napollo\",\r\n    \"Narasen\", \"Narcista\", \"Narisa\", \"Narvi\", \"Nasir\", \"Nasser\", \"Natalia\", \"Natasha\", \"Nathalia\", \"Nathalie\", \"Natty\", \"Nazar\", \"Nebron\",\r\n    \"Nedda\", \"Nedstar\", \"Neelix\", \"Negley\", \"Nemm\", \"Nemuel\", \"Neral\", \"Neri\", \"Nerian\", \"Nerilka\", \"Nerissa\", \"Nerull\", \"Nesbit\",\r\n    \"Nesta\", \"Nethuan\", \"Neva\", \"Nevaeh\", \"Nevard\", \"Nevena\", \"Nevile\", \"Nevyn\", \"Newall\", \"Newbold\", \"Newman\", \"Neysa\", \"Neza\",\r\n    \"Nibbidard\", \"Nichol\", \"Nicor\", \"Nienna\", \"Night\", \"Nigil\", \"Nikolai\", \"Nikua\", \"Nila\", \"Nimir\", \"Nimrodel\", \"Nina\", \"Ninian\",\r\n    \"Niomir\", \"Nira'in\", \"Nirnir\", \"Nita\", \"Nivek\", \"Nivilian\", \"Nizam\", \"Nizar\", \"Nobanion\", \"Nodaran\", \"Noela\", \"Nolan\", \"Nona\",\r\n    \"Noora\", \"Nor\", \"Nordri\", \"Noreen\", \"Norine\", \"Norle\", \"Norna\", \"Norval\", \"Norvin\", \"Norwood\", \"Nova\", \"Novalis\", \"Novita\",\r\n    \"Novomira\", \"Nu'endo\", \"Nuada\", \"Nuadi\", \"Nuala\", \"Nuale\", \"Nuanni\", \"Nungo\", \"Nunila\", \"Nura\", \"Nurdoch\", \"Nurgan\", \"Nuri\",\r\n    \"Nushia\", \"Nyassa\", \"Nylan\", \"Nymara\", \"Nynaeve\", \"Nyra\", \"Nytasa\", \"Oakes\", \"Oalyn\", \"Obed\", \"Oberon\", \"Ocar\", \"Oda\",\r\n    \"Odar\", \"Odd\", \"Oden\", \"Odilia\", \"Odimus\", \"Odo\", \"Odona\", \"Ofeig\", \"Ogden\", \"Oghma\", \"Ogma\", \"Ogmund\", \"Ogrus\",\r\n    \"Okander\", \"Olac\", \"Olaf\", \"Oldac\", \"Oldham\", \"Olga\", \"Olissa\", \"Olof\", \"Olorin\", \"Oloru\", \"Olvir\", \"Olya\", \"Omandras\",\r\n    \"Omar\", \"Omassus\", \"Ombrum\", \"Omer\", \"Onslow\", \"Onufrio\", \"Onund\", \"Onyx\", \"Ooma\", \"Oona\", \"Oonai\", \"Opal\", \"Ophelia\",\r\n    \"Orah\", \"Orcrist\", \"Ordway\", \"Oriana\", \"Orin\", \"Orion\", \"Orius\", \"Orivaen\", \"Orlandu\", \"Orlata\", \"Orm\", \"Ormsby\", \"Orome\",\r\n    \"Oron\", \"Orren\", \"Orridge\", \"Orsola\", \"Orson\", \"Osa\", \"Osiris\", \"Oskavar\", \"Ospar\", \"Osric\", \"Oswin\", \"Othello\", \"Othilia\",\r\n    \"Otho\", \"Othran\", \"Otiluke\", \"Otkel\", \"Otrygg\", \"Ottar\", \"Ottilia\", \"Otto\", \"Overton\", \"Owain\", \"Owen\", \"Owyn\", \"Ozatras\",\r\n    \"Ozto\", \"Ozur\", \"Padraic\", \"Padrias\", \"Paget\", \"Pala\", \"Palma\", \"Pamar\", \"Pan\", \"Parbha\", \"Pargascor\", \"Parr\", \"Pasca\",\r\n    \"Paschal\", \"Passmore\", \"Patnas\", \"Pattabhai\", \"Pavel\", \"Pean\", \"Pearl\", \"Pearsall\", \"Peffer\", \"Peiham\", \"Peitar\", \"Peleg\", \"Pelipi\",\r\n    \"Pellin\", \"Pendleton\", \"Penfield\", \"Pengolod\", \"Penhallow\", \"Penniman\", \"Penrhyn\", \"Pepperell\", \"Pereban\", \"Peredon\", \"Peregrin\", \"Peregrine\", \"Perith\",\r\n    \"Peronn\", \"Perrin\", \"Persifor\", \"Pestivar\", \"Peter\", \"Pethros\", \"Petra\", \"Petrea\", \"Petronella\", \"Pflarr\", \"Phanuel\", \"Pharatnond\", \"Pharcellus\",\r\n    \"Phelim\", \"Philo\", \"Philpot\", \"Phimister\", \"Phoenix\", \"Phyrrus\", \"Pia\", \"Picar\", \"Pickman\", \"Pigot\", \"Pike\", \"Pine\", \"Pinkham\",\r\n    \"Pinkney\", \"Pinkstone\", \"Piotr\", \"Pittheus\", \"Plaisted\", \"Plunimer\", \"Plunkett\", \"Polassar\", \"Pollard\", \"Pollock\", \"Polonius\", \"Polycarp\", \"Pomeroy\",\r\n    \"Porthios\", \"Powell\", \"Prafulla\", \"Prendergast\", \"Preston\", \"Prichard\", \"Proctor\", \"Prospero\", \"Provida\", \"Psilofyr\", \"Puck\", \"Pue\", \"Pulisk\",\r\n    \"Pulteney\", \"Purdon\", \"Pyke\", \"Pyros\", \"Pysander\", \"Quaan\", \"Quagel\", \"Qualin\", \"Quan\", \"Quarles\", \"Quasar\", \"Quascar\", \"Quass\",\r\n    \"Quebba\", \"Quelfinas\", \"Quesan\", \"Queygo\", \"Quiddle\", \"Quinn\", \"Quiss\", \"Quixano\", \"Quora\", \"Quvar\", \"Quvean\", \"Raagon\", \"Raban\",\r\n    \"Rabind\", \"Rabur\", \"Rach\", \"Rachid\", \"Rackafel\", \"Rackhir\", \"Radagast\", \"Radija\", \"Rae\", \"Rael\", \"Raen\", \"Rafa\", \"Rafael\",\r\n    \"Rafur\", \"Ragen\", \"Ragna\", \"Ragnal\", \"Ragnar\", \"Ragnhild\", \"Rahaz\", \"Rai\", \"Raikes\", \"Rails\", \"Raimon\", \"Raina\", \"Raine\",\r\n    \"Raisa\", \"Raistlin\", \"Ralina\", \"Ralmanor\", \"Ralph\", \"Ramen\", \"Ramli\", \"Ramman\", \"Ramona\", \"Ramora\", \"Ramous\", \"Ramza\", \"Ranald\",\r\n    \"Ranath\", \"Rancor\", \"Rand\", \"Randar\", \"Randoer\", \"Randolf\", \"Randor\", \"Ranfurly\", \"Ranjan\", \"Rankin\", \"Rannuif\", \"Rannveig\", \"Raphael\",\r\n    \"Rary\", \"Rashiel\", \"Rasputin\", \"Rathack\", \"Rathanos\", \"Rathgar\", \"Rattray\", \"Rauros\", \"Ravenor\", \"Ravi\", \"Rayne\", \"Razamor\", \"Raziel\",\r\n    \"Razzan\", \"Rebecca\", \"Recoun\", \"Redcliffe\", \"Regalorn\", \"Regnar\", \"Reina\", \"Reis\", \"Relm\", \"Rem\", \"Remi\", \"Remnor\", \"Remus\",\r\n    \"Renar\", \"Renata\", \"Rendel\", \"Rengoll\", \"Reoc\", \"Resha\", \"Rethral\", \"Reva\", \"Rex\", \"Reyna\", \"Rezah\", \"Rhadry\", \"Rhaederle\",\r\n    \"Rhaeryn\", \"Rhea\", \"Rhiannon\", \"Rhiow\", \"Rhodhy\", \"Rhona\", \"Rhonda\", \"Rhora\", \"Rhorleif\", \"Rhorvald\", \"Rhundas\", \"Rhymer\", \"Rhynn\",\r\n    \"Rhys\", \"Riallus\", \"Riamon\", \"Rickard\", \"Ricyn\", \"Rigolio\", \"Rilir\", \"Rinaldus\", \"Ringgold\", \"Risaya\", \"Riss\", \"Rith\", \"Riven\",\r\n    \"Roach\", \"Roark\", \"Rockhill\", \"Rodefer\", \"Roderic\", \"Rodhan\", \"Rognvald\", \"Roignar\", \"Roland\", \"Rolf\", \"Rollo\", \"Roman\", \"Romelia\",\r\n    \"Romer\", \"Romney\", \"Ronan\", \"Root\", \"Rorik\", \"Rosalyn\", \"Rosamund\", \"Roscoe\", \"Rose\", \"Rosefyre\", \"Roseline\", \"Roshena\", \"Rosskeen\",\r\n    \"Roundell\", \"Rowena\", \"Ruadan\", \"Ruan\", \"Rubar\", \"Ruben\", \"Rubrick\", \"Ruby\", \"Rucker\", \"Rudyard\", \"Rufina\", \"Rufus\", \"Ruggles\",\r\n    \"Ruhollah\", \"Ruinar\", \"Rulian\", \"Rulinian\", \"Rumil\", \"Runa\", \"Runold\", \"Runolf\", \"Runus\", \"Rurik\", \"Rusgar\", \"Ruth\", \"Rutland\",\r\n    \"Ruwen\", \"Ryana\", \"Rycaro\", \"Rychanna\", \"Rygar\", \"Ryll\", \"Rylla\", \"Rynnyn\", \"Ryodan\", \"Ryoga\", \"Ryoka\", \"Saalem\", \"Sabal\",\r\n    \"Sabhel\", \"Sabriel\", \"Sabrok\", \"Sacheverall\", \"Sackville\", \"Saddam\", \"Sadler\", \"Sador\", \"Saedd\", \"Saermund\", \"Saeunn\", \"Safrin\", \"Saia\",\r\n    \"Said\", \"Saifai\", \"Saiwyn\", \"Salina\", \"Salmon\", \"Salter\", \"Sam\", \"Sambrea\", \"Samia\", \"Samira\", \"Sammel\", \"Samuel\", \"Sanfrid\",\r\n    \"Sano'rye\", \"Sanoreya\", \"Sanoria\", \"Sarcyn\", \"Sardior\", \"Sardul\", \"Sarel\", \"Sarevok\", \"Sargonus\", \"Saria\", \"Sarina\", \"Sarisin\", \"Sariya\",\r\n    \"Sarrask\", \"Saruman\", \"Sasha\", \"Saska\", \"Saturn\", \"Sauron\", \"Savah\", \"Savion\", \"Sawdon\", \"Sayan\", \"Scenesefa\", \"Scudamore\", \"Scythe\",\r\n    \"Sebastian\", \"Sebrinth\", \"Sechier\", \"Sedgely\", \"Seersha\", \"Segojan\", \"Sehanine\", \"Seitarin\", \"Selema\", \"Selena\", \"Selene\", \"Selig\", \"Selim\",\r\n    \"Selina\", \"Selis\", \"Selith\", \"Selune\", \"Selwyn\", \"Semuta\", \"Senith\", \"Senna\", \"Sephia\", \"Sephya\", \"Sepiroth\", \"Seramir\", \"Seraphina\",\r\n    \"Serena\", \"Serenyi\", \"Sergei\", \"Seriozha\", \"Seryan\", \"Seryl\", \"Seryth\", \"Seth\", \"Sethron\", \"Sevadia\", \"Severin\", \"Sevros\", \"Sevy\",\r\n    \"Sha'dar\", \"Sha'rell\", \"Shackerley\", \"Shadizad\", \"Shadrach\", \"Shadworth\", \"Shaera\", \"Shaivar\", \"Shaivir\", \"Shala\", \"Shalamar\", \"Shalandain\", \"Shalat\",\r\n    \"Shalhassan\", \"Shalindra\", \"Shalon\", \"Shalpan\", \"Shamane\", \"Shamir\", \"Shana\", \"Shandalar\", \"Shanell\", \"Shar\", \"Sharada\", \"Sharaq\", \"Shard\",\r\n    \"Sharif\", \"Sharilla\", \"Sharl\", \"Sharla\", \"Sharmaine\", \"Sharman\", \"Sharna\", \"Sharnira\", \"Sharra\", \"Sharteel\", \"Shaundra\", \"Sharyn\", \"Shayera\",\r\n    \"Shayla\", \"Shayll\", \"Shayonea\", \"Shea\", \"Sheegoth\", \"Sheeryl\", \"Sheherazad\", \"Shemsin\", \"Sheridan\", \"Sherif\", \"Sherry\", \"Shezael\", \"Shima'onari\",\r\n    \"Shintaro\", \"Shiza\", \"Shuinn\", \"Shuna\", \"Shurakai\", \"Shurik\", \"Shushila\", \"Shylock\", \"Siandar\", \"Sibert\", \"Sibyl\", \"Sidhe\", \"Siglinde\",\r\n    \"Sigmund\", \"Signe\", \"Sigred\", \"Sigrid\", \"Sigtrydd\", \"Sigurd\", \"Sigvaldi\", \"Silatasar\", \"Silius\", \"Silma\", \"Silmariel\", \"Silphane\", \"Silvain\",\r\n    \"Silvan\", \"Silvanus\", \"Silvera\", \"Silveron\", \"Silvia\", \"Silvyn\", \"Simir\", \"Simmu\", \"Sinbad\", \"Sindarin\", \"Sinir\", \"Sinjin\", \"Siranush\",\r\n    \"Sirisir\", \"Sirli'in\", \"Sirona\", \"Sirranon\", \"Sirwin\", \"Sisimar\", \"Siski\", \"Sivesh\", \"Siveth\", \"Siward\", \"Sjerdi\", \"Skamkel\", \"Skelmar\",\r\n    \"Skorian\", \"Slade\", \"Slania\", \"Slater\", \"Slava\", \"Sligh\", \"Slingsby\", \"Smedley\", \"Snargg\", \"Snorri\", \"Snyder\", \"Sodorn\", \"Soilir\",\r\n    \"Soisil\", \"Sokki\", \"Solaris\", \"Solera\", \"Solevig\", \"Solmund\", \"Solomon\", \"Solvi\", \"Sonnet\", \"Sooth\", \"Sora\", \"Sorass\", \"Sorcha\",\r\n    \"Sorin\", \"Sornovas\", \"Soth\", \"Southall\", \"Sovaz\", \"Soveh\", \"Soyadi\", \"Sparrow\", \"Sprigg\", \"Squall\", \"Srass\", \"Stabyl\", \"Stanwood\",\r\n    \"Starkad\", \"Starke\", \"Stedman\", \"Stefan\", \"Stehman\", \"Stein\", \"Steinkel\", \"Steinthor\", \"Stelectra\", \"Stenger\", \"Stenwulf\", \"Steponas\", \"Sterndale\",\r\n    \"Stetson\", \"Stetter\", \"Stiliman\", \"Stilingfleet\", \"Stopford\", \"Storm\", \"Stowna\", \"Strachan\", \"Straygoth\", \"Stroud\", \"Strudwick\", \"Strybyorn\", \"Strykar\",\r\n    \"Sturla\", \"Sturm\", \"Styx\", \"Sudeha\", \"Suleiman\", \"Sulimo\", \"Sulkas\", \"Sumarlidi\", \"Suras\", \"Surridge\", \"Susin\", \"Susur\", \"Sutan\",\r\n    \"Svala\", \"Svan\", \"Svante\", \"Svatopluk\", \"Sveata\", \"Sven\", \"Swain\", \"Swartwout\", \"Sydnor\", \"Syllva\", \"Sylvane\", \"Sylvia\", \"Sylvin\",\r\n    \"Sylvine\", \"Syndarra\", \"Synnyn\", \"Syranita\", \"Syrioll\", \"Tabar\", \"Tabitha\", \"Tabor\", \"Tabu\", \"Tacey\", \"Tachel\", \"Tadashi\", \"Tadeus\",\r\n    \"Tadia\", \"Tadisha\", \"Tadra\", \"Taennyn\", \"Taeynnyn\", \"Taggart\", \"Tahir\", \"Tailabar\", \"Taina\", \"Takhisis\", \"Taleen\", \"Talen\", \"Taleth\",\r\n    \"Talia\", \"Taliesin\", \"Talin\", \"Talmora\", \"Talobar\", \"Talona\", \"Taloxi\", \"Taltos\", \"Talus\", \"Tamar\", \"Tamara\", \"Tameryn\", \"Tamias\",\r\n    \"Tamlin\", \"Tamoreya\", \"Tanina\", \"Tanis\", \"Tanith\", \"Tanyc\", \"Tar\", \"Tara\", \"Taran\", \"Tarcia\", \"Taria\", \"Tarik\", \"Taromas\",\r\n    \"Taron\", \"Tarran\", \"Taryn\", \"Tas\", \"Tasharra\", \"Tasker\", \"Tatyana\", \"Taurus\", \"Taveli\", \"Taylian\", \"Taylin\", \"Tedra\", \"Tegan\",\r\n    \"Tekia\", \"Telena\", \"Tell\", \"Tench\", \"Tenna\", \"Tenser\", \"Teoddry\", \"Ter\", \"Teralyn\", \"Teressa\", \"Terix\", \"Teruah\", \"Tesin\",\r\n    \"Tesla\", \"Tessa\", \"Tevran\", \"Thaal\", \"Thacker\", \"Thaddeus\", \"Thaki\", \"Thal\", \"Thalen\", \"Thalessa\", \"Thalia\", \"Thalna\", \"Tham\",\r\n    \"Thana\", \"Thane\", \"Thanatos\", \"Thantos\", \"Thar\", \"Tharbad\", \"Tharkesh\", \"Tharn\", \"Thax\", \"Thecla\", \"Theda\", \"Theleb\", \"Theoden\",\r\n    \"Theodor\", \"Theodoric\", \"Theodosia\", \"Theodric\", \"Theoric\", \"Thera\", \"Therad\", \"Theresa\", \"Therios\", \"Theros\", \"Thesius\", \"Thieras\", \"Thieryn\",\r\n    \"Thingyr\", \"Thio\", \"Tholan\", \"Thomas\", \"Thomulor\", \"Thora\", \"Thoran\", \"Thorarin\", \"Thorburn\", \"Thord\", \"Thordarson\", \"Thordis\", \"Thorfel\",\r\n    \"Thorfinn\", \"Thorfinna\", \"Thorgeir\", \"Thorgerd\", \"Thorgest\", \"Thorgils\", \"Thorgrim\", \"Thorgunna\", \"Thorhall\", \"Thorhalla\", \"Thorhild\", \"Thorin\", \"Thorir\",\r\n    \"Thorkatla\", \"Thorkell\", \"Thorkild\", \"Thormod\", \"Thormodr\", \"Thormond\", \"Thorn\", \"Thorndike\", \"Thornwell\", \"Thorold\", \"Thorolf\", \"Thorsager\", \"Thorstein\",\r\n    \"Thorunn\", \"Thorvald\", \"Thorvaldur\", \"Thorvar\", \"Thorzyl\", \"Thoth\", \"Thrain\", \"Thrand\", \"Throck\", \"Thule\", \"Thurid\", \"Thylda\", \"Thyra\",\r\n    \"Thyri\", \"Thyrza\", \"Thyssa\", \"Tiana\", \"Tiffany\", \"Tihan\", \"Tika\", \"Tilford\", \"Tilica\", \"Tilir\", \"Tillinghast\", \"Tilloch\", \"Timon\",\r\n    \"Tioniel\", \"Tirion\", \"Tisha\", \"Tisheri\", \"Titania\", \"Titia\", \"Titiana\", \"Tivernee\", \"Tiyagar\", \"Tnin\", \"Tobias\", \"Tobis\", \"Todhunter\",\r\n    \"Tolbert\", \"Tolenka\", \"Topaz\", \"Topham\", \"Torc\", \"Tortbold\", \"Tosti\", \"Tosya\", \"Toulac\", \"Tovi\", \"Trafford\", \"Trebor\", \"Trelane\",\r\n    \"Trelawny\", \"Trella\", \"Trevel\", \"Trick\", \"Trigg\", \"Trill\", \"Triona\", \"Trir\", \"Tristam\", \"Tristan\", \"Trost\", \"Trotwood\", \"Trowbridge\",\r\n    \"Truesdell\", \"Tuane\", \"Tufnell\", \"Tugan\", \"Tuilleth\", \"Tulio\", \"Tulkas\", \"Tundine\", \"Tunstall\", \"Tuor\", \"Turan\", \"Turgoz\", \"Turhan\",\r\n    \"Turin\", \"Turpin\", \"Tuttle\", \"Tuula\", \"Twyla\", \"Tylden\", \"Tyldoran\", \"Tylen\", \"Tylien\", \"Tylynn\", \"Tymar\", \"Tymora\", \"Tymoriel\",\r\n    \"Tynnyn\", \"Tyr\", \"Tyra\", \"Tyranina\", \"Tyreen\", \"Tyrwhitt\", \"Uamian\", \"Ubriani\", \"Ucarsh\", \"Uda\", \"Uhier\", \"Uhlain\", \"Uhlume\",\r\n    \"Uholedil\", \"Uinen\", \"Ula\", \"Ulf\", \"Ulgor\", \"Ulis\", \"Uljas\", \"Ulji\", \"Ulmaerr\", \"Ulmo\", \"Ulosh\", \"Ulric\", \"Ulrich\",\r\n    \"Ultron\", \"Umaiar\", \"Umbar\", \"Umda\", \"Umgalad\", \"Una\", \"Uneitna\", \"Ungon\", \"Unius\", \"Unn\", \"Unrak\", \"Unwin\", \"Upal\",\r\n    \"Upton\", \"Urabi\", \"Urania\", \"Uranos\", \"Uranus\", \"Uriel\", \"Urish\", \"Urokoz\", \"Ursula\", \"Usher\", \"Uta\", \"Utumno\", \"Uusoae\",\r\n    \"Uvanimor\", \"Uziel\", \"Vabryn\", \"Vadarin\", \"Vadi\", \"Vaeddyn\", \"Vagn\", \"Vai\", \"Val\", \"Valadan\", \"Valandario\", \"Valandor\", \"Valarindi\",\r\n    \"Valborg\", \"Valda\", \"Valdain\", \"Valdemar\", \"Valen\", \"Valenka\", \"Valentia\", \"Valerand\", \"Valeria\", \"Valerian\", \"Valeska\", \"Valgar\", \"Valgard\",\r\n    \"Valgerd\", \"Valiah\", \"Valion\", \"Valisa\", \"Valiss\", \"Valistor\", \"Valkor\", \"Valla\", \"Vallo\", \"Valmar\", \"Valminder\", \"Valor\", \"Valsera\",\r\n    \"Valurian\", \"Valya\", \"Valynard\", \"Vandrad\", \"Vane\", \"Vanechka\", \"Vanidor\", \"Vanion\", \"Vannevar\", \"Vannyn\", \"Vanya\", \"Vanyar\", \"Vanyel\",\r\n    \"Varda\", \"Vardis\", \"Varina\", \"Varion\", \"Varken\", \"Varnum\", \"Vasava\", \"Vash\", \"Vasha\", \"Vasilii\", \"Vasin\", \"Vaydin\", \"Vaydir\",\r\n    \"Vayi\", \"Vecna\", \"Veda\", \"Veldahar\", \"Veldan\", \"Velex\", \"Velior\", \"Venable\", \"Vendor\", \"Veorcyn\", \"Vercyn\", \"Verdina\", \"Vereesa\",\r\n    \"Verline\", \"Vermund\", \"Verna\", \"Ves\", \"Vespar\", \"Vestein\", \"Veva\", \"Vevina\", \"Vexter\", \"Viasta\", \"Vicarr\", \"Vicat\", \"Vicentia\",\r\n    \"Viconia\", \"Victor\", \"Vida\", \"Vidkun\", \"Vidron\", \"Vieno\", \"Viera\", \"Vierna\", \"Vigdis\", \"Vigfus\", \"Vilhelm\", \"Vilka\", \"Vilrna\",\r\n    \"Vinatta\", \"Vincas\", \"Vincent\", \"Vintar\", \"Violet\", \"Vircyn\", \"Vishali\", \"Viveka\", \"Vladimir\", \"Vladislav\", \"Vlaric\", \"Vobur\", \"Voirath\",\r\n    \"Vokos\", \"Voldor\", \"Volkan\", \"Volney\", \"Volodya\", \"Volund\", \"Vonya\", \"Voranor\", \"Vrashin\", \"Vulpen\", \"Vurog\", \"Vusil\", \"Vyecheslav\",\r\n    \"Vyner\", \"Wadleigh\", \"Waenwryht\", \"Wager\", \"Waisham\", \"Waivan\", \"Wakeman\", \"Wakkar\", \"Walborg\", \"Walda\", \"Waldan\", \"Waldegrave\", \"Waldemar\",\r\n    \"Waleran\", \"Walford\", \"Walid\", \"Walker\", \"Wanhim\", \"Waring\", \"Wariv\", \"Wark\", \"Warne\", \"Warrender\", \"Warrigel\", \"Warwick\", \"Waryk\",\r\n    \"Watson\", \"Watt\", \"Waylan\", \"Wayland\", \"Waylon\", \"Wealin\", \"Wedlake\", \"Weilborn\", \"Weiryn\", \"Wel\", \"Wemick\", \"Wendolyn\", \"Wertha\",\r\n    \"Westcott\", \"Westen\", \"Weyrn\", \"Wharrom\", \"Whitwell\", \"Whyte\", \"Wicca\", \"Wideman\", \"Wightman\", \"Wildhair\", \"Wilfrid\", \"Wilhelm\", \"Wilhelmina\",\r\n    \"Wilibald\", \"Will\", \"Willa\", \"William\", \"Willock\", \"Willow\", \"Wilma\", \"Wilmar\", \"Wilner\", \"Wilven\", \"Windham\", \"Winfrey\", \"Winian\",\r\n    \"Winslow\", \"Winton\", \"Wisp\", \"Wisuth\", \"Wivianne\", \"Wizlow\", \"Woart\", \"Wodan\", \"Wolfgang\", \"Wolmar\", \"Womal\", \"Woodfin\", \"Woodruff\",\r\n    \"Wooligar\", \"Wortley\", \"Wotan\", \"Wulf\", \"Wulfgar\", \"Wulfric\", \"Wulgar\", \"Wychnor\", \"Wycliffe\", \"Wyllows\", \"Wyly\", \"Wynkyn\", \"Wynne\",\r\n    \"Wynston\", \"Wyvan\", \"Xaandria\", \"Xaath\", \"Xabian\", \"Xabiel\", \"Xabu\", \"Xain\", \"Xalthan\", \"Xan\", \"Xanaphel\", \"Xanathar\", \"Xander\",\r\n    \"Xandra\", \"Xandria\", \"Xanthon\", \"Xanthus\", \"Xarek\", \"Xarolith\", \"Xaver\", \"Xavier\", \"Xavin\", \"Xela\", \"Xelmonth\", \"Xena\", \"Xenia\",\r\n    \"Xenoba\", \"Xera\", \"Xercon\", \"Xerravin\", \"Xiombarg\", \"Xoncarg\", \"Xoran\", \"Xulan\", \"Xyas\", \"Xydra\", \"Xyko\", \"Xylah\", \"Xylia\",\r\n    \"Xymoya\", \"Xystus\", \"Xythrin\", \"Xytrin\", \"Yacima\", \"Yaheira\", \"Yahira\", \"Yaigin\", \"Yakov\", \"Yalan\", \"Yali\", \"Yalin\", \"Yalniz\",\r\n    \"Yamari\", \"Yana\", \"Yandell\", \"Yangin\", \"Yanira\", \"Yannul\", \"Yara\", \"Yaraia\", \"Yarali\", \"Yardim\", \"Yardley\", \"Yari\", \"Yarim\",\r\n    \"Yarin\", \"Yarir\", \"Yaritza\", \"Yartrina\", \"Yasimina\", \"Yasir\", \"Yasmina\", \"Yasser\", \"Yastar\", \"Yatay\", \"Yavana\", \"Yazihane\", \"Yelain\",\r\n    \"Yeni\", \"Yetne\", \"Yevgenii\", \"Yezade\", \"Ygerna\", \"Ygraine\", \"Yishana\", \"Ynryc\", \"Ynvar\", \"Yoda\", \"Yolanda\", \"Yondalla\", \"York\",\r\n    \"Yradry\", \"Yreoddyn\", \"Yrrkoon\", \"Yrsa\", \"Yrun\", \"Yryllyn\", \"Ysabel\", \"Ysgerryn\", \"Ysolde\", \"Yuri\", \"Yvain\", \"Yvette\", \"Yvonne\",\r\n    \"Yvyr\", \"Yénisar\", \"Yérusha\", \"Zabdiel\", \"Zacarias\", \"Zachary\", \"Zachris\", \"Zadock\", \"Zahara\", \"Zahra\", \"Zaidh\", \"Zalazar\", \"Zalbar\",\r\n    \"Zan\", \"Zandra\", \"Zanifa\", \"Zanthar\", \"Zara\", \"Zaranthe\", \"Zared\", \"Zarimarth\", \"Zarquan\", \"Zathras\", \"Zavel\", \"Zaviv\", \"Zay\",\r\n    \"Zazumel\", \"Zebalane\", \"Zebulon\", \"Zehir\", \"Zelda\", \"Zemenar\", \"Zenda\", \"Zendrac\", \"Zenith\", \"Zenobia\", \"Zenon\", \"Zepher\", \"Zephyr\",\r\n    \"Zerika\", \"Zerin\", \"Zeswick\", \"Zhalore\", \"Zhanna\", \"Zharvek\", \"Zhenya\", \"Zhirek\", \"Zhirem\", \"Zhoreb\", \"Zia\", \"Zigmal\", \"Zilar\",\r\n    \"Zinaida\", \"Zincir\", \"Zion\", \"Ziona\", \"Zircon\", \"Zirzihin\", \"Zita\", \"Zoe\", \"Zolabar\", \"Zoltan\", \"Zona\", \"Zora\", \"Zorashad\",\r\n    \"Zorayas\", \"Zorlan\", \"Zosia\", \"Zotar\", \"Zumurrud\", \"Zurrog\", \"Zykhiralamshad\"];\r\n  makeArrays();\r\n}",
                        "onModelContext": "const modifier = (text) => {\r\n\r\n  if (state.shouldStop) {\r\n    state.shouldStop = false;\r\n    stop = true;\r\n  }\r\n\r\n  /*********************/\r\n  /* RPGMech by Gnurro */\r\n  /*********************/\r\n  if (state.enableRpg) {\r\n    if (state.RPGstate.XP >= 100) {\r\n      state.RPGstate.XP -= 100\r\n      state.stats.statPoints += 1\r\n      state.skillPoints += 10\r\n      displayStatsUpdate(['Level up', 'Points added!', 'yellow'])\r\n    } else {\r\n      displayStatsUpdate(['Level up', ''])\r\n    }\r\n\r\n    if (state.stats.statPoints > 0 || state.skillPoints > 0) {\r\n      displayStatsUpdate(['You have unspent points! Open the menus to the right', '--->', 'red'])\r\n    } else {\r\n      displayStatsUpdate(['You have unspent points! Open the menus to the right'])\r\n    }\r\n\r\n    if (miscConfig.showXP) {\r\n      displayStatsUpdate(['XP', state.RPGstate.XP, 'green'])\r\n    }\r\n\r\n    if (info.actionCount > 1 && state.inputBot) {\r\n      RPGmechsLog(info?.inputEvaluation)\r\n      let botOutput = info?.inputEvaluation\r\n      RPGmechsLog(`Bot output: ${botOutput}`)\r\n\r\n      chkStat = info?.inputEvaluation[statConfig.botOutputs.stat]\r\n      chkDC = info?.inputEvaluation[statConfig.botOutputs.dc]\r\n      chkCuz = info?.inputEvaluation[statConfig.botOutputs.cuz]\r\n\r\n      RPGmechsLog(`chkStat: ${chkStat}`)\r\n      RPGmechsLog(`chkDC: ${chkDC}`)\r\n      RPGmechsLog(`chkCuz: ${chkCuz}`)\r\n\r\n      if (chkStat == null) {\r\n        chkStat = 'unknown'\r\n      } else if (!typeof (statConfig.statList[chkStat]) === 'undefined') {\r\n        RPGmechsLog(`DCbot got creative and said this is ${chkStat}, but that isn't a configured stat - setting it to 'unknown' for processing.`)\r\n        chkStat = 'unknown'\r\n      }\r\n\r\n      if (chkDC == null) {\r\n        chkDC = 0\r\n      }\r\n\r\n      delete state.inputBot\r\n      let chkXP = chkDC / 5\r\n      if (state.RPGstate?.showDC) {\r\n        state.message = `${miscConfig.messageStatIcon ? statConfig.statList[chkStat.toLowerCase()].icon : statConfig.statList[chkStat.toLowerCase()].name} DC${chkDC}: ${chkCuz}`\r\n      } else {\r\n        state.message = chkCuz\r\n      }\r\n\r\n      checkBit:\r\n      if (chkStat != null) {\r\n        console.log(`Checking whether chkStat is null. It is not. chkStat: ${chkStat}`)\r\n        if (chkStat === 'unknown') {\r\n          console.log(`chkStat equals unknown`)\r\n          RPGmechsLog(`DCbot came up with 'unknown' stat.`)\r\n\r\n          chkStatLvl = 0\r\n          if (statConfig?.locking?.lockArbitraryChecks === true) {\r\n            RPGmechsLog(`Stopping check routine due to 'unknown' stat.`)\r\n            break checkBit\r\n          }\r\n        } else {\r\n          console.log(`chkStat does not equal unknown`)\r\n          RPGmechsLog(`${chkStat} found, setting mod to ${state.stats.stats[chkStat].level}.`)\r\n          chkStatLvl = state.stats.stats[chkStat].level\r\n        }\r\n\r\n        chkStatPosAdj = statConfig.statList[chkStat.toLowerCase()].successAdjective\r\n        chkStatNegAdj = statConfig.statList[chkStat.toLowerCase()].failAdjective\r\n\r\n        if (typeof (state.RPGstate?.chkSkillBonus) !== 'undefined') {\r\n          chkSitBonus = chkStatLvl + state.RPGstate.chkSkillBonus\r\n        } else {\r\n          chkSitBonus = chkStatLvl\r\n        }\r\n\r\n        weaponBonusGiven = false;\r\n        equippedWeapon = getEquippedWeapon();\r\n        if (typeof equippedWeapon != 'undefined' && (chkStat == 'Strength')) {\r\n          console.log(`Attack detected. Adding weapon bonus to dice roll. Weapon name -> ${equippedWeapon.name}. Bonus die -> ${equippedWeapon.bonusDamage}`)\r\n          weaponBonusGiven = true;\r\n          chkSitBonus += equippedWeapon.bonusDamage;\r\n        }\r\n\r\n        let roll = getRndInteger(statConfig.rolling.checkRollRange[0], statConfig.rolling.checkRollRange[1])\r\n        let chkModRoll = roll + chkSitBonus\r\n        if (chkModRoll >= chkDC) {\r\n          chkMessageResult = miscConfig.successMessage\r\n          if (typeof (state.RPGstate?.chkSitSkill?.results?.positive) !== 'undefined') {\r\n            if (state.RPGstate?.chkSitSkill?.overrideAtt === true) {\r\n              resultContextString = `[${state.RPGstate.chkSitSkill.results.positive}]`\r\n            } else {\r\n              resultContextString = `[You are ${chkStatPosAdj} enough for that right now, and ${state.RPGstate.chkSitSkill.results.positive}.]`\r\n            }\r\n          } else {\r\n            resultContextString = `[You are ${chkStatPosAdj} enough for that right now.]`\r\n          }\r\n          state.RPGstate.XP += chkXP\r\n        } else {\r\n          chkMessageResult = miscConfig.failMessage\r\n          if (typeof (state.RPGstate?.chkSitSkill?.results?.negative) !== 'undefined') {\r\n            if (state.RPGstate?.chkSitSkill?.overrideAtt === true) {\r\n              resultContextString = `[${state.RPGstate.chkSitSkill.results.negative}]`\r\n            } else {\r\n              resultContextString = `[You are too ${chkStatNegAdj} for that right now, and ${state.RPGstate.chkSitSkill.results.negative}.]`\r\n            }\r\n          } else {\r\n            resultContextString = `[You are too ${chkStatNegAdj} for that right now.]`\r\n          }\r\n\r\n          if (chkXP > 1) {\r\n            chkXP = Math.floor(chkXP / 2)\r\n          }\r\n          state.RPGstate.XP += chkXP\r\n        }\r\n\r\n        displayStatsUpdate(['XP', state.RPGstate.XP, 'green'])\r\n        if (info.actionCount >= 2) {\r\n          state.message += ` ${chkStat} roll: ${chkModRoll} (${roll}${makeModString(chkStatLvl)}${makeModString(state.RPGstate.chkSkillBonus)}${weaponBonusGiven ? makeModString(equippedWeapon.bonusDamage) : ''}), ${chkMessageResult} XP gained: ${chkXP}`\r\n        }\r\n\r\n        if (typeof (state.RPGstate?.chkSkillBonus) !== 'undefined') {\r\n          delete state.RPGstate.chkSkillBonus\r\n          delete state.RPGstate.chkSitSkill\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : ''\r\n  const context = info.memoryLength ? text.slice(info.memoryLength + 1) : text\r\n  const lines = context.split(\"\\n\")\r\n\r\n  if (typeof (resultContextString) !== 'undefined') {\r\n    lines.splice(-1, 0, resultContextString)\r\n    delete resultContextString\r\n  }\r\n\r\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength))\r\n  var finalText = [contextMemory, combinedLines].join(\"\")\r\n  return { text: finalText }\r\n}\r\n\r\nmodifier(text);\r\n"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1677379",
                "publicId": "50ad0070-98c0-11eb-9369-c1c981dd0c5f",
                "published": false,
                "title": "(donation prompt)",
                "description": null,
                "tags": [],
                "createdAt": "2021-04-08T23:15:31.959Z",
                "updatedAt": "2021-04-10T02:27:47.707Z",
                "memory": "",
                "authorsNote": "",
                "mode": "creative",
                "prompt": "Do you like my work and have been enjoying what I've been doing? Consider donating some scales. They help me have enough energy to keep testing new and better world info to keep the scenario solid, and make it play even better. Thank you for playing my scenario! Also consider donating to Gnurro! He's the artist behind RPGMechs and Encounters!",
                "quests": [],
                "worldInfo": null,
                "gameCode": {
                        "onInput": "const modifier = (text) => {\r\n  let stop = false;\r\n  let modifiedText = text;\r\n  const lowered = text.toLowerCase();\r\n  const commandMatcher = text.match(/\\n? ?(?:> You |> You say \"|)\\/(\\w+?)( [\\w ]+)?[\".]?\\n?$/i)\r\n\r\n  if (!state.init && info.actionCount < 1) {\r\n    playerWorldInfo = {\r\n      keys: `you`,\r\n      hidden: false,\r\n      entry: ' You:['\r\n        + ` WORN: nothing;`\r\n        + ` INV: nothing;`\r\n        + ']'\r\n    };\r\n\r\n    state.init = true;\r\n    state.shouldStop = false;\r\n    addWorldEntry(playerWorldInfo.keys, playerWorldInfo.entry, false);\r\n    state.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes('you'));\r\n\r\n    getInventory();\r\n    addToInventory('Rusty Sword', 1);\r\n    addToInventory('Commoner clothes', 1);\r\n    equipItem('Commoner clothes');\r\n    equipItem('Rusty Sword');\r\n\r\n    state.init = true;\r\n  }\r\n\r\n  if (commandMatcher) {\r\n    console.log(`Command detected`);\r\n    console.log(commandMatcher);\r\n    const cmd = commandMatcher[1];\r\n    const params = commandMatcher[2] ? commandMatcher[2].trim() : '';\r\n    console.log(params);\r\n\r\n    if (cmd.includes('invCheck')) {\r\n      console.log(`Begin inventory check.`);\r\n      state.shouldStop = true;\r\n      modifiedText = `\\n> You check your inventory.${checkInventory()}`;\r\n      console.log(`End inventory check.`);\r\n    } else if (cmd.includes('invAdd')) {\r\n      console.log(`Begin inventory add.`);\r\n      state.shouldStop = true;\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        modifiedText = `\\n> You add ${itemQuantity} ${itemName} to your inventory.${addToInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        modifiedText = `\\n> You cannot add less than 1 unit of an item to your inventory.`;\r\n      }\r\n\r\n      console.log(`End inventory add.`);\r\n    } else if (cmd.includes('invRemove')) {\r\n      console.log(`Begin inventory remove.`);\r\n      state.shouldStop = true;\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        modifiedText = `\\n> You remove ${itemQuantity} ${itemName} from your inventory.${removeFromInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        modifiedText = `\\n> You cannot remove less than 1 unit of an item from your inventory.`;\r\n      }\r\n\r\n      console.log(`End inventory remove.`);\r\n    } else if (cmd.includes('invEquip')) {\r\n      console.log(`Begin inventory equip.`);\r\n      state.shouldStop = true;\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      modifiedText = `\\n> You equip ${itemName}.${equipItem(itemName)}`;\r\n      console.log(`End inventory equip.`);\r\n    } else if (cmd.includes('invDebugWi')) {\r\n      console.log(`Begin inventory debug.`);\r\n      state.shouldStop = true;\r\n      modifiedText = `\\n> Your inventory and player WI have been debugged. New player WI saved at index ${state.worldInfoIndex}.`;\r\n      console.log(`End inventory debug.`);\r\n    }\r\n  }\r\n\r\n  return { text: modifiedText, stop: stop };\r\n}\r\n\r\nmodifier(text);",
                        "onOutput": "const modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n  return { text: modifiedText }\r\n}\r\n\r\nmodifier(text)\r\n",
                        "sharedLibrary": "const LETTER_REGEX = /[0-9]/g;\r\nconst DIGIT_REGEX = /\\D/g;\r\nconst PUNCTUATION_REMOVE = /[^\\w\\s]/gi;\r\nconst WORN_REGEX = new RegExp(`(?<=WORN: )(.*)(?=; )`);\r\nconst INVENTORY_REGEX = new RegExp(`(?<=INV: )(.*)(?=;)`);\r\n\r\nconst WEAPONS = [\r\n  'sword', 'knife', 'spear', 'hammer', 'axe', 'battleaxe', 'sledgehammer', 'longsword', 'bow', 'pickaxe'\r\n];\r\n\r\nconst CLOTHING = [\r\n  'rags', 'armor', 'dress', 'kilt', 'skirt', 'jerkin', 'shirt', 'clothes', 'robes', 'leathers', 'hooded', 'cuirass', 'chainmail', 'gauntlets', 'vambraces', 'tights'\r\n];\r\n\r\n/**\r\n * Simple frunction to capitalize the first letter of a string\r\n * \r\n * @param {string} string \r\n */\r\nconst capitalize = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Finds an item in the player's inventory\r\n * @param {string} itemName \r\n */\r\n const findItemInInventory = (itemName) => {\r\n  console.log(`START findItemInInventory(): Looking for item \"${itemName}\" in player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let itemFound = getInventory().find((item) => {\r\n    return item.name == loweredName;\r\n  });\r\n\r\n  if (typeof itemFound != 'undefined') {\r\n    console.log(`END findItemInInventory(): Item \"${itemName}\" found. Returning it.`);\r\n    return itemFound;\r\n  }\r\n\r\n  console.log(`END findItemInInventory(): Item \"${itemName}\" not found in inventory.`);\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Removes an item from player's inventory\r\n * \r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst removeFromInventory = (itemName, itemQuantity) => {\r\n  console.log(`START removeFromInventory(): Removing ${itemQuantity} instances of \"${itemName}\" from player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (!(item.quantity == itemQuantity) && (item.quantity > 1 && item.quantity >= itemQuantity)) {\r\n    console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n    item.quantity -= itemQuantity;\r\n    return `\\nYou have removed ${itemQuantity} ${loweredName} from your inventory.`;\r\n  }\r\n\r\n  let index = getInventory().indexOf(item);\r\n  getInventory().splice(index, 1);\r\n  updateInventory();\r\n  console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n  return `\\nYou have removed all ${loweredName} from your inventory.`;\r\n}\r\n\r\n/**\r\n * Checks player's inventory and returns what's inside\r\n */\r\nconst checkInventory = () => {\r\n\r\n  console.log(`START checkInventory(): Checking player's inventory.`);\r\n  if (getInventory().length > 0) {\r\n    let items = getInventory().map((item) => item.name).join(', ');\r\n    let itemsWorn = getInventory().filter((item) => item.status == 'worn').map((item) => item.name).join(', ');\r\n    console.log(`END checkInventory(): Player's inventory contains: ${items}.`);\r\n    return `\\nYour inventory contains: ${items}. Items equipped: ${itemsWorn}.`;\r\n  }\r\n\r\n  console.log(`END checkInventory(): Player's inventory is empty.`);\r\n  return `\\nYour inventory is empty.`;\r\n}\r\n\r\n/**\r\n * Returns player's inventory. If the array in undefined, define it\r\n */\r\nconst getInventory = () => {\r\n  console.log(`START getInventory(): verifying player's inventory.`);\r\n  if (typeof state.inventory == 'undefined') {\r\n    console.log(`INSIDE getInventory(): Inventory array is undefined. Declaring it with an empty array.`);\r\n    state.inventory = [];\r\n  }\r\n\r\n  console.log(`END getInventory(): player's inventory exists. Returning its contents.`);\r\n  return state.inventory;\r\n}\r\n\r\n/**\r\n * Adds item to player's inventory\r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst addToInventory = (itemName, itemQuantity) => {\r\n\r\n  console.log(`START addToInventory(): adding ${itemQuantity} instances of \"${itemName}\" to player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (typeof item == 'undefined') {\r\n    console.log(`INSIDE addToInventory(): Player has no other instances of this item in their inventory. Adding these.`);\r\n    item = {\r\n      name: loweredName,\r\n      quantity: itemQuantity,\r\n      status: 'in inventory',\r\n      type: getType(itemName)\r\n    };\r\n\r\n    state.inventory.push(item);\r\n  } else {\r\n    console.log(`INSIDE addToInventory(): Player already has other instances of this item in their inventory. Incrementing the quantity by ${itemQuantity}.`);\r\n    item.quantity = item.quantity + itemQuantity;\r\n  }\r\n\r\n  updateInventory();\r\n  console.log(`END addToInventory(): ${itemQuantity} instances of \"${itemName}\" added to player's inventory.`);\r\n  return `\\nYou have added ${itemQuantity} ${loweredName} to your inventory.`;\r\n}\r\n\r\n/**\r\n * Simple function to make the player equip something.\r\n * \r\n * @param {string} itemName \r\n */\r\nconst equipItem = (itemName) => {\r\n  console.log(`START equipItem(): equipping ${itemName}`);\r\n  const itemNameLowerCase = itemName.toLowerCase();\r\n  let itemToBeEquipped = findItemInInventory(itemNameLowerCase);\r\n  if (typeof itemToBeEquipped != 'undefined') {\r\n    const itemToBeEquippedIndex = state.inventory.findIndex(x => x.name == itemToBeEquipped.name);\r\n    console.log(`INSIDE equipItem(): ${itemName} exists in player's inventory`);\r\n    if (itemToBeEquipped.type != 'weapon' && itemToBeEquipped.type != 'clothing') {\r\n      console.log(`END equipItem(): item is not equippable.`);\r\n      return `\\n${capitalize(itemNameLowerCase)} is not an equippable item.`;\r\n    }\r\n\r\n    let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n    let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n    let oldItem = getInventory().find(oldItem => oldItem.status == 'worn' && oldItem.type == itemToBeEquipped.type);\r\n    if (typeof oldItem != 'undefined') {\r\n      const oldItemIndex = state.inventory.findIndex(x => x.name == oldItem.name);\r\n      console.log(`INSIDE equipItem(): Player has another item of the same type equipped. Unequipping old item.`);\r\n      itemsWorn.replace(oldItem.name.toLowerCase(), '');\r\n      console.log(`INSIDE equipItem(): Removing worn status from ${oldItem.name}.`);\r\n      oldItem.status = 'in inventory';\r\n      state.inventory[oldItemIndex] = oldItem;\r\n    }\r\n\r\n    itemToBeEquipped.status = 'worn';\r\n    state.inventory[itemToBeEquippedIndex] = itemToBeEquipped;\r\n    itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n      .map((k) => {\r\n        console.log(`INSIDE equipItem(): worn item found in inventory -> ${k.name}`);\r\n        return k.name;\r\n      }).join('/ ');\r\n\r\n    console.log(`INSIDE equipItem(): finished building new WORN string -> ${itemsWorn}`);\r\n    playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n    updateWorldEntry(\r\n      state.worldInfoIndex,\r\n      playerWorldInfo.keys,\r\n      playerWorldInfo.entry,\r\n      false\r\n    );\r\n\r\n    console.log(`END equipItem(): ${itemToBeEquipped.name} has been equipped.`);\r\n    return `\\nYou are now ${itemToBeEquipped.type == 'weapon' ? 'wielding' : 'wearing'} ${itemToBeEquipped.name}.`;\r\n  }\r\n\r\n  console.log(`END equipItem(): Player does not have \"${itemNameLowerCase}\" in their inventory.`);\r\n  return `\\nYou do not have \"${itemNameLowerCase}\" in your inventory.`;\r\n}\r\n\r\n/**\r\n * Debugs your inventory and corrects the player's WI in case it fails\r\n */\r\nconst debugInventory = () => {\r\n  console.log(`START debugInventory(): debugging player's inventory`);\r\n  state.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes('you'));\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n\r\n  let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n\r\n  itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n    .map((k) => {\r\n      console.log(`INSIDE debugInventory(): Updating player WI with worn items`);\r\n      return k.name;\r\n    }).join('/ ');\r\n\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE debugInventory(): Updating player WI with inventory items`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/ ');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n\r\n  updateWorldEntry(\r\n    state.worldInfoIndex,\r\n    playerWorldInfo.keys,\r\n    playerWorldInfo.entry,\r\n    false\r\n  );\r\n\r\n  console.log(\"INSIDE debugInventory(): Fixed player WI with inventory's items.\");\r\n  console.log(`END debugInventory(): Player's WI saved at index ${state.worldInfoIndex}.`);\r\n}\r\n\r\n/**\r\n * Updates the player's inventory and corrects the WI\r\n */\r\nconst updateInventory = () => {\r\n  console.log(`START updateInventory(): updating player's inventory and WI with current items`);\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE updateInventory(): Sorting inventory items and quantities into player WI`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/ ');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n  updateWorldEntry(\r\n    state.worldInfoIndex,\r\n    playerWorldInfo.keys,\r\n    playerWorldInfo.entry,\r\n    false\r\n  );\r\n\r\n  console.log(`END updateInventory(): updated player's inventory and WI with current items`);\r\n}\r\n\r\n/**\r\n * Function to determine item type\r\n * \r\n * @param {string} itemType\r\n */\r\nconst getType = (itemName) => {\r\n  const checker = (input) => {\r\n    return WEAPONS.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'weapon' :\r\n      CLOTHING.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'clothing' : 'misc';\r\n  }\r\n\r\n  return checker(itemName);\r\n}",
                        "onModelContext": "const modifier = (text) => {\r\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : '';\r\n  const context = info.memoryLength ? text.slice(info.memoryLength) : text;\r\n  const lines = context.split(\"\\n\");\r\n  const lowered = text.toLowerCase();\r\n  let stop = false;\r\n\r\n  if (state.shouldStop) {\r\n    state.shouldStop = false;\r\n    stop = true;\r\n  }\r\n\r\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength));\r\n  const finalText = [contextMemory, combinedLines].join(\"\");\r\n  return { text: finalText, stop: stop };\r\n}\r\n\r\nmodifier(text);"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1409055",
                "publicId": "8569ef80-7647-11eb-8216-cd319579a239",
                "published": true,
                "title": "Adventure Call with Falconhoof: plain English",
                "description": "For those that used to love watching Limmy's Show, specifically Adventure Call, here's the AID version of it!\n\nTo play it, use the Story mode. The AI will generate the lines of speech, you just have to enter\nFalconhoof: \"\nCaller: \"\n\nAnd the AI will fill in the gaps. Check out my profile for some playtests to understand it better. Works better with Classic or Griffin... because of randomness.",
                "tags": [],
                "createdAt": "2021-02-24T02:25:11.800Z",
                "updatedAt": "2021-02-24T02:27:08.712Z",
                "memory": "",
                "authorsNote": "Writing style: telephone call, verbose, detailed, text adventure, lengthy",
                "mode": "creative",
                "prompt": "Falconhoof is the host of a TV show called Adventure Call. People call the show and Falconhoof narrates a short adventure for them through the phone. They are free to do whatever they want in an environment Falconhoof has described, but Falconhoof is not allowed to help them in any way. Callers cannot describe the environment at all. If they die, Falconhoof takes another call with another adventurer. Here are two examples of how Adventure Call works:\n\nExample 1:\nFalconhoof: \"This is Adventure Call, and my name is Falconhoof. I will be the guide on your quest. Hello, adventurer. What is your name?\"\nCaller: \"I'm Michael.\"\nFalconhoof: \"Greetings, Michael. Are you ready to start?\"\nCaller: \"Yes.\"\nFalconhoof: \"Very well. You are at the Kingdom square. A jester approaches you and says hello.\"\nCaller: \"I stab the jester.\"\nFalconhoof: \"You... traveler, the jester is friendly.\"\nCaller: \"I don't care. It's my money and my game. I stab the jester.\"\nFalconhoof: \"...\"\nFalconhoof: \"You... stab the jester. He dies horribly.\"\nCaller: \"Yes! I did it!\"\nFalconhoof: \"Traveler, game over. You're out.\"\n\nExample 2:\nFalconhoof: \"Let's take another call! Greetings, adventurer. What is your name?\"\nCaller: \"I'm Mia.\"\nFalconhoof: \"Hail, Mia. Let's start your adventure! You are in a tavern, drinking beer. There are lots of people around you. What do you do?\"\nCaller: \"I chug my beer in one gulp.\"\nFalconhoof: \"You chug your beer in one gulp. You're now drunk. What do you do?\"\nCaller: \"I get up and punch the person next to me.\"\nFalconhoof: \"You try to punch the person, but you're so drunk you miss it. The guy is now angry, and kicks you in the ribs. You fall down to the ground.\"\nCaller: \"I ask for mercy!\"\nFalconhoof: \"The man has no mercy on you. He kicks you in the face and you pass out.\"\n\n-------------------------------------------\n\nFalconhoof: \"You're watching Adventure Call. My name name is Falconhoof, and I will be your guide on your quest. Greetings, adventurer, what is your name?\"\n",
                "quests": [],
                "worldInfo": [],
                "gameCode": {
                        "onInput": "\n// Checkout the repo examples to get an idea of other ways you can use scripting \n// https://github.com/latitudegames/Scripting/blob/master/examples\n\nconst modifier = (text) => {\n  let modifiedText = text\n  const lowered = text.toLowerCase()\n    \n  // The text passed in is either the user's input or players output to modify.\n  if(lowered.includes('you become king') || lowered.includes('you are now king')) {    \n    // You can modify the state variable to keep track of state throughout the adventure\n    state.isKing = true\n    \n    // Setting state.memory.context will cause that to be used instead of the user set memory\n    state.memory = { context: 'You are now the king.' }\n\n    // You can modify world info entries using the below commands\n    // addWorldEntry(keys, entry)\n    // removeWorldEntry(index)\n    // updateWorldEntry(index, keys, entry)\n\n    // You can read world info keys with worldInfo \n    const entries = worldInfo\n    \n    // Setting state.message will set an info message that will be displayed in the game\n    // This can be useful for debugging\n    state.message = JSON.stringify(entries)\n    \n    // You can log things to the side console when testing with console.log\n    console.log('Player is now king')\n    \n    modifiedText = text + '\\nYou are now the king!'\n  }\n  \n  // You must return an object with the text property defined.\n  return { text: modifiedText }\n}\n\n// Don't modify this part\nmodifier(text)\n",
                        "onOutput": "\n// Checkout the repo examples to get an idea of other ways you can use scripting \n// https://github.com/latitudegames/Scripting/blob/master/examples\n\nconst modifier = (text) => {\n  let modifiedText = text\n  const lowered = text.toLowerCase()\n    \n  // The text passed in is either the user's input or players output to modify.\n  if(lowered.includes('you become king') || lowered.includes('you are now king')) {    \n    // You can modify the state variable to keep track of state throughout the adventure\n    state.isKing = true\n    \n    // Setting state.memory.context will cause that to be used instead of the user set memory\n    state.memory = { context: 'You are now the king.' }\n\n    // You can modify world info entries using the below commands\n    // addWorldEntry(keys, entry)\n    // removeWorldEntry(index)\n    // updateWorldEntry(index, keys, entry)\n\n    // You can read world info keys with worldInfo \n    const entries = worldInfo\n    \n    // Setting state.message will set an info message that will be displayed in the game\n    // This can be useful for debugging\n    state.message = JSON.stringify(entries)\n    \n    // You can log things to the side console when testing with console.log\n    console.log('Player is now king')\n    \n    modifiedText = text + '\\nYou are now the king!'\n  }\n  \n  // You must return an object with the text property defined.\n  return { text: modifiedText }\n}\n\n// Don't modify this part\nmodifier(text)\n",
                        "sharedLibrary": "// Any functions you define here will be available in your other modifier scripts.\n\nfunction bringJoy(string) {\n  return string.replace(/\\b(sad|angry)\\b/g, 'happy')\n}\n",
                        "onModelContext": "\n// Checkout the repo examples to get an idea of other ways you can use scripting\n// https://github.com/latitudegames/Scripting/blob/master/examples\n\n// info.memoryLength is the length of the memory section of text.\n// info.maxChars is the maximum length that text can be. The server will truncate the text you return to this length.\n\n// This modifier re-implements Author's Note as an example.\nconst modifier = (text) => {\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : ''\n  const context = info.memoryLength ? text.slice(info.memoryLength) : text\n  const lines = context.split(\"\\n\")\n  if (lines.length > 2) {\n    // Uncomment to use this!\n    // const authorsNote = \"Everyone in this story is an AI programmer.\"\n    // lines.splice(-3, 0, `[Author's note: ${authorsNote}]`)\n  }\n  // Make sure the new context isn't too long, or it will get truncated by the server.\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength))\n  const finalText = [contextMemory, combinedLines].join(\"\")\n  return { text: finalText }\n}\n\n// Don't modify this part\nmodifier(text)\n"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1409065",
                "publicId": "a8dd40c0-7647-11eb-8216-cd319579a239",
                "published": true,
                "title": "Adventure Call with Falconhoof: Scottish accent",
                "description": "For those that used to love watching Limmy's Show, specifically Adventure Call, here's the AID version of it!\n\nTo play it, use the Story mode. The AI will generate the lines of speech, you just have to enter\nFalconhoof: \"\nCaller: \"\n\nAnd the AI will fill in the gaps. Check out my profile for some playtests to understand it better. Works better with Classic or Griffin... because of randomness.",
                "tags": [],
                "createdAt": "2021-02-24T02:26:11.277Z",
                "updatedAt": "2021-02-24T02:27:08.753Z",
                "memory": "",
                "authorsNote": "Writing style: telephone call, verbose, detailed, text adventure, lengthy",
                "mode": "creative",
                "prompt": "Falconhoof is the host of a TV show called Adventure Call. People call the show and Falconhoof narrates a short adventure for them through the phone. They are free to do whatever they want in an environment Falconhoof has described, but Falconhoof is not allowed to help them in any way. Callers cannot describe the environment at all. If they die, Falconhoof takes another call with another adventurer. Here are two examples of how Adventure Call works:\n\nExample 1:\nFalconhoof: \"This is adventure ca', 'n' they ca' me falconhoof. Ah wull be th' guide oan yer quest. Awright, adventurer. Whit's yer name?\"\nCaller: \"I'm Michael.\"\nFalconhoof: \"Awrite, mìcheal. Ur ye ready tae stairt?\"\nCaller: \"Yes.\"\nFalconhoof: \"Gey weel. Yer at th' kingdom george. A jester approaches ye 'n' says awright. \"\nCaller: \"I stab the jester.\"\nFalconhoof: \"Ye... Traveler, th' jester is freendly.\"\nCaller: \"I don't care. It's my money and my game. I stab the jester.\"\nFalconhoof: \"...\"\nFalconhoof: \"Ye... Chib th' jester. He dies horribly.\"\nCaller: \"Yes! I did it!\"\nFalconhoof: \"Traveler, gam ower. Ye'r oot.\"\n\nExample 2:\nFalconhoof: \"Let's tak' anither ca'! awrite, adventurer. Whit's yer name?\"\nCaller: \"I'm Mia.\"\nFalconhoof: \"Hail, mia. Let's stairt yer adventure! yer in a tavern, swallyin heavy. Thare ur loads o' fowk aroond ye. Whit dae ye dae?\"\nCaller: \"I chug my beer in one gulp.\"\nFalconhoof: \"Ye chug yer heavy in yin gulp. Ye'r noo blootert. Whit dae ye dae?\"\nCaller: \"I get up and punch the person next to me.\"\nFalconhoof: \"Ye huv a go tae batter th' body, bit ye'r sae blootert ye lassy it. Th' guy is noo crabbit, 'n' kicks ye in th' ribs. Ye fall doon tae th' ground.\"\nCaller: \"I ask for mercy!\"\nFalconhoof: \"Th' jimmy haes na mercy oan ye. He kicks ye in th' coupon 'n' ye bygae oot.\"\n\n-------------------------------------------\n\nFalconhoof: \"Ye'r peepin' adventure ca'. Mah name name is falconhoof, 'n' ah wull be yer guide oan yer quest. Awrite, adventurer, whit's yer name?\"\n",
                "quests": [],
                "worldInfo": [],
                "gameCode": {
                        "onInput": "\n// Checkout the repo examples to get an idea of other ways you can use scripting \n// https://github.com/latitudegames/Scripting/blob/master/examples\n\nconst modifier = (text) => {\n  let modifiedText = text\n  const lowered = text.toLowerCase()\n    \n  // The text passed in is either the user's input or players output to modify.\n  if(lowered.includes('you become king') || lowered.includes('you are now king')) {    \n    // You can modify the state variable to keep track of state throughout the adventure\n    state.isKing = true\n    \n    // Setting state.memory.context will cause that to be used instead of the user set memory\n    state.memory = { context: 'You are now the king.' }\n\n    // You can modify world info entries using the below commands\n    // addWorldEntry(keys, entry)\n    // removeWorldEntry(index)\n    // updateWorldEntry(index, keys, entry)\n\n    // You can read world info keys with worldInfo \n    const entries = worldInfo\n    \n    // Setting state.message will set an info message that will be displayed in the game\n    // This can be useful for debugging\n    state.message = JSON.stringify(entries)\n    \n    // You can log things to the side console when testing with console.log\n    console.log('Player is now king')\n    \n    modifiedText = text + '\\nYou are now the king!'\n  }\n  \n  // You must return an object with the text property defined.\n  return { text: modifiedText }\n}\n\n// Don't modify this part\nmodifier(text)\n",
                        "onOutput": "\n// Checkout the repo examples to get an idea of other ways you can use scripting \n// https://github.com/latitudegames/Scripting/blob/master/examples\n\nconst modifier = (text) => {\n  let modifiedText = text\n  const lowered = text.toLowerCase()\n    \n  // The text passed in is either the user's input or players output to modify.\n  if(lowered.includes('you become king') || lowered.includes('you are now king')) {    \n    // You can modify the state variable to keep track of state throughout the adventure\n    state.isKing = true\n    \n    // Setting state.memory.context will cause that to be used instead of the user set memory\n    state.memory = { context: 'You are now the king.' }\n\n    // You can modify world info entries using the below commands\n    // addWorldEntry(keys, entry)\n    // removeWorldEntry(index)\n    // updateWorldEntry(index, keys, entry)\n\n    // You can read world info keys with worldInfo \n    const entries = worldInfo\n    \n    // Setting state.message will set an info message that will be displayed in the game\n    // This can be useful for debugging\n    state.message = JSON.stringify(entries)\n    \n    // You can log things to the side console when testing with console.log\n    console.log('Player is now king')\n    \n    modifiedText = text + '\\nYou are now the king!'\n  }\n  \n  // You must return an object with the text property defined.\n  return { text: modifiedText }\n}\n\n// Don't modify this part\nmodifier(text)\n",
                        "sharedLibrary": "// Any functions you define here will be available in your other modifier scripts.\n\nfunction bringJoy(string) {\n  return string.replace(/\\b(sad|angry)\\b/g, 'happy')\n}\n",
                        "onModelContext": "\n// Checkout the repo examples to get an idea of other ways you can use scripting\n// https://github.com/latitudegames/Scripting/blob/master/examples\n\n// info.memoryLength is the length of the memory section of text.\n// info.maxChars is the maximum length that text can be. The server will truncate the text you return to this length.\n\n// This modifier re-implements Author's Note as an example.\nconst modifier = (text) => {\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : ''\n  const context = info.memoryLength ? text.slice(info.memoryLength) : text\n  const lines = context.split(\"\\n\")\n  if (lines.length > 2) {\n    // Uncomment to use this!\n    // const authorsNote = \"Everyone in this story is an AI programmer.\"\n    // lines.splice(-3, 0, `[Author's note: ${authorsNote}]`)\n  }\n  // Make sure the new context isn't too long, or it will get truncated by the server.\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength))\n  const finalText = [contextMemory, combinedLines].join(\"\")\n  return { text: finalText }\n}\n\n// Don't modify this part\nmodifier(text)\n"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1355906",
                "publicId": "03113fc0-70ac-11eb-ba16-1d8c91f19677",
                "published": true,
                "title": "Character generator",
                "description": null,
                "tags": [],
                "createdAt": "2021-02-16T23:09:25.308Z",
                "updatedAt": "2021-03-21T22:58:34.842Z",
                "memory": "",
                "authorsNote": "Writing style: descriptive, verbose",
                "mode": "creative",
                "prompt": "Jordis needs to generate NPCs for her tabletop roleplaying games. Each profile will need their own unique Name, Race, Gender, Place of Birth, Profession, Personality, Motivation, Physical Description and Story. The characters are intended for use in an Elder Scrolls setting, so she needs them to have specific data. \n\nHere are two examples of the profiles she needs:\n\nName: Vanus Galerion\nRace: Altmer\nGender: male\nPlace of Birth: Summerset Isles\nProfession: master wizard\nAge: 127y\nPersonality: talkative,happy,good homored,funny\nPhysical Description: tall,thin,slender,slim,golden skin,blue eyes\nHeight in centimeters: 200cm\nWeight in kilos: 70kg\nEquipment: master wizard robes, gold ring, mystic staff\n\nName: Lyris Titanborn\nRace: Nord\nGender: female\nPlace of Birth: Windhelm\nProfession: warrior,soldier\nAge: 29y\nPersonality: foolhardy,stubborn,good humored,brave,courageous\nPhysical Description: blonde hair,brown eyes,muscular body,strong\nHeight in centimeters: 200cm\nWeight in kilos: 92kg\nEquipment: full steel heavy armor, steel greatsword\n\nJordis wants to generate character profiles for a game she is going to run. This game will take place in the province of ${Type the name of a province of Tamriel...}, and the characters' race need to be ${Type the name of a race of Tamriel...}. The character's profession must be ${Type a character's profession...}. The character's profile will need its own unique Name, Race, Gender, Place of Birth, Profession, Age, Personality, Physical Description, Height in centimeters, Weight in kilos and Equipment. Jordis will also think of a story for her characters.\n\nShe writes a character profile:",
                "quests": [],
                "worldInfo": [],
                "gameCode": {
                        "onInput": "const modifier = (text) => {\n  let modifiedText = nameReplace(text);\n\n  return { text: modifiedText }\n};\n\nmodifier(text);\n",
                        "onOutput": "const modifier = (text) => {\n  modifiedText = nameReplace(text);\n\n  return { text: modifiedText }\n};\n\nmodifier(text);\n",
                        "sharedLibrary": "// TO USE: Put in something like 'modifiedText = nameReplace(modifiedText);' in Input&Output Modifiers.\r\n\r\n// List the names you wish to replace with random ones in this const.\r\nconst BADNAMES = ['Ackerson','Alison','Annah','Anu','Arat','Arrorn','Ashton','Azajaja','Big Red',\r\n'Brot','Brother Gray','Bucklesberg','Captain Dario','Captain Eckard','Captain Hayes','Captain Ian','Captain Illam','Carn',\r\n'Castus','Cloudpeak','Count Gray','Count Grey','Dark Order','David','Delantium','Delerg','Dendrin','Derg',\r\n'Dert','Dessel','Dorna','Dr. Kessel','Dr. Kovas','Drake','Draven','Durge','Ebony Claw','Elam',\r\n'Eldolith','Eliza','Eternals','Father Féval','Father Tomas','Felkan','Flog','Garrick','Grolik',\"Gro'tesk\",'Haygarth',\r\n'Hessla','Holgard','Isabella',\"J'Arel\",'Jacob','Jicol','Karth','Kelso',\r\n'Klemto','Klyton','Kralmer','Kyros','Lenay','Lord Rostov','Ludmilla','Magos Cern','Meliodas',\r\n'Merk','Mihrab','Mr. Demar','Mr. Gaange','Mr. Reynolds','Nalin','Nolazir','Null','Nuro','Oalkwardner',\r\n'Olive','Olivia','Oren','Quala','Ragnor','Ral','Rask','Retlad','Roldan','Rolomag','Sheriff Buckly',\r\n'Sir Ignate','Sodran','Svelk','Talia','Teckleville','The Craxil','The Ghoul King','The Great Lich Lord',\r\n'The Nightmare Tyrant','Theo','Trelik','Tulan','Ulivik','Vaughn','Velzix','Wessel','Zalan','Zalmora','Zuzu'];\r\n\r\n// This shuffles the arrays.\r\nconst shuffle = array =>\r\n    [...Array(array.length)]\r\n        .map((...args) => Math.floor(Math.random() * (args[1] + 1)))\r\n        .reduce((a, rv, i) => ([a[i], a[rv]] = [a[rv], a[i]]) && a, array);\r\n\r\n// Generates and saves arrays; ran only once.\r\nfunction makeArrays() {\r\n  state.mid = [];\r\n  state.end = [];\r\n  list = state.names.map(x => x.substring(1)); // Trim beginning.\r\n  list.forEach(addMid);\r\n}\r\n\r\nfunction addMid(seg) { // Generate array of possible mid-segments.\r\n  while (seg.length > 3) {\r\n    if (state.mid.indexOf(seg.substring(0,4)) === -1) { state.mid.push(seg.substring(0,4)) };\r\n    seg = seg.substring(1);\r\n  }\r\n  state.end.push(seg);\r\n}\r\n\r\nfunction synthName() {\r\n  var name_length = state.names[Math.floor(Math.random() * state.names.length)].length - 1;\r\n  var base = state.names[Math.floor(Math.random() * state.names.length)];\r\n  if (base.length < 3) { return Base; } \r\n  else {\r\n    var nomen = base.substring(0,3);\r\n    while (nomen.length < name_length)\r\n    {\r\n      mid = shuffle(state.mid).find( x => nomen.substring(nomen.length - 2, nomen.length) == x.substring(0,2))\r\n      if (mid) { nomen += mid.substring(2); }\r\n      else { name_length = 0; } // No valid segments found, just skip ahead.\r\n    }\r\n    var end = shuffle(state.end).find( x => nomen.substring(nomen.length -1, nomen.length) == x.substring(0,1));\r\n    if (end) { nomen += end.substring(1); }\r\n\treturn nomen;\r\n  }\r\n}\r\n\r\nfunction nameReplace(text) {\r\n  if (!state.names_setup) { setupNamelist(); }\r\n  for (name of BADNAMES) {\r\n    if (text.includes(name)) { text = text.replace(name, synthName()); }\r\n  }\r\n  return text;\r\n}\r\n\r\n// This giant list is the list of names that this generator uses as examples to synthesize new names.\r\n// You can replace it with a more specific list, such as names from certain culture.\r\n// To work well, you need at least 100 names on the list.\r\nfunction setupNamelist() {\r\n state.names_setup = true;\r\n state.names = [\"Aby\",\"Aage\",\"Aakesh\",\"Aanon\",\"Aarlen\",\"Aaron\",\"Aart\",\"Aasta\",\"Abarden\",\"Abbathor\",\"Abbathorn\",\"Abraham\",\"Abryn\",\r\n  \"Abu\",\"Acadia\",\"Achard\",\"Acheron\",\"Achim\",\"Achlarg\",\"Ada\",\"Adair\",\"Adalbert\",\"Adanac\",\"Adario\",\"Adeisteen\",\"Adelaide\",\r\n  \"Adelin\",\"Adelot\",\"Adeen\",\"Aden\",\"Adena\",\"Aderyn\",\"Adeva\",\"Adger\",\"Adia\",\"Adin\",\"Adina\",\"Aditu\",\"Adlay\",\r\n  \"Adolf\",\"Adolmus\",\"Adoniram\",\"Adraeran\",\"Adriaan\",\"Adriel\",\"Adrienne\",\"Aedha\",\"Aeiran\",\"Ael\",\"Aelgifu\",\"Aelis\",\"Aerdrie\",\r\n  \"Aeriel\",\"Aerin\",\"Aeris\",\"Aeriss\",\"Aeron\",\"Aeru'in\",\"Aeruin\",\"Aethelweard\",\"Aethon\",\"Aethyr\",\"Afra\",\"Agate\",\"Agatha\",\r\n  \"Agathon\",\"Agathos\",\"Agenor\",\"Agidius\",\"Agnar\",\"Agora\",\"Agrias\",\"Aguidran\",\"Aguilla\",\"Ahanna\",\"Ahmre\",\"Aicha\",\"Aidan\",\r\n  \"Aidaron\",\"Aiden\",\"Aidred\",\"Aidro\",\"Aidwin\",\"Aifreda\",\"Aifrida\",\"Aiker\",\"Aikikia\",\"Aikman\",\"Ailcaer\",\"Aileen\",\"Ailric\",\r\n  \"Ailvar\",\"Aimee\",\"Aimo\",\"Aino\",\"Ainu\",\"Aipheus\",\"Airalyn\",\"Aircristir\",\"Airen\",\"Airis\",\"Airmid\",\"Aisha\",\"Aislinn\",\r\n  \"Aithne\",\"Aitken\",\"Akebia\",\"Aki\",\"Akira\",\"Aksel\",\"Al\",\"Aladan\",\"Aladar\",\"Aladdin\",\"Alain\",\"Alaine\",\"Alais\",\r\n  \"Alan\",\"Alana\",\"Alanson\",\"Alardan\",\"Alaric\",\"Alarion\",\"Alaris\",\"Alaron\",\"Alastair\",\"Alastrina\",\"Alastyr\",\"Albaral\",\"Alberich\",\r\n  \"Alberik\",\"Alberon\",\"Albert\",\"Alberta\",\"Albin\",\"Albion\",\"Albrecht\",\"Albright\",\"Alcan\",\"Alcina\",\"Alda\",\"Aldaren\",\"Aldegond\",\r\n  \"Alden\",\"Aldert\",\"Aldhelm\",\"Aldis\",\"Aldrich\",\"Aldridge\",\"Aldus\",\"Aldwerth\",\"Aldwin\",\"Aldwulf\",\"Alea\",\"Alec\",\"Alena\",\r\n  \"Alers\",\"Ales\",\"Alessandra\",\"Alexander\",\"Alexei\",\"Alf\",\"Alfdis\",\"Alfgeir\",\"Alfhid\",\"Alfons\",\"Alford\",\"Alfred\",\"Algernon\",\r\n  \"Algus\",\"Alhana\",\"Ali\",\"Alia\",\"Alicia\",\"Aliendre\",\"Alienor\",\"Alin\",\"Aline\",\"Alineric\",\"Alisbone\",\"Alison\",\"Alistair\",\r\n  \"Alister\",\"Allaire\",\"Allard\",\"Allart\",\"Allene\",\"Alliston\",\"Almas\",\"Almer\",\"Almira\",\"Almroth\",\"Almu\",\"Aloise\",\"Alor\",\r\n  \"Alora\",\"Alorosaz\",\"Aloysius\",\"Alphons\",\"Alrik\",\"Alsop\",\"Althalus\",\"Altin\",\"Alton\",\"Alured\",\"Alvan\",\"Alvey\",\"Alvina\",\r\n  \"Alvord\",\"Alvred\",\"Alwen\",\"Alwyn\",\"Alya\",\"Alyanna\",\"Alyce\",\"Alyssa\",\"Alyvia\",\"Ama\",\"Amadis\",\"Amain\",\"Amalina\",\r\n  \"Aman\",\"Amanfea\",\"Amar\",\"Amarah\",\"Amber\",\"Ambros\",\"Amelia\",\"Ames\",\"Amethyst\",\"Amilion\",\"Amin\",\"Amina\",\"Amineh\",\r\n  \"Ammdar\",\"Amschel\",\"Amundi\",\"Anandra\",\"Anastasia\",\"Anatol\",\"Anatolia\",\"Ancarion\",\"Ancelyn\",\"Anclaiar\",\"Ancla´ar\",\"Andara'an\",\"Andaraan\",\r\n  \"Andemon\",\"Andni\",\"Andolan\",\"Andre\",\"Andrei\",\"Andrew\",\"Andrus\",\"Aneurin\",\"Anfar\",\"Angelica\",\"Angelina\",\"Angharad\",\"Angheryn\",\r\n  \"Angmar\",\"Angus\",\"Anici\",\"Anigh\",\"Anika\",\"Anita\",\"Anitra\",\"Anlaf\",\"Anna\",\"Annion\",\"Annora\",\"Anouar\",\"Anseim\",\r\n  \"Ansel\",\"Anskar\",\"Anson\",\"Antal\",\"Antalya´ar\",\"Antares\",\"Antheirne\",\"Anton\",\"Antone\",\"Antony\",\"Antrim\",\"Anvar\",\"Anya\",\r\n  \"Anzie\",\"Apad\",\"April\",\"Apthorp\",\"Aquill\",\"Arabel\",\"Arabella\",\"Arabeth\",\"Aradan\",\"Aradh\",\"Aragon\",\"Aragorn\",\"Arakin\",\r\n  \"Aralik\",\"Aranel\",\"Arania\",\"Arathorn\",\"Aravis\",\"Arawn\",\"Arax\",\"Araz\",\"Archibald\",\"Arcarune\",\"Arctor\",\"Ardal\",\"Arden\",\r\n  \"Arder\",\"Ardesh\",\"Ardis\",\"Areagne\",\"Arell\",\"Areta\",\"Aretas\",\"Argethlam\",\"Argoeth\",\"Ari\",\"Aria\",\"Ariad\",\"Arian\",\r\n  \"Arianth\",\"Aribeth\",\"Aric\",\"Arid\",\"Ariel\",\"Aries\",\"Arilyn\",\"Arioch\",\"Arka\",\"Arkadia\",\"Arkron\",\"Arkwright\",\"Arlaith\",\r\n  \"Arlan\",\"Arlana\",\"Arlean\",\"Arleano\",\"Arlo\",\"Arlya\",\"Armand\",\"Armar\",\"Armin\",\"Armitage\",\"Armo\",\"Armod\",\"Arn\",\r\n  \"Arnbella\",\"Arnesen\",\"Arnfinn\",\"Arngrim\",\"Arni\",\"Arnlaug\",\"Arno\",\"Arnold\",\"Arnor\",\"Arnora\",\"Arnot\",\"Arnthora\",\"Arnuif\",\r\n  \"Arnulf\",\"Arnvid\",\"Aron\",\"Arrah\",\"Arronax\",\"Arshavir\",\"Arshel\",\"Artemis\",\"Artemus\",\"Arthol\",\"Arthryn\",\"Arthur\",\"Artnistead\",\r\n  \"Artreyu\",\"Artur\",\"Arun\",\"Arvid\",\"Arvida\",\"Arving\",\"Arvo\",\"Arwen\",\"Arwin\",\"Aryen\",\"Aryion\",\"Aryon\",\"Aryus\",\r\n  \"Arzamark\",\"Asa\",\"Asaf\",\"Aschar\",\"Asfrid\",\"Asgard\",\"Asger\",\"Asgerd\",\"Asgrim\",\"Ash\",\"Ashan\",\"Ashane\",\"Ashburton\",\r\n  \"Ashcar\",\"Ashdown\",\"Ashgaroth\",\"Ashley\",\"Ashlyn\",\"Ashne'e\",\"Ashnici\",\"Ashur\",\"Asiria\",\"Askew\",\"Askold\",\"Aslak\",\"Aslan\",\r\n  \"Asleif\",\"Aslior\",\"Asperon\",\"Asta\",\"Astar\",\"Astinus\",\"Astnid\",\"Astnild\",\"Astoiphe\",\"Astra\",\"Astraea\",\"Astran\",\"Astrid\",\r\n  \"Astrin\",\"Atazra\",\"Athabasca\",\"Athana\",\"Athol\",\"Atiaran\",\"Atli\",\"Atmeh\",\"Atreyu\",\"Atropos\",\"Atticus\",\"Attor\",\"Atul\",\r\n  \"Aturin\",\"Atyre\",\"Aubrey\",\"Aud\",\"Audrey\",\"Audrianna\",\"Audric\",\"August\",\"Augustus\",\"Aule\",\"Aulius\",\"Aun\",\"Aura\",\r\n  \"Aurian\",\"Auril\",\"Aurion\",\"Aurora\",\"Avall\",\"Avarath\",\"Avascaen\",\"Avedar\",\"Aveole\",\"Avery\",\"Avon\",\"Avril\",\"Axel\",\r\n  \"Aya\",\"Ayame\",\"Ayaron\",\"Ayarèn\",\"Ayin\",\"Ayir\",\"Aylin\",\"Aylmer\",\"Ayrie\",\"Azeal\",\"Azeezeh\",\"Azgoth\",\"Azhrarn\",\r\n  \"Aziz\",\"Azmodeus\",\"Azrean\",\"Azreck\",\"Azriaz\",\"Aztira\",\"Azure\",\"Azuth\",\"Baba\",\"Babacar\",\"Babrak\",\"Babrine\",\"Babylos\",\r\n  \"Baduk\",\"Baern\",\"Baeron\",\"Baervan\",\"Bag\",\"Bahamut\",\"Baird\",\"Bal\",\"Balain\",\"Baldor\",\"Baldrick\",\"Balduin\",\"Baldur\",\r\n  \"Baldwin\",\"Balendar\",\"Balfour\",\"Balin\",\"Baliol\",\"Ballard\",\"Balor\",\"Balthasard\",\"Balthazar\",\"Bandobras\",\"Bane\",\"Baraca\",\"Barahir\",\r\n  \"Barak\",\"Baralan\",\"Baravar\",\"Barbara\",\"Bardach\",\"Bardel\",\"Bardi\",\"Bardsley\",\"Bardwell\",\"Barend\",\"Barent\",\"Baring\",\"Barll\",\r\n  \"Barlo\",\"Barlow\",\"Barnabas\",\"Barnas\",\"Barnus\",\"Barr\",\"Barret\",\"Barron\",\"Barry\",\"Barstow\",\"Barthel\",\"Bartle\",\"Bartnel\",\r\n  \"Barton\",\"Baslayan\",\"Bayard\",\"Beams\",\"Beatrix\",\"Bechir\",\"Beck\",\"Bede\",\"Bedegran\",\"Begnus\",\"Beldaran\",\"Beldas\",\"Belerion\",\r\n  \"Belgarath\",\"Belgarion\",\"Belita\",\"Bella\",\"Belle\",\"Bellin\",\"Bellinus\",\"Belloc\",\"Belrene\",\"Beltane\",\"Belva\",\"Ben\",\"Benekander\",\r\n  \"Bengt\",\"Benita\",\"Benoist\",\"Beorn\",\"Beowulf\",\"Bera\",\"Bercan\",\"Berek\",\"Berem\",\"Beren\",\"Bergen\",\"Bergthor\",\"Berim\",\r\n  \"Bern\",\"Berna\",\"Bernhart\",\"Bernt\",\"Berronar\",\"Berryn\",\"Bersi\",\"Berta\",\"Bertil\",\"Bertilde\",\"Bertram\",\"Bertran\",\"Bertrem\",\r\n  \"Beryl\",\"Besma\",\"Bestagar\",\"Beth\",\"Bevil\",\"Beyash\",\"Beylard\",\"Bhimrao\",\"Bhoskar\",\"Bhupindar\",\"Bidwell\",\"Bilbo\",\"Bile\",\r\n  \"Bilmar\",\"Bindon\",\"Bion\",\"Bipin\",\"Birath\",\"Birbeck\",\"Birchard\",\"Birger\",\"Birgit\",\"Birket\",\"Bisuneh\",\"Bjarni\",\"Bjorn\",\r\n  \"Bjornstern\",\"Blackwood\",\"Blade\",\"Blaen\",\"Blair\",\"Blame\",\"Blasco\",\"Blaze\",\"Bledsoe\",\"Blenda\",\"Bleran\",\"Blount\",\"Blunyc\",\r\n  \"Bninna\",\"Bo\",\"Bodil\",\"Bodvar\",\"Bolthorn\",\"Boner\",\"Booker\",\"Boott\",\"Boris\",\"Bork\",\"Borlace\",\"Bormor\",\"Boromir\",\r\n  \"Bors\",\"Botho\",\"Botolf\",\"Bourke\",\"Bowie\",\"Boyd\",\"Bracca\",\"Brace\",\"Bracken\",\"Brand\",\"Brandec\",\"Brangwen\",\"Brann\",\r\n  \"Brannon\",\"Branwell\",\"Branwen\",\"Breanon\",\"Bremen\",\"Brenna\",\"Brenner\",\"Brent\",\"Bress\",\"Bretaine\",\"Breyugar\",\"Brianna\",\"Bridget\",\r\n  \"Brielle\",\"Brigantu\",\"Brighton\",\"Brinn\",\"Brion\",\"Bristan\",\"Brita\",\"Brithael\",\"Brock\",\"Brockden\",\"Brodhead\",\"Brodribb\",\"Brogan\",\r\n  \"Bron\",\"Brona\",\"Bronwyn\",\"Bror\",\"Broun\",\"Bruna\",\"Bruno\",\"Brunt\",\"Brynhild\",\"Brynit\",\"Bryoni\",\"Bunnvor\",\"Bupu\",\r\n  \"Burcan\",\"Buri\",\"Burkard\",\"Buzurg\",\"Byam\",\"Byblos\",\"Byre\",\"Byrna\",\"Byrne\",\"Bysshe\",\"Cabell\",\"Cabillo\",\"Caddor\",\r\n  \"Caden\",\"Cadfael\",\"Cadmar\",\"Cadrach\",\"Cadwallader\",\"Caecyn\",\"Cael\",\"Caelon\",\"Caer\",\"Cai\",\"Cail\",\"Cairn\",\"Caitlin\",\r\n  \"Caladon\",\"Calandria\",\"Calbraith\",\"Calder\",\"Cale\",\"Caleb\",\"Calera\",\"Caliban\",\"Callan\",\"Callcott\",\"Calmic\",\"Calrohir\",\"Calumn\",\r\n  \"Calvert\",\"Camber\",\"Cambree\",\"Camiya\",\"Canina\",\"Caprice\",\"Cardon\",\"Caramon\",\"Carelia\",\"Carey\",\"Caribou\",\"Caris\",\"Carl\",\r\n  \"Carless\",\"Carli\",\"Carlyle\",\"Caryne\",\"Caron\",\"Carsten\",\"Carvell\",\"Caryl\",\"Cashin\",\"Caspian\",\"Cassandra\",\"Cassaway\",\"Cathal\",\r\n  \"Catherine\",\"Cathla'in\",\"Cathlain\",\"Cathlin\",\"Cayl\",\"Caylin\",\"Cecilia\",\"Cecily\",\"Cedric\",\"Cedrick\",\"Cedrim\",\"Celadae\",\"Celebdil\",\r\n  \"Celeborn\",\"Celeren\",\"Celes\",\"Celeste\",\"Celestine\",\"Celia\",\"Celowen\",\"Cemark\",\"Ceomyr\",\"Ceowulf\",\"Cercyon\",\"Ceremon\",\"Cerimon\",\r\n  \"Cerindar\",\"Cermor\",\"Cernd\",\"Ceryx\",\"Cespar\",\"Cevir\",\"Ceylinn\",\"Chaka\",\"Chalfant\",\"Challen\",\"Chamon\",\"Chanti\",\"Chard\",\r\n  \"Charissa\",\"Charlene\",\"Charlotte\",\"Chauncey\",\"Chauntea\",\"Chavir\",\"Chaya\",\"Checotah\",\"Chevonne\",\"Chevran\",\"Chichester\",\"Chimaera\",\"Chiodwig\",\r\n  \"Chiron\",\"Chittenden\",\"Chloe\",\"Christopher\",\"Chronepsis\",\"Chronos\",\"Chrowder\",\"Chuz\",\"Cid\",\"Cilmar\",\"Cinerva\",\"Cirkin\",\"Civar\",\r\n  \"Claed\",\"Clafin\",\"Claire\",\"Clarinda\",\"Claudia\",\"Cleghorn\",\"Clerihew\",\"Clinch\",\"Clipster\",\"Clopton\",\"Cloud\",\"Clover\",\"Clovis\",\r\n  \"Cnud\",\"Cnut\",\"Coalter\",\"Cobryn\",\"Coddry\",\"Coel\",\"Coela\",\"Cohn\",\"Colden\",\"Colgan\",\"Colmen\",\"Colon\",\"Colwyn\",\r\n  \"Coma\",\"Conall\",\"Conan\",\"Congal\",\"Conlan\",\"Conn\",\"Connell\",\"Connidas\",\"Connon\",\"Connop\",\"Conor\",\"Conrad\",\"Constantius\",\r\n  \"Conwy\",\"Conyasal\",\"Coprates\",\"Cora\",\"Coral\",\"Corbin\",\"Corellon\",\"Coren\",\"Corin\",\"Corinne\",\"Corinth\",\"Cormac\",\"Cornelius\",\r\n  \"Corrowr\",\"Corry\",\"Corryn\",\"Corwin\",\"Cotton\",\"Cowan\",\"Cowden\",\"Cowper\",\"Coyan\",\"Craigh\",\"Cray\",\"Crewzel\",\"Creydah\",\r\n  \"Cronyn\",\"Croyble\",\"Crundall\",\"Crynal\",\"Crysania\",\"Cryshandylin\",\"Cryunnos\",\"Cuall\",\"Cuane\",\"Cuddry\",\"Cuhaid\",\"Culiross\",\"Culkin\",\r\n  \"Cullen\",\"Cullyn\",\"Cuthalion\",\"Cuthbert\",\"Cylarus\",\"Cylie\",\"Cylmar\",\"Cymbeline\",\"Cyndor\",\"Cynoril\",\"Cyria\",\"Cyriel\",\"Cyrilla\",\r\n  \"Cyrillus\",\"Cyrus\",\"Cyryl\",\"Cythnar\",\"Cyton\",\"Daburn\",\"Daen\",\"Dagar\",\"Dagda\",\"Dagmar\",\"Dagni\",\"Dagny\",\"Dagwyn\",\r\n  \"Dahil\",\"Daikkah\",\"Daila\",\"Daila'in\",\"Daimhin\",\"Daimon\",\"Daisy\",\"Dakamon\",\"Dakoda\",\"Dalamar\",\"Dall\",\"Dalla\",\"Dallandra\",\r\n  \"Dalziel\",\"Damar\",\"Damien\",\"Damon\",\"Dana\",\"Danforth\",\"Daniel\",\"Dannun\",\"Dannyn\",\"Danu\",\"Danuvius\",\"Daood\",\"Daphin\",\r\n  \"Dara\",\"Daragor\",\"Darandriel\",\"Darell\",\"Darien\",\"Dario\",\"Darius\",\"Darkash\",\"Darkboon\",\"Darkspur\",\"Darlis\",\"Daron\",\"Darrell\",\r\n  \"Darrin\",\"Darvin\",\"Daryan\",\"Dashiell\",\"Dashwood\",\"Dasyani\",\"Dathan\",\"Dathanja\",\"Daugas\",\"David\",\"Davnet\",\"Davros\",\"Dawn\",\r\n  \"Dayyan\",\"Dekteon\",\"Delevan\",\"Delita\",\"Dell\",\"Dellin\",\"Delmund\",\"Demarest\",\"Demi\",\"Deminar\",\"Demtris\",\"Denethor\",\"Denhain\",\r\n  \"Denor\",\"Denton\",\"Denzil\",\"Deogol\",\"Derfel\",\"Derian\",\"Dermaria\",\"Derran\",\"Derroll\",\"Derval\",\"Dervilia\",\"Desmona\",\"Devabriel\",\r\n  \"Devaron\",\"Deveron\",\"Devra\",\"Dexter\",\"Dhakos\",\"Dhan\",\"Dharijor\",\"Dholemtrix\",\"Dhur\",\"Diadra\",\"Diagur\",\"Dian\",\"Diarmud\",\r\n  \"Diderik\",\"Diehi\",\"Dighton\",\"Dillon\",\"Dimura\",\"Dinham\",\"Dinivan\",\"Dino\",\"Dionetta\",\"Diony\",\"Dirk\",\"Dirrach\",\"Divos\",\r\n  \"Djamal\",\"Dmitri\",\"Doak\",\"Dolman\",\"Dolyan\",\"Domnu\",\"Donagh\",\"Donal\",\"Donblas\",\"Dongal\",\"Doniol\",\"Donivesh\",\"Donovan\",\r\n  \"Doral\",\"Dorea\",\"Dorian\",\"Dorin\",\"Dorn\",\"Dornhnall\",\"Dorr\",\"Dorsan\",\"Dorvai\",\"Dotta\",\"Doud\",\"Dougal\",\"Doust\",\r\n  \"Draco\",\"Dragan\",\"Dragus\",\"Dragutin\",\"Draka\",\"Drake\",\"Drako\",\"Dran\",\"Draoi\",\"Draven\",\"Drax\",\"Drayko\",\"Dred\",\r\n  \"Dreed\",\"Drexel\",\"Drezael\",\"Drezaem\",\"Drin\",\"Drinda\",\"Drion\",\"Drusilla\",\"Drynn\",\"Dréagg\",\"Duain\",\"Duald\",\"Duana\",\r\n  \"Duer\",\"Dugal\",\"Dugald\",\"Dugdale\",\"Dulasiri\",\"Dumathoin\",\"Dunbar\",\"Dundas\",\"Dunglas\",\"Dunnabar\",\"Dunstan\",\"Dunwody\",\"Duny\",\r\n  \"Dunya\",\"Dur-Shuk\",\"Duran\",\"Durek\",\"Durin\",\"Durnik\",\"Durward\",\"Dwarkanath\",\"Dweomer\",\"Dwyer\",\"Dyce\",\"Dyer\",\"Dygardo\",\r\n  \"Dyke\",\"Dylan\",\"Dymphna\",\"Dynar\",\"Dyneley\",\"Dynera\",\"Dynie\",\"Dytan\",\"Dyvim\",\"E'thane\",\"Eadweard\",\"Eager\",\"Eamon\",\r\n  \"Eanger\",\"Eardley\",\"Earle\",\"Earnest\",\"Eastman\",\"Ebany\",\"Ebba\",\"Eberhard\",\"Ebony\",\"Echael\",\"Eckert\",\"Eckhard\",\"Ector\",\r\n  \"Edcyl\",\"Edda\",\"Edeva\",\"Edgar\",\"Edina\",\"Edla\",\"Edmond\",\"Edmondstone\",\"Edric\",\"Edrie\",\"Edson\",\"Eduard\",\"Edwin\",\r\n  \"Edwina\",\"Edwyn\",\"Eevin\",\"Efiath\",\"Efrem\",\"Egan\",\"Egbert\",\"Egerton\",\"Egil\",\"Egon\",\"Egron\",\"Ehlreth\",\"Ehrman\",\r\n  \"Eilhard\",\"Eilif\",\"Eilinud\",\"Einar\",\"Eindrini\",\"Eirech\",\"Eirik\",\"Eiron\",\"Eithne\",\"Eivind\",\"Ekaterina\",\"Elaine\",\"Elath\",\r\n  \"Elbert\",\"Eldath\",\"Eldavon\",\"Eldgrim\",\"Eldid\",\"Eldin\",\"Eldon\",\"Eldred\",\"Eldric\",\"Eldrin\",\"Eldron\",\"Eldìvèn\",\"Eleanor\",\r\n  \"Eleazar\",\"Electa\",\"Elelil\",\"Elena\",\"Elendil\",\"Eleno'in\",\"Elentari\",\"Elerion\",\"Elessar\",\"Elfnida\",\"Elfnide\",\"Elfnieda\",\"Elford\",\r\n  \"Elhanan\",\"Eliakini\",\"Eliard\",\"Elinor\",\"Elion\",\"Eliseth\",\"Elispeth\",\"Elisseer\",\"Elistan\",\"Eliwood\",\"Elizabeth\",\"Ella\",\"Ellanath\",\r\n  \"Ellen\",\"Ellin\",\"Ellingwood\",\"Ellydryr\",\"Ellynor\",\"Elmeric\",\"Elmira\",\"Eloisa\",\"Elora\",\"Elowen\",\"Elrad\",\"Elric\",\"Elrik\",\r\n  \"Elrodin\",\"Elron\",\"Elrond\",\"Elsa\",\"Elsbeth\",\"Elsdon\",\"Elspeth\",\"Elswyth\",\"Elton\",\"Elu\",\"Elva\",\"Elvalind\",\"Elvarion\",\r\n  \"Elvin\",\"Elvina\",\"Elvira\",\"Elvrit\",\"Elvérion\",\"Elwell\",\"Elwin\",\"Elwyn\",\"Elysia\",\"Emberyl\",\"Emerynn\",\"Emirah\",\"Emma\",\r\n  \"Emna\",\"Emory\",\"Endemian\",\"Endicott\",\"Endoray\",\"Endrede\",\"Endsor\",\"Engeihard\",\"Enigma\",\"Enn\",\"Ennorath\",\"Envi\",\"Enzoray\",\r\n  \"Eolair\",\"Eomer\",\"Eosin\",\"Eowyn\",\"Ephyre\",\"Erana\",\"Erard\",\"Ercan\",\"Erdmann\",\"Erebor\",\"Ergon\",\"Erian\",\"Eric\",\r\n  \"Erich\",\"Erie\",\"Erik\",\"Erika\",\"Erilyth\",\"Erland\",\"Erlend\",\"Erling\",\"Ernald\",\"Ernan\",\"Ernata\",\"Errine\",\"Ervin\",\r\n  \"Eryka\",\"Eryn\",\"Esghar\",\"Eslin\",\"Esmeralda\",\"Esmond\",\"Esnar\",\"Essa\",\"Esselin\",\"Estheria\",\"Estrella\",\"Etelka\",\"Ethelbearn\",\r\n  \"Ethelbert\",\"Ethelburga\",\"Ethelred\",\"Ethelreda\",\"Eudo\",\"Eugene\",\"Eulala\",\"Evadne\",\"Evaine\",\"Evald\",\"Evan\",\"Evarts\",\"Evelina\",\r\n  \"Evelyn\",\"Everard\",\"Evert\",\"Evind\",\"Evo\",\"Evolyn\",\"Evska\",\"Ewald\",\"Ewen\",\"Ewugan\",\"Eystein\",\"Eyulf\",\"Eyvind\",\r\n  \"Ezail\",\"Ezellohar\",\"Ezirith\",\"Ezme\",\"Ezrabar\",\"Ezri\",\"Faber\",\"Fabian\",\"Fael\",\"Faelyn\",\"Fahs\",\"Fairfax\",\"Fairtnan\",\r\n  \"Falathar\",\"Falcon\",\"Falgar\",\"Fali\",\"Falias\",\"Falkiner\",\"Falmalinnar\",\"Falyrias\",\"Fanchon\",\"Fangorn\",\"Fanshaw\",\"Faraday\",\"Farah\",\r\n  \"Farale\",\"Faramir\",\"Faran\",\"Farathar\",\"Farid\",\"Farith\",\"Farli\",\"Farnham\",\"Farouk\",\"Farquhar\",\"Farrin\",\"Farwehl\",\"Fatima\",\r\n  \"Fausto\",\"Fawn\",\"Faysal\",\"Fea\",\"Feargus\",\"Fedor\",\"Feike\",\"Felam\",\"Felladin\",\"Fellador\",\"Fellathor\",\"Fellow\",\"Fenella\",\r\n  \"Fenton\",\"Fenwick\",\"Fera\",\"Ferantay\",\"Ferazhin\",\"Ferdinand\",\"Fergus\",\"Fernand\",\"Feron\",\"Feustmann\",\"Fhinders\",\"Fhorgeir\",\"Fiana\",\r\n  \"Fiathna\",\"Fielding\",\"Fikir\",\"Filippe\",\"Finarfin\",\"Finbar\",\"Findegil\",\"Findley\",\"Finegan\",\"Fingal\",\"Fingalla\",\"Fingil\",\"Finias\",\r\n  \"Finn\",\"Finnbogi\",\"Finos\",\"Fiona\",\"Fiorag\",\"Fiori\",\"Firca\",\"Firin\",\"Firon\",\"Firozhan\",\"Fistandantilus\",\"Fistar\",\"Fistor\",\r\n  \"Fitzedward\",\"Fitzroy\",\"Fizban\",\"Fjolnir\",\"Flandrena\",\"Flare\",\"Flavius\",\"Flint\",\"Floki\",\"Florimund\",\"Flosi\",\"Flygare\",\"Flynn\",\r\n  \"Fnida\",\"Fomorii\",\"Forbus\",\"Forester\",\"Fornost\",\"Foronte\",\"Fothergill\",\"Francisco\",\"Frayja\",\"Freda\",\"Frederic\",\"Frederica\",\"Frederick\",\r\n  \"Fredrick\",\"Fredrik\",\"Freeborn\",\"Freeman\",\"Frey\",\"Freya\",\"Freydis\",\"Fridgeir\",\"Frodo\",\"Fryniwyd\",\"Fuad\",\"Fumorak\",\"Furnifold\",\r\n  \"Fury\",\"Fyodor\",\"Fyodr\",\"Fyza\",\"Gaarn\",\"Gabniela\",\"Gabriel\",\"Gadsby\",\"Gaea\",\"Gael\",\"Gaelinar\",\"Gaena\",\"Gaerdal\",\r\n  \"Gaillard\",\"Gairdner\",\"Galach\",\"Galadren\",\"Galan\",\"Galanna\",\"Galapas\",\"Galaphon\",\"Galar\",\"Galbard\",\"Galderon\",\"Galdor\",\"Gale\",\r\n  \"Galeia\",\"Galen\",\"Galfrey\",\"Galion\",\"Galrandar\",\"Galrion\",\"Gama\",\"Gandalf\",\"Ganduil\",\"Ganith\",\"Gannon\",\"Ganvan\",\"Gardi\",\r\n  \"Garet\",\"Gareth\",\"Garion\",\"Garith\",\"Garl\",\"Garland\",\"Garlenon\",\"Garn\",\"Garon\",\"Garrick\",\"Garrott\",\"Garth\",\"Gartnas\",\r\n  \"Garvin\",\"Garwood\",\"Gaston\",\"Gavendra\",\"Gavin\",\"Gavina\",\"Gawain\",\"Gealsgiath\",\"Gebhard\",\"Geir\",\"Geirmund\",\"Geirstein\",\"Gelonna\",\r\n  \"Genevieve\",\"Geoffrey\",\"Georgii\",\"Gerald\",\"Gerard\",\"Gerd\",\"Gerhard\",\"Gerhart\",\"Gerloc\",\"Gerrard\",\"Gerreint\",\"Gerrish\",\"Gertrude\",\r\n  \"Gervaise\",\"Gesin\",\"Gest\",\"Ghirra\",\"Ghislain\",\"Gholson\",\"Gia\",\"Gibbon\",\"Gilberta\",\"Gilda\",\"Gilden\",\"Gildersleeve\",\"Giles\",\r\n  \"Gilfanon\",\"Gilian\",\"Gilir\",\"Gilli\",\"Gillion\",\"Gillyn\",\"Gilm\",\"Gilraen\",\"Gilthanas\",\"Gimli\",\"Gird\",\"Girin\",\"Gisgin\",\r\n  \"Gizur\",\"Gladstone\",\"Glassford\",\"Glebur\",\"Gleda\",\"Gleocyn\",\"Gleridower\",\"Glida\",\"Glogan\",\"Gloisur\",\"Glorfindel\",\"Glugwyn\",\"Glum\",\r\n  \"Glyn\",\"Glynn\",\"Gnazia\",\"Godfred\",\"Godfrey\",\"Godwin\",\"Goibhniu\",\"Golding\",\"Goldwin\",\"Gollum\",\"Gongalo\",\"Goodhue\",\"Gorbash\",\r\n  \"Gordalius\",\"Gorias\",\"Gorion\",\"Gorm\",\"Gotthard\",\"Govier\",\"Govind\",\"Gowen\",\"Grace\",\"Graham\",\"Graine\",\"Gralon\",\"Grani\",\r\n  \"Grania\",\"Gravin\",\"Greegan\",\"Greenleaf\",\"Gregor\",\"Gregory\",\"Grendahl\",\"Greyfell\",\"Grian\",\"Gridley\",\"Griffid\",\"Griffin\",\"Griffith\",\r\n  \"Griggs\",\"Grim\",\"Grima\",\"Grimhilda\",\"Grimnir\",\"Grindan\",\"Griniing\",\"Grisha\",\"Griswold\",\"Groa\",\"Grover\",\"Grunak\",\"Grunnhild\",\r\n  \"Gruumsh\",\"Gualat\",\"Gudmund\",\"Gudmundur\",\"Gudrid\",\"Gudris\",\"Gudrun\",\"Guibert\",\"Guida\",\"Guido\",\"Gulian\",\"Gunila\",\"Gunnar\",\r\n  \"Gunning\",\"Gunther\",\"Gurnarok\",\"Gurney\",\"Gustav\",\"Guthorm\",\"Guthrie\",\"Guthum\",\"Gutzon\",\"Guy\",\"Gwacyn\",\"Gwaihir\",\"Gweddyn\",\r\n  \"Gwen\",\"Gwenca\",\"Gwenda\",\"Gwendolyn\",\"Gwenevere\",\"Gweniver\",\"Gwildor\",\"Gwoc\",\"Gwomyr\",\"Gwydion\",\"Gwyn\",\"Gwyneth\",\"Gwynfryd\",\r\n  \"Gwyran\",\"Gwythinn\",\"Gyda\",\"Gylian\",\"Gymir\",\"Haakon\",\"Habib\",\"Hablot\",\"Hack\",\"Haddon\",\"Hadrian\",\"Haestan\",\"Hafez\",\r\n  \"Hafgrim\",\"Hagar\",\"Haigh\",\"Hakatri\",\"Haki\",\"Hakon\",\"Halbert\",\"Halcyon\",\"Haldane\",\"Haldor\",\"Hale\",\"Halfdan\",\"Haliina\",\r\n  \"Hall\",\"Halldis\",\"Halldor\",\"Halley\",\"Hallfred\",\"Hallfrid\",\"Hallgerd\",\"Hallkel\",\"Hallock\",\"Halloweii\",\"Hallveig\",\"Halvord\",\"Hamlin\",\r\n  \"Hamnet\",\"Hanford\",\"Hani\",\"Haninah\",\"Hannibal\",\"Hanoran\",\"Hansine\",\"Hapweth\",\"Harald\",\"Harbaugh\",\"Harcourt\",\"Hardernan\",\"Hardon\",\r\n  \"Hardwicke\",\"Harek\",\"Harkness\",\"Harlan\",\"Harlo\",\"Harold\",\"Haroon\",\"Harpo\",\"Harren\",\"Harthan\",\"Harthran\",\"Hartpole\",\"Hartwig\",\r\n  \"Harwood\",\"Hasket\",\"Hassan\",\"Hastein\",\"Hatcher\",\"Hattrick\",\"Hauk\",\"Havard\",\"Havelock\",\"Hayvan\",\"Hazard\",\"Hazel\",\"Haziran\",\r\n  \"Hazrond\",\"Healdon\",\"Heardred\",\"Heaslip\",\"Heather\",\"Hector\",\"Hedda\",\"Hedin\",\"Hedwig\",\"Heimer\",\"Helena\",\"Helga\",\"Helgi\",\r\n  \"Helir\",\"Helix\",\"Helm\",\"Helma\",\"Helmi\",\"Heman\",\"Hemming\",\"Hendrik\",\"Hengist\",\"Henna\",\"Henrick\",\"Henry\",\"Geramon\",\r\n  \"Herdis\",\"Herekin\",\"Hereward\",\"Herijar\",\"Hermione\",\"Heron\",\"Hertha\",\"Heryom\",\"Herzog\",\"Heward\",\"Hhaba'id\",\"Hhabezur\",\"Hickling\",\r\n  \"Hidohebhi\",\"Hifryn\",\"Hild\",\"Hilda\",\"Hildebrand\",\"Hildegarde\",\"Hildric\",\"Himli\",\"Hisar\",\"Hislop\",\"Hjalmar\",\"Hjalti\",\"Hjeldin\",\r\n  \"Hjort\",\"Hjorth\",\"Hlif\",\"Hoadley\",\"Hoar\",\"Hobart\",\"Hodgdon\",\"Hogg\",\"Hogni\",\"Holbrook\",\"Holger\",\"Holgi\",\"Hollister\",\r\n  \"Holly\",\"Homli\",\"Hookham\",\"Horan\",\"Horatio\",\"Hord\",\"Horik\",\"Hormstein\",\"Horsa\",\"Hortensia\",\"Horton\",\"Hoskuld\",\"Hosni\",\r\n  \"Hossein\",\"Howarth\",\"Howland\",\"Hrafn\",\"Hrapp\",\"Hrefna\",\"Hrethel\",\"Hring\",\"Hroald\",\"Hrodyn\",\"Hrolf\",\"Hrothgar\",\"Hrugan\",\r\n  \"Hruggek\",\"Hruse\",\"Hrut\",\"Huffatn\",\"Hulbeart\",\"Hulda\",\"Hultz\",\"Humbert\",\"Hunter\",\"Hurd\",\"Hurgal\",\"Hurvin\",\"Hussain\",\r\n  \"Hustana\",\"Hyarantar\",\"Hyarante\",\"Hyder\",\"Hyfryn\",\"Hygelac\",\"Hylissa\",\"Hynman\",\"Hyrak\",\"Ian\",\"Iana\",\"Ibitz\",\"Ibrahim\",\r\n  \"Ibrandul\",\"Ica\",\"Icarus\",\"Icava\",\"Ick\",\"Ida\",\"Idarolan\",\"Iden\",\"Idris\",\"Iduna\",\"Iduné\",\"Ies'lorn\",\"Igjaru\",\r\n  \"Igor\",\"Ikarin\",\"Ilena\",\"Ilermath\",\"Ilia\",\"Iliriya\",\"Illentik\",\"Illuin\",\"Illyana\",\"Ilmare\",\"Ilniora\",\"Ilthoss\",\"Iluvatar\",\r\n  \"Ilya\",\"Ilyesha\",\"Imajin\",\"Imnar\",\"Imoen\",\"Imphela\",\"Imrador\",\"Imrahan\",\"Imrahim\",\"Imril\",\"Imryr\",\"Inahwen\",\"Indech\",\r\n  \"Indigo\",\"Indira\",\"Indreju\",\"Indria\",\"Ingald\",\"Ingeborg\",\"Ingen\",\"Ingi\",\"Ingirid\",\"Ingolf\",\"Ingram\",\"Ingrid\",\"Ingunn\",\r\n  \"Inifael\",\"Inigo\",\"Inisfa'il\",\"Iosaz\",\"Iosef\",\"Irgash\",\"Irial\",\"Irian\",\"Iris\",\"Irma\",\"Irphilin\",\"Irsai\",\"Irvin\",\r\n  \"Irwick\",\"Isael\",\"Isak\",\"Isambard\",\"Isbeorn\",\"Iscal\",\"Iselore\",\"Isengard\",\"Isengrim\",\"Iserion\",\"Isgrimnur\",\"Ishmael\",\"Isidora\",\r\n  \"Isiki\",\"Isildur\",\"Isilith\",\"Isleif\",\"Ismail\",\"Isolde\",\"Isorn\",\"Issak\",\"Ithaca\",\"Iuz\",\"Ivan\",\"Ivar\",\"Ivor\",\r\n  \"Ivy\",\"Iwanda\",\"Iyu'nigato\",\"Izard\",\"Izebel\",\"Izvire\",\"Jace\",\"Jacinth\",\"Jacoby\",\"Jacor\",\"Jade\",\"Jaden\",\"Jadzia\",\r\n  \"Jael\",\"Jaffar\",\"Jagadis\",\"Jaheira\",\"Jahrec\",\"Jahverbhai\",\"Jalasil\",\"Jalavier\",\"Jaligal\",\"Jamila\",\"Janda'nan\",\"Jandanan\",\"Janix\",\r\n  \"Janna\",\"Janus\",\"Janvel\",\"Jarak\",\"Jarazal\",\"Jared\",\"Jarek\",\"Jarnagua\",\"Jarriel\",\"Jarvin\",\"Jasara\",\"Jasek\",\"Jaseve\",\r\n  \"Jasha\",\"Jasmine\",\"Jason\",\"Javair\",\"Javon\",\"Jawaharial\",\"Jayce\",\"Jayden\",\"Jaylidan\",\"Jayna\",\"Jaysen\",\"Jazhara\",\"Jazrel\",\r\n  \"Jedd\",\"Jeffen\",\"Jehryn\",\"Jelyn\",\"Jenantar\",\"Jenkin\",\"Jennifer\",\"Jens\",\"Jensine\",\"Jephson\",\"Jerec\",\"Jeryth\",\"Jesiper\",\r\n  \"Jespar\",\"Jesslyn\",\"Jestyn\",\"Jethis\",\"Jevan\",\"Jevist\",\"Jezryanadar\",\"Jhael\",\"Jhaelen\",\"Jhany\",\"Jhardamòr\",\"Jharkor\",\"Jhary\",\r\n  \"Jihad\",\"Jillian\",\"Jingizu\",\"Jintah\",\"Jiriki\",\"Jirnost\",\"Jocelyn\",\"Jochan\",\"Johannes\",\"John\",\"Jolan\",\"Jomano\",\"Jonaya\",\r\n  \"Joran\",\"Jordan\",\"Joriel\",\"Jornadesh\",\"Jorunn\",\"Joscelyn\",\"Joseph\",\"Josephine\",\"Josette\",\"Joshua\",\"Jotham\",\"Jovena\",\"Jubini\",\r\n  \"Jullana\",\"Junius\",\"Juno\",\"Juntalin\",\"Jura\",\"Jurim\",\"Jusif\",\"Juss\",\"Jyresh\",\"K'aarna\",\"Kaarna\",\"Kael\",\"Kaelin\",\r\n  \"Kaffa\",\"Kai\",\"Kaia\",\"Kailyn\",\"Kaimana\",\"Kaitlinn\",\"Kaja\",\"Kalan\",\"Kalantir\",\"Kalar\",\"Kaldar\",\"Kaleen\",\"Kalen\",\r\n  \"Kalf\",\"Kalia\",\"Kalina\",\"Kalvan\",\"Kalvaro\",\"Kalyra\",\"Kalysha\",\"Kamril\",\"Kamshir\",\"Kanoa\",\"Kaori\",\"Kaprin\",\"Kara\",\r\n  \"Karali\",\"Karel\",\"Karelia\",\"Kari\",\"Karim\",\"Karinca\",\"Karine\",\"Karis\",\"Karitsa\",\"Karker\",\"Karl\",\"Karlsefni\",\"Karran\",\r\n  \"Karya\",\"Kaschak\",\"Kasia\",\"Kaspar\",\"Kasreyn\",\"Kathena\",\"Kathran\",\"Katishimo\",\"Katla\",\"Katnina\",\"Katrin\",\"Katrina\",\"Kavalam\",\r\n  \"Kavalnir\",\"Kaylianna\",\"Kaylin\",\"Kazairl\",\"Kazalim\",\"Kazir\",\"Keavy\",\"Keelan\",\"Kegan\",\"Keiko\",\"Keldorn\",\"Kelin\",\"Kellin\",\r\n  \"Kelma'in\",\"Kelson\",\"Kelth\",\"Kelvin\",\"Kemble\",\"Kendall\",\"Kendra\",\"Kendrick\",\"Kenesaw\",\"Kenin\",\"Kenny\",\"Kenobi\",\"Kenrick\",\r\n  \"Kerik\",\"Kerish\",\"Kermit\",\"Kerrigan\",\"Keshar\",\"Kesrick\",\"Kethios\",\"Ketial\",\"Ketil\",\"Kettali\",\"Kevan\",\"Keven\",\"Kevlin\",\r\n  \"Keyrnon\",\"Khader\",\"Khalia\",\"Khalid\",\"Khanzadian\",\"Kharas\",\"Khealynn\",\"Khelben\",\"Kheldor\",\"Khelen\",\"Khelin\",\"Khelyn\",\"Khendraja'aro\",\r\n  \"Khenel\",\"Khezeed\",\"Khindawe\",\"Khirsha\",\"Khlor\",\"Khris\",\"Khyved\",\"Ki'ushapo\",\"Kian\",\"Kiborno\",\"Kiera\",\"Kieran\",\"Kikkasut\",\r\n  \"Kilas\",\"Kilian\",\"Killion\",\"Kimmuriel\",\"Kimura\",\"Kinloch\",\"Kinson\",\"Kippler\",\"Kira\",\"Kiri\",\"Kirjava\",\"Kirk\",\"Kirren\",\r\n  \"Kirsopp\",\"Kirsten\",\"Kishin\",\"Kisin\",\"Kitiara\",\"Kjeldor\",\"Kjindar\",\"Klaus\",\"Klean\",\"Klerak\",\"Knud\",\"Knut\",\"Knute\",\r\n  \"Koabon\",\"Kolbein\",\"Kolchash\",\"Kolskegg\",\"Kolya\",\"Kona\",\"Konrad\",\"Konstantine\",\"Korban\",\"Kord\",\"Koreth\",\"Korgan\",\"Korm\",\r\n  \"Kormar\",\"Kornag\",\"Korska\",\"Kosh\",\"Kota\",\"Kovelir\",\"Krinn\",\"Krishnalai\",\"Kroh\",\"Krom\",\"Kronos\",\"Kuno\",\"Kurd\",\r\n  \"Kurn\",\"Kurt\",\"Kurin\",\"Kuros\",\"Kurtulmak\",\"Ky'ishi\",\"Ky'varan\",\"Kyle\",\"Kylindra\",\"Kypros\",\"Kyrie\",\"Kyriel\",\"La'ahl\",\r\n  \"Lachesis\",\"Lachian\",\"Ladia\",\"Ladoros\",\"Laeli\",\"Laelia\",\"Laerrui\",\"Lahar\",\"Lahsai\",\"Lalely\",\"Lamar\",\"Lambi\",\"Lan\",\r\n  \"Lana\",\"Lance\",\"Lancelot\",\"Landailyn\",\"Landoris\",\"Landrea\",\"Laneth\",\"Langhorne\",\"Langrian\",\"Langston\",\"Lanthal\",\"Lanthorn\",\"Larad\",\r\n  \"Lardner\",\"Larisa\",\"Larkin\",\"Larn\",\"Larnea\",\"Lars\",\"Larz\",\"Lashar\",\"Lateia\",\"Lathander\",\"Laurana\",\"Laurelin\",\"Laxton\",\r\n  \"Lazar\",\"Lazlo\",\"Lea\",\"Leareth\",\"Leathian\",\"Lec\",\"Ledyard\",\"Leela\",\"Legolas\",\"Legrand\",\"Leif\",\"Leighton\",\"Leika\",\r\n  \"Leila\",\"Leilah\",\"Leli\",\"Lembar\",\"Lenka\",\"Lenox\",\"Leo\",\"Leofric\",\"Leon\",\"Leonard\",\"Leonardo\",\"Leopond\",\"Lesesne\",\r\n  \"Lestyn\",\"Leta\",\"Letor\",\"Lev\",\"Lewellyri\",\"Lexan\",\"Lexx\",\"Lhuc\",\"Lia\",\"Liana\",\"Liena\",\"Lightfoot\",\"Liliane\",\r\n  \"Lilin\",\"Lina\",\"Lindar\",\"Linmer\",\"Linnea\",\"Lios\",\"Liphar\",\"Lippard\",\"Liptrot\",\"Lirith\",\"Lithar\",\"Littleton\",\"Livermore\",\r\n  \"Livia\",\"Ljot\",\"Ljotolf\",\"Lluth\",\"Llyn\",\"Llythin\",\"Lobelia\",\"Lobryn\",\"Lobur\",\"Locke\",\"Lockwood\",\"Loddlaen\",\"Lodica\",\r\n  \"Lodin\",\"Loella\",\"Logan\",\"Loibur\",\"Loili\",\"Lola\",\"Lonvan\",\"Lore\",\"Loric\",\"Lorin\",\"Lormyr\",\"Lothar\",\"Lothrop\",\r\n  \"Lott\",\"Lotta\",\"Loudon\",\"Louisa\",\"Lovegood\",\"Lovva\",\"Lovyan\",\"Luas\",\"Lucan\",\"Lucca\",\"Lucia\",\"Lucian\",\"Lucinda\",\r\n  \"Lucius\",\"Lucrecia\",\"Ludmila\",\"Luella\",\"Lufkin\",\"Lugh\",\"Luhsane\",\"Lum\",\"Lumbar\",\"Luna\",\"Lunar\",\"Lunetta\",\"Lupin\",\r\n  \"Lurican\",\"Lurue\",\"Luscan\",\"Luther\",\"Luthian\",\"Luvina\",\"Lycias\",\"Lydia\",\"Lylas\",\"Lyle\",\"Lymo\",\"Lyndall\",\"Lyndon\",\r\n  \"Lynette\",\"Lynis\",\"Lynn\",\"Lypilla\",\"Lyra\",\"Lyrian\",\"Lyrin\",\"Lyron\",\"Lysander\",\"Lyssa\",\"Lythia\",\"Lythian\",\"Lytler\",\r\n  \"Lyzandra\",\"Lyzette\",\"Lórien\",\"Mabon\",\"Macallan\",\"Macaulay\",\"Macer\",\"Mackim\",\"Macvey\",\"Maddern\",\"Maddock\",\"Madelon\",\"Madhao\",\r\n  \"Madora\",\"Maec\",\"Maegwin\",\"Mael\",\"Maerraent\",\"Mafka\",\"Magda\",\"Magh\",\"Magill\",\"Magna\",\"Magnus\",\"Magus\",\"Mahion\",\r\n  \"Mahmud\",\"Mahri\",\"Maia\",\"Maidah\",\"Maidak\",\"Maihar\",\"Makoma\",\"Malach\",\"Malachias\",\"Maladack\",\"Malador\",\"Malak\",\"Malar\",\r\n  \"Malcoff\",\"Malcolm\",\"Malfar\",\"Malia\",\"Maliforin\",\"Malkil\",\"Malto\",\"Malvin\",\"Malvtha\",\"Mama\",\"Mamba\",\"Mana\",\"Manala\",\r\n  \"Manaverr\",\"Manfred\",\"Mankey\",\"Mannin\",\"Manon\",\"Mansour\",\"Manton\",\"Manwe\",\"Maoll\",\"March\",\"Marcus\",\"Marena\",\"Margarita\",\r\n  \"Margery\",\"Mariandor\",\"Marid\",\"Marina\",\"Marion\",\"Marissa\",\"Marisse\",\"Mark\",\"Markham\",\"Maroof\",\"Marques\",\"Marsden\",\"Marshtnan\",\r\n  \"Marsineh\",\"Marta\",\"Martin\",\"Martus\",\"Mary\",\"Maryn\",\"Mathilda\",\"Mathilde\",\"Matilda\",\"Matthew\",\"Matthias\",\"Maudlin\",\"Maura\",\r\n  \"Mavis\",\"Maxander\",\"Maxfield\",\"Maximilian\",\"Maximus\",\"Maya\",\"Mayhew\",\"Mazrak\",\"Medar\",\"Medart\",\"Medea\",\"Meder\",\"Medrom\",\r\n  \"Megan\",\"Meghnad\",\"Mehmet\",\"Mekeesha\",\"Melba\",\"Melchior\",\"Meleri\",\"Meliadoul\",\"Melian\",\"Melisande\",\"Melkor\",\"Mellyora\",\"Melnyth\",\r\n  \"Melora\",\"Melva\",\"Melvaig\",\"Memor\",\"Men\",\"Menard\",\"Mendolin\",\"Menelvagor\",\"Mennefer\",\"Meoran\",\"Mephistopheles\",\"Merah\",\"Merasye\",\r\n  \"Meredith\",\"Meriadoc\",\"Merifa\",\"Merivan\",\"Merlin\",\"Merrilee\",\"Merryn\",\"Mervyn\",\"Merwold\",\"Merwolf\",\"Mes'ard\",\"Meta\",\"Methos\",\r\n  \"Methuen\",\"Michael\",\"Michel\",\"Mideya\",\"Midhat\",\"Midra\",\"Mignon\",\"Miguel\",\"Mikhail\",\"Mila\",\"Milada\",\"Milander\",\"Milandro\",\r\n  \"Mileaha\",\"Millard\",\"Milo\",\"Mimir\",\"Mina\",\"Minella\",\"Miner\",\"Minna\",\"Minx\",\"Mira\",\"Miragon\",\"Miranda\",\"Mirandros\",\r\n  \"Miriel\",\"Mirrash\",\"Mirromi\",\"Miryam\",\"Misha\",\"Mishanti\",\"Misin\",\"Mist\",\"Mithrandir\",\"Mithryl\",\"Mitre\",\"Miwa\",\"Mizra\",\r\n  \"Moda\",\"Modeus\",\"Moffett\",\"Mohammed\",\"Mohieddin\",\"Moina\",\"Moira\",\"Moiriane\",\"Moisur\",\"Molina\",\"Mona\",\"Monach\",\"Montfort\",\r\n  \"Mora\",\"Moradin\",\"Mord\",\"Moredlin\",\"Morgan\",\"Morgon\",\"Morgwin\",\"Moriana\",\"Morik\",\"Morin\",\"Morley\",\"Morna\",\"Morpheus\",\r\n  \"Morrigan\",\"Mortos\",\"Mortrock\",\"Morven\",\"Moya\",\"Muammar\",\"Mubur\",\"Muhammed\",\"Muhlwena\",\"Mujibur\",\"Muktar\",\"Munin\",\"Murdo\",\r\n  \"Murias\",\"Murina\",\"Murrough\",\"Mussa\",\"Mustadio\",\"Mustafa\",\"Mylin\",\"Mylé\",\"Myna\",\"Myra\",\"Myriam\",\"Myrick\",\"Myrmeen\",\r\n  \"Myrna\",\"Myron\",\"Myrrdyn\",\"Myrrha\",\"Myshella\",\"Mythil\",\"Myvor\",\"N'hadha\",\"Nada\",\"Nadezhda\",\"Nadia\",\"Nadir\",\"Nagai\",\r\n  \"Nagel\",\"Nagvar\",\"Nahar\",\"Naia\",\"Naidel\",\"Najib\",\"Nakea\",\"Nalia\",\"Nall\",\"Nanorion\",\"Naois\",\"Naomi\",\"Napollo\",\r\n  \"Narasen\",\"Narcista\",\"Narisa\",\"Narvi\",\"Nasir\",\"Nasser\",\"Natalia\",\"Natasha\",\"Nathalia\",\"Nathalie\",\"Natty\",\"Nazar\",\"Nebron\",\r\n  \"Nedda\",\"Nedstar\",\"Neelix\",\"Negley\",\"Nemm\",\"Nemuel\",\"Neral\",\"Neri\",\"Nerian\",\"Nerilka\",\"Nerissa\",\"Nerull\",\"Nesbit\",\r\n  \"Nesta\",\"Nethuan\",\"Neva\",\"Nevaeh\",\"Nevard\",\"Nevena\",\"Nevile\",\"Nevyn\",\"Newall\",\"Newbold\",\"Newman\",\"Neysa\",\"Neza\",\r\n  \"Nibbidard\",\"Nichol\",\"Nicor\",\"Nienna\",\"Night\",\"Nigil\",\"Nikolai\",\"Nikua\",\"Nila\",\"Nimir\",\"Nimrodel\",\"Nina\",\"Ninian\",\r\n  \"Niomir\",\"Nira'in\",\"Nirnir\",\"Nita\",\"Nivek\",\"Nivilian\",\"Nizam\",\"Nizar\",\"Nobanion\",\"Nodaran\",\"Noela\",\"Nolan\",\"Nona\",\r\n  \"Noora\",\"Nor\",\"Nordri\",\"Noreen\",\"Norine\",\"Norle\",\"Norna\",\"Norval\",\"Norvin\",\"Norwood\",\"Nova\",\"Novalis\",\"Novita\",\r\n  \"Novomira\",\"Nu'endo\",\"Nuada\",\"Nuadi\",\"Nuala\",\"Nuale\",\"Nuanni\",\"Nungo\",\"Nunila\",\"Nura\",\"Nurdoch\",\"Nurgan\",\"Nuri\",\r\n  \"Nushia\",\"Nyassa\",\"Nylan\",\"Nymara\",\"Nynaeve\",\"Nyra\",\"Nytasa\",\"Oakes\",\"Oalyn\",\"Obed\",\"Oberon\",\"Ocar\",\"Oda\",\r\n  \"Odar\",\"Odd\",\"Oden\",\"Odilia\",\"Odimus\",\"Odo\",\"Odona\",\"Ofeig\",\"Ogden\",\"Oghma\",\"Ogma\",\"Ogmund\",\"Ogrus\",\r\n  \"Okander\",\"Olac\",\"Olaf\",\"Oldac\",\"Oldham\",\"Olga\",\"Olissa\",\"Olof\",\"Olorin\",\"Oloru\",\"Olvir\",\"Olya\",\"Omandras\",\r\n  \"Omar\",\"Omassus\",\"Ombrum\",\"Omer\",\"Onslow\",\"Onufrio\",\"Onund\",\"Onyx\",\"Ooma\",\"Oona\",\"Oonai\",\"Opal\",\"Ophelia\",\r\n  \"Orah\",\"Orcrist\",\"Ordway\",\"Oriana\",\"Orin\",\"Orion\",\"Orius\",\"Orivaen\",\"Orlandu\",\"Orlata\",\"Orm\",\"Ormsby\",\"Orome\",\r\n  \"Oron\",\"Orren\",\"Orridge\",\"Orsola\",\"Orson\",\"Osa\",\"Osiris\",\"Oskavar\",\"Ospar\",\"Osric\",\"Oswin\",\"Othello\",\"Othilia\",\r\n  \"Otho\",\"Othran\",\"Otiluke\",\"Otkel\",\"Otrygg\",\"Ottar\",\"Ottilia\",\"Otto\",\"Overton\",\"Owain\",\"Owen\",\"Owyn\",\"Ozatras\",\r\n  \"Ozto\",\"Ozur\",\"Padraic\",\"Padrias\",\"Paget\",\"Pala\",\"Palma\",\"Pamar\",\"Pan\",\"Parbha\",\"Pargascor\",\"Parr\",\"Pasca\",\r\n  \"Paschal\",\"Passmore\",\"Patnas\",\"Pattabhai\",\"Pavel\",\"Pean\",\"Pearl\",\"Pearsall\",\"Peffer\",\"Peiham\",\"Peitar\",\"Peleg\",\"Pelipi\",\r\n  \"Pellin\",\"Pendleton\",\"Penfield\",\"Pengolod\",\"Penhallow\",\"Penniman\",\"Penrhyn\",\"Pepperell\",\"Pereban\",\"Peredon\",\"Peregrin\",\"Peregrine\",\"Perith\",\r\n  \"Peronn\",\"Perrin\",\"Persifor\",\"Pestivar\",\"Peter\",\"Pethros\",\"Petra\",\"Petrea\",\"Petronella\",\"Pflarr\",\"Phanuel\",\"Pharatnond\",\"Pharcellus\",\r\n  \"Phelim\",\"Philo\",\"Philpot\",\"Phimister\",\"Phoenix\",\"Phyrrus\",\"Pia\",\"Picar\",\"Pickman\",\"Pigot\",\"Pike\",\"Pine\",\"Pinkham\",\r\n  \"Pinkney\",\"Pinkstone\",\"Piotr\",\"Pittheus\",\"Plaisted\",\"Plunimer\",\"Plunkett\",\"Polassar\",\"Pollard\",\"Pollock\",\"Polonius\",\"Polycarp\",\"Pomeroy\",\r\n  \"Porthios\",\"Powell\",\"Prafulla\",\"Prendergast\",\"Preston\",\"Prichard\",\"Proctor\",\"Prospero\",\"Provida\",\"Psilofyr\",\"Puck\",\"Pue\",\"Pulisk\",\r\n  \"Pulteney\",\"Purdon\",\"Pyke\",\"Pyros\",\"Pysander\",\"Quaan\",\"Quagel\",\"Qualin\",\"Quan\",\"Quarles\",\"Quasar\",\"Quascar\",\"Quass\",\r\n  \"Quebba\",\"Quelfinas\",\"Quesan\",\"Queygo\",\"Quiddle\",\"Quinn\",\"Quiss\",\"Quixano\",\"Quora\",\"Quvar\",\"Quvean\",\"Raagon\",\"Raban\",\r\n  \"Rabind\",\"Rabur\",\"Rach\",\"Rachid\",\"Rackafel\",\"Rackhir\",\"Radagast\",\"Radija\",\"Rae\",\"Rael\",\"Raen\",\"Rafa\",\"Rafael\",\r\n  \"Rafur\",\"Ragen\",\"Ragna\",\"Ragnal\",\"Ragnar\",\"Ragnhild\",\"Rahaz\",\"Rai\",\"Raikes\",\"Rails\",\"Raimon\",\"Raina\",\"Raine\",\r\n  \"Raisa\",\"Raistlin\",\"Ralina\",\"Ralmanor\",\"Ralph\",\"Ramen\",\"Ramli\",\"Ramman\",\"Ramona\",\"Ramora\",\"Ramous\",\"Ramza\",\"Ranald\",\r\n  \"Ranath\",\"Rancor\",\"Rand\",\"Randar\",\"Randoer\",\"Randolf\",\"Randor\",\"Ranfurly\",\"Ranjan\",\"Rankin\",\"Rannuif\",\"Rannveig\",\"Raphael\",\r\n  \"Rary\",\"Rashiel\",\"Rasputin\",\"Rathack\",\"Rathanos\",\"Rathgar\",\"Rattray\",\"Rauros\",\"Ravenor\",\"Ravi\",\"Rayne\",\"Razamor\",\"Raziel\",\r\n  \"Razzan\",\"Rebecca\",\"Recoun\",\"Redcliffe\",\"Regalorn\",\"Regnar\",\"Reina\",\"Reis\",\"Relm\",\"Rem\",\"Remi\",\"Remnor\",\"Remus\",\r\n  \"Renar\",\"Renata\",\"Rendel\",\"Rengoll\",\"Reoc\",\"Resha\",\"Rethral\",\"Reva\",\"Rex\",\"Reyna\",\"Rezah\",\"Rhadry\",\"Rhaederle\",\r\n  \"Rhaeryn\",\"Rhea\",\"Rhiannon\",\"Rhiow\",\"Rhodhy\",\"Rhona\",\"Rhonda\",\"Rhora\",\"Rhorleif\",\"Rhorvald\",\"Rhundas\",\"Rhymer\",\"Rhynn\",\r\n  \"Rhys\",\"Riallus\",\"Riamon\",\"Rickard\",\"Ricyn\",\"Rigolio\",\"Rilir\",\"Rinaldus\",\"Ringgold\",\"Risaya\",\"Riss\",\"Rith\",\"Riven\",\r\n  \"Roach\",\"Roark\",\"Rockhill\",\"Rodefer\",\"Roderic\",\"Rodhan\",\"Rognvald\",\"Roignar\",\"Roland\",\"Rolf\",\"Rollo\",\"Roman\",\"Romelia\",\r\n  \"Romer\",\"Romney\",\"Ronan\",\"Root\",\"Rorik\",\"Rosalyn\",\"Rosamund\",\"Roscoe\",\"Rose\",\"Rosefyre\",\"Roseline\",\"Roshena\",\"Rosskeen\",\r\n  \"Roundell\",\"Rowena\",\"Ruadan\",\"Ruan\",\"Rubar\",\"Ruben\",\"Rubrick\",\"Ruby\",\"Rucker\",\"Rudyard\",\"Rufina\",\"Rufus\",\"Ruggles\",\r\n  \"Ruhollah\",\"Ruinar\",\"Rulian\",\"Rulinian\",\"Rumil\",\"Runa\",\"Runold\",\"Runolf\",\"Runus\",\"Rurik\",\"Rusgar\",\"Ruth\",\"Rutland\",\r\n  \"Ruwen\",\"Ryana\",\"Rycaro\",\"Rychanna\",\"Rygar\",\"Ryll\",\"Rylla\",\"Rynnyn\",\"Ryodan\",\"Ryoga\",\"Ryoka\",\"Saalem\",\"Sabal\",\r\n  \"Sabhel\",\"Sabriel\",\"Sabrok\",\"Sacheverall\",\"Sackville\",\"Saddam\",\"Sadler\",\"Sador\",\"Saedd\",\"Saermund\",\"Saeunn\",\"Safrin\",\"Saia\",\r\n  \"Said\",\"Saifai\",\"Saiwyn\",\"Salina\",\"Salmon\",\"Salter\",\"Sam\",\"Sambrea\",\"Samia\",\"Samira\",\"Sammel\",\"Samuel\",\"Sanfrid\",\r\n  \"Sano'rye\",\"Sanoreya\",\"Sanoria\",\"Sarcyn\",\"Sardior\",\"Sardul\",\"Sarel\",\"Sarevok\",\"Sargonus\",\"Saria\",\"Sarina\",\"Sarisin\",\"Sariya\",\r\n  \"Sarrask\",\"Saruman\",\"Sasha\",\"Saska\",\"Saturn\",\"Sauron\",\"Savah\",\"Savion\",\"Sawdon\",\"Sayan\",\"Scenesefa\",\"Scudamore\",\"Scythe\",\r\n  \"Sebastian\",\"Sebrinth\",\"Sechier\",\"Sedgely\",\"Seersha\",\"Segojan\",\"Sehanine\",\"Seitarin\",\"Selema\",\"Selena\",\"Selene\",\"Selig\",\"Selim\",\r\n  \"Selina\",\"Selis\",\"Selith\",\"Selune\",\"Selwyn\",\"Semuta\",\"Senith\",\"Senna\",\"Sephia\",\"Sephya\",\"Sepiroth\",\"Seramir\",\"Seraphina\",\r\n  \"Serena\",\"Serenyi\",\"Sergei\",\"Seriozha\",\"Seryan\",\"Seryl\",\"Seryth\",\"Seth\",\"Sethron\",\"Sevadia\",\"Severin\",\"Sevros\",\"Sevy\",\r\n  \"Sha'dar\",\"Sha'rell\",\"Shackerley\",\"Shadizad\",\"Shadrach\",\"Shadworth\",\"Shaera\",\"Shaivar\",\"Shaivir\",\"Shala\",\"Shalamar\",\"Shalandain\",\"Shalat\",\r\n  \"Shalhassan\",\"Shalindra\",\"Shalon\",\"Shalpan\",\"Shamane\",\"Shamir\",\"Shana\",\"Shandalar\",\"Shanell\",\"Shar\",\"Sharada\",\"Sharaq\",\"Shard\",\r\n  \"Sharif\",\"Sharilla\",\"Sharl\",\"Sharla\",\"Sharmaine\",\"Sharman\",\"Sharna\",\"Sharnira\",\"Sharra\",\"Sharteel\",\"Shaundra\",\"Sharyn\",\"Shayera\",\r\n  \"Shayla\",\"Shayll\",\"Shayonea\",\"Shea\",\"Sheegoth\",\"Sheeryl\",\"Sheherazad\",\"Shemsin\",\"Sheridan\",\"Sherif\",\"Sherry\",\"Shezael\",\"Shima'onari\",\r\n  \"Shintaro\",\"Shiza\",\"Shuinn\",\"Shuna\",\"Shurakai\",\"Shurik\",\"Shushila\",\"Shylock\",\"Siandar\",\"Sibert\",\"Sibyl\",\"Sidhe\",\"Siglinde\",\r\n  \"Sigmund\",\"Signe\",\"Sigred\",\"Sigrid\",\"Sigtrydd\",\"Sigurd\",\"Sigvaldi\",\"Silatasar\",\"Silius\",\"Silma\",\"Silmariel\",\"Silphane\",\"Silvain\",\r\n  \"Silvan\",\"Silvanus\",\"Silvera\",\"Silveron\",\"Silvia\",\"Silvyn\",\"Simir\",\"Simmu\",\"Sinbad\",\"Sindarin\",\"Sinir\",\"Sinjin\",\"Siranush\",\r\n  \"Sirisir\",\"Sirli'in\",\"Sirona\",\"Sirranon\",\"Sirwin\",\"Sisimar\",\"Siski\",\"Sivesh\",\"Siveth\",\"Siward\",\"Sjerdi\",\"Skamkel\",\"Skelmar\",\r\n  \"Skorian\",\"Slade\",\"Slania\",\"Slater\",\"Slava\",\"Sligh\",\"Slingsby\",\"Smedley\",\"Snargg\",\"Snorri\",\"Snyder\",\"Sodorn\",\"Soilir\",\r\n  \"Soisil\",\"Sokki\",\"Solaris\",\"Solera\",\"Solevig\",\"Solmund\",\"Solomon\",\"Solvi\",\"Sonnet\",\"Sooth\",\"Sora\",\"Sorass\",\"Sorcha\",\r\n  \"Sorin\",\"Sornovas\",\"Soth\",\"Southall\",\"Sovaz\",\"Soveh\",\"Soyadi\",\"Sparrow\",\"Sprigg\",\"Squall\",\"Srass\",\"Stabyl\",\"Stanwood\",\r\n  \"Starkad\",\"Starke\",\"Stedman\",\"Stefan\",\"Stehman\",\"Stein\",\"Steinkel\",\"Steinthor\",\"Stelectra\",\"Stenger\",\"Stenwulf\",\"Steponas\",\"Sterndale\",\r\n  \"Stetson\",\"Stetter\",\"Stiliman\",\"Stilingfleet\",\"Stopford\",\"Storm\",\"Stowna\",\"Strachan\",\"Straygoth\",\"Stroud\",\"Strudwick\",\"Strybyorn\",\"Strykar\",\r\n  \"Sturla\",\"Sturm\",\"Styx\",\"Sudeha\",\"Suleiman\",\"Sulimo\",\"Sulkas\",\"Sumarlidi\",\"Suras\",\"Surridge\",\"Susin\",\"Susur\",\"Sutan\",\r\n  \"Svala\",\"Svan\",\"Svante\",\"Svatopluk\",\"Sveata\",\"Sven\",\"Swain\",\"Swartwout\",\"Sydnor\",\"Syllva\",\"Sylvane\",\"Sylvia\",\"Sylvin\",\r\n  \"Sylvine\",\"Syndarra\",\"Synnyn\",\"Syranita\",\"Syrioll\",\"Tabar\",\"Tabitha\",\"Tabor\",\"Tabu\",\"Tacey\",\"Tachel\",\"Tadashi\",\"Tadeus\",\r\n  \"Tadia\",\"Tadisha\",\"Tadra\",\"Taennyn\",\"Taeynnyn\",\"Taggart\",\"Tahir\",\"Tailabar\",\"Taina\",\"Takhisis\",\"Taleen\",\"Talen\",\"Taleth\",\r\n  \"Talia\",\"Taliesin\",\"Talin\",\"Talmora\",\"Talobar\",\"Talona\",\"Taloxi\",\"Taltos\",\"Talus\",\"Tamar\",\"Tamara\",\"Tameryn\",\"Tamias\",\r\n  \"Tamlin\",\"Tamoreya\",\"Tanina\",\"Tanis\",\"Tanith\",\"Tanyc\",\"Tar\",\"Tara\",\"Taran\",\"Tarcia\",\"Taria\",\"Tarik\",\"Taromas\",\r\n  \"Taron\",\"Tarran\",\"Taryn\",\"Tas\",\"Tasharra\",\"Tasker\",\"Tatyana\",\"Taurus\",\"Taveli\",\"Taylian\",\"Taylin\",\"Tedra\",\"Tegan\",\r\n  \"Tekia\",\"Telena\",\"Tell\",\"Tench\",\"Tenna\",\"Tenser\",\"Teoddry\",\"Ter\",\"Teralyn\",\"Teressa\",\"Terix\",\"Teruah\",\"Tesin\",\r\n  \"Tesla\",\"Tessa\",\"Tevran\",\"Thaal\",\"Thacker\",\"Thaddeus\",\"Thaki\",\"Thal\",\"Thalen\",\"Thalessa\",\"Thalia\",\"Thalna\",\"Tham\",\r\n  \"Thana\",\"Thane\",\"Thanatos\",\"Thantos\",\"Thar\",\"Tharbad\",\"Tharkesh\",\"Tharn\",\"Thax\",\"Thecla\",\"Theda\",\"Theleb\",\"Theoden\",\r\n  \"Theodor\",\"Theodoric\",\"Theodosia\",\"Theodric\",\"Theoric\",\"Thera\",\"Therad\",\"Theresa\",\"Therios\",\"Theros\",\"Thesius\",\"Thieras\",\"Thieryn\",\r\n  \"Thingyr\",\"Thio\",\"Tholan\",\"Thomas\",\"Thomulor\",\"Thora\",\"Thoran\",\"Thorarin\",\"Thorburn\",\"Thord\",\"Thordarson\",\"Thordis\",\"Thorfel\",\r\n  \"Thorfinn\",\"Thorfinna\",\"Thorgeir\",\"Thorgerd\",\"Thorgest\",\"Thorgils\",\"Thorgrim\",\"Thorgunna\",\"Thorhall\",\"Thorhalla\",\"Thorhild\",\"Thorin\",\"Thorir\",\r\n  \"Thorkatla\",\"Thorkell\",\"Thorkild\",\"Thormod\",\"Thormodr\",\"Thormond\",\"Thorn\",\"Thorndike\",\"Thornwell\",\"Thorold\",\"Thorolf\",\"Thorsager\",\"Thorstein\",\r\n  \"Thorunn\",\"Thorvald\",\"Thorvaldur\",\"Thorvar\",\"Thorzyl\",\"Thoth\",\"Thrain\",\"Thrand\",\"Throck\",\"Thule\",\"Thurid\",\"Thylda\",\"Thyra\",\r\n  \"Thyri\",\"Thyrza\",\"Thyssa\",\"Tiana\",\"Tiffany\",\"Tihan\",\"Tika\",\"Tilford\",\"Tilica\",\"Tilir\",\"Tillinghast\",\"Tilloch\",\"Timon\",\r\n  \"Tioniel\",\"Tirion\",\"Tisha\",\"Tisheri\",\"Titania\",\"Titia\",\"Titiana\",\"Tivernee\",\"Tiyagar\",\"Tnin\",\"Tobias\",\"Tobis\",\"Todhunter\",\r\n  \"Tolbert\",\"Tolenka\",\"Topaz\",\"Topham\",\"Torc\",\"Tortbold\",\"Tosti\",\"Tosya\",\"Toulac\",\"Tovi\",\"Trafford\",\"Trebor\",\"Trelane\",\r\n  \"Trelawny\",\"Trella\",\"Trevel\",\"Trick\",\"Trigg\",\"Trill\",\"Triona\",\"Trir\",\"Tristam\",\"Tristan\",\"Trost\",\"Trotwood\",\"Trowbridge\",\r\n  \"Truesdell\",\"Tuane\",\"Tufnell\",\"Tugan\",\"Tuilleth\",\"Tulio\",\"Tulkas\",\"Tundine\",\"Tunstall\",\"Tuor\",\"Turan\",\"Turgoz\",\"Turhan\",\r\n  \"Turin\",\"Turpin\",\"Tuttle\",\"Tuula\",\"Twyla\",\"Tylden\",\"Tyldoran\",\"Tylen\",\"Tylien\",\"Tylynn\",\"Tymar\",\"Tymora\",\"Tymoriel\",\r\n  \"Tynnyn\",\"Tyr\",\"Tyra\",\"Tyranina\",\"Tyreen\",\"Tyrwhitt\",\"Uamian\",\"Ubriani\",\"Ucarsh\",\"Uda\",\"Uhier\",\"Uhlain\",\"Uhlume\",\r\n  \"Uholedil\",\"Uinen\",\"Ula\",\"Ulf\",\"Ulgor\",\"Ulis\",\"Uljas\",\"Ulji\",\"Ulmaerr\",\"Ulmo\",\"Ulosh\",\"Ulric\",\"Ulrich\",\r\n  \"Ultron\",\"Umaiar\",\"Umbar\",\"Umda\",\"Umgalad\",\"Una\",\"Uneitna\",\"Ungon\",\"Unius\",\"Unn\",\"Unrak\",\"Unwin\",\"Upal\",\r\n  \"Upton\",\"Urabi\",\"Urania\",\"Uranos\",\"Uranus\",\"Uriel\",\"Urish\",\"Urokoz\",\"Ursula\",\"Usher\",\"Uta\",\"Utumno\",\"Uusoae\",\r\n  \"Uvanimor\",\"Uziel\",\"Vabryn\",\"Vadarin\",\"Vadi\",\"Vaeddyn\",\"Vagn\",\"Vai\",\"Val\",\"Valadan\",\"Valandario\",\"Valandor\",\"Valarindi\",\r\n  \"Valborg\",\"Valda\",\"Valdain\",\"Valdemar\",\"Valen\",\"Valenka\",\"Valentia\",\"Valerand\",\"Valeria\",\"Valerian\",\"Valeska\",\"Valgar\",\"Valgard\",\r\n  \"Valgerd\",\"Valiah\",\"Valion\",\"Valisa\",\"Valiss\",\"Valistor\",\"Valkor\",\"Valla\",\"Vallo\",\"Valmar\",\"Valminder\",\"Valor\",\"Valsera\",\r\n  \"Valurian\",\"Valya\",\"Valynard\",\"Vandrad\",\"Vane\",\"Vanechka\",\"Vanidor\",\"Vanion\",\"Vannevar\",\"Vannyn\",\"Vanya\",\"Vanyar\",\"Vanyel\",\r\n  \"Varda\",\"Vardis\",\"Varina\",\"Varion\",\"Varken\",\"Varnum\",\"Vasava\",\"Vash\",\"Vasha\",\"Vasilii\",\"Vasin\",\"Vaydin\",\"Vaydir\",\r\n  \"Vayi\",\"Vecna\",\"Veda\",\"Veldahar\",\"Veldan\",\"Velex\",\"Velior\",\"Venable\",\"Vendor\",\"Veorcyn\",\"Vercyn\",\"Verdina\",\"Vereesa\",\r\n  \"Verline\",\"Vermund\",\"Verna\",\"Ves\",\"Vespar\",\"Vestein\",\"Veva\",\"Vevina\",\"Vexter\",\"Viasta\",\"Vicarr\",\"Vicat\",\"Vicentia\",\r\n  \"Viconia\",\"Victor\",\"Vida\",\"Vidkun\",\"Vidron\",\"Vieno\",\"Viera\",\"Vierna\",\"Vigdis\",\"Vigfus\",\"Vilhelm\",\"Vilka\",\"Vilrna\",\r\n  \"Vinatta\",\"Vincas\",\"Vincent\",\"Vintar\",\"Violet\",\"Vircyn\",\"Vishali\",\"Viveka\",\"Vladimir\",\"Vladislav\",\"Vlaric\",\"Vobur\",\"Voirath\",\r\n  \"Vokos\",\"Voldor\",\"Volkan\",\"Volney\",\"Volodya\",\"Volund\",\"Vonya\",\"Voranor\",\"Vrashin\",\"Vulpen\",\"Vurog\",\"Vusil\",\"Vyecheslav\",\r\n  \"Vyner\",\"Wadleigh\",\"Waenwryht\",\"Wager\",\"Waisham\",\"Waivan\",\"Wakeman\",\"Wakkar\",\"Walborg\",\"Walda\",\"Waldan\",\"Waldegrave\",\"Waldemar\",\r\n  \"Waleran\",\"Walford\",\"Walid\",\"Walker\",\"Wanhim\",\"Waring\",\"Wariv\",\"Wark\",\"Warne\",\"Warrender\",\"Warrigel\",\"Warwick\",\"Waryk\",\r\n  \"Watson\",\"Watt\",\"Waylan\",\"Wayland\",\"Waylon\",\"Wealin\",\"Wedlake\",\"Weilborn\",\"Weiryn\",\"Wel\",\"Wemick\",\"Wendolyn\",\"Wertha\",\r\n  \"Westcott\",\"Westen\",\"Weyrn\",\"Wharrom\",\"Whitwell\",\"Whyte\",\"Wicca\",\"Wideman\",\"Wightman\",\"Wildhair\",\"Wilfrid\",\"Wilhelm\",\"Wilhelmina\",\r\n  \"Wilibald\",\"Will\",\"Willa\",\"William\",\"Willock\",\"Willow\",\"Wilma\",\"Wilmar\",\"Wilner\",\"Wilven\",\"Windham\",\"Winfrey\",\"Winian\",\r\n  \"Winslow\",\"Winton\",\"Wisp\",\"Wisuth\",\"Wivianne\",\"Wizlow\",\"Woart\",\"Wodan\",\"Wolfgang\",\"Wolmar\",\"Womal\",\"Woodfin\",\"Woodruff\",\r\n  \"Wooligar\",\"Wortley\",\"Wotan\",\"Wulf\",\"Wulfgar\",\"Wulfric\",\"Wulgar\",\"Wychnor\",\"Wycliffe\",\"Wyllows\",\"Wyly\",\"Wynkyn\",\"Wynne\",\r\n  \"Wynston\",\"Wyvan\",\"Xaandria\",\"Xaath\",\"Xabian\",\"Xabiel\",\"Xabu\",\"Xain\",\"Xalthan\",\"Xan\",\"Xanaphel\",\"Xanathar\",\"Xander\",\r\n  \"Xandra\",\"Xandria\",\"Xanthon\",\"Xanthus\",\"Xarek\",\"Xarolith\",\"Xaver\",\"Xavier\",\"Xavin\",\"Xela\",\"Xelmonth\",\"Xena\",\"Xenia\",\r\n  \"Xenoba\",\"Xera\",\"Xercon\",\"Xerravin\",\"Xiombarg\",\"Xoncarg\",\"Xoran\",\"Xulan\",\"Xyas\",\"Xydra\",\"Xyko\",\"Xylah\",\"Xylia\",\r\n  \"Xymoya\",\"Xystus\",\"Xythrin\",\"Xytrin\",\"Yacima\",\"Yaheira\",\"Yahira\",\"Yaigin\",\"Yakov\",\"Yalan\",\"Yali\",\"Yalin\",\"Yalniz\",\r\n  \"Yamari\",\"Yana\",\"Yandell\",\"Yangin\",\"Yanira\",\"Yannul\",\"Yara\",\"Yaraia\",\"Yarali\",\"Yardim\",\"Yardley\",\"Yari\",\"Yarim\",\r\n  \"Yarin\",\"Yarir\",\"Yaritza\",\"Yartrina\",\"Yasimina\",\"Yasir\",\"Yasmina\",\"Yasser\",\"Yastar\",\"Yatay\",\"Yavana\",\"Yazihane\",\"Yelain\",\r\n  \"Yeni\",\"Yetne\",\"Yevgenii\",\"Yezade\",\"Ygerna\",\"Ygraine\",\"Yishana\",\"Ynryc\",\"Ynvar\",\"Yoda\",\"Yolanda\",\"Yondalla\",\"York\",\r\n  \"Yradry\",\"Yreoddyn\",\"Yrrkoon\",\"Yrsa\",\"Yrun\",\"Yryllyn\",\"Ysabel\",\"Ysgerryn\",\"Ysolde\",\"Yuri\",\"Yvain\",\"Yvette\",\"Yvonne\",\r\n  \"Yvyr\",\"Yénisar\",\"Yérusha\",\"Zabdiel\",\"Zacarias\",\"Zachary\",\"Zachris\",\"Zadock\",\"Zahara\",\"Zahra\",\"Zaidh\",\"Zalazar\",\"Zalbar\",\r\n  \"Zan\",\"Zandra\",\"Zanifa\",\"Zanthar\",\"Zara\",\"Zaranthe\",\"Zared\",\"Zarimarth\",\"Zarquan\",\"Zathras\",\"Zavel\",\"Zaviv\",\"Zay\",\r\n  \"Zazumel\",\"Zebalane\",\"Zebulon\",\"Zehir\",\"Zelda\",\"Zemenar\",\"Zenda\",\"Zendrac\",\"Zenith\",\"Zenobia\",\"Zenon\",\"Zepher\",\"Zephyr\",\r\n  \"Zerika\",\"Zerin\",\"Zeswick\",\"Zhalore\",\"Zhanna\",\"Zharvek\",\"Zhenya\",\"Zhirek\",\"Zhirem\",\"Zhoreb\",\"Zia\",\"Zigmal\",\"Zilar\",\r\n  \"Zinaida\",\"Zincir\",\"Zion\",\"Ziona\",\"Zircon\",\"Zirzihin\",\"Zita\",\"Zoe\",\"Zolabar\",\"Zoltan\",\"Zona\",\"Zora\",\"Zorashad\",\r\n  \"Zorayas\",\"Zorlan\",\"Zosia\",\"Zotar\",\"Zumurrud\",\"Zurrog\",\"Zykhiralamshad\"];\r\n  makeArrays();\r\n}",
                        "onModelContext": "const modifier = (text) => {\n\n  return { text: text }\n}\n\n// Don't modify this part\nmodifier(text)\n"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1356014",
                "publicId": "d7db7190-70b0-11eb-bd99-3743697fb2e3",
                "published": true,
                "title": "Background generator",
                "description": "This scenario option generates random background for your characters.",
                "tags": [],
                "createdAt": "2021-02-16T23:44:00.297Z",
                "updatedAt": "2021-02-17T02:35:28.350Z",
                "memory": "",
                "authorsNote": "Use a very descriptive writing style. As much detail as possible.",
                "mode": "creative",
                "prompt": "Jordis needs to generate NPCs for her tabletop roleplaying games. Each character needs their own story and background, being as descriptive as possible. These characters are intended for use in an Elder Scrolls setting, so she needs the story to fit the universe.\n\nHere are two examples of the stories she needs:\n\n1. Trechtus was born in the early years of the Second Era in the Summerset Isles to serfs on the estate of a minor nobleman, Lord Gyrnasse of Sollicich-on-Ker. His father had secretly, against the law of Lord Gyrnasse, taught himself and then Trechtus to read. They had to rely on a black market to get around the restriction Gyrnasse put in place, but still managed to get a steady stream of books and scrolls. When Trechtus was eight, the smugglers were found and imprisoned. Some said that Trechtus's mother, an ignorant and religious woman fearful of her husband, was the betrayer of the smugglers, but there were other rumors as well. The trial of the smugglers was nonexistent, and the punishment swift. The body of Trechtus' father was kept hanging for weeks during the hottest summer Sollicich-on-Ker had seen in centuries.\n\n2. Divayth Fyr was a Dunmer sorcerer born as a Chimer in Tel Aruhn in the early First Era who lived until at least the end of the Third Era, at the age of 4000, and who may still be alive today. Divayth Fyr once studied on the isle of Artaeum, but is said to have left as a \"sharp-elbowed upstart\". In his youth, he dabbled in the forbidden art of necromancy, but he would eventually turn away from it to focus on other subsections of conjuration. \n\nJordis wants to generate character backstories for a game she is going to run. The character's race needs to be ${Type the name of a race of Tamriel...}, and be a ${Type a class or an occupation for the character}. The character's name must be ${Type your character's name...}. The character's gender must be ${Type the character's gender...}.\n\nShe begins:",
                "quests": [],
                "worldInfo": null,
                "gameCode": {
                        "onInput": "const modifier = (text) => {\n  let modifiedText = nameReplace(text);\n\n  return { text: modifiedText }\n};\n\nmodifier(text);\n",
                        "onOutput": "const modifier = (text) => {\n  modifiedText = nameReplace(text);\n\n  return { text: modifiedText }\n};\n\nmodifier(text);\n",
                        "sharedLibrary": "// TO USE: Put in something like 'modifiedText = nameReplace(modifiedText);' in Input&Output Modifiers.\r\n\r\n// List the names you wish to replace with random ones in this const.\r\nconst BADNAMES = ['Ackerson','Alison','Annah','Anu','Arat','Arrorn','Ashton','Azajaja','Big Red',\r\n'Brot','Brother Gray','Bucklesberg','Captain Dario','Captain Eckard','Captain Hayes','Captain Ian','Captain Illam','Carn',\r\n'Castus','Cloudpeak','Count Gray','Count Grey','Dark Order','David','Delantium','Delerg','Dendrin','Derg',\r\n'Dert','Dessel','Dorna','Dr. Kessel','Dr. Kovas','Drake','Draven','Durge','Ebony Claw','Elam',\r\n'Eldolith','Eliza','Eternals','Father Féval','Father Tomas','Felkan','Flog','Garrick','Grolik',\"Gro'tesk\",'Haygarth',\r\n'Hessla','Holgard','Isabella',\"J'Arel\",'Jacob','Jicol','Karth','Kelso',\r\n'Klemto','Klyton','Kralmer','Kyros','Lenay','Lord Rostov','Ludmilla','Magos Cern','Meliodas',\r\n'Merk','Mihrab','Mr. Demar','Mr. Gaange','Mr. Reynolds','Nalin','Nolazir','Null','Nuro','Oalkwardner',\r\n'Olive','Olivia','Oren','Quala','Ragnor','Ral','Rask','Retlad','Roldan','Rolomag','Sheriff Buckly',\r\n'Sir Ignate','Sodran','Svelk','Talia','Teckleville','The Craxil','The Ghoul King','The Great Lich Lord',\r\n'The Nightmare Tyrant','Theo','Trelik','Tulan','Ulivik','Vaughn','Velzix','Wessel','Zalan','Zalmora','Zuzu'];\r\n\r\n// This shuffles the arrays.\r\nconst shuffle = array =>\r\n    [...Array(array.length)]\r\n        .map((...args) => Math.floor(Math.random() * (args[1] + 1)))\r\n        .reduce((a, rv, i) => ([a[i], a[rv]] = [a[rv], a[i]]) && a, array);\r\n\r\n// Generates and saves arrays; ran only once.\r\nfunction makeArrays() {\r\n  state.mid = [];\r\n  state.end = [];\r\n  list = state.names.map(x => x.substring(1)); // Trim beginning.\r\n  list.forEach(addMid);\r\n}\r\n\r\nfunction addMid(seg) { // Generate array of possible mid-segments.\r\n  while (seg.length > 3) {\r\n    if (state.mid.indexOf(seg.substring(0,4)) === -1) { state.mid.push(seg.substring(0,4)) };\r\n    seg = seg.substring(1);\r\n  }\r\n  state.end.push(seg);\r\n}\r\n\r\nfunction synthName() {\r\n  var name_length = state.names[Math.floor(Math.random() * state.names.length)].length - 1;\r\n  var base = state.names[Math.floor(Math.random() * state.names.length)];\r\n  if (base.length < 3) { return Base; } \r\n  else {\r\n    var nomen = base.substring(0,3);\r\n    while (nomen.length < name_length)\r\n    {\r\n      mid = shuffle(state.mid).find( x => nomen.substring(nomen.length - 2, nomen.length) == x.substring(0,2))\r\n      if (mid) { nomen += mid.substring(2); }\r\n      else { name_length = 0; } // No valid segments found, just skip ahead.\r\n    }\r\n    var end = shuffle(state.end).find( x => nomen.substring(nomen.length -1, nomen.length) == x.substring(0,1));\r\n    if (end) { nomen += end.substring(1); }\r\n\treturn nomen;\r\n  }\r\n}\r\n\r\nfunction nameReplace(text) {\r\n  if (!state.names_setup) { setupNamelist(); }\r\n  for (name of BADNAMES) {\r\n    if (text.includes(name)) { text = text.replace(name, synthName()); }\r\n  }\r\n  return text;\r\n}\r\n\r\n// This giant list is the list of names that this generator uses as examples to synthesize new names.\r\n// You can replace it with a more specific list, such as names from certain culture.\r\n// To work well, you need at least 100 names on the list.\r\nfunction setupNamelist() {\r\n state.names_setup = true;\r\n state.names = [\"Aby\",\"Aage\",\"Aakesh\",\"Aanon\",\"Aarlen\",\"Aaron\",\"Aart\",\"Aasta\",\"Abarden\",\"Abbathor\",\"Abbathorn\",\"Abraham\",\"Abryn\",\r\n  \"Abu\",\"Acadia\",\"Achard\",\"Acheron\",\"Achim\",\"Achlarg\",\"Ada\",\"Adair\",\"Adalbert\",\"Adanac\",\"Adario\",\"Adeisteen\",\"Adelaide\",\r\n  \"Adelin\",\"Adelot\",\"Adeen\",\"Aden\",\"Adena\",\"Aderyn\",\"Adeva\",\"Adger\",\"Adia\",\"Adin\",\"Adina\",\"Aditu\",\"Adlay\",\r\n  \"Adolf\",\"Adolmus\",\"Adoniram\",\"Adraeran\",\"Adriaan\",\"Adriel\",\"Adrienne\",\"Aedha\",\"Aeiran\",\"Ael\",\"Aelgifu\",\"Aelis\",\"Aerdrie\",\r\n  \"Aeriel\",\"Aerin\",\"Aeris\",\"Aeriss\",\"Aeron\",\"Aeru'in\",\"Aeruin\",\"Aethelweard\",\"Aethon\",\"Aethyr\",\"Afra\",\"Agate\",\"Agatha\",\r\n  \"Agathon\",\"Agathos\",\"Agenor\",\"Agidius\",\"Agnar\",\"Agora\",\"Agrias\",\"Aguidran\",\"Aguilla\",\"Ahanna\",\"Ahmre\",\"Aicha\",\"Aidan\",\r\n  \"Aidaron\",\"Aiden\",\"Aidred\",\"Aidro\",\"Aidwin\",\"Aifreda\",\"Aifrida\",\"Aiker\",\"Aikikia\",\"Aikman\",\"Ailcaer\",\"Aileen\",\"Ailric\",\r\n  \"Ailvar\",\"Aimee\",\"Aimo\",\"Aino\",\"Ainu\",\"Aipheus\",\"Airalyn\",\"Aircristir\",\"Airen\",\"Airis\",\"Airmid\",\"Aisha\",\"Aislinn\",\r\n  \"Aithne\",\"Aitken\",\"Akebia\",\"Aki\",\"Akira\",\"Aksel\",\"Al\",\"Aladan\",\"Aladar\",\"Aladdin\",\"Alain\",\"Alaine\",\"Alais\",\r\n  \"Alan\",\"Alana\",\"Alanson\",\"Alardan\",\"Alaric\",\"Alarion\",\"Alaris\",\"Alaron\",\"Alastair\",\"Alastrina\",\"Alastyr\",\"Albaral\",\"Alberich\",\r\n  \"Alberik\",\"Alberon\",\"Albert\",\"Alberta\",\"Albin\",\"Albion\",\"Albrecht\",\"Albright\",\"Alcan\",\"Alcina\",\"Alda\",\"Aldaren\",\"Aldegond\",\r\n  \"Alden\",\"Aldert\",\"Aldhelm\",\"Aldis\",\"Aldrich\",\"Aldridge\",\"Aldus\",\"Aldwerth\",\"Aldwin\",\"Aldwulf\",\"Alea\",\"Alec\",\"Alena\",\r\n  \"Alers\",\"Ales\",\"Alessandra\",\"Alexander\",\"Alexei\",\"Alf\",\"Alfdis\",\"Alfgeir\",\"Alfhid\",\"Alfons\",\"Alford\",\"Alfred\",\"Algernon\",\r\n  \"Algus\",\"Alhana\",\"Ali\",\"Alia\",\"Alicia\",\"Aliendre\",\"Alienor\",\"Alin\",\"Aline\",\"Alineric\",\"Alisbone\",\"Alison\",\"Alistair\",\r\n  \"Alister\",\"Allaire\",\"Allard\",\"Allart\",\"Allene\",\"Alliston\",\"Almas\",\"Almer\",\"Almira\",\"Almroth\",\"Almu\",\"Aloise\",\"Alor\",\r\n  \"Alora\",\"Alorosaz\",\"Aloysius\",\"Alphons\",\"Alrik\",\"Alsop\",\"Althalus\",\"Altin\",\"Alton\",\"Alured\",\"Alvan\",\"Alvey\",\"Alvina\",\r\n  \"Alvord\",\"Alvred\",\"Alwen\",\"Alwyn\",\"Alya\",\"Alyanna\",\"Alyce\",\"Alyssa\",\"Alyvia\",\"Ama\",\"Amadis\",\"Amain\",\"Amalina\",\r\n  \"Aman\",\"Amanfea\",\"Amar\",\"Amarah\",\"Amber\",\"Ambros\",\"Amelia\",\"Ames\",\"Amethyst\",\"Amilion\",\"Amin\",\"Amina\",\"Amineh\",\r\n  \"Ammdar\",\"Amschel\",\"Amundi\",\"Anandra\",\"Anastasia\",\"Anatol\",\"Anatolia\",\"Ancarion\",\"Ancelyn\",\"Anclaiar\",\"Ancla´ar\",\"Andara'an\",\"Andaraan\",\r\n  \"Andemon\",\"Andni\",\"Andolan\",\"Andre\",\"Andrei\",\"Andrew\",\"Andrus\",\"Aneurin\",\"Anfar\",\"Angelica\",\"Angelina\",\"Angharad\",\"Angheryn\",\r\n  \"Angmar\",\"Angus\",\"Anici\",\"Anigh\",\"Anika\",\"Anita\",\"Anitra\",\"Anlaf\",\"Anna\",\"Annion\",\"Annora\",\"Anouar\",\"Anseim\",\r\n  \"Ansel\",\"Anskar\",\"Anson\",\"Antal\",\"Antalya´ar\",\"Antares\",\"Antheirne\",\"Anton\",\"Antone\",\"Antony\",\"Antrim\",\"Anvar\",\"Anya\",\r\n  \"Anzie\",\"Apad\",\"April\",\"Apthorp\",\"Aquill\",\"Arabel\",\"Arabella\",\"Arabeth\",\"Aradan\",\"Aradh\",\"Aragon\",\"Aragorn\",\"Arakin\",\r\n  \"Aralik\",\"Aranel\",\"Arania\",\"Arathorn\",\"Aravis\",\"Arawn\",\"Arax\",\"Araz\",\"Archibald\",\"Arcarune\",\"Arctor\",\"Ardal\",\"Arden\",\r\n  \"Arder\",\"Ardesh\",\"Ardis\",\"Areagne\",\"Arell\",\"Areta\",\"Aretas\",\"Argethlam\",\"Argoeth\",\"Ari\",\"Aria\",\"Ariad\",\"Arian\",\r\n  \"Arianth\",\"Aribeth\",\"Aric\",\"Arid\",\"Ariel\",\"Aries\",\"Arilyn\",\"Arioch\",\"Arka\",\"Arkadia\",\"Arkron\",\"Arkwright\",\"Arlaith\",\r\n  \"Arlan\",\"Arlana\",\"Arlean\",\"Arleano\",\"Arlo\",\"Arlya\",\"Armand\",\"Armar\",\"Armin\",\"Armitage\",\"Armo\",\"Armod\",\"Arn\",\r\n  \"Arnbella\",\"Arnesen\",\"Arnfinn\",\"Arngrim\",\"Arni\",\"Arnlaug\",\"Arno\",\"Arnold\",\"Arnor\",\"Arnora\",\"Arnot\",\"Arnthora\",\"Arnuif\",\r\n  \"Arnulf\",\"Arnvid\",\"Aron\",\"Arrah\",\"Arronax\",\"Arshavir\",\"Arshel\",\"Artemis\",\"Artemus\",\"Arthol\",\"Arthryn\",\"Arthur\",\"Artnistead\",\r\n  \"Artreyu\",\"Artur\",\"Arun\",\"Arvid\",\"Arvida\",\"Arving\",\"Arvo\",\"Arwen\",\"Arwin\",\"Aryen\",\"Aryion\",\"Aryon\",\"Aryus\",\r\n  \"Arzamark\",\"Asa\",\"Asaf\",\"Aschar\",\"Asfrid\",\"Asgard\",\"Asger\",\"Asgerd\",\"Asgrim\",\"Ash\",\"Ashan\",\"Ashane\",\"Ashburton\",\r\n  \"Ashcar\",\"Ashdown\",\"Ashgaroth\",\"Ashley\",\"Ashlyn\",\"Ashne'e\",\"Ashnici\",\"Ashur\",\"Asiria\",\"Askew\",\"Askold\",\"Aslak\",\"Aslan\",\r\n  \"Asleif\",\"Aslior\",\"Asperon\",\"Asta\",\"Astar\",\"Astinus\",\"Astnid\",\"Astnild\",\"Astoiphe\",\"Astra\",\"Astraea\",\"Astran\",\"Astrid\",\r\n  \"Astrin\",\"Atazra\",\"Athabasca\",\"Athana\",\"Athol\",\"Atiaran\",\"Atli\",\"Atmeh\",\"Atreyu\",\"Atropos\",\"Atticus\",\"Attor\",\"Atul\",\r\n  \"Aturin\",\"Atyre\",\"Aubrey\",\"Aud\",\"Audrey\",\"Audrianna\",\"Audric\",\"August\",\"Augustus\",\"Aule\",\"Aulius\",\"Aun\",\"Aura\",\r\n  \"Aurian\",\"Auril\",\"Aurion\",\"Aurora\",\"Avall\",\"Avarath\",\"Avascaen\",\"Avedar\",\"Aveole\",\"Avery\",\"Avon\",\"Avril\",\"Axel\",\r\n  \"Aya\",\"Ayame\",\"Ayaron\",\"Ayarèn\",\"Ayin\",\"Ayir\",\"Aylin\",\"Aylmer\",\"Ayrie\",\"Azeal\",\"Azeezeh\",\"Azgoth\",\"Azhrarn\",\r\n  \"Aziz\",\"Azmodeus\",\"Azrean\",\"Azreck\",\"Azriaz\",\"Aztira\",\"Azure\",\"Azuth\",\"Baba\",\"Babacar\",\"Babrak\",\"Babrine\",\"Babylos\",\r\n  \"Baduk\",\"Baern\",\"Baeron\",\"Baervan\",\"Bag\",\"Bahamut\",\"Baird\",\"Bal\",\"Balain\",\"Baldor\",\"Baldrick\",\"Balduin\",\"Baldur\",\r\n  \"Baldwin\",\"Balendar\",\"Balfour\",\"Balin\",\"Baliol\",\"Ballard\",\"Balor\",\"Balthasard\",\"Balthazar\",\"Bandobras\",\"Bane\",\"Baraca\",\"Barahir\",\r\n  \"Barak\",\"Baralan\",\"Baravar\",\"Barbara\",\"Bardach\",\"Bardel\",\"Bardi\",\"Bardsley\",\"Bardwell\",\"Barend\",\"Barent\",\"Baring\",\"Barll\",\r\n  \"Barlo\",\"Barlow\",\"Barnabas\",\"Barnas\",\"Barnus\",\"Barr\",\"Barret\",\"Barron\",\"Barry\",\"Barstow\",\"Barthel\",\"Bartle\",\"Bartnel\",\r\n  \"Barton\",\"Baslayan\",\"Bayard\",\"Beams\",\"Beatrix\",\"Bechir\",\"Beck\",\"Bede\",\"Bedegran\",\"Begnus\",\"Beldaran\",\"Beldas\",\"Belerion\",\r\n  \"Belgarath\",\"Belgarion\",\"Belita\",\"Bella\",\"Belle\",\"Bellin\",\"Bellinus\",\"Belloc\",\"Belrene\",\"Beltane\",\"Belva\",\"Ben\",\"Benekander\",\r\n  \"Bengt\",\"Benita\",\"Benoist\",\"Beorn\",\"Beowulf\",\"Bera\",\"Bercan\",\"Berek\",\"Berem\",\"Beren\",\"Bergen\",\"Bergthor\",\"Berim\",\r\n  \"Bern\",\"Berna\",\"Bernhart\",\"Bernt\",\"Berronar\",\"Berryn\",\"Bersi\",\"Berta\",\"Bertil\",\"Bertilde\",\"Bertram\",\"Bertran\",\"Bertrem\",\r\n  \"Beryl\",\"Besma\",\"Bestagar\",\"Beth\",\"Bevil\",\"Beyash\",\"Beylard\",\"Bhimrao\",\"Bhoskar\",\"Bhupindar\",\"Bidwell\",\"Bilbo\",\"Bile\",\r\n  \"Bilmar\",\"Bindon\",\"Bion\",\"Bipin\",\"Birath\",\"Birbeck\",\"Birchard\",\"Birger\",\"Birgit\",\"Birket\",\"Bisuneh\",\"Bjarni\",\"Bjorn\",\r\n  \"Bjornstern\",\"Blackwood\",\"Blade\",\"Blaen\",\"Blair\",\"Blame\",\"Blasco\",\"Blaze\",\"Bledsoe\",\"Blenda\",\"Bleran\",\"Blount\",\"Blunyc\",\r\n  \"Bninna\",\"Bo\",\"Bodil\",\"Bodvar\",\"Bolthorn\",\"Boner\",\"Booker\",\"Boott\",\"Boris\",\"Bork\",\"Borlace\",\"Bormor\",\"Boromir\",\r\n  \"Bors\",\"Botho\",\"Botolf\",\"Bourke\",\"Bowie\",\"Boyd\",\"Bracca\",\"Brace\",\"Bracken\",\"Brand\",\"Brandec\",\"Brangwen\",\"Brann\",\r\n  \"Brannon\",\"Branwell\",\"Branwen\",\"Breanon\",\"Bremen\",\"Brenna\",\"Brenner\",\"Brent\",\"Bress\",\"Bretaine\",\"Breyugar\",\"Brianna\",\"Bridget\",\r\n  \"Brielle\",\"Brigantu\",\"Brighton\",\"Brinn\",\"Brion\",\"Bristan\",\"Brita\",\"Brithael\",\"Brock\",\"Brockden\",\"Brodhead\",\"Brodribb\",\"Brogan\",\r\n  \"Bron\",\"Brona\",\"Bronwyn\",\"Bror\",\"Broun\",\"Bruna\",\"Bruno\",\"Brunt\",\"Brynhild\",\"Brynit\",\"Bryoni\",\"Bunnvor\",\"Bupu\",\r\n  \"Burcan\",\"Buri\",\"Burkard\",\"Buzurg\",\"Byam\",\"Byblos\",\"Byre\",\"Byrna\",\"Byrne\",\"Bysshe\",\"Cabell\",\"Cabillo\",\"Caddor\",\r\n  \"Caden\",\"Cadfael\",\"Cadmar\",\"Cadrach\",\"Cadwallader\",\"Caecyn\",\"Cael\",\"Caelon\",\"Caer\",\"Cai\",\"Cail\",\"Cairn\",\"Caitlin\",\r\n  \"Caladon\",\"Calandria\",\"Calbraith\",\"Calder\",\"Cale\",\"Caleb\",\"Calera\",\"Caliban\",\"Callan\",\"Callcott\",\"Calmic\",\"Calrohir\",\"Calumn\",\r\n  \"Calvert\",\"Camber\",\"Cambree\",\"Camiya\",\"Canina\",\"Caprice\",\"Cardon\",\"Caramon\",\"Carelia\",\"Carey\",\"Caribou\",\"Caris\",\"Carl\",\r\n  \"Carless\",\"Carli\",\"Carlyle\",\"Caryne\",\"Caron\",\"Carsten\",\"Carvell\",\"Caryl\",\"Cashin\",\"Caspian\",\"Cassandra\",\"Cassaway\",\"Cathal\",\r\n  \"Catherine\",\"Cathla'in\",\"Cathlain\",\"Cathlin\",\"Cayl\",\"Caylin\",\"Cecilia\",\"Cecily\",\"Cedric\",\"Cedrick\",\"Cedrim\",\"Celadae\",\"Celebdil\",\r\n  \"Celeborn\",\"Celeren\",\"Celes\",\"Celeste\",\"Celestine\",\"Celia\",\"Celowen\",\"Cemark\",\"Ceomyr\",\"Ceowulf\",\"Cercyon\",\"Ceremon\",\"Cerimon\",\r\n  \"Cerindar\",\"Cermor\",\"Cernd\",\"Ceryx\",\"Cespar\",\"Cevir\",\"Ceylinn\",\"Chaka\",\"Chalfant\",\"Challen\",\"Chamon\",\"Chanti\",\"Chard\",\r\n  \"Charissa\",\"Charlene\",\"Charlotte\",\"Chauncey\",\"Chauntea\",\"Chavir\",\"Chaya\",\"Checotah\",\"Chevonne\",\"Chevran\",\"Chichester\",\"Chimaera\",\"Chiodwig\",\r\n  \"Chiron\",\"Chittenden\",\"Chloe\",\"Christopher\",\"Chronepsis\",\"Chronos\",\"Chrowder\",\"Chuz\",\"Cid\",\"Cilmar\",\"Cinerva\",\"Cirkin\",\"Civar\",\r\n  \"Claed\",\"Clafin\",\"Claire\",\"Clarinda\",\"Claudia\",\"Cleghorn\",\"Clerihew\",\"Clinch\",\"Clipster\",\"Clopton\",\"Cloud\",\"Clover\",\"Clovis\",\r\n  \"Cnud\",\"Cnut\",\"Coalter\",\"Cobryn\",\"Coddry\",\"Coel\",\"Coela\",\"Cohn\",\"Colden\",\"Colgan\",\"Colmen\",\"Colon\",\"Colwyn\",\r\n  \"Coma\",\"Conall\",\"Conan\",\"Congal\",\"Conlan\",\"Conn\",\"Connell\",\"Connidas\",\"Connon\",\"Connop\",\"Conor\",\"Conrad\",\"Constantius\",\r\n  \"Conwy\",\"Conyasal\",\"Coprates\",\"Cora\",\"Coral\",\"Corbin\",\"Corellon\",\"Coren\",\"Corin\",\"Corinne\",\"Corinth\",\"Cormac\",\"Cornelius\",\r\n  \"Corrowr\",\"Corry\",\"Corryn\",\"Corwin\",\"Cotton\",\"Cowan\",\"Cowden\",\"Cowper\",\"Coyan\",\"Craigh\",\"Cray\",\"Crewzel\",\"Creydah\",\r\n  \"Cronyn\",\"Croyble\",\"Crundall\",\"Crynal\",\"Crysania\",\"Cryshandylin\",\"Cryunnos\",\"Cuall\",\"Cuane\",\"Cuddry\",\"Cuhaid\",\"Culiross\",\"Culkin\",\r\n  \"Cullen\",\"Cullyn\",\"Cuthalion\",\"Cuthbert\",\"Cylarus\",\"Cylie\",\"Cylmar\",\"Cymbeline\",\"Cyndor\",\"Cynoril\",\"Cyria\",\"Cyriel\",\"Cyrilla\",\r\n  \"Cyrillus\",\"Cyrus\",\"Cyryl\",\"Cythnar\",\"Cyton\",\"Daburn\",\"Daen\",\"Dagar\",\"Dagda\",\"Dagmar\",\"Dagni\",\"Dagny\",\"Dagwyn\",\r\n  \"Dahil\",\"Daikkah\",\"Daila\",\"Daila'in\",\"Daimhin\",\"Daimon\",\"Daisy\",\"Dakamon\",\"Dakoda\",\"Dalamar\",\"Dall\",\"Dalla\",\"Dallandra\",\r\n  \"Dalziel\",\"Damar\",\"Damien\",\"Damon\",\"Dana\",\"Danforth\",\"Daniel\",\"Dannun\",\"Dannyn\",\"Danu\",\"Danuvius\",\"Daood\",\"Daphin\",\r\n  \"Dara\",\"Daragor\",\"Darandriel\",\"Darell\",\"Darien\",\"Dario\",\"Darius\",\"Darkash\",\"Darkboon\",\"Darkspur\",\"Darlis\",\"Daron\",\"Darrell\",\r\n  \"Darrin\",\"Darvin\",\"Daryan\",\"Dashiell\",\"Dashwood\",\"Dasyani\",\"Dathan\",\"Dathanja\",\"Daugas\",\"David\",\"Davnet\",\"Davros\",\"Dawn\",\r\n  \"Dayyan\",\"Dekteon\",\"Delevan\",\"Delita\",\"Dell\",\"Dellin\",\"Delmund\",\"Demarest\",\"Demi\",\"Deminar\",\"Demtris\",\"Denethor\",\"Denhain\",\r\n  \"Denor\",\"Denton\",\"Denzil\",\"Deogol\",\"Derfel\",\"Derian\",\"Dermaria\",\"Derran\",\"Derroll\",\"Derval\",\"Dervilia\",\"Desmona\",\"Devabriel\",\r\n  \"Devaron\",\"Deveron\",\"Devra\",\"Dexter\",\"Dhakos\",\"Dhan\",\"Dharijor\",\"Dholemtrix\",\"Dhur\",\"Diadra\",\"Diagur\",\"Dian\",\"Diarmud\",\r\n  \"Diderik\",\"Diehi\",\"Dighton\",\"Dillon\",\"Dimura\",\"Dinham\",\"Dinivan\",\"Dino\",\"Dionetta\",\"Diony\",\"Dirk\",\"Dirrach\",\"Divos\",\r\n  \"Djamal\",\"Dmitri\",\"Doak\",\"Dolman\",\"Dolyan\",\"Domnu\",\"Donagh\",\"Donal\",\"Donblas\",\"Dongal\",\"Doniol\",\"Donivesh\",\"Donovan\",\r\n  \"Doral\",\"Dorea\",\"Dorian\",\"Dorin\",\"Dorn\",\"Dornhnall\",\"Dorr\",\"Dorsan\",\"Dorvai\",\"Dotta\",\"Doud\",\"Dougal\",\"Doust\",\r\n  \"Draco\",\"Dragan\",\"Dragus\",\"Dragutin\",\"Draka\",\"Drake\",\"Drako\",\"Dran\",\"Draoi\",\"Draven\",\"Drax\",\"Drayko\",\"Dred\",\r\n  \"Dreed\",\"Drexel\",\"Drezael\",\"Drezaem\",\"Drin\",\"Drinda\",\"Drion\",\"Drusilla\",\"Drynn\",\"Dréagg\",\"Duain\",\"Duald\",\"Duana\",\r\n  \"Duer\",\"Dugal\",\"Dugald\",\"Dugdale\",\"Dulasiri\",\"Dumathoin\",\"Dunbar\",\"Dundas\",\"Dunglas\",\"Dunnabar\",\"Dunstan\",\"Dunwody\",\"Duny\",\r\n  \"Dunya\",\"Dur-Shuk\",\"Duran\",\"Durek\",\"Durin\",\"Durnik\",\"Durward\",\"Dwarkanath\",\"Dweomer\",\"Dwyer\",\"Dyce\",\"Dyer\",\"Dygardo\",\r\n  \"Dyke\",\"Dylan\",\"Dymphna\",\"Dynar\",\"Dyneley\",\"Dynera\",\"Dynie\",\"Dytan\",\"Dyvim\",\"E'thane\",\"Eadweard\",\"Eager\",\"Eamon\",\r\n  \"Eanger\",\"Eardley\",\"Earle\",\"Earnest\",\"Eastman\",\"Ebany\",\"Ebba\",\"Eberhard\",\"Ebony\",\"Echael\",\"Eckert\",\"Eckhard\",\"Ector\",\r\n  \"Edcyl\",\"Edda\",\"Edeva\",\"Edgar\",\"Edina\",\"Edla\",\"Edmond\",\"Edmondstone\",\"Edric\",\"Edrie\",\"Edson\",\"Eduard\",\"Edwin\",\r\n  \"Edwina\",\"Edwyn\",\"Eevin\",\"Efiath\",\"Efrem\",\"Egan\",\"Egbert\",\"Egerton\",\"Egil\",\"Egon\",\"Egron\",\"Ehlreth\",\"Ehrman\",\r\n  \"Eilhard\",\"Eilif\",\"Eilinud\",\"Einar\",\"Eindrini\",\"Eirech\",\"Eirik\",\"Eiron\",\"Eithne\",\"Eivind\",\"Ekaterina\",\"Elaine\",\"Elath\",\r\n  \"Elbert\",\"Eldath\",\"Eldavon\",\"Eldgrim\",\"Eldid\",\"Eldin\",\"Eldon\",\"Eldred\",\"Eldric\",\"Eldrin\",\"Eldron\",\"Eldìvèn\",\"Eleanor\",\r\n  \"Eleazar\",\"Electa\",\"Elelil\",\"Elena\",\"Elendil\",\"Eleno'in\",\"Elentari\",\"Elerion\",\"Elessar\",\"Elfnida\",\"Elfnide\",\"Elfnieda\",\"Elford\",\r\n  \"Elhanan\",\"Eliakini\",\"Eliard\",\"Elinor\",\"Elion\",\"Eliseth\",\"Elispeth\",\"Elisseer\",\"Elistan\",\"Eliwood\",\"Elizabeth\",\"Ella\",\"Ellanath\",\r\n  \"Ellen\",\"Ellin\",\"Ellingwood\",\"Ellydryr\",\"Ellynor\",\"Elmeric\",\"Elmira\",\"Eloisa\",\"Elora\",\"Elowen\",\"Elrad\",\"Elric\",\"Elrik\",\r\n  \"Elrodin\",\"Elron\",\"Elrond\",\"Elsa\",\"Elsbeth\",\"Elsdon\",\"Elspeth\",\"Elswyth\",\"Elton\",\"Elu\",\"Elva\",\"Elvalind\",\"Elvarion\",\r\n  \"Elvin\",\"Elvina\",\"Elvira\",\"Elvrit\",\"Elvérion\",\"Elwell\",\"Elwin\",\"Elwyn\",\"Elysia\",\"Emberyl\",\"Emerynn\",\"Emirah\",\"Emma\",\r\n  \"Emna\",\"Emory\",\"Endemian\",\"Endicott\",\"Endoray\",\"Endrede\",\"Endsor\",\"Engeihard\",\"Enigma\",\"Enn\",\"Ennorath\",\"Envi\",\"Enzoray\",\r\n  \"Eolair\",\"Eomer\",\"Eosin\",\"Eowyn\",\"Ephyre\",\"Erana\",\"Erard\",\"Ercan\",\"Erdmann\",\"Erebor\",\"Ergon\",\"Erian\",\"Eric\",\r\n  \"Erich\",\"Erie\",\"Erik\",\"Erika\",\"Erilyth\",\"Erland\",\"Erlend\",\"Erling\",\"Ernald\",\"Ernan\",\"Ernata\",\"Errine\",\"Ervin\",\r\n  \"Eryka\",\"Eryn\",\"Esghar\",\"Eslin\",\"Esmeralda\",\"Esmond\",\"Esnar\",\"Essa\",\"Esselin\",\"Estheria\",\"Estrella\",\"Etelka\",\"Ethelbearn\",\r\n  \"Ethelbert\",\"Ethelburga\",\"Ethelred\",\"Ethelreda\",\"Eudo\",\"Eugene\",\"Eulala\",\"Evadne\",\"Evaine\",\"Evald\",\"Evan\",\"Evarts\",\"Evelina\",\r\n  \"Evelyn\",\"Everard\",\"Evert\",\"Evind\",\"Evo\",\"Evolyn\",\"Evska\",\"Ewald\",\"Ewen\",\"Ewugan\",\"Eystein\",\"Eyulf\",\"Eyvind\",\r\n  \"Ezail\",\"Ezellohar\",\"Ezirith\",\"Ezme\",\"Ezrabar\",\"Ezri\",\"Faber\",\"Fabian\",\"Fael\",\"Faelyn\",\"Fahs\",\"Fairfax\",\"Fairtnan\",\r\n  \"Falathar\",\"Falcon\",\"Falgar\",\"Fali\",\"Falias\",\"Falkiner\",\"Falmalinnar\",\"Falyrias\",\"Fanchon\",\"Fangorn\",\"Fanshaw\",\"Faraday\",\"Farah\",\r\n  \"Farale\",\"Faramir\",\"Faran\",\"Farathar\",\"Farid\",\"Farith\",\"Farli\",\"Farnham\",\"Farouk\",\"Farquhar\",\"Farrin\",\"Farwehl\",\"Fatima\",\r\n  \"Fausto\",\"Fawn\",\"Faysal\",\"Fea\",\"Feargus\",\"Fedor\",\"Feike\",\"Felam\",\"Felladin\",\"Fellador\",\"Fellathor\",\"Fellow\",\"Fenella\",\r\n  \"Fenton\",\"Fenwick\",\"Fera\",\"Ferantay\",\"Ferazhin\",\"Ferdinand\",\"Fergus\",\"Fernand\",\"Feron\",\"Feustmann\",\"Fhinders\",\"Fhorgeir\",\"Fiana\",\r\n  \"Fiathna\",\"Fielding\",\"Fikir\",\"Filippe\",\"Finarfin\",\"Finbar\",\"Findegil\",\"Findley\",\"Finegan\",\"Fingal\",\"Fingalla\",\"Fingil\",\"Finias\",\r\n  \"Finn\",\"Finnbogi\",\"Finos\",\"Fiona\",\"Fiorag\",\"Fiori\",\"Firca\",\"Firin\",\"Firon\",\"Firozhan\",\"Fistandantilus\",\"Fistar\",\"Fistor\",\r\n  \"Fitzedward\",\"Fitzroy\",\"Fizban\",\"Fjolnir\",\"Flandrena\",\"Flare\",\"Flavius\",\"Flint\",\"Floki\",\"Florimund\",\"Flosi\",\"Flygare\",\"Flynn\",\r\n  \"Fnida\",\"Fomorii\",\"Forbus\",\"Forester\",\"Fornost\",\"Foronte\",\"Fothergill\",\"Francisco\",\"Frayja\",\"Freda\",\"Frederic\",\"Frederica\",\"Frederick\",\r\n  \"Fredrick\",\"Fredrik\",\"Freeborn\",\"Freeman\",\"Frey\",\"Freya\",\"Freydis\",\"Fridgeir\",\"Frodo\",\"Fryniwyd\",\"Fuad\",\"Fumorak\",\"Furnifold\",\r\n  \"Fury\",\"Fyodor\",\"Fyodr\",\"Fyza\",\"Gaarn\",\"Gabniela\",\"Gabriel\",\"Gadsby\",\"Gaea\",\"Gael\",\"Gaelinar\",\"Gaena\",\"Gaerdal\",\r\n  \"Gaillard\",\"Gairdner\",\"Galach\",\"Galadren\",\"Galan\",\"Galanna\",\"Galapas\",\"Galaphon\",\"Galar\",\"Galbard\",\"Galderon\",\"Galdor\",\"Gale\",\r\n  \"Galeia\",\"Galen\",\"Galfrey\",\"Galion\",\"Galrandar\",\"Galrion\",\"Gama\",\"Gandalf\",\"Ganduil\",\"Ganith\",\"Gannon\",\"Ganvan\",\"Gardi\",\r\n  \"Garet\",\"Gareth\",\"Garion\",\"Garith\",\"Garl\",\"Garland\",\"Garlenon\",\"Garn\",\"Garon\",\"Garrick\",\"Garrott\",\"Garth\",\"Gartnas\",\r\n  \"Garvin\",\"Garwood\",\"Gaston\",\"Gavendra\",\"Gavin\",\"Gavina\",\"Gawain\",\"Gealsgiath\",\"Gebhard\",\"Geir\",\"Geirmund\",\"Geirstein\",\"Gelonna\",\r\n  \"Genevieve\",\"Geoffrey\",\"Georgii\",\"Gerald\",\"Gerard\",\"Gerd\",\"Gerhard\",\"Gerhart\",\"Gerloc\",\"Gerrard\",\"Gerreint\",\"Gerrish\",\"Gertrude\",\r\n  \"Gervaise\",\"Gesin\",\"Gest\",\"Ghirra\",\"Ghislain\",\"Gholson\",\"Gia\",\"Gibbon\",\"Gilberta\",\"Gilda\",\"Gilden\",\"Gildersleeve\",\"Giles\",\r\n  \"Gilfanon\",\"Gilian\",\"Gilir\",\"Gilli\",\"Gillion\",\"Gillyn\",\"Gilm\",\"Gilraen\",\"Gilthanas\",\"Gimli\",\"Gird\",\"Girin\",\"Gisgin\",\r\n  \"Gizur\",\"Gladstone\",\"Glassford\",\"Glebur\",\"Gleda\",\"Gleocyn\",\"Gleridower\",\"Glida\",\"Glogan\",\"Gloisur\",\"Glorfindel\",\"Glugwyn\",\"Glum\",\r\n  \"Glyn\",\"Glynn\",\"Gnazia\",\"Godfred\",\"Godfrey\",\"Godwin\",\"Goibhniu\",\"Golding\",\"Goldwin\",\"Gollum\",\"Gongalo\",\"Goodhue\",\"Gorbash\",\r\n  \"Gordalius\",\"Gorias\",\"Gorion\",\"Gorm\",\"Gotthard\",\"Govier\",\"Govind\",\"Gowen\",\"Grace\",\"Graham\",\"Graine\",\"Gralon\",\"Grani\",\r\n  \"Grania\",\"Gravin\",\"Greegan\",\"Greenleaf\",\"Gregor\",\"Gregory\",\"Grendahl\",\"Greyfell\",\"Grian\",\"Gridley\",\"Griffid\",\"Griffin\",\"Griffith\",\r\n  \"Griggs\",\"Grim\",\"Grima\",\"Grimhilda\",\"Grimnir\",\"Grindan\",\"Griniing\",\"Grisha\",\"Griswold\",\"Groa\",\"Grover\",\"Grunak\",\"Grunnhild\",\r\n  \"Gruumsh\",\"Gualat\",\"Gudmund\",\"Gudmundur\",\"Gudrid\",\"Gudris\",\"Gudrun\",\"Guibert\",\"Guida\",\"Guido\",\"Gulian\",\"Gunila\",\"Gunnar\",\r\n  \"Gunning\",\"Gunther\",\"Gurnarok\",\"Gurney\",\"Gustav\",\"Guthorm\",\"Guthrie\",\"Guthum\",\"Gutzon\",\"Guy\",\"Gwacyn\",\"Gwaihir\",\"Gweddyn\",\r\n  \"Gwen\",\"Gwenca\",\"Gwenda\",\"Gwendolyn\",\"Gwenevere\",\"Gweniver\",\"Gwildor\",\"Gwoc\",\"Gwomyr\",\"Gwydion\",\"Gwyn\",\"Gwyneth\",\"Gwynfryd\",\r\n  \"Gwyran\",\"Gwythinn\",\"Gyda\",\"Gylian\",\"Gymir\",\"Haakon\",\"Habib\",\"Hablot\",\"Hack\",\"Haddon\",\"Hadrian\",\"Haestan\",\"Hafez\",\r\n  \"Hafgrim\",\"Hagar\",\"Haigh\",\"Hakatri\",\"Haki\",\"Hakon\",\"Halbert\",\"Halcyon\",\"Haldane\",\"Haldor\",\"Hale\",\"Halfdan\",\"Haliina\",\r\n  \"Hall\",\"Halldis\",\"Halldor\",\"Halley\",\"Hallfred\",\"Hallfrid\",\"Hallgerd\",\"Hallkel\",\"Hallock\",\"Halloweii\",\"Hallveig\",\"Halvord\",\"Hamlin\",\r\n  \"Hamnet\",\"Hanford\",\"Hani\",\"Haninah\",\"Hannibal\",\"Hanoran\",\"Hansine\",\"Hapweth\",\"Harald\",\"Harbaugh\",\"Harcourt\",\"Hardernan\",\"Hardon\",\r\n  \"Hardwicke\",\"Harek\",\"Harkness\",\"Harlan\",\"Harlo\",\"Harold\",\"Haroon\",\"Harpo\",\"Harren\",\"Harthan\",\"Harthran\",\"Hartpole\",\"Hartwig\",\r\n  \"Harwood\",\"Hasket\",\"Hassan\",\"Hastein\",\"Hatcher\",\"Hattrick\",\"Hauk\",\"Havard\",\"Havelock\",\"Hayvan\",\"Hazard\",\"Hazel\",\"Haziran\",\r\n  \"Hazrond\",\"Healdon\",\"Heardred\",\"Heaslip\",\"Heather\",\"Hector\",\"Hedda\",\"Hedin\",\"Hedwig\",\"Heimer\",\"Helena\",\"Helga\",\"Helgi\",\r\n  \"Helir\",\"Helix\",\"Helm\",\"Helma\",\"Helmi\",\"Heman\",\"Hemming\",\"Hendrik\",\"Hengist\",\"Henna\",\"Henrick\",\"Henry\",\"Geramon\",\r\n  \"Herdis\",\"Herekin\",\"Hereward\",\"Herijar\",\"Hermione\",\"Heron\",\"Hertha\",\"Heryom\",\"Herzog\",\"Heward\",\"Hhaba'id\",\"Hhabezur\",\"Hickling\",\r\n  \"Hidohebhi\",\"Hifryn\",\"Hild\",\"Hilda\",\"Hildebrand\",\"Hildegarde\",\"Hildric\",\"Himli\",\"Hisar\",\"Hislop\",\"Hjalmar\",\"Hjalti\",\"Hjeldin\",\r\n  \"Hjort\",\"Hjorth\",\"Hlif\",\"Hoadley\",\"Hoar\",\"Hobart\",\"Hodgdon\",\"Hogg\",\"Hogni\",\"Holbrook\",\"Holger\",\"Holgi\",\"Hollister\",\r\n  \"Holly\",\"Homli\",\"Hookham\",\"Horan\",\"Horatio\",\"Hord\",\"Horik\",\"Hormstein\",\"Horsa\",\"Hortensia\",\"Horton\",\"Hoskuld\",\"Hosni\",\r\n  \"Hossein\",\"Howarth\",\"Howland\",\"Hrafn\",\"Hrapp\",\"Hrefna\",\"Hrethel\",\"Hring\",\"Hroald\",\"Hrodyn\",\"Hrolf\",\"Hrothgar\",\"Hrugan\",\r\n  \"Hruggek\",\"Hruse\",\"Hrut\",\"Huffatn\",\"Hulbeart\",\"Hulda\",\"Hultz\",\"Humbert\",\"Hunter\",\"Hurd\",\"Hurgal\",\"Hurvin\",\"Hussain\",\r\n  \"Hustana\",\"Hyarantar\",\"Hyarante\",\"Hyder\",\"Hyfryn\",\"Hygelac\",\"Hylissa\",\"Hynman\",\"Hyrak\",\"Ian\",\"Iana\",\"Ibitz\",\"Ibrahim\",\r\n  \"Ibrandul\",\"Ica\",\"Icarus\",\"Icava\",\"Ick\",\"Ida\",\"Idarolan\",\"Iden\",\"Idris\",\"Iduna\",\"Iduné\",\"Ies'lorn\",\"Igjaru\",\r\n  \"Igor\",\"Ikarin\",\"Ilena\",\"Ilermath\",\"Ilia\",\"Iliriya\",\"Illentik\",\"Illuin\",\"Illyana\",\"Ilmare\",\"Ilniora\",\"Ilthoss\",\"Iluvatar\",\r\n  \"Ilya\",\"Ilyesha\",\"Imajin\",\"Imnar\",\"Imoen\",\"Imphela\",\"Imrador\",\"Imrahan\",\"Imrahim\",\"Imril\",\"Imryr\",\"Inahwen\",\"Indech\",\r\n  \"Indigo\",\"Indira\",\"Indreju\",\"Indria\",\"Ingald\",\"Ingeborg\",\"Ingen\",\"Ingi\",\"Ingirid\",\"Ingolf\",\"Ingram\",\"Ingrid\",\"Ingunn\",\r\n  \"Inifael\",\"Inigo\",\"Inisfa'il\",\"Iosaz\",\"Iosef\",\"Irgash\",\"Irial\",\"Irian\",\"Iris\",\"Irma\",\"Irphilin\",\"Irsai\",\"Irvin\",\r\n  \"Irwick\",\"Isael\",\"Isak\",\"Isambard\",\"Isbeorn\",\"Iscal\",\"Iselore\",\"Isengard\",\"Isengrim\",\"Iserion\",\"Isgrimnur\",\"Ishmael\",\"Isidora\",\r\n  \"Isiki\",\"Isildur\",\"Isilith\",\"Isleif\",\"Ismail\",\"Isolde\",\"Isorn\",\"Issak\",\"Ithaca\",\"Iuz\",\"Ivan\",\"Ivar\",\"Ivor\",\r\n  \"Ivy\",\"Iwanda\",\"Iyu'nigato\",\"Izard\",\"Izebel\",\"Izvire\",\"Jace\",\"Jacinth\",\"Jacoby\",\"Jacor\",\"Jade\",\"Jaden\",\"Jadzia\",\r\n  \"Jael\",\"Jaffar\",\"Jagadis\",\"Jaheira\",\"Jahrec\",\"Jahverbhai\",\"Jalasil\",\"Jalavier\",\"Jaligal\",\"Jamila\",\"Janda'nan\",\"Jandanan\",\"Janix\",\r\n  \"Janna\",\"Janus\",\"Janvel\",\"Jarak\",\"Jarazal\",\"Jared\",\"Jarek\",\"Jarnagua\",\"Jarriel\",\"Jarvin\",\"Jasara\",\"Jasek\",\"Jaseve\",\r\n  \"Jasha\",\"Jasmine\",\"Jason\",\"Javair\",\"Javon\",\"Jawaharial\",\"Jayce\",\"Jayden\",\"Jaylidan\",\"Jayna\",\"Jaysen\",\"Jazhara\",\"Jazrel\",\r\n  \"Jedd\",\"Jeffen\",\"Jehryn\",\"Jelyn\",\"Jenantar\",\"Jenkin\",\"Jennifer\",\"Jens\",\"Jensine\",\"Jephson\",\"Jerec\",\"Jeryth\",\"Jesiper\",\r\n  \"Jespar\",\"Jesslyn\",\"Jestyn\",\"Jethis\",\"Jevan\",\"Jevist\",\"Jezryanadar\",\"Jhael\",\"Jhaelen\",\"Jhany\",\"Jhardamòr\",\"Jharkor\",\"Jhary\",\r\n  \"Jihad\",\"Jillian\",\"Jingizu\",\"Jintah\",\"Jiriki\",\"Jirnost\",\"Jocelyn\",\"Jochan\",\"Johannes\",\"John\",\"Jolan\",\"Jomano\",\"Jonaya\",\r\n  \"Joran\",\"Jordan\",\"Joriel\",\"Jornadesh\",\"Jorunn\",\"Joscelyn\",\"Joseph\",\"Josephine\",\"Josette\",\"Joshua\",\"Jotham\",\"Jovena\",\"Jubini\",\r\n  \"Jullana\",\"Junius\",\"Juno\",\"Juntalin\",\"Jura\",\"Jurim\",\"Jusif\",\"Juss\",\"Jyresh\",\"K'aarna\",\"Kaarna\",\"Kael\",\"Kaelin\",\r\n  \"Kaffa\",\"Kai\",\"Kaia\",\"Kailyn\",\"Kaimana\",\"Kaitlinn\",\"Kaja\",\"Kalan\",\"Kalantir\",\"Kalar\",\"Kaldar\",\"Kaleen\",\"Kalen\",\r\n  \"Kalf\",\"Kalia\",\"Kalina\",\"Kalvan\",\"Kalvaro\",\"Kalyra\",\"Kalysha\",\"Kamril\",\"Kamshir\",\"Kanoa\",\"Kaori\",\"Kaprin\",\"Kara\",\r\n  \"Karali\",\"Karel\",\"Karelia\",\"Kari\",\"Karim\",\"Karinca\",\"Karine\",\"Karis\",\"Karitsa\",\"Karker\",\"Karl\",\"Karlsefni\",\"Karran\",\r\n  \"Karya\",\"Kaschak\",\"Kasia\",\"Kaspar\",\"Kasreyn\",\"Kathena\",\"Kathran\",\"Katishimo\",\"Katla\",\"Katnina\",\"Katrin\",\"Katrina\",\"Kavalam\",\r\n  \"Kavalnir\",\"Kaylianna\",\"Kaylin\",\"Kazairl\",\"Kazalim\",\"Kazir\",\"Keavy\",\"Keelan\",\"Kegan\",\"Keiko\",\"Keldorn\",\"Kelin\",\"Kellin\",\r\n  \"Kelma'in\",\"Kelson\",\"Kelth\",\"Kelvin\",\"Kemble\",\"Kendall\",\"Kendra\",\"Kendrick\",\"Kenesaw\",\"Kenin\",\"Kenny\",\"Kenobi\",\"Kenrick\",\r\n  \"Kerik\",\"Kerish\",\"Kermit\",\"Kerrigan\",\"Keshar\",\"Kesrick\",\"Kethios\",\"Ketial\",\"Ketil\",\"Kettali\",\"Kevan\",\"Keven\",\"Kevlin\",\r\n  \"Keyrnon\",\"Khader\",\"Khalia\",\"Khalid\",\"Khanzadian\",\"Kharas\",\"Khealynn\",\"Khelben\",\"Kheldor\",\"Khelen\",\"Khelin\",\"Khelyn\",\"Khendraja'aro\",\r\n  \"Khenel\",\"Khezeed\",\"Khindawe\",\"Khirsha\",\"Khlor\",\"Khris\",\"Khyved\",\"Ki'ushapo\",\"Kian\",\"Kiborno\",\"Kiera\",\"Kieran\",\"Kikkasut\",\r\n  \"Kilas\",\"Kilian\",\"Killion\",\"Kimmuriel\",\"Kimura\",\"Kinloch\",\"Kinson\",\"Kippler\",\"Kira\",\"Kiri\",\"Kirjava\",\"Kirk\",\"Kirren\",\r\n  \"Kirsopp\",\"Kirsten\",\"Kishin\",\"Kisin\",\"Kitiara\",\"Kjeldor\",\"Kjindar\",\"Klaus\",\"Klean\",\"Klerak\",\"Knud\",\"Knut\",\"Knute\",\r\n  \"Koabon\",\"Kolbein\",\"Kolchash\",\"Kolskegg\",\"Kolya\",\"Kona\",\"Konrad\",\"Konstantine\",\"Korban\",\"Kord\",\"Koreth\",\"Korgan\",\"Korm\",\r\n  \"Kormar\",\"Kornag\",\"Korska\",\"Kosh\",\"Kota\",\"Kovelir\",\"Krinn\",\"Krishnalai\",\"Kroh\",\"Krom\",\"Kronos\",\"Kuno\",\"Kurd\",\r\n  \"Kurn\",\"Kurt\",\"Kurin\",\"Kuros\",\"Kurtulmak\",\"Ky'ishi\",\"Ky'varan\",\"Kyle\",\"Kylindra\",\"Kypros\",\"Kyrie\",\"Kyriel\",\"La'ahl\",\r\n  \"Lachesis\",\"Lachian\",\"Ladia\",\"Ladoros\",\"Laeli\",\"Laelia\",\"Laerrui\",\"Lahar\",\"Lahsai\",\"Lalely\",\"Lamar\",\"Lambi\",\"Lan\",\r\n  \"Lana\",\"Lance\",\"Lancelot\",\"Landailyn\",\"Landoris\",\"Landrea\",\"Laneth\",\"Langhorne\",\"Langrian\",\"Langston\",\"Lanthal\",\"Lanthorn\",\"Larad\",\r\n  \"Lardner\",\"Larisa\",\"Larkin\",\"Larn\",\"Larnea\",\"Lars\",\"Larz\",\"Lashar\",\"Lateia\",\"Lathander\",\"Laurana\",\"Laurelin\",\"Laxton\",\r\n  \"Lazar\",\"Lazlo\",\"Lea\",\"Leareth\",\"Leathian\",\"Lec\",\"Ledyard\",\"Leela\",\"Legolas\",\"Legrand\",\"Leif\",\"Leighton\",\"Leika\",\r\n  \"Leila\",\"Leilah\",\"Leli\",\"Lembar\",\"Lenka\",\"Lenox\",\"Leo\",\"Leofric\",\"Leon\",\"Leonard\",\"Leonardo\",\"Leopond\",\"Lesesne\",\r\n  \"Lestyn\",\"Leta\",\"Letor\",\"Lev\",\"Lewellyri\",\"Lexan\",\"Lexx\",\"Lhuc\",\"Lia\",\"Liana\",\"Liena\",\"Lightfoot\",\"Liliane\",\r\n  \"Lilin\",\"Lina\",\"Lindar\",\"Linmer\",\"Linnea\",\"Lios\",\"Liphar\",\"Lippard\",\"Liptrot\",\"Lirith\",\"Lithar\",\"Littleton\",\"Livermore\",\r\n  \"Livia\",\"Ljot\",\"Ljotolf\",\"Lluth\",\"Llyn\",\"Llythin\",\"Lobelia\",\"Lobryn\",\"Lobur\",\"Locke\",\"Lockwood\",\"Loddlaen\",\"Lodica\",\r\n  \"Lodin\",\"Loella\",\"Logan\",\"Loibur\",\"Loili\",\"Lola\",\"Lonvan\",\"Lore\",\"Loric\",\"Lorin\",\"Lormyr\",\"Lothar\",\"Lothrop\",\r\n  \"Lott\",\"Lotta\",\"Loudon\",\"Louisa\",\"Lovegood\",\"Lovva\",\"Lovyan\",\"Luas\",\"Lucan\",\"Lucca\",\"Lucia\",\"Lucian\",\"Lucinda\",\r\n  \"Lucius\",\"Lucrecia\",\"Ludmila\",\"Luella\",\"Lufkin\",\"Lugh\",\"Luhsane\",\"Lum\",\"Lumbar\",\"Luna\",\"Lunar\",\"Lunetta\",\"Lupin\",\r\n  \"Lurican\",\"Lurue\",\"Luscan\",\"Luther\",\"Luthian\",\"Luvina\",\"Lycias\",\"Lydia\",\"Lylas\",\"Lyle\",\"Lymo\",\"Lyndall\",\"Lyndon\",\r\n  \"Lynette\",\"Lynis\",\"Lynn\",\"Lypilla\",\"Lyra\",\"Lyrian\",\"Lyrin\",\"Lyron\",\"Lysander\",\"Lyssa\",\"Lythia\",\"Lythian\",\"Lytler\",\r\n  \"Lyzandra\",\"Lyzette\",\"Lórien\",\"Mabon\",\"Macallan\",\"Macaulay\",\"Macer\",\"Mackim\",\"Macvey\",\"Maddern\",\"Maddock\",\"Madelon\",\"Madhao\",\r\n  \"Madora\",\"Maec\",\"Maegwin\",\"Mael\",\"Maerraent\",\"Mafka\",\"Magda\",\"Magh\",\"Magill\",\"Magna\",\"Magnus\",\"Magus\",\"Mahion\",\r\n  \"Mahmud\",\"Mahri\",\"Maia\",\"Maidah\",\"Maidak\",\"Maihar\",\"Makoma\",\"Malach\",\"Malachias\",\"Maladack\",\"Malador\",\"Malak\",\"Malar\",\r\n  \"Malcoff\",\"Malcolm\",\"Malfar\",\"Malia\",\"Maliforin\",\"Malkil\",\"Malto\",\"Malvin\",\"Malvtha\",\"Mama\",\"Mamba\",\"Mana\",\"Manala\",\r\n  \"Manaverr\",\"Manfred\",\"Mankey\",\"Mannin\",\"Manon\",\"Mansour\",\"Manton\",\"Manwe\",\"Maoll\",\"March\",\"Marcus\",\"Marena\",\"Margarita\",\r\n  \"Margery\",\"Mariandor\",\"Marid\",\"Marina\",\"Marion\",\"Marissa\",\"Marisse\",\"Mark\",\"Markham\",\"Maroof\",\"Marques\",\"Marsden\",\"Marshtnan\",\r\n  \"Marsineh\",\"Marta\",\"Martin\",\"Martus\",\"Mary\",\"Maryn\",\"Mathilda\",\"Mathilde\",\"Matilda\",\"Matthew\",\"Matthias\",\"Maudlin\",\"Maura\",\r\n  \"Mavis\",\"Maxander\",\"Maxfield\",\"Maximilian\",\"Maximus\",\"Maya\",\"Mayhew\",\"Mazrak\",\"Medar\",\"Medart\",\"Medea\",\"Meder\",\"Medrom\",\r\n  \"Megan\",\"Meghnad\",\"Mehmet\",\"Mekeesha\",\"Melba\",\"Melchior\",\"Meleri\",\"Meliadoul\",\"Melian\",\"Melisande\",\"Melkor\",\"Mellyora\",\"Melnyth\",\r\n  \"Melora\",\"Melva\",\"Melvaig\",\"Memor\",\"Men\",\"Menard\",\"Mendolin\",\"Menelvagor\",\"Mennefer\",\"Meoran\",\"Mephistopheles\",\"Merah\",\"Merasye\",\r\n  \"Meredith\",\"Meriadoc\",\"Merifa\",\"Merivan\",\"Merlin\",\"Merrilee\",\"Merryn\",\"Mervyn\",\"Merwold\",\"Merwolf\",\"Mes'ard\",\"Meta\",\"Methos\",\r\n  \"Methuen\",\"Michael\",\"Michel\",\"Mideya\",\"Midhat\",\"Midra\",\"Mignon\",\"Miguel\",\"Mikhail\",\"Mila\",\"Milada\",\"Milander\",\"Milandro\",\r\n  \"Mileaha\",\"Millard\",\"Milo\",\"Mimir\",\"Mina\",\"Minella\",\"Miner\",\"Minna\",\"Minx\",\"Mira\",\"Miragon\",\"Miranda\",\"Mirandros\",\r\n  \"Miriel\",\"Mirrash\",\"Mirromi\",\"Miryam\",\"Misha\",\"Mishanti\",\"Misin\",\"Mist\",\"Mithrandir\",\"Mithryl\",\"Mitre\",\"Miwa\",\"Mizra\",\r\n  \"Moda\",\"Modeus\",\"Moffett\",\"Mohammed\",\"Mohieddin\",\"Moina\",\"Moira\",\"Moiriane\",\"Moisur\",\"Molina\",\"Mona\",\"Monach\",\"Montfort\",\r\n  \"Mora\",\"Moradin\",\"Mord\",\"Moredlin\",\"Morgan\",\"Morgon\",\"Morgwin\",\"Moriana\",\"Morik\",\"Morin\",\"Morley\",\"Morna\",\"Morpheus\",\r\n  \"Morrigan\",\"Mortos\",\"Mortrock\",\"Morven\",\"Moya\",\"Muammar\",\"Mubur\",\"Muhammed\",\"Muhlwena\",\"Mujibur\",\"Muktar\",\"Munin\",\"Murdo\",\r\n  \"Murias\",\"Murina\",\"Murrough\",\"Mussa\",\"Mustadio\",\"Mustafa\",\"Mylin\",\"Mylé\",\"Myna\",\"Myra\",\"Myriam\",\"Myrick\",\"Myrmeen\",\r\n  \"Myrna\",\"Myron\",\"Myrrdyn\",\"Myrrha\",\"Myshella\",\"Mythil\",\"Myvor\",\"N'hadha\",\"Nada\",\"Nadezhda\",\"Nadia\",\"Nadir\",\"Nagai\",\r\n  \"Nagel\",\"Nagvar\",\"Nahar\",\"Naia\",\"Naidel\",\"Najib\",\"Nakea\",\"Nalia\",\"Nall\",\"Nanorion\",\"Naois\",\"Naomi\",\"Napollo\",\r\n  \"Narasen\",\"Narcista\",\"Narisa\",\"Narvi\",\"Nasir\",\"Nasser\",\"Natalia\",\"Natasha\",\"Nathalia\",\"Nathalie\",\"Natty\",\"Nazar\",\"Nebron\",\r\n  \"Nedda\",\"Nedstar\",\"Neelix\",\"Negley\",\"Nemm\",\"Nemuel\",\"Neral\",\"Neri\",\"Nerian\",\"Nerilka\",\"Nerissa\",\"Nerull\",\"Nesbit\",\r\n  \"Nesta\",\"Nethuan\",\"Neva\",\"Nevaeh\",\"Nevard\",\"Nevena\",\"Nevile\",\"Nevyn\",\"Newall\",\"Newbold\",\"Newman\",\"Neysa\",\"Neza\",\r\n  \"Nibbidard\",\"Nichol\",\"Nicor\",\"Nienna\",\"Night\",\"Nigil\",\"Nikolai\",\"Nikua\",\"Nila\",\"Nimir\",\"Nimrodel\",\"Nina\",\"Ninian\",\r\n  \"Niomir\",\"Nira'in\",\"Nirnir\",\"Nita\",\"Nivek\",\"Nivilian\",\"Nizam\",\"Nizar\",\"Nobanion\",\"Nodaran\",\"Noela\",\"Nolan\",\"Nona\",\r\n  \"Noora\",\"Nor\",\"Nordri\",\"Noreen\",\"Norine\",\"Norle\",\"Norna\",\"Norval\",\"Norvin\",\"Norwood\",\"Nova\",\"Novalis\",\"Novita\",\r\n  \"Novomira\",\"Nu'endo\",\"Nuada\",\"Nuadi\",\"Nuala\",\"Nuale\",\"Nuanni\",\"Nungo\",\"Nunila\",\"Nura\",\"Nurdoch\",\"Nurgan\",\"Nuri\",\r\n  \"Nushia\",\"Nyassa\",\"Nylan\",\"Nymara\",\"Nynaeve\",\"Nyra\",\"Nytasa\",\"Oakes\",\"Oalyn\",\"Obed\",\"Oberon\",\"Ocar\",\"Oda\",\r\n  \"Odar\",\"Odd\",\"Oden\",\"Odilia\",\"Odimus\",\"Odo\",\"Odona\",\"Ofeig\",\"Ogden\",\"Oghma\",\"Ogma\",\"Ogmund\",\"Ogrus\",\r\n  \"Okander\",\"Olac\",\"Olaf\",\"Oldac\",\"Oldham\",\"Olga\",\"Olissa\",\"Olof\",\"Olorin\",\"Oloru\",\"Olvir\",\"Olya\",\"Omandras\",\r\n  \"Omar\",\"Omassus\",\"Ombrum\",\"Omer\",\"Onslow\",\"Onufrio\",\"Onund\",\"Onyx\",\"Ooma\",\"Oona\",\"Oonai\",\"Opal\",\"Ophelia\",\r\n  \"Orah\",\"Orcrist\",\"Ordway\",\"Oriana\",\"Orin\",\"Orion\",\"Orius\",\"Orivaen\",\"Orlandu\",\"Orlata\",\"Orm\",\"Ormsby\",\"Orome\",\r\n  \"Oron\",\"Orren\",\"Orridge\",\"Orsola\",\"Orson\",\"Osa\",\"Osiris\",\"Oskavar\",\"Ospar\",\"Osric\",\"Oswin\",\"Othello\",\"Othilia\",\r\n  \"Otho\",\"Othran\",\"Otiluke\",\"Otkel\",\"Otrygg\",\"Ottar\",\"Ottilia\",\"Otto\",\"Overton\",\"Owain\",\"Owen\",\"Owyn\",\"Ozatras\",\r\n  \"Ozto\",\"Ozur\",\"Padraic\",\"Padrias\",\"Paget\",\"Pala\",\"Palma\",\"Pamar\",\"Pan\",\"Parbha\",\"Pargascor\",\"Parr\",\"Pasca\",\r\n  \"Paschal\",\"Passmore\",\"Patnas\",\"Pattabhai\",\"Pavel\",\"Pean\",\"Pearl\",\"Pearsall\",\"Peffer\",\"Peiham\",\"Peitar\",\"Peleg\",\"Pelipi\",\r\n  \"Pellin\",\"Pendleton\",\"Penfield\",\"Pengolod\",\"Penhallow\",\"Penniman\",\"Penrhyn\",\"Pepperell\",\"Pereban\",\"Peredon\",\"Peregrin\",\"Peregrine\",\"Perith\",\r\n  \"Peronn\",\"Perrin\",\"Persifor\",\"Pestivar\",\"Peter\",\"Pethros\",\"Petra\",\"Petrea\",\"Petronella\",\"Pflarr\",\"Phanuel\",\"Pharatnond\",\"Pharcellus\",\r\n  \"Phelim\",\"Philo\",\"Philpot\",\"Phimister\",\"Phoenix\",\"Phyrrus\",\"Pia\",\"Picar\",\"Pickman\",\"Pigot\",\"Pike\",\"Pine\",\"Pinkham\",\r\n  \"Pinkney\",\"Pinkstone\",\"Piotr\",\"Pittheus\",\"Plaisted\",\"Plunimer\",\"Plunkett\",\"Polassar\",\"Pollard\",\"Pollock\",\"Polonius\",\"Polycarp\",\"Pomeroy\",\r\n  \"Porthios\",\"Powell\",\"Prafulla\",\"Prendergast\",\"Preston\",\"Prichard\",\"Proctor\",\"Prospero\",\"Provida\",\"Psilofyr\",\"Puck\",\"Pue\",\"Pulisk\",\r\n  \"Pulteney\",\"Purdon\",\"Pyke\",\"Pyros\",\"Pysander\",\"Quaan\",\"Quagel\",\"Qualin\",\"Quan\",\"Quarles\",\"Quasar\",\"Quascar\",\"Quass\",\r\n  \"Quebba\",\"Quelfinas\",\"Quesan\",\"Queygo\",\"Quiddle\",\"Quinn\",\"Quiss\",\"Quixano\",\"Quora\",\"Quvar\",\"Quvean\",\"Raagon\",\"Raban\",\r\n  \"Rabind\",\"Rabur\",\"Rach\",\"Rachid\",\"Rackafel\",\"Rackhir\",\"Radagast\",\"Radija\",\"Rae\",\"Rael\",\"Raen\",\"Rafa\",\"Rafael\",\r\n  \"Rafur\",\"Ragen\",\"Ragna\",\"Ragnal\",\"Ragnar\",\"Ragnhild\",\"Rahaz\",\"Rai\",\"Raikes\",\"Rails\",\"Raimon\",\"Raina\",\"Raine\",\r\n  \"Raisa\",\"Raistlin\",\"Ralina\",\"Ralmanor\",\"Ralph\",\"Ramen\",\"Ramli\",\"Ramman\",\"Ramona\",\"Ramora\",\"Ramous\",\"Ramza\",\"Ranald\",\r\n  \"Ranath\",\"Rancor\",\"Rand\",\"Randar\",\"Randoer\",\"Randolf\",\"Randor\",\"Ranfurly\",\"Ranjan\",\"Rankin\",\"Rannuif\",\"Rannveig\",\"Raphael\",\r\n  \"Rary\",\"Rashiel\",\"Rasputin\",\"Rathack\",\"Rathanos\",\"Rathgar\",\"Rattray\",\"Rauros\",\"Ravenor\",\"Ravi\",\"Rayne\",\"Razamor\",\"Raziel\",\r\n  \"Razzan\",\"Rebecca\",\"Recoun\",\"Redcliffe\",\"Regalorn\",\"Regnar\",\"Reina\",\"Reis\",\"Relm\",\"Rem\",\"Remi\",\"Remnor\",\"Remus\",\r\n  \"Renar\",\"Renata\",\"Rendel\",\"Rengoll\",\"Reoc\",\"Resha\",\"Rethral\",\"Reva\",\"Rex\",\"Reyna\",\"Rezah\",\"Rhadry\",\"Rhaederle\",\r\n  \"Rhaeryn\",\"Rhea\",\"Rhiannon\",\"Rhiow\",\"Rhodhy\",\"Rhona\",\"Rhonda\",\"Rhora\",\"Rhorleif\",\"Rhorvald\",\"Rhundas\",\"Rhymer\",\"Rhynn\",\r\n  \"Rhys\",\"Riallus\",\"Riamon\",\"Rickard\",\"Ricyn\",\"Rigolio\",\"Rilir\",\"Rinaldus\",\"Ringgold\",\"Risaya\",\"Riss\",\"Rith\",\"Riven\",\r\n  \"Roach\",\"Roark\",\"Rockhill\",\"Rodefer\",\"Roderic\",\"Rodhan\",\"Rognvald\",\"Roignar\",\"Roland\",\"Rolf\",\"Rollo\",\"Roman\",\"Romelia\",\r\n  \"Romer\",\"Romney\",\"Ronan\",\"Root\",\"Rorik\",\"Rosalyn\",\"Rosamund\",\"Roscoe\",\"Rose\",\"Rosefyre\",\"Roseline\",\"Roshena\",\"Rosskeen\",\r\n  \"Roundell\",\"Rowena\",\"Ruadan\",\"Ruan\",\"Rubar\",\"Ruben\",\"Rubrick\",\"Ruby\",\"Rucker\",\"Rudyard\",\"Rufina\",\"Rufus\",\"Ruggles\",\r\n  \"Ruhollah\",\"Ruinar\",\"Rulian\",\"Rulinian\",\"Rumil\",\"Runa\",\"Runold\",\"Runolf\",\"Runus\",\"Rurik\",\"Rusgar\",\"Ruth\",\"Rutland\",\r\n  \"Ruwen\",\"Ryana\",\"Rycaro\",\"Rychanna\",\"Rygar\",\"Ryll\",\"Rylla\",\"Rynnyn\",\"Ryodan\",\"Ryoga\",\"Ryoka\",\"Saalem\",\"Sabal\",\r\n  \"Sabhel\",\"Sabriel\",\"Sabrok\",\"Sacheverall\",\"Sackville\",\"Saddam\",\"Sadler\",\"Sador\",\"Saedd\",\"Saermund\",\"Saeunn\",\"Safrin\",\"Saia\",\r\n  \"Said\",\"Saifai\",\"Saiwyn\",\"Salina\",\"Salmon\",\"Salter\",\"Sam\",\"Sambrea\",\"Samia\",\"Samira\",\"Sammel\",\"Samuel\",\"Sanfrid\",\r\n  \"Sano'rye\",\"Sanoreya\",\"Sanoria\",\"Sarcyn\",\"Sardior\",\"Sardul\",\"Sarel\",\"Sarevok\",\"Sargonus\",\"Saria\",\"Sarina\",\"Sarisin\",\"Sariya\",\r\n  \"Sarrask\",\"Saruman\",\"Sasha\",\"Saska\",\"Saturn\",\"Sauron\",\"Savah\",\"Savion\",\"Sawdon\",\"Sayan\",\"Scenesefa\",\"Scudamore\",\"Scythe\",\r\n  \"Sebastian\",\"Sebrinth\",\"Sechier\",\"Sedgely\",\"Seersha\",\"Segojan\",\"Sehanine\",\"Seitarin\",\"Selema\",\"Selena\",\"Selene\",\"Selig\",\"Selim\",\r\n  \"Selina\",\"Selis\",\"Selith\",\"Selune\",\"Selwyn\",\"Semuta\",\"Senith\",\"Senna\",\"Sephia\",\"Sephya\",\"Sepiroth\",\"Seramir\",\"Seraphina\",\r\n  \"Serena\",\"Serenyi\",\"Sergei\",\"Seriozha\",\"Seryan\",\"Seryl\",\"Seryth\",\"Seth\",\"Sethron\",\"Sevadia\",\"Severin\",\"Sevros\",\"Sevy\",\r\n  \"Sha'dar\",\"Sha'rell\",\"Shackerley\",\"Shadizad\",\"Shadrach\",\"Shadworth\",\"Shaera\",\"Shaivar\",\"Shaivir\",\"Shala\",\"Shalamar\",\"Shalandain\",\"Shalat\",\r\n  \"Shalhassan\",\"Shalindra\",\"Shalon\",\"Shalpan\",\"Shamane\",\"Shamir\",\"Shana\",\"Shandalar\",\"Shanell\",\"Shar\",\"Sharada\",\"Sharaq\",\"Shard\",\r\n  \"Sharif\",\"Sharilla\",\"Sharl\",\"Sharla\",\"Sharmaine\",\"Sharman\",\"Sharna\",\"Sharnira\",\"Sharra\",\"Sharteel\",\"Shaundra\",\"Sharyn\",\"Shayera\",\r\n  \"Shayla\",\"Shayll\",\"Shayonea\",\"Shea\",\"Sheegoth\",\"Sheeryl\",\"Sheherazad\",\"Shemsin\",\"Sheridan\",\"Sherif\",\"Sherry\",\"Shezael\",\"Shima'onari\",\r\n  \"Shintaro\",\"Shiza\",\"Shuinn\",\"Shuna\",\"Shurakai\",\"Shurik\",\"Shushila\",\"Shylock\",\"Siandar\",\"Sibert\",\"Sibyl\",\"Sidhe\",\"Siglinde\",\r\n  \"Sigmund\",\"Signe\",\"Sigred\",\"Sigrid\",\"Sigtrydd\",\"Sigurd\",\"Sigvaldi\",\"Silatasar\",\"Silius\",\"Silma\",\"Silmariel\",\"Silphane\",\"Silvain\",\r\n  \"Silvan\",\"Silvanus\",\"Silvera\",\"Silveron\",\"Silvia\",\"Silvyn\",\"Simir\",\"Simmu\",\"Sinbad\",\"Sindarin\",\"Sinir\",\"Sinjin\",\"Siranush\",\r\n  \"Sirisir\",\"Sirli'in\",\"Sirona\",\"Sirranon\",\"Sirwin\",\"Sisimar\",\"Siski\",\"Sivesh\",\"Siveth\",\"Siward\",\"Sjerdi\",\"Skamkel\",\"Skelmar\",\r\n  \"Skorian\",\"Slade\",\"Slania\",\"Slater\",\"Slava\",\"Sligh\",\"Slingsby\",\"Smedley\",\"Snargg\",\"Snorri\",\"Snyder\",\"Sodorn\",\"Soilir\",\r\n  \"Soisil\",\"Sokki\",\"Solaris\",\"Solera\",\"Solevig\",\"Solmund\",\"Solomon\",\"Solvi\",\"Sonnet\",\"Sooth\",\"Sora\",\"Sorass\",\"Sorcha\",\r\n  \"Sorin\",\"Sornovas\",\"Soth\",\"Southall\",\"Sovaz\",\"Soveh\",\"Soyadi\",\"Sparrow\",\"Sprigg\",\"Squall\",\"Srass\",\"Stabyl\",\"Stanwood\",\r\n  \"Starkad\",\"Starke\",\"Stedman\",\"Stefan\",\"Stehman\",\"Stein\",\"Steinkel\",\"Steinthor\",\"Stelectra\",\"Stenger\",\"Stenwulf\",\"Steponas\",\"Sterndale\",\r\n  \"Stetson\",\"Stetter\",\"Stiliman\",\"Stilingfleet\",\"Stopford\",\"Storm\",\"Stowna\",\"Strachan\",\"Straygoth\",\"Stroud\",\"Strudwick\",\"Strybyorn\",\"Strykar\",\r\n  \"Sturla\",\"Sturm\",\"Styx\",\"Sudeha\",\"Suleiman\",\"Sulimo\",\"Sulkas\",\"Sumarlidi\",\"Suras\",\"Surridge\",\"Susin\",\"Susur\",\"Sutan\",\r\n  \"Svala\",\"Svan\",\"Svante\",\"Svatopluk\",\"Sveata\",\"Sven\",\"Swain\",\"Swartwout\",\"Sydnor\",\"Syllva\",\"Sylvane\",\"Sylvia\",\"Sylvin\",\r\n  \"Sylvine\",\"Syndarra\",\"Synnyn\",\"Syranita\",\"Syrioll\",\"Tabar\",\"Tabitha\",\"Tabor\",\"Tabu\",\"Tacey\",\"Tachel\",\"Tadashi\",\"Tadeus\",\r\n  \"Tadia\",\"Tadisha\",\"Tadra\",\"Taennyn\",\"Taeynnyn\",\"Taggart\",\"Tahir\",\"Tailabar\",\"Taina\",\"Takhisis\",\"Taleen\",\"Talen\",\"Taleth\",\r\n  \"Talia\",\"Taliesin\",\"Talin\",\"Talmora\",\"Talobar\",\"Talona\",\"Taloxi\",\"Taltos\",\"Talus\",\"Tamar\",\"Tamara\",\"Tameryn\",\"Tamias\",\r\n  \"Tamlin\",\"Tamoreya\",\"Tanina\",\"Tanis\",\"Tanith\",\"Tanyc\",\"Tar\",\"Tara\",\"Taran\",\"Tarcia\",\"Taria\",\"Tarik\",\"Taromas\",\r\n  \"Taron\",\"Tarran\",\"Taryn\",\"Tas\",\"Tasharra\",\"Tasker\",\"Tatyana\",\"Taurus\",\"Taveli\",\"Taylian\",\"Taylin\",\"Tedra\",\"Tegan\",\r\n  \"Tekia\",\"Telena\",\"Tell\",\"Tench\",\"Tenna\",\"Tenser\",\"Teoddry\",\"Ter\",\"Teralyn\",\"Teressa\",\"Terix\",\"Teruah\",\"Tesin\",\r\n  \"Tesla\",\"Tessa\",\"Tevran\",\"Thaal\",\"Thacker\",\"Thaddeus\",\"Thaki\",\"Thal\",\"Thalen\",\"Thalessa\",\"Thalia\",\"Thalna\",\"Tham\",\r\n  \"Thana\",\"Thane\",\"Thanatos\",\"Thantos\",\"Thar\",\"Tharbad\",\"Tharkesh\",\"Tharn\",\"Thax\",\"Thecla\",\"Theda\",\"Theleb\",\"Theoden\",\r\n  \"Theodor\",\"Theodoric\",\"Theodosia\",\"Theodric\",\"Theoric\",\"Thera\",\"Therad\",\"Theresa\",\"Therios\",\"Theros\",\"Thesius\",\"Thieras\",\"Thieryn\",\r\n  \"Thingyr\",\"Thio\",\"Tholan\",\"Thomas\",\"Thomulor\",\"Thora\",\"Thoran\",\"Thorarin\",\"Thorburn\",\"Thord\",\"Thordarson\",\"Thordis\",\"Thorfel\",\r\n  \"Thorfinn\",\"Thorfinna\",\"Thorgeir\",\"Thorgerd\",\"Thorgest\",\"Thorgils\",\"Thorgrim\",\"Thorgunna\",\"Thorhall\",\"Thorhalla\",\"Thorhild\",\"Thorin\",\"Thorir\",\r\n  \"Thorkatla\",\"Thorkell\",\"Thorkild\",\"Thormod\",\"Thormodr\",\"Thormond\",\"Thorn\",\"Thorndike\",\"Thornwell\",\"Thorold\",\"Thorolf\",\"Thorsager\",\"Thorstein\",\r\n  \"Thorunn\",\"Thorvald\",\"Thorvaldur\",\"Thorvar\",\"Thorzyl\",\"Thoth\",\"Thrain\",\"Thrand\",\"Throck\",\"Thule\",\"Thurid\",\"Thylda\",\"Thyra\",\r\n  \"Thyri\",\"Thyrza\",\"Thyssa\",\"Tiana\",\"Tiffany\",\"Tihan\",\"Tika\",\"Tilford\",\"Tilica\",\"Tilir\",\"Tillinghast\",\"Tilloch\",\"Timon\",\r\n  \"Tioniel\",\"Tirion\",\"Tisha\",\"Tisheri\",\"Titania\",\"Titia\",\"Titiana\",\"Tivernee\",\"Tiyagar\",\"Tnin\",\"Tobias\",\"Tobis\",\"Todhunter\",\r\n  \"Tolbert\",\"Tolenka\",\"Topaz\",\"Topham\",\"Torc\",\"Tortbold\",\"Tosti\",\"Tosya\",\"Toulac\",\"Tovi\",\"Trafford\",\"Trebor\",\"Trelane\",\r\n  \"Trelawny\",\"Trella\",\"Trevel\",\"Trick\",\"Trigg\",\"Trill\",\"Triona\",\"Trir\",\"Tristam\",\"Tristan\",\"Trost\",\"Trotwood\",\"Trowbridge\",\r\n  \"Truesdell\",\"Tuane\",\"Tufnell\",\"Tugan\",\"Tuilleth\",\"Tulio\",\"Tulkas\",\"Tundine\",\"Tunstall\",\"Tuor\",\"Turan\",\"Turgoz\",\"Turhan\",\r\n  \"Turin\",\"Turpin\",\"Tuttle\",\"Tuula\",\"Twyla\",\"Tylden\",\"Tyldoran\",\"Tylen\",\"Tylien\",\"Tylynn\",\"Tymar\",\"Tymora\",\"Tymoriel\",\r\n  \"Tynnyn\",\"Tyr\",\"Tyra\",\"Tyranina\",\"Tyreen\",\"Tyrwhitt\",\"Uamian\",\"Ubriani\",\"Ucarsh\",\"Uda\",\"Uhier\",\"Uhlain\",\"Uhlume\",\r\n  \"Uholedil\",\"Uinen\",\"Ula\",\"Ulf\",\"Ulgor\",\"Ulis\",\"Uljas\",\"Ulji\",\"Ulmaerr\",\"Ulmo\",\"Ulosh\",\"Ulric\",\"Ulrich\",\r\n  \"Ultron\",\"Umaiar\",\"Umbar\",\"Umda\",\"Umgalad\",\"Una\",\"Uneitna\",\"Ungon\",\"Unius\",\"Unn\",\"Unrak\",\"Unwin\",\"Upal\",\r\n  \"Upton\",\"Urabi\",\"Urania\",\"Uranos\",\"Uranus\",\"Uriel\",\"Urish\",\"Urokoz\",\"Ursula\",\"Usher\",\"Uta\",\"Utumno\",\"Uusoae\",\r\n  \"Uvanimor\",\"Uziel\",\"Vabryn\",\"Vadarin\",\"Vadi\",\"Vaeddyn\",\"Vagn\",\"Vai\",\"Val\",\"Valadan\",\"Valandario\",\"Valandor\",\"Valarindi\",\r\n  \"Valborg\",\"Valda\",\"Valdain\",\"Valdemar\",\"Valen\",\"Valenka\",\"Valentia\",\"Valerand\",\"Valeria\",\"Valerian\",\"Valeska\",\"Valgar\",\"Valgard\",\r\n  \"Valgerd\",\"Valiah\",\"Valion\",\"Valisa\",\"Valiss\",\"Valistor\",\"Valkor\",\"Valla\",\"Vallo\",\"Valmar\",\"Valminder\",\"Valor\",\"Valsera\",\r\n  \"Valurian\",\"Valya\",\"Valynard\",\"Vandrad\",\"Vane\",\"Vanechka\",\"Vanidor\",\"Vanion\",\"Vannevar\",\"Vannyn\",\"Vanya\",\"Vanyar\",\"Vanyel\",\r\n  \"Varda\",\"Vardis\",\"Varina\",\"Varion\",\"Varken\",\"Varnum\",\"Vasava\",\"Vash\",\"Vasha\",\"Vasilii\",\"Vasin\",\"Vaydin\",\"Vaydir\",\r\n  \"Vayi\",\"Vecna\",\"Veda\",\"Veldahar\",\"Veldan\",\"Velex\",\"Velior\",\"Venable\",\"Vendor\",\"Veorcyn\",\"Vercyn\",\"Verdina\",\"Vereesa\",\r\n  \"Verline\",\"Vermund\",\"Verna\",\"Ves\",\"Vespar\",\"Vestein\",\"Veva\",\"Vevina\",\"Vexter\",\"Viasta\",\"Vicarr\",\"Vicat\",\"Vicentia\",\r\n  \"Viconia\",\"Victor\",\"Vida\",\"Vidkun\",\"Vidron\",\"Vieno\",\"Viera\",\"Vierna\",\"Vigdis\",\"Vigfus\",\"Vilhelm\",\"Vilka\",\"Vilrna\",\r\n  \"Vinatta\",\"Vincas\",\"Vincent\",\"Vintar\",\"Violet\",\"Vircyn\",\"Vishali\",\"Viveka\",\"Vladimir\",\"Vladislav\",\"Vlaric\",\"Vobur\",\"Voirath\",\r\n  \"Vokos\",\"Voldor\",\"Volkan\",\"Volney\",\"Volodya\",\"Volund\",\"Vonya\",\"Voranor\",\"Vrashin\",\"Vulpen\",\"Vurog\",\"Vusil\",\"Vyecheslav\",\r\n  \"Vyner\",\"Wadleigh\",\"Waenwryht\",\"Wager\",\"Waisham\",\"Waivan\",\"Wakeman\",\"Wakkar\",\"Walborg\",\"Walda\",\"Waldan\",\"Waldegrave\",\"Waldemar\",\r\n  \"Waleran\",\"Walford\",\"Walid\",\"Walker\",\"Wanhim\",\"Waring\",\"Wariv\",\"Wark\",\"Warne\",\"Warrender\",\"Warrigel\",\"Warwick\",\"Waryk\",\r\n  \"Watson\",\"Watt\",\"Waylan\",\"Wayland\",\"Waylon\",\"Wealin\",\"Wedlake\",\"Weilborn\",\"Weiryn\",\"Wel\",\"Wemick\",\"Wendolyn\",\"Wertha\",\r\n  \"Westcott\",\"Westen\",\"Weyrn\",\"Wharrom\",\"Whitwell\",\"Whyte\",\"Wicca\",\"Wideman\",\"Wightman\",\"Wildhair\",\"Wilfrid\",\"Wilhelm\",\"Wilhelmina\",\r\n  \"Wilibald\",\"Will\",\"Willa\",\"William\",\"Willock\",\"Willow\",\"Wilma\",\"Wilmar\",\"Wilner\",\"Wilven\",\"Windham\",\"Winfrey\",\"Winian\",\r\n  \"Winslow\",\"Winton\",\"Wisp\",\"Wisuth\",\"Wivianne\",\"Wizlow\",\"Woart\",\"Wodan\",\"Wolfgang\",\"Wolmar\",\"Womal\",\"Woodfin\",\"Woodruff\",\r\n  \"Wooligar\",\"Wortley\",\"Wotan\",\"Wulf\",\"Wulfgar\",\"Wulfric\",\"Wulgar\",\"Wychnor\",\"Wycliffe\",\"Wyllows\",\"Wyly\",\"Wynkyn\",\"Wynne\",\r\n  \"Wynston\",\"Wyvan\",\"Xaandria\",\"Xaath\",\"Xabian\",\"Xabiel\",\"Xabu\",\"Xain\",\"Xalthan\",\"Xan\",\"Xanaphel\",\"Xanathar\",\"Xander\",\r\n  \"Xandra\",\"Xandria\",\"Xanthon\",\"Xanthus\",\"Xarek\",\"Xarolith\",\"Xaver\",\"Xavier\",\"Xavin\",\"Xela\",\"Xelmonth\",\"Xena\",\"Xenia\",\r\n  \"Xenoba\",\"Xera\",\"Xercon\",\"Xerravin\",\"Xiombarg\",\"Xoncarg\",\"Xoran\",\"Xulan\",\"Xyas\",\"Xydra\",\"Xyko\",\"Xylah\",\"Xylia\",\r\n  \"Xymoya\",\"Xystus\",\"Xythrin\",\"Xytrin\",\"Yacima\",\"Yaheira\",\"Yahira\",\"Yaigin\",\"Yakov\",\"Yalan\",\"Yali\",\"Yalin\",\"Yalniz\",\r\n  \"Yamari\",\"Yana\",\"Yandell\",\"Yangin\",\"Yanira\",\"Yannul\",\"Yara\",\"Yaraia\",\"Yarali\",\"Yardim\",\"Yardley\",\"Yari\",\"Yarim\",\r\n  \"Yarin\",\"Yarir\",\"Yaritza\",\"Yartrina\",\"Yasimina\",\"Yasir\",\"Yasmina\",\"Yasser\",\"Yastar\",\"Yatay\",\"Yavana\",\"Yazihane\",\"Yelain\",\r\n  \"Yeni\",\"Yetne\",\"Yevgenii\",\"Yezade\",\"Ygerna\",\"Ygraine\",\"Yishana\",\"Ynryc\",\"Ynvar\",\"Yoda\",\"Yolanda\",\"Yondalla\",\"York\",\r\n  \"Yradry\",\"Yreoddyn\",\"Yrrkoon\",\"Yrsa\",\"Yrun\",\"Yryllyn\",\"Ysabel\",\"Ysgerryn\",\"Ysolde\",\"Yuri\",\"Yvain\",\"Yvette\",\"Yvonne\",\r\n  \"Yvyr\",\"Yénisar\",\"Yérusha\",\"Zabdiel\",\"Zacarias\",\"Zachary\",\"Zachris\",\"Zadock\",\"Zahara\",\"Zahra\",\"Zaidh\",\"Zalazar\",\"Zalbar\",\r\n  \"Zan\",\"Zandra\",\"Zanifa\",\"Zanthar\",\"Zara\",\"Zaranthe\",\"Zared\",\"Zarimarth\",\"Zarquan\",\"Zathras\",\"Zavel\",\"Zaviv\",\"Zay\",\r\n  \"Zazumel\",\"Zebalane\",\"Zebulon\",\"Zehir\",\"Zelda\",\"Zemenar\",\"Zenda\",\"Zendrac\",\"Zenith\",\"Zenobia\",\"Zenon\",\"Zepher\",\"Zephyr\",\r\n  \"Zerika\",\"Zerin\",\"Zeswick\",\"Zhalore\",\"Zhanna\",\"Zharvek\",\"Zhenya\",\"Zhirek\",\"Zhirem\",\"Zhoreb\",\"Zia\",\"Zigmal\",\"Zilar\",\r\n  \"Zinaida\",\"Zincir\",\"Zion\",\"Ziona\",\"Zircon\",\"Zirzihin\",\"Zita\",\"Zoe\",\"Zolabar\",\"Zoltan\",\"Zona\",\"Zora\",\"Zorashad\",\r\n  \"Zorayas\",\"Zorlan\",\"Zosia\",\"Zotar\",\"Zumurrud\",\"Zurrog\",\"Zykhiralamshad\"];\r\n  makeArrays();\r\n}",
                        "onModelContext": "const modifier = (text) => {\n\n  return { text: text }\n}\n\n// Don't modify this part\nmodifier(text)\n"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1722975",
                "publicId": "bb062d00-a128-11eb-8354-6b6ac67b4164",
                "published": false,
                "title": "Prompt generator",
                "description": null,
                "tags": [],
                "createdAt": "2021-04-19T16:03:07.344Z",
                "updatedAt": "2021-04-19T22:29:44.876Z",
                "memory": "",
                "authorsNote": "[Genre: Fantasy] [Theme: Elder Scrolls] [Writing style: purple prose, verbose, gothic]",
                "mode": "creative",
                "prompt": "Jordis needs a good start for her adventures. She wants it to be full of life and detailed, the environment and the weather also need full details. It's an adventure start for an Elder Scrolls game, so it needs to be in the province of ${Type a province of Tamriel here...}, and the time of the day needs to be ${Choose a time of the day: morning, afternoon, night}. The main character is a ${Write the main character's profession...}, currently located at ${Type the main character's starting location...}. Jordis needs to write this as if it were a story, so she will write it all in the second person. She thinks of a cool thing, and writes it down. She writes:\n",
                "quests": [],
                "worldInfo": null,
                "gameCode": {
                        "onInput": "const modifier = (text) => {\n  let modifiedText = nameReplace(text);\n\n  return { text: modifiedText }\n};\n\nmodifier(text);\n",
                        "onOutput": "const modifier = (text) => {\n  modifiedText = nameReplace(text);\n\n  return { text: modifiedText }\n};\n\nmodifier(text);\n",
                        "sharedLibrary": "// TO USE: Put in something like 'modifiedText = nameReplace(modifiedText);' in Input&Output Modifiers.\r\n\r\n// List the names you wish to replace with random ones in this const.\r\nconst BADNAMES = ['Ackerson','Alison','Annah','Anu','Arat','Arrorn','Ashton','Azajaja','Big Red',\r\n'Brot','Brother Gray','Bucklesberg','Captain Dario','Captain Eckard','Captain Hayes','Captain Ian','Captain Illam','Carn',\r\n'Castus','Cloudpeak','Count Gray','Count Grey','Dark Order','David','Delantium','Delerg','Dendrin','Derg',\r\n'Dert','Dessel','Dorna','Dr. Kessel','Dr. Kovas','Drake','Draven','Durge','Ebony Claw','Elam',\r\n'Eldolith','Eliza','Eternals','Father Féval','Father Tomas','Felkan','Flog','Garrick','Grolik',\"Gro'tesk\",'Haygarth',\r\n'Hessla','Holgard','Isabella',\"J'Arel\",'Jacob','Jicol','Karth','Kelso',\r\n'Klemto','Klyton','Kralmer','Kyros','Lenay','Lord Rostov','Ludmilla','Magos Cern','Meliodas',\r\n'Merk','Mihrab','Mr. Demar','Mr. Gaange','Mr. Reynolds','Nalin','Nolazir','Null','Nuro','Oalkwardner',\r\n'Olive','Olivia','Oren','Quala','Ragnor','Ral','Rask','Retlad','Roldan','Rolomag','Sheriff Buckly',\r\n'Sir Ignate','Sodran','Svelk','Talia','Teckleville','The Craxil','The Ghoul King','The Great Lich Lord',\r\n'The Nightmare Tyrant','Theo','Trelik','Tulan','Ulivik','Vaughn','Velzix','Wessel','Zalan','Zalmora','Zuzu'];\r\n\r\n// This shuffles the arrays.\r\nconst shuffle = array =>\r\n    [...Array(array.length)]\r\n        .map((...args) => Math.floor(Math.random() * (args[1] + 1)))\r\n        .reduce((a, rv, i) => ([a[i], a[rv]] = [a[rv], a[i]]) && a, array);\r\n\r\n// Generates and saves arrays; ran only once.\r\nfunction makeArrays() {\r\n  state.mid = [];\r\n  state.end = [];\r\n  list = state.names.map(x => x.substring(1)); // Trim beginning.\r\n  list.forEach(addMid);\r\n}\r\n\r\nfunction addMid(seg) { // Generate array of possible mid-segments.\r\n  while (seg.length > 3) {\r\n    if (state.mid.indexOf(seg.substring(0,4)) === -1) { state.mid.push(seg.substring(0,4)) };\r\n    seg = seg.substring(1);\r\n  }\r\n  state.end.push(seg);\r\n}\r\n\r\nfunction synthName() {\r\n  var name_length = state.names[Math.floor(Math.random() * state.names.length)].length - 1;\r\n  var base = state.names[Math.floor(Math.random() * state.names.length)];\r\n  if (base.length < 3) { return Base; } \r\n  else {\r\n    var nomen = base.substring(0,3);\r\n    while (nomen.length < name_length)\r\n    {\r\n      mid = shuffle(state.mid).find( x => nomen.substring(nomen.length - 2, nomen.length) == x.substring(0,2))\r\n      if (mid) { nomen += mid.substring(2); }\r\n      else { name_length = 0; } // No valid segments found, just skip ahead.\r\n    }\r\n    var end = shuffle(state.end).find( x => nomen.substring(nomen.length -1, nomen.length) == x.substring(0,1));\r\n    if (end) { nomen += end.substring(1); }\r\n\treturn nomen;\r\n  }\r\n}\r\n\r\nfunction nameReplace(text) {\r\n  if (!state.names_setup) { setupNamelist(); }\r\n  for (name of BADNAMES) {\r\n    if (text.includes(name)) { text = text.replace(name, synthName()); }\r\n  }\r\n  return text;\r\n}\r\n\r\n// This giant list is the list of names that this generator uses as examples to synthesize new names.\r\n// You can replace it with a more specific list, such as names from certain culture.\r\n// To work well, you need at least 100 names on the list.\r\nfunction setupNamelist() {\r\n state.names_setup = true;\r\n state.names = [\"Aby\",\"Aage\",\"Aakesh\",\"Aanon\",\"Aarlen\",\"Aaron\",\"Aart\",\"Aasta\",\"Abarden\",\"Abbathor\",\"Abbathorn\",\"Abraham\",\"Abryn\",\r\n  \"Abu\",\"Acadia\",\"Achard\",\"Acheron\",\"Achim\",\"Achlarg\",\"Ada\",\"Adair\",\"Adalbert\",\"Adanac\",\"Adario\",\"Adeisteen\",\"Adelaide\",\r\n  \"Adelin\",\"Adelot\",\"Adeen\",\"Aden\",\"Adena\",\"Aderyn\",\"Adeva\",\"Adger\",\"Adia\",\"Adin\",\"Adina\",\"Aditu\",\"Adlay\",\r\n  \"Adolf\",\"Adolmus\",\"Adoniram\",\"Adraeran\",\"Adriaan\",\"Adriel\",\"Adrienne\",\"Aedha\",\"Aeiran\",\"Ael\",\"Aelgifu\",\"Aelis\",\"Aerdrie\",\r\n  \"Aeriel\",\"Aerin\",\"Aeris\",\"Aeriss\",\"Aeron\",\"Aeru'in\",\"Aeruin\",\"Aethelweard\",\"Aethon\",\"Aethyr\",\"Afra\",\"Agate\",\"Agatha\",\r\n  \"Agathon\",\"Agathos\",\"Agenor\",\"Agidius\",\"Agnar\",\"Agora\",\"Agrias\",\"Aguidran\",\"Aguilla\",\"Ahanna\",\"Ahmre\",\"Aicha\",\"Aidan\",\r\n  \"Aidaron\",\"Aiden\",\"Aidred\",\"Aidro\",\"Aidwin\",\"Aifreda\",\"Aifrida\",\"Aiker\",\"Aikikia\",\"Aikman\",\"Ailcaer\",\"Aileen\",\"Ailric\",\r\n  \"Ailvar\",\"Aimee\",\"Aimo\",\"Aino\",\"Ainu\",\"Aipheus\",\"Airalyn\",\"Aircristir\",\"Airen\",\"Airis\",\"Airmid\",\"Aisha\",\"Aislinn\",\r\n  \"Aithne\",\"Aitken\",\"Akebia\",\"Aki\",\"Akira\",\"Aksel\",\"Al\",\"Aladan\",\"Aladar\",\"Aladdin\",\"Alain\",\"Alaine\",\"Alais\",\r\n  \"Alan\",\"Alana\",\"Alanson\",\"Alardan\",\"Alaric\",\"Alarion\",\"Alaris\",\"Alaron\",\"Alastair\",\"Alastrina\",\"Alastyr\",\"Albaral\",\"Alberich\",\r\n  \"Alberik\",\"Alberon\",\"Albert\",\"Alberta\",\"Albin\",\"Albion\",\"Albrecht\",\"Albright\",\"Alcan\",\"Alcina\",\"Alda\",\"Aldaren\",\"Aldegond\",\r\n  \"Alden\",\"Aldert\",\"Aldhelm\",\"Aldis\",\"Aldrich\",\"Aldridge\",\"Aldus\",\"Aldwerth\",\"Aldwin\",\"Aldwulf\",\"Alea\",\"Alec\",\"Alena\",\r\n  \"Alers\",\"Ales\",\"Alessandra\",\"Alexander\",\"Alexei\",\"Alf\",\"Alfdis\",\"Alfgeir\",\"Alfhid\",\"Alfons\",\"Alford\",\"Alfred\",\"Algernon\",\r\n  \"Algus\",\"Alhana\",\"Ali\",\"Alia\",\"Alicia\",\"Aliendre\",\"Alienor\",\"Alin\",\"Aline\",\"Alineric\",\"Alisbone\",\"Alison\",\"Alistair\",\r\n  \"Alister\",\"Allaire\",\"Allard\",\"Allart\",\"Allene\",\"Alliston\",\"Almas\",\"Almer\",\"Almira\",\"Almroth\",\"Almu\",\"Aloise\",\"Alor\",\r\n  \"Alora\",\"Alorosaz\",\"Aloysius\",\"Alphons\",\"Alrik\",\"Alsop\",\"Althalus\",\"Altin\",\"Alton\",\"Alured\",\"Alvan\",\"Alvey\",\"Alvina\",\r\n  \"Alvord\",\"Alvred\",\"Alwen\",\"Alwyn\",\"Alya\",\"Alyanna\",\"Alyce\",\"Alyssa\",\"Alyvia\",\"Ama\",\"Amadis\",\"Amain\",\"Amalina\",\r\n  \"Aman\",\"Amanfea\",\"Amar\",\"Amarah\",\"Amber\",\"Ambros\",\"Amelia\",\"Ames\",\"Amethyst\",\"Amilion\",\"Amin\",\"Amina\",\"Amineh\",\r\n  \"Ammdar\",\"Amschel\",\"Amundi\",\"Anandra\",\"Anastasia\",\"Anatol\",\"Anatolia\",\"Ancarion\",\"Ancelyn\",\"Anclaiar\",\"Ancla´ar\",\"Andara'an\",\"Andaraan\",\r\n  \"Andemon\",\"Andni\",\"Andolan\",\"Andre\",\"Andrei\",\"Andrew\",\"Andrus\",\"Aneurin\",\"Anfar\",\"Angelica\",\"Angelina\",\"Angharad\",\"Angheryn\",\r\n  \"Angmar\",\"Angus\",\"Anici\",\"Anigh\",\"Anika\",\"Anita\",\"Anitra\",\"Anlaf\",\"Anna\",\"Annion\",\"Annora\",\"Anouar\",\"Anseim\",\r\n  \"Ansel\",\"Anskar\",\"Anson\",\"Antal\",\"Antalya´ar\",\"Antares\",\"Antheirne\",\"Anton\",\"Antone\",\"Antony\",\"Antrim\",\"Anvar\",\"Anya\",\r\n  \"Anzie\",\"Apad\",\"April\",\"Apthorp\",\"Aquill\",\"Arabel\",\"Arabella\",\"Arabeth\",\"Aradan\",\"Aradh\",\"Aragon\",\"Aragorn\",\"Arakin\",\r\n  \"Aralik\",\"Aranel\",\"Arania\",\"Arathorn\",\"Aravis\",\"Arawn\",\"Arax\",\"Araz\",\"Archibald\",\"Arcarune\",\"Arctor\",\"Ardal\",\"Arden\",\r\n  \"Arder\",\"Ardesh\",\"Ardis\",\"Areagne\",\"Arell\",\"Areta\",\"Aretas\",\"Argethlam\",\"Argoeth\",\"Ari\",\"Aria\",\"Ariad\",\"Arian\",\r\n  \"Arianth\",\"Aribeth\",\"Aric\",\"Arid\",\"Ariel\",\"Aries\",\"Arilyn\",\"Arioch\",\"Arka\",\"Arkadia\",\"Arkron\",\"Arkwright\",\"Arlaith\",\r\n  \"Arlan\",\"Arlana\",\"Arlean\",\"Arleano\",\"Arlo\",\"Arlya\",\"Armand\",\"Armar\",\"Armin\",\"Armitage\",\"Armo\",\"Armod\",\"Arn\",\r\n  \"Arnbella\",\"Arnesen\",\"Arnfinn\",\"Arngrim\",\"Arni\",\"Arnlaug\",\"Arno\",\"Arnold\",\"Arnor\",\"Arnora\",\"Arnot\",\"Arnthora\",\"Arnuif\",\r\n  \"Arnulf\",\"Arnvid\",\"Aron\",\"Arrah\",\"Arronax\",\"Arshavir\",\"Arshel\",\"Artemis\",\"Artemus\",\"Arthol\",\"Arthryn\",\"Arthur\",\"Artnistead\",\r\n  \"Artreyu\",\"Artur\",\"Arun\",\"Arvid\",\"Arvida\",\"Arving\",\"Arvo\",\"Arwen\",\"Arwin\",\"Aryen\",\"Aryion\",\"Aryon\",\"Aryus\",\r\n  \"Arzamark\",\"Asa\",\"Asaf\",\"Aschar\",\"Asfrid\",\"Asgard\",\"Asger\",\"Asgerd\",\"Asgrim\",\"Ash\",\"Ashan\",\"Ashane\",\"Ashburton\",\r\n  \"Ashcar\",\"Ashdown\",\"Ashgaroth\",\"Ashley\",\"Ashlyn\",\"Ashne'e\",\"Ashnici\",\"Ashur\",\"Asiria\",\"Askew\",\"Askold\",\"Aslak\",\"Aslan\",\r\n  \"Asleif\",\"Aslior\",\"Asperon\",\"Asta\",\"Astar\",\"Astinus\",\"Astnid\",\"Astnild\",\"Astoiphe\",\"Astra\",\"Astraea\",\"Astran\",\"Astrid\",\r\n  \"Astrin\",\"Atazra\",\"Athabasca\",\"Athana\",\"Athol\",\"Atiaran\",\"Atli\",\"Atmeh\",\"Atreyu\",\"Atropos\",\"Atticus\",\"Attor\",\"Atul\",\r\n  \"Aturin\",\"Atyre\",\"Aubrey\",\"Aud\",\"Audrey\",\"Audrianna\",\"Audric\",\"August\",\"Augustus\",\"Aule\",\"Aulius\",\"Aun\",\"Aura\",\r\n  \"Aurian\",\"Auril\",\"Aurion\",\"Aurora\",\"Avall\",\"Avarath\",\"Avascaen\",\"Avedar\",\"Aveole\",\"Avery\",\"Avon\",\"Avril\",\"Axel\",\r\n  \"Aya\",\"Ayame\",\"Ayaron\",\"Ayarèn\",\"Ayin\",\"Ayir\",\"Aylin\",\"Aylmer\",\"Ayrie\",\"Azeal\",\"Azeezeh\",\"Azgoth\",\"Azhrarn\",\r\n  \"Aziz\",\"Azmodeus\",\"Azrean\",\"Azreck\",\"Azriaz\",\"Aztira\",\"Azure\",\"Azuth\",\"Baba\",\"Babacar\",\"Babrak\",\"Babrine\",\"Babylos\",\r\n  \"Baduk\",\"Baern\",\"Baeron\",\"Baervan\",\"Bag\",\"Bahamut\",\"Baird\",\"Bal\",\"Balain\",\"Baldor\",\"Baldrick\",\"Balduin\",\"Baldur\",\r\n  \"Baldwin\",\"Balendar\",\"Balfour\",\"Balin\",\"Baliol\",\"Ballard\",\"Balor\",\"Balthasard\",\"Balthazar\",\"Bandobras\",\"Bane\",\"Baraca\",\"Barahir\",\r\n  \"Barak\",\"Baralan\",\"Baravar\",\"Barbara\",\"Bardach\",\"Bardel\",\"Bardi\",\"Bardsley\",\"Bardwell\",\"Barend\",\"Barent\",\"Baring\",\"Barll\",\r\n  \"Barlo\",\"Barlow\",\"Barnabas\",\"Barnas\",\"Barnus\",\"Barr\",\"Barret\",\"Barron\",\"Barry\",\"Barstow\",\"Barthel\",\"Bartle\",\"Bartnel\",\r\n  \"Barton\",\"Baslayan\",\"Bayard\",\"Beams\",\"Beatrix\",\"Bechir\",\"Beck\",\"Bede\",\"Bedegran\",\"Begnus\",\"Beldaran\",\"Beldas\",\"Belerion\",\r\n  \"Belgarath\",\"Belgarion\",\"Belita\",\"Bella\",\"Belle\",\"Bellin\",\"Bellinus\",\"Belloc\",\"Belrene\",\"Beltane\",\"Belva\",\"Ben\",\"Benekander\",\r\n  \"Bengt\",\"Benita\",\"Benoist\",\"Beorn\",\"Beowulf\",\"Bera\",\"Bercan\",\"Berek\",\"Berem\",\"Beren\",\"Bergen\",\"Bergthor\",\"Berim\",\r\n  \"Bern\",\"Berna\",\"Bernhart\",\"Bernt\",\"Berronar\",\"Berryn\",\"Bersi\",\"Berta\",\"Bertil\",\"Bertilde\",\"Bertram\",\"Bertran\",\"Bertrem\",\r\n  \"Beryl\",\"Besma\",\"Bestagar\",\"Beth\",\"Bevil\",\"Beyash\",\"Beylard\",\"Bhimrao\",\"Bhoskar\",\"Bhupindar\",\"Bidwell\",\"Bilbo\",\"Bile\",\r\n  \"Bilmar\",\"Bindon\",\"Bion\",\"Bipin\",\"Birath\",\"Birbeck\",\"Birchard\",\"Birger\",\"Birgit\",\"Birket\",\"Bisuneh\",\"Bjarni\",\"Bjorn\",\r\n  \"Bjornstern\",\"Blackwood\",\"Blade\",\"Blaen\",\"Blair\",\"Blame\",\"Blasco\",\"Blaze\",\"Bledsoe\",\"Blenda\",\"Bleran\",\"Blount\",\"Blunyc\",\r\n  \"Bninna\",\"Bo\",\"Bodil\",\"Bodvar\",\"Bolthorn\",\"Boner\",\"Booker\",\"Boott\",\"Boris\",\"Bork\",\"Borlace\",\"Bormor\",\"Boromir\",\r\n  \"Bors\",\"Botho\",\"Botolf\",\"Bourke\",\"Bowie\",\"Boyd\",\"Bracca\",\"Brace\",\"Bracken\",\"Brand\",\"Brandec\",\"Brangwen\",\"Brann\",\r\n  \"Brannon\",\"Branwell\",\"Branwen\",\"Breanon\",\"Bremen\",\"Brenna\",\"Brenner\",\"Brent\",\"Bress\",\"Bretaine\",\"Breyugar\",\"Brianna\",\"Bridget\",\r\n  \"Brielle\",\"Brigantu\",\"Brighton\",\"Brinn\",\"Brion\",\"Bristan\",\"Brita\",\"Brithael\",\"Brock\",\"Brockden\",\"Brodhead\",\"Brodribb\",\"Brogan\",\r\n  \"Bron\",\"Brona\",\"Bronwyn\",\"Bror\",\"Broun\",\"Bruna\",\"Bruno\",\"Brunt\",\"Brynhild\",\"Brynit\",\"Bryoni\",\"Bunnvor\",\"Bupu\",\r\n  \"Burcan\",\"Buri\",\"Burkard\",\"Buzurg\",\"Byam\",\"Byblos\",\"Byre\",\"Byrna\",\"Byrne\",\"Bysshe\",\"Cabell\",\"Cabillo\",\"Caddor\",\r\n  \"Caden\",\"Cadfael\",\"Cadmar\",\"Cadrach\",\"Cadwallader\",\"Caecyn\",\"Cael\",\"Caelon\",\"Caer\",\"Cai\",\"Cail\",\"Cairn\",\"Caitlin\",\r\n  \"Caladon\",\"Calandria\",\"Calbraith\",\"Calder\",\"Cale\",\"Caleb\",\"Calera\",\"Caliban\",\"Callan\",\"Callcott\",\"Calmic\",\"Calrohir\",\"Calumn\",\r\n  \"Calvert\",\"Camber\",\"Cambree\",\"Camiya\",\"Canina\",\"Caprice\",\"Cardon\",\"Caramon\",\"Carelia\",\"Carey\",\"Caribou\",\"Caris\",\"Carl\",\r\n  \"Carless\",\"Carli\",\"Carlyle\",\"Caryne\",\"Caron\",\"Carsten\",\"Carvell\",\"Caryl\",\"Cashin\",\"Caspian\",\"Cassandra\",\"Cassaway\",\"Cathal\",\r\n  \"Catherine\",\"Cathla'in\",\"Cathlain\",\"Cathlin\",\"Cayl\",\"Caylin\",\"Cecilia\",\"Cecily\",\"Cedric\",\"Cedrick\",\"Cedrim\",\"Celadae\",\"Celebdil\",\r\n  \"Celeborn\",\"Celeren\",\"Celes\",\"Celeste\",\"Celestine\",\"Celia\",\"Celowen\",\"Cemark\",\"Ceomyr\",\"Ceowulf\",\"Cercyon\",\"Ceremon\",\"Cerimon\",\r\n  \"Cerindar\",\"Cermor\",\"Cernd\",\"Ceryx\",\"Cespar\",\"Cevir\",\"Ceylinn\",\"Chaka\",\"Chalfant\",\"Challen\",\"Chamon\",\"Chanti\",\"Chard\",\r\n  \"Charissa\",\"Charlene\",\"Charlotte\",\"Chauncey\",\"Chauntea\",\"Chavir\",\"Chaya\",\"Checotah\",\"Chevonne\",\"Chevran\",\"Chichester\",\"Chimaera\",\"Chiodwig\",\r\n  \"Chiron\",\"Chittenden\",\"Chloe\",\"Christopher\",\"Chronepsis\",\"Chronos\",\"Chrowder\",\"Chuz\",\"Cid\",\"Cilmar\",\"Cinerva\",\"Cirkin\",\"Civar\",\r\n  \"Claed\",\"Clafin\",\"Claire\",\"Clarinda\",\"Claudia\",\"Cleghorn\",\"Clerihew\",\"Clinch\",\"Clipster\",\"Clopton\",\"Cloud\",\"Clover\",\"Clovis\",\r\n  \"Cnud\",\"Cnut\",\"Coalter\",\"Cobryn\",\"Coddry\",\"Coel\",\"Coela\",\"Cohn\",\"Colden\",\"Colgan\",\"Colmen\",\"Colon\",\"Colwyn\",\r\n  \"Coma\",\"Conall\",\"Conan\",\"Congal\",\"Conlan\",\"Conn\",\"Connell\",\"Connidas\",\"Connon\",\"Connop\",\"Conor\",\"Conrad\",\"Constantius\",\r\n  \"Conwy\",\"Conyasal\",\"Coprates\",\"Cora\",\"Coral\",\"Corbin\",\"Corellon\",\"Coren\",\"Corin\",\"Corinne\",\"Corinth\",\"Cormac\",\"Cornelius\",\r\n  \"Corrowr\",\"Corry\",\"Corryn\",\"Corwin\",\"Cotton\",\"Cowan\",\"Cowden\",\"Cowper\",\"Coyan\",\"Craigh\",\"Cray\",\"Crewzel\",\"Creydah\",\r\n  \"Cronyn\",\"Croyble\",\"Crundall\",\"Crynal\",\"Crysania\",\"Cryshandylin\",\"Cryunnos\",\"Cuall\",\"Cuane\",\"Cuddry\",\"Cuhaid\",\"Culiross\",\"Culkin\",\r\n  \"Cullen\",\"Cullyn\",\"Cuthalion\",\"Cuthbert\",\"Cylarus\",\"Cylie\",\"Cylmar\",\"Cymbeline\",\"Cyndor\",\"Cynoril\",\"Cyria\",\"Cyriel\",\"Cyrilla\",\r\n  \"Cyrillus\",\"Cyrus\",\"Cyryl\",\"Cythnar\",\"Cyton\",\"Daburn\",\"Daen\",\"Dagar\",\"Dagda\",\"Dagmar\",\"Dagni\",\"Dagny\",\"Dagwyn\",\r\n  \"Dahil\",\"Daikkah\",\"Daila\",\"Daila'in\",\"Daimhin\",\"Daimon\",\"Daisy\",\"Dakamon\",\"Dakoda\",\"Dalamar\",\"Dall\",\"Dalla\",\"Dallandra\",\r\n  \"Dalziel\",\"Damar\",\"Damien\",\"Damon\",\"Dana\",\"Danforth\",\"Daniel\",\"Dannun\",\"Dannyn\",\"Danu\",\"Danuvius\",\"Daood\",\"Daphin\",\r\n  \"Dara\",\"Daragor\",\"Darandriel\",\"Darell\",\"Darien\",\"Dario\",\"Darius\",\"Darkash\",\"Darkboon\",\"Darkspur\",\"Darlis\",\"Daron\",\"Darrell\",\r\n  \"Darrin\",\"Darvin\",\"Daryan\",\"Dashiell\",\"Dashwood\",\"Dasyani\",\"Dathan\",\"Dathanja\",\"Daugas\",\"David\",\"Davnet\",\"Davros\",\"Dawn\",\r\n  \"Dayyan\",\"Dekteon\",\"Delevan\",\"Delita\",\"Dell\",\"Dellin\",\"Delmund\",\"Demarest\",\"Demi\",\"Deminar\",\"Demtris\",\"Denethor\",\"Denhain\",\r\n  \"Denor\",\"Denton\",\"Denzil\",\"Deogol\",\"Derfel\",\"Derian\",\"Dermaria\",\"Derran\",\"Derroll\",\"Derval\",\"Dervilia\",\"Desmona\",\"Devabriel\",\r\n  \"Devaron\",\"Deveron\",\"Devra\",\"Dexter\",\"Dhakos\",\"Dhan\",\"Dharijor\",\"Dholemtrix\",\"Dhur\",\"Diadra\",\"Diagur\",\"Dian\",\"Diarmud\",\r\n  \"Diderik\",\"Diehi\",\"Dighton\",\"Dillon\",\"Dimura\",\"Dinham\",\"Dinivan\",\"Dino\",\"Dionetta\",\"Diony\",\"Dirk\",\"Dirrach\",\"Divos\",\r\n  \"Djamal\",\"Dmitri\",\"Doak\",\"Dolman\",\"Dolyan\",\"Domnu\",\"Donagh\",\"Donal\",\"Donblas\",\"Dongal\",\"Doniol\",\"Donivesh\",\"Donovan\",\r\n  \"Doral\",\"Dorea\",\"Dorian\",\"Dorin\",\"Dorn\",\"Dornhnall\",\"Dorr\",\"Dorsan\",\"Dorvai\",\"Dotta\",\"Doud\",\"Dougal\",\"Doust\",\r\n  \"Draco\",\"Dragan\",\"Dragus\",\"Dragutin\",\"Draka\",\"Drake\",\"Drako\",\"Dran\",\"Draoi\",\"Draven\",\"Drax\",\"Drayko\",\"Dred\",\r\n  \"Dreed\",\"Drexel\",\"Drezael\",\"Drezaem\",\"Drin\",\"Drinda\",\"Drion\",\"Drusilla\",\"Drynn\",\"Dréagg\",\"Duain\",\"Duald\",\"Duana\",\r\n  \"Duer\",\"Dugal\",\"Dugald\",\"Dugdale\",\"Dulasiri\",\"Dumathoin\",\"Dunbar\",\"Dundas\",\"Dunglas\",\"Dunnabar\",\"Dunstan\",\"Dunwody\",\"Duny\",\r\n  \"Dunya\",\"Dur-Shuk\",\"Duran\",\"Durek\",\"Durin\",\"Durnik\",\"Durward\",\"Dwarkanath\",\"Dweomer\",\"Dwyer\",\"Dyce\",\"Dyer\",\"Dygardo\",\r\n  \"Dyke\",\"Dylan\",\"Dymphna\",\"Dynar\",\"Dyneley\",\"Dynera\",\"Dynie\",\"Dytan\",\"Dyvim\",\"E'thane\",\"Eadweard\",\"Eager\",\"Eamon\",\r\n  \"Eanger\",\"Eardley\",\"Earle\",\"Earnest\",\"Eastman\",\"Ebany\",\"Ebba\",\"Eberhard\",\"Ebony\",\"Echael\",\"Eckert\",\"Eckhard\",\"Ector\",\r\n  \"Edcyl\",\"Edda\",\"Edeva\",\"Edgar\",\"Edina\",\"Edla\",\"Edmond\",\"Edmondstone\",\"Edric\",\"Edrie\",\"Edson\",\"Eduard\",\"Edwin\",\r\n  \"Edwina\",\"Edwyn\",\"Eevin\",\"Efiath\",\"Efrem\",\"Egan\",\"Egbert\",\"Egerton\",\"Egil\",\"Egon\",\"Egron\",\"Ehlreth\",\"Ehrman\",\r\n  \"Eilhard\",\"Eilif\",\"Eilinud\",\"Einar\",\"Eindrini\",\"Eirech\",\"Eirik\",\"Eiron\",\"Eithne\",\"Eivind\",\"Ekaterina\",\"Elaine\",\"Elath\",\r\n  \"Elbert\",\"Eldath\",\"Eldavon\",\"Eldgrim\",\"Eldid\",\"Eldin\",\"Eldon\",\"Eldred\",\"Eldric\",\"Eldrin\",\"Eldron\",\"Eldìvèn\",\"Eleanor\",\r\n  \"Eleazar\",\"Electa\",\"Elelil\",\"Elena\",\"Elendil\",\"Eleno'in\",\"Elentari\",\"Elerion\",\"Elessar\",\"Elfnida\",\"Elfnide\",\"Elfnieda\",\"Elford\",\r\n  \"Elhanan\",\"Eliakini\",\"Eliard\",\"Elinor\",\"Elion\",\"Eliseth\",\"Elispeth\",\"Elisseer\",\"Elistan\",\"Eliwood\",\"Elizabeth\",\"Ella\",\"Ellanath\",\r\n  \"Ellen\",\"Ellin\",\"Ellingwood\",\"Ellydryr\",\"Ellynor\",\"Elmeric\",\"Elmira\",\"Eloisa\",\"Elora\",\"Elowen\",\"Elrad\",\"Elric\",\"Elrik\",\r\n  \"Elrodin\",\"Elron\",\"Elrond\",\"Elsa\",\"Elsbeth\",\"Elsdon\",\"Elspeth\",\"Elswyth\",\"Elton\",\"Elu\",\"Elva\",\"Elvalind\",\"Elvarion\",\r\n  \"Elvin\",\"Elvina\",\"Elvira\",\"Elvrit\",\"Elvérion\",\"Elwell\",\"Elwin\",\"Elwyn\",\"Elysia\",\"Emberyl\",\"Emerynn\",\"Emirah\",\"Emma\",\r\n  \"Emna\",\"Emory\",\"Endemian\",\"Endicott\",\"Endoray\",\"Endrede\",\"Endsor\",\"Engeihard\",\"Enigma\",\"Enn\",\"Ennorath\",\"Envi\",\"Enzoray\",\r\n  \"Eolair\",\"Eomer\",\"Eosin\",\"Eowyn\",\"Ephyre\",\"Erana\",\"Erard\",\"Ercan\",\"Erdmann\",\"Erebor\",\"Ergon\",\"Erian\",\"Eric\",\r\n  \"Erich\",\"Erie\",\"Erik\",\"Erika\",\"Erilyth\",\"Erland\",\"Erlend\",\"Erling\",\"Ernald\",\"Ernan\",\"Ernata\",\"Errine\",\"Ervin\",\r\n  \"Eryka\",\"Eryn\",\"Esghar\",\"Eslin\",\"Esmeralda\",\"Esmond\",\"Esnar\",\"Essa\",\"Esselin\",\"Estheria\",\"Estrella\",\"Etelka\",\"Ethelbearn\",\r\n  \"Ethelbert\",\"Ethelburga\",\"Ethelred\",\"Ethelreda\",\"Eudo\",\"Eugene\",\"Eulala\",\"Evadne\",\"Evaine\",\"Evald\",\"Evan\",\"Evarts\",\"Evelina\",\r\n  \"Evelyn\",\"Everard\",\"Evert\",\"Evind\",\"Evo\",\"Evolyn\",\"Evska\",\"Ewald\",\"Ewen\",\"Ewugan\",\"Eystein\",\"Eyulf\",\"Eyvind\",\r\n  \"Ezail\",\"Ezellohar\",\"Ezirith\",\"Ezme\",\"Ezrabar\",\"Ezri\",\"Faber\",\"Fabian\",\"Fael\",\"Faelyn\",\"Fahs\",\"Fairfax\",\"Fairtnan\",\r\n  \"Falathar\",\"Falcon\",\"Falgar\",\"Fali\",\"Falias\",\"Falkiner\",\"Falmalinnar\",\"Falyrias\",\"Fanchon\",\"Fangorn\",\"Fanshaw\",\"Faraday\",\"Farah\",\r\n  \"Farale\",\"Faramir\",\"Faran\",\"Farathar\",\"Farid\",\"Farith\",\"Farli\",\"Farnham\",\"Farouk\",\"Farquhar\",\"Farrin\",\"Farwehl\",\"Fatima\",\r\n  \"Fausto\",\"Fawn\",\"Faysal\",\"Fea\",\"Feargus\",\"Fedor\",\"Feike\",\"Felam\",\"Felladin\",\"Fellador\",\"Fellathor\",\"Fellow\",\"Fenella\",\r\n  \"Fenton\",\"Fenwick\",\"Fera\",\"Ferantay\",\"Ferazhin\",\"Ferdinand\",\"Fergus\",\"Fernand\",\"Feron\",\"Feustmann\",\"Fhinders\",\"Fhorgeir\",\"Fiana\",\r\n  \"Fiathna\",\"Fielding\",\"Fikir\",\"Filippe\",\"Finarfin\",\"Finbar\",\"Findegil\",\"Findley\",\"Finegan\",\"Fingal\",\"Fingalla\",\"Fingil\",\"Finias\",\r\n  \"Finn\",\"Finnbogi\",\"Finos\",\"Fiona\",\"Fiorag\",\"Fiori\",\"Firca\",\"Firin\",\"Firon\",\"Firozhan\",\"Fistandantilus\",\"Fistar\",\"Fistor\",\r\n  \"Fitzedward\",\"Fitzroy\",\"Fizban\",\"Fjolnir\",\"Flandrena\",\"Flare\",\"Flavius\",\"Flint\",\"Floki\",\"Florimund\",\"Flosi\",\"Flygare\",\"Flynn\",\r\n  \"Fnida\",\"Fomorii\",\"Forbus\",\"Forester\",\"Fornost\",\"Foronte\",\"Fothergill\",\"Francisco\",\"Frayja\",\"Freda\",\"Frederic\",\"Frederica\",\"Frederick\",\r\n  \"Fredrick\",\"Fredrik\",\"Freeborn\",\"Freeman\",\"Frey\",\"Freya\",\"Freydis\",\"Fridgeir\",\"Frodo\",\"Fryniwyd\",\"Fuad\",\"Fumorak\",\"Furnifold\",\r\n  \"Fury\",\"Fyodor\",\"Fyodr\",\"Fyza\",\"Gaarn\",\"Gabniela\",\"Gabriel\",\"Gadsby\",\"Gaea\",\"Gael\",\"Gaelinar\",\"Gaena\",\"Gaerdal\",\r\n  \"Gaillard\",\"Gairdner\",\"Galach\",\"Galadren\",\"Galan\",\"Galanna\",\"Galapas\",\"Galaphon\",\"Galar\",\"Galbard\",\"Galderon\",\"Galdor\",\"Gale\",\r\n  \"Galeia\",\"Galen\",\"Galfrey\",\"Galion\",\"Galrandar\",\"Galrion\",\"Gama\",\"Gandalf\",\"Ganduil\",\"Ganith\",\"Gannon\",\"Ganvan\",\"Gardi\",\r\n  \"Garet\",\"Gareth\",\"Garion\",\"Garith\",\"Garl\",\"Garland\",\"Garlenon\",\"Garn\",\"Garon\",\"Garrick\",\"Garrott\",\"Garth\",\"Gartnas\",\r\n  \"Garvin\",\"Garwood\",\"Gaston\",\"Gavendra\",\"Gavin\",\"Gavina\",\"Gawain\",\"Gealsgiath\",\"Gebhard\",\"Geir\",\"Geirmund\",\"Geirstein\",\"Gelonna\",\r\n  \"Genevieve\",\"Geoffrey\",\"Georgii\",\"Gerald\",\"Gerard\",\"Gerd\",\"Gerhard\",\"Gerhart\",\"Gerloc\",\"Gerrard\",\"Gerreint\",\"Gerrish\",\"Gertrude\",\r\n  \"Gervaise\",\"Gesin\",\"Gest\",\"Ghirra\",\"Ghislain\",\"Gholson\",\"Gia\",\"Gibbon\",\"Gilberta\",\"Gilda\",\"Gilden\",\"Gildersleeve\",\"Giles\",\r\n  \"Gilfanon\",\"Gilian\",\"Gilir\",\"Gilli\",\"Gillion\",\"Gillyn\",\"Gilm\",\"Gilraen\",\"Gilthanas\",\"Gimli\",\"Gird\",\"Girin\",\"Gisgin\",\r\n  \"Gizur\",\"Gladstone\",\"Glassford\",\"Glebur\",\"Gleda\",\"Gleocyn\",\"Gleridower\",\"Glida\",\"Glogan\",\"Gloisur\",\"Glorfindel\",\"Glugwyn\",\"Glum\",\r\n  \"Glyn\",\"Glynn\",\"Gnazia\",\"Godfred\",\"Godfrey\",\"Godwin\",\"Goibhniu\",\"Golding\",\"Goldwin\",\"Gollum\",\"Gongalo\",\"Goodhue\",\"Gorbash\",\r\n  \"Gordalius\",\"Gorias\",\"Gorion\",\"Gorm\",\"Gotthard\",\"Govier\",\"Govind\",\"Gowen\",\"Grace\",\"Graham\",\"Graine\",\"Gralon\",\"Grani\",\r\n  \"Grania\",\"Gravin\",\"Greegan\",\"Greenleaf\",\"Gregor\",\"Gregory\",\"Grendahl\",\"Greyfell\",\"Grian\",\"Gridley\",\"Griffid\",\"Griffin\",\"Griffith\",\r\n  \"Griggs\",\"Grim\",\"Grima\",\"Grimhilda\",\"Grimnir\",\"Grindan\",\"Griniing\",\"Grisha\",\"Griswold\",\"Groa\",\"Grover\",\"Grunak\",\"Grunnhild\",\r\n  \"Gruumsh\",\"Gualat\",\"Gudmund\",\"Gudmundur\",\"Gudrid\",\"Gudris\",\"Gudrun\",\"Guibert\",\"Guida\",\"Guido\",\"Gulian\",\"Gunila\",\"Gunnar\",\r\n  \"Gunning\",\"Gunther\",\"Gurnarok\",\"Gurney\",\"Gustav\",\"Guthorm\",\"Guthrie\",\"Guthum\",\"Gutzon\",\"Guy\",\"Gwacyn\",\"Gwaihir\",\"Gweddyn\",\r\n  \"Gwen\",\"Gwenca\",\"Gwenda\",\"Gwendolyn\",\"Gwenevere\",\"Gweniver\",\"Gwildor\",\"Gwoc\",\"Gwomyr\",\"Gwydion\",\"Gwyn\",\"Gwyneth\",\"Gwynfryd\",\r\n  \"Gwyran\",\"Gwythinn\",\"Gyda\",\"Gylian\",\"Gymir\",\"Haakon\",\"Habib\",\"Hablot\",\"Hack\",\"Haddon\",\"Hadrian\",\"Haestan\",\"Hafez\",\r\n  \"Hafgrim\",\"Hagar\",\"Haigh\",\"Hakatri\",\"Haki\",\"Hakon\",\"Halbert\",\"Halcyon\",\"Haldane\",\"Haldor\",\"Hale\",\"Halfdan\",\"Haliina\",\r\n  \"Hall\",\"Halldis\",\"Halldor\",\"Halley\",\"Hallfred\",\"Hallfrid\",\"Hallgerd\",\"Hallkel\",\"Hallock\",\"Halloweii\",\"Hallveig\",\"Halvord\",\"Hamlin\",\r\n  \"Hamnet\",\"Hanford\",\"Hani\",\"Haninah\",\"Hannibal\",\"Hanoran\",\"Hansine\",\"Hapweth\",\"Harald\",\"Harbaugh\",\"Harcourt\",\"Hardernan\",\"Hardon\",\r\n  \"Hardwicke\",\"Harek\",\"Harkness\",\"Harlan\",\"Harlo\",\"Harold\",\"Haroon\",\"Harpo\",\"Harren\",\"Harthan\",\"Harthran\",\"Hartpole\",\"Hartwig\",\r\n  \"Harwood\",\"Hasket\",\"Hassan\",\"Hastein\",\"Hatcher\",\"Hattrick\",\"Hauk\",\"Havard\",\"Havelock\",\"Hayvan\",\"Hazard\",\"Hazel\",\"Haziran\",\r\n  \"Hazrond\",\"Healdon\",\"Heardred\",\"Heaslip\",\"Heather\",\"Hector\",\"Hedda\",\"Hedin\",\"Hedwig\",\"Heimer\",\"Helena\",\"Helga\",\"Helgi\",\r\n  \"Helir\",\"Helix\",\"Helm\",\"Helma\",\"Helmi\",\"Heman\",\"Hemming\",\"Hendrik\",\"Hengist\",\"Henna\",\"Henrick\",\"Henry\",\"Geramon\",\r\n  \"Herdis\",\"Herekin\",\"Hereward\",\"Herijar\",\"Hermione\",\"Heron\",\"Hertha\",\"Heryom\",\"Herzog\",\"Heward\",\"Hhaba'id\",\"Hhabezur\",\"Hickling\",\r\n  \"Hidohebhi\",\"Hifryn\",\"Hild\",\"Hilda\",\"Hildebrand\",\"Hildegarde\",\"Hildric\",\"Himli\",\"Hisar\",\"Hislop\",\"Hjalmar\",\"Hjalti\",\"Hjeldin\",\r\n  \"Hjort\",\"Hjorth\",\"Hlif\",\"Hoadley\",\"Hoar\",\"Hobart\",\"Hodgdon\",\"Hogg\",\"Hogni\",\"Holbrook\",\"Holger\",\"Holgi\",\"Hollister\",\r\n  \"Holly\",\"Homli\",\"Hookham\",\"Horan\",\"Horatio\",\"Hord\",\"Horik\",\"Hormstein\",\"Horsa\",\"Hortensia\",\"Horton\",\"Hoskuld\",\"Hosni\",\r\n  \"Hossein\",\"Howarth\",\"Howland\",\"Hrafn\",\"Hrapp\",\"Hrefna\",\"Hrethel\",\"Hring\",\"Hroald\",\"Hrodyn\",\"Hrolf\",\"Hrothgar\",\"Hrugan\",\r\n  \"Hruggek\",\"Hruse\",\"Hrut\",\"Huffatn\",\"Hulbeart\",\"Hulda\",\"Hultz\",\"Humbert\",\"Hunter\",\"Hurd\",\"Hurgal\",\"Hurvin\",\"Hussain\",\r\n  \"Hustana\",\"Hyarantar\",\"Hyarante\",\"Hyder\",\"Hyfryn\",\"Hygelac\",\"Hylissa\",\"Hynman\",\"Hyrak\",\"Ian\",\"Iana\",\"Ibitz\",\"Ibrahim\",\r\n  \"Ibrandul\",\"Ica\",\"Icarus\",\"Icava\",\"Ick\",\"Ida\",\"Idarolan\",\"Iden\",\"Idris\",\"Iduna\",\"Iduné\",\"Ies'lorn\",\"Igjaru\",\r\n  \"Igor\",\"Ikarin\",\"Ilena\",\"Ilermath\",\"Ilia\",\"Iliriya\",\"Illentik\",\"Illuin\",\"Illyana\",\"Ilmare\",\"Ilniora\",\"Ilthoss\",\"Iluvatar\",\r\n  \"Ilya\",\"Ilyesha\",\"Imajin\",\"Imnar\",\"Imoen\",\"Imphela\",\"Imrador\",\"Imrahan\",\"Imrahim\",\"Imril\",\"Imryr\",\"Inahwen\",\"Indech\",\r\n  \"Indigo\",\"Indira\",\"Indreju\",\"Indria\",\"Ingald\",\"Ingeborg\",\"Ingen\",\"Ingi\",\"Ingirid\",\"Ingolf\",\"Ingram\",\"Ingrid\",\"Ingunn\",\r\n  \"Inifael\",\"Inigo\",\"Inisfa'il\",\"Iosaz\",\"Iosef\",\"Irgash\",\"Irial\",\"Irian\",\"Iris\",\"Irma\",\"Irphilin\",\"Irsai\",\"Irvin\",\r\n  \"Irwick\",\"Isael\",\"Isak\",\"Isambard\",\"Isbeorn\",\"Iscal\",\"Iselore\",\"Isengard\",\"Isengrim\",\"Iserion\",\"Isgrimnur\",\"Ishmael\",\"Isidora\",\r\n  \"Isiki\",\"Isildur\",\"Isilith\",\"Isleif\",\"Ismail\",\"Isolde\",\"Isorn\",\"Issak\",\"Ithaca\",\"Iuz\",\"Ivan\",\"Ivar\",\"Ivor\",\r\n  \"Ivy\",\"Iwanda\",\"Iyu'nigato\",\"Izard\",\"Izebel\",\"Izvire\",\"Jace\",\"Jacinth\",\"Jacoby\",\"Jacor\",\"Jade\",\"Jaden\",\"Jadzia\",\r\n  \"Jael\",\"Jaffar\",\"Jagadis\",\"Jaheira\",\"Jahrec\",\"Jahverbhai\",\"Jalasil\",\"Jalavier\",\"Jaligal\",\"Jamila\",\"Janda'nan\",\"Jandanan\",\"Janix\",\r\n  \"Janna\",\"Janus\",\"Janvel\",\"Jarak\",\"Jarazal\",\"Jared\",\"Jarek\",\"Jarnagua\",\"Jarriel\",\"Jarvin\",\"Jasara\",\"Jasek\",\"Jaseve\",\r\n  \"Jasha\",\"Jasmine\",\"Jason\",\"Javair\",\"Javon\",\"Jawaharial\",\"Jayce\",\"Jayden\",\"Jaylidan\",\"Jayna\",\"Jaysen\",\"Jazhara\",\"Jazrel\",\r\n  \"Jedd\",\"Jeffen\",\"Jehryn\",\"Jelyn\",\"Jenantar\",\"Jenkin\",\"Jennifer\",\"Jens\",\"Jensine\",\"Jephson\",\"Jerec\",\"Jeryth\",\"Jesiper\",\r\n  \"Jespar\",\"Jesslyn\",\"Jestyn\",\"Jethis\",\"Jevan\",\"Jevist\",\"Jezryanadar\",\"Jhael\",\"Jhaelen\",\"Jhany\",\"Jhardamòr\",\"Jharkor\",\"Jhary\",\r\n  \"Jihad\",\"Jillian\",\"Jingizu\",\"Jintah\",\"Jiriki\",\"Jirnost\",\"Jocelyn\",\"Jochan\",\"Johannes\",\"John\",\"Jolan\",\"Jomano\",\"Jonaya\",\r\n  \"Joran\",\"Jordan\",\"Joriel\",\"Jornadesh\",\"Jorunn\",\"Joscelyn\",\"Joseph\",\"Josephine\",\"Josette\",\"Joshua\",\"Jotham\",\"Jovena\",\"Jubini\",\r\n  \"Jullana\",\"Junius\",\"Juno\",\"Juntalin\",\"Jura\",\"Jurim\",\"Jusif\",\"Juss\",\"Jyresh\",\"K'aarna\",\"Kaarna\",\"Kael\",\"Kaelin\",\r\n  \"Kaffa\",\"Kai\",\"Kaia\",\"Kailyn\",\"Kaimana\",\"Kaitlinn\",\"Kaja\",\"Kalan\",\"Kalantir\",\"Kalar\",\"Kaldar\",\"Kaleen\",\"Kalen\",\r\n  \"Kalf\",\"Kalia\",\"Kalina\",\"Kalvan\",\"Kalvaro\",\"Kalyra\",\"Kalysha\",\"Kamril\",\"Kamshir\",\"Kanoa\",\"Kaori\",\"Kaprin\",\"Kara\",\r\n  \"Karali\",\"Karel\",\"Karelia\",\"Kari\",\"Karim\",\"Karinca\",\"Karine\",\"Karis\",\"Karitsa\",\"Karker\",\"Karl\",\"Karlsefni\",\"Karran\",\r\n  \"Karya\",\"Kaschak\",\"Kasia\",\"Kaspar\",\"Kasreyn\",\"Kathena\",\"Kathran\",\"Katishimo\",\"Katla\",\"Katnina\",\"Katrin\",\"Katrina\",\"Kavalam\",\r\n  \"Kavalnir\",\"Kaylianna\",\"Kaylin\",\"Kazairl\",\"Kazalim\",\"Kazir\",\"Keavy\",\"Keelan\",\"Kegan\",\"Keiko\",\"Keldorn\",\"Kelin\",\"Kellin\",\r\n  \"Kelma'in\",\"Kelson\",\"Kelth\",\"Kelvin\",\"Kemble\",\"Kendall\",\"Kendra\",\"Kendrick\",\"Kenesaw\",\"Kenin\",\"Kenny\",\"Kenobi\",\"Kenrick\",\r\n  \"Kerik\",\"Kerish\",\"Kermit\",\"Kerrigan\",\"Keshar\",\"Kesrick\",\"Kethios\",\"Ketial\",\"Ketil\",\"Kettali\",\"Kevan\",\"Keven\",\"Kevlin\",\r\n  \"Keyrnon\",\"Khader\",\"Khalia\",\"Khalid\",\"Khanzadian\",\"Kharas\",\"Khealynn\",\"Khelben\",\"Kheldor\",\"Khelen\",\"Khelin\",\"Khelyn\",\"Khendraja'aro\",\r\n  \"Khenel\",\"Khezeed\",\"Khindawe\",\"Khirsha\",\"Khlor\",\"Khris\",\"Khyved\",\"Ki'ushapo\",\"Kian\",\"Kiborno\",\"Kiera\",\"Kieran\",\"Kikkasut\",\r\n  \"Kilas\",\"Kilian\",\"Killion\",\"Kimmuriel\",\"Kimura\",\"Kinloch\",\"Kinson\",\"Kippler\",\"Kira\",\"Kiri\",\"Kirjava\",\"Kirk\",\"Kirren\",\r\n  \"Kirsopp\",\"Kirsten\",\"Kishin\",\"Kisin\",\"Kitiara\",\"Kjeldor\",\"Kjindar\",\"Klaus\",\"Klean\",\"Klerak\",\"Knud\",\"Knut\",\"Knute\",\r\n  \"Koabon\",\"Kolbein\",\"Kolchash\",\"Kolskegg\",\"Kolya\",\"Kona\",\"Konrad\",\"Konstantine\",\"Korban\",\"Kord\",\"Koreth\",\"Korgan\",\"Korm\",\r\n  \"Kormar\",\"Kornag\",\"Korska\",\"Kosh\",\"Kota\",\"Kovelir\",\"Krinn\",\"Krishnalai\",\"Kroh\",\"Krom\",\"Kronos\",\"Kuno\",\"Kurd\",\r\n  \"Kurn\",\"Kurt\",\"Kurin\",\"Kuros\",\"Kurtulmak\",\"Ky'ishi\",\"Ky'varan\",\"Kyle\",\"Kylindra\",\"Kypros\",\"Kyrie\",\"Kyriel\",\"La'ahl\",\r\n  \"Lachesis\",\"Lachian\",\"Ladia\",\"Ladoros\",\"Laeli\",\"Laelia\",\"Laerrui\",\"Lahar\",\"Lahsai\",\"Lalely\",\"Lamar\",\"Lambi\",\"Lan\",\r\n  \"Lana\",\"Lance\",\"Lancelot\",\"Landailyn\",\"Landoris\",\"Landrea\",\"Laneth\",\"Langhorne\",\"Langrian\",\"Langston\",\"Lanthal\",\"Lanthorn\",\"Larad\",\r\n  \"Lardner\",\"Larisa\",\"Larkin\",\"Larn\",\"Larnea\",\"Lars\",\"Larz\",\"Lashar\",\"Lateia\",\"Lathander\",\"Laurana\",\"Laurelin\",\"Laxton\",\r\n  \"Lazar\",\"Lazlo\",\"Lea\",\"Leareth\",\"Leathian\",\"Lec\",\"Ledyard\",\"Leela\",\"Legolas\",\"Legrand\",\"Leif\",\"Leighton\",\"Leika\",\r\n  \"Leila\",\"Leilah\",\"Leli\",\"Lembar\",\"Lenka\",\"Lenox\",\"Leo\",\"Leofric\",\"Leon\",\"Leonard\",\"Leonardo\",\"Leopond\",\"Lesesne\",\r\n  \"Lestyn\",\"Leta\",\"Letor\",\"Lev\",\"Lewellyri\",\"Lexan\",\"Lexx\",\"Lhuc\",\"Lia\",\"Liana\",\"Liena\",\"Lightfoot\",\"Liliane\",\r\n  \"Lilin\",\"Lina\",\"Lindar\",\"Linmer\",\"Linnea\",\"Lios\",\"Liphar\",\"Lippard\",\"Liptrot\",\"Lirith\",\"Lithar\",\"Littleton\",\"Livermore\",\r\n  \"Livia\",\"Ljot\",\"Ljotolf\",\"Lluth\",\"Llyn\",\"Llythin\",\"Lobelia\",\"Lobryn\",\"Lobur\",\"Locke\",\"Lockwood\",\"Loddlaen\",\"Lodica\",\r\n  \"Lodin\",\"Loella\",\"Logan\",\"Loibur\",\"Loili\",\"Lola\",\"Lonvan\",\"Lore\",\"Loric\",\"Lorin\",\"Lormyr\",\"Lothar\",\"Lothrop\",\r\n  \"Lott\",\"Lotta\",\"Loudon\",\"Louisa\",\"Lovegood\",\"Lovva\",\"Lovyan\",\"Luas\",\"Lucan\",\"Lucca\",\"Lucia\",\"Lucian\",\"Lucinda\",\r\n  \"Lucius\",\"Lucrecia\",\"Ludmila\",\"Luella\",\"Lufkin\",\"Lugh\",\"Luhsane\",\"Lum\",\"Lumbar\",\"Luna\",\"Lunar\",\"Lunetta\",\"Lupin\",\r\n  \"Lurican\",\"Lurue\",\"Luscan\",\"Luther\",\"Luthian\",\"Luvina\",\"Lycias\",\"Lydia\",\"Lylas\",\"Lyle\",\"Lymo\",\"Lyndall\",\"Lyndon\",\r\n  \"Lynette\",\"Lynis\",\"Lynn\",\"Lypilla\",\"Lyra\",\"Lyrian\",\"Lyrin\",\"Lyron\",\"Lysander\",\"Lyssa\",\"Lythia\",\"Lythian\",\"Lytler\",\r\n  \"Lyzandra\",\"Lyzette\",\"Lórien\",\"Mabon\",\"Macallan\",\"Macaulay\",\"Macer\",\"Mackim\",\"Macvey\",\"Maddern\",\"Maddock\",\"Madelon\",\"Madhao\",\r\n  \"Madora\",\"Maec\",\"Maegwin\",\"Mael\",\"Maerraent\",\"Mafka\",\"Magda\",\"Magh\",\"Magill\",\"Magna\",\"Magnus\",\"Magus\",\"Mahion\",\r\n  \"Mahmud\",\"Mahri\",\"Maia\",\"Maidah\",\"Maidak\",\"Maihar\",\"Makoma\",\"Malach\",\"Malachias\",\"Maladack\",\"Malador\",\"Malak\",\"Malar\",\r\n  \"Malcoff\",\"Malcolm\",\"Malfar\",\"Malia\",\"Maliforin\",\"Malkil\",\"Malto\",\"Malvin\",\"Malvtha\",\"Mama\",\"Mamba\",\"Mana\",\"Manala\",\r\n  \"Manaverr\",\"Manfred\",\"Mankey\",\"Mannin\",\"Manon\",\"Mansour\",\"Manton\",\"Manwe\",\"Maoll\",\"March\",\"Marcus\",\"Marena\",\"Margarita\",\r\n  \"Margery\",\"Mariandor\",\"Marid\",\"Marina\",\"Marion\",\"Marissa\",\"Marisse\",\"Mark\",\"Markham\",\"Maroof\",\"Marques\",\"Marsden\",\"Marshtnan\",\r\n  \"Marsineh\",\"Marta\",\"Martin\",\"Martus\",\"Mary\",\"Maryn\",\"Mathilda\",\"Mathilde\",\"Matilda\",\"Matthew\",\"Matthias\",\"Maudlin\",\"Maura\",\r\n  \"Mavis\",\"Maxander\",\"Maxfield\",\"Maximilian\",\"Maximus\",\"Maya\",\"Mayhew\",\"Mazrak\",\"Medar\",\"Medart\",\"Medea\",\"Meder\",\"Medrom\",\r\n  \"Megan\",\"Meghnad\",\"Mehmet\",\"Mekeesha\",\"Melba\",\"Melchior\",\"Meleri\",\"Meliadoul\",\"Melian\",\"Melisande\",\"Melkor\",\"Mellyora\",\"Melnyth\",\r\n  \"Melora\",\"Melva\",\"Melvaig\",\"Memor\",\"Men\",\"Menard\",\"Mendolin\",\"Menelvagor\",\"Mennefer\",\"Meoran\",\"Mephistopheles\",\"Merah\",\"Merasye\",\r\n  \"Meredith\",\"Meriadoc\",\"Merifa\",\"Merivan\",\"Merlin\",\"Merrilee\",\"Merryn\",\"Mervyn\",\"Merwold\",\"Merwolf\",\"Mes'ard\",\"Meta\",\"Methos\",\r\n  \"Methuen\",\"Michael\",\"Michel\",\"Mideya\",\"Midhat\",\"Midra\",\"Mignon\",\"Miguel\",\"Mikhail\",\"Mila\",\"Milada\",\"Milander\",\"Milandro\",\r\n  \"Mileaha\",\"Millard\",\"Milo\",\"Mimir\",\"Mina\",\"Minella\",\"Miner\",\"Minna\",\"Minx\",\"Mira\",\"Miragon\",\"Miranda\",\"Mirandros\",\r\n  \"Miriel\",\"Mirrash\",\"Mirromi\",\"Miryam\",\"Misha\",\"Mishanti\",\"Misin\",\"Mist\",\"Mithrandir\",\"Mithryl\",\"Mitre\",\"Miwa\",\"Mizra\",\r\n  \"Moda\",\"Modeus\",\"Moffett\",\"Mohammed\",\"Mohieddin\",\"Moina\",\"Moira\",\"Moiriane\",\"Moisur\",\"Molina\",\"Mona\",\"Monach\",\"Montfort\",\r\n  \"Mora\",\"Moradin\",\"Mord\",\"Moredlin\",\"Morgan\",\"Morgon\",\"Morgwin\",\"Moriana\",\"Morik\",\"Morin\",\"Morley\",\"Morna\",\"Morpheus\",\r\n  \"Morrigan\",\"Mortos\",\"Mortrock\",\"Morven\",\"Moya\",\"Muammar\",\"Mubur\",\"Muhammed\",\"Muhlwena\",\"Mujibur\",\"Muktar\",\"Munin\",\"Murdo\",\r\n  \"Murias\",\"Murina\",\"Murrough\",\"Mussa\",\"Mustadio\",\"Mustafa\",\"Mylin\",\"Mylé\",\"Myna\",\"Myra\",\"Myriam\",\"Myrick\",\"Myrmeen\",\r\n  \"Myrna\",\"Myron\",\"Myrrdyn\",\"Myrrha\",\"Myshella\",\"Mythil\",\"Myvor\",\"N'hadha\",\"Nada\",\"Nadezhda\",\"Nadia\",\"Nadir\",\"Nagai\",\r\n  \"Nagel\",\"Nagvar\",\"Nahar\",\"Naia\",\"Naidel\",\"Najib\",\"Nakea\",\"Nalia\",\"Nall\",\"Nanorion\",\"Naois\",\"Naomi\",\"Napollo\",\r\n  \"Narasen\",\"Narcista\",\"Narisa\",\"Narvi\",\"Nasir\",\"Nasser\",\"Natalia\",\"Natasha\",\"Nathalia\",\"Nathalie\",\"Natty\",\"Nazar\",\"Nebron\",\r\n  \"Nedda\",\"Nedstar\",\"Neelix\",\"Negley\",\"Nemm\",\"Nemuel\",\"Neral\",\"Neri\",\"Nerian\",\"Nerilka\",\"Nerissa\",\"Nerull\",\"Nesbit\",\r\n  \"Nesta\",\"Nethuan\",\"Neva\",\"Nevaeh\",\"Nevard\",\"Nevena\",\"Nevile\",\"Nevyn\",\"Newall\",\"Newbold\",\"Newman\",\"Neysa\",\"Neza\",\r\n  \"Nibbidard\",\"Nichol\",\"Nicor\",\"Nienna\",\"Night\",\"Nigil\",\"Nikolai\",\"Nikua\",\"Nila\",\"Nimir\",\"Nimrodel\",\"Nina\",\"Ninian\",\r\n  \"Niomir\",\"Nira'in\",\"Nirnir\",\"Nita\",\"Nivek\",\"Nivilian\",\"Nizam\",\"Nizar\",\"Nobanion\",\"Nodaran\",\"Noela\",\"Nolan\",\"Nona\",\r\n  \"Noora\",\"Nor\",\"Nordri\",\"Noreen\",\"Norine\",\"Norle\",\"Norna\",\"Norval\",\"Norvin\",\"Norwood\",\"Nova\",\"Novalis\",\"Novita\",\r\n  \"Novomira\",\"Nu'endo\",\"Nuada\",\"Nuadi\",\"Nuala\",\"Nuale\",\"Nuanni\",\"Nungo\",\"Nunila\",\"Nura\",\"Nurdoch\",\"Nurgan\",\"Nuri\",\r\n  \"Nushia\",\"Nyassa\",\"Nylan\",\"Nymara\",\"Nynaeve\",\"Nyra\",\"Nytasa\",\"Oakes\",\"Oalyn\",\"Obed\",\"Oberon\",\"Ocar\",\"Oda\",\r\n  \"Odar\",\"Odd\",\"Oden\",\"Odilia\",\"Odimus\",\"Odo\",\"Odona\",\"Ofeig\",\"Ogden\",\"Oghma\",\"Ogma\",\"Ogmund\",\"Ogrus\",\r\n  \"Okander\",\"Olac\",\"Olaf\",\"Oldac\",\"Oldham\",\"Olga\",\"Olissa\",\"Olof\",\"Olorin\",\"Oloru\",\"Olvir\",\"Olya\",\"Omandras\",\r\n  \"Omar\",\"Omassus\",\"Ombrum\",\"Omer\",\"Onslow\",\"Onufrio\",\"Onund\",\"Onyx\",\"Ooma\",\"Oona\",\"Oonai\",\"Opal\",\"Ophelia\",\r\n  \"Orah\",\"Orcrist\",\"Ordway\",\"Oriana\",\"Orin\",\"Orion\",\"Orius\",\"Orivaen\",\"Orlandu\",\"Orlata\",\"Orm\",\"Ormsby\",\"Orome\",\r\n  \"Oron\",\"Orren\",\"Orridge\",\"Orsola\",\"Orson\",\"Osa\",\"Osiris\",\"Oskavar\",\"Ospar\",\"Osric\",\"Oswin\",\"Othello\",\"Othilia\",\r\n  \"Otho\",\"Othran\",\"Otiluke\",\"Otkel\",\"Otrygg\",\"Ottar\",\"Ottilia\",\"Otto\",\"Overton\",\"Owain\",\"Owen\",\"Owyn\",\"Ozatras\",\r\n  \"Ozto\",\"Ozur\",\"Padraic\",\"Padrias\",\"Paget\",\"Pala\",\"Palma\",\"Pamar\",\"Pan\",\"Parbha\",\"Pargascor\",\"Parr\",\"Pasca\",\r\n  \"Paschal\",\"Passmore\",\"Patnas\",\"Pattabhai\",\"Pavel\",\"Pean\",\"Pearl\",\"Pearsall\",\"Peffer\",\"Peiham\",\"Peitar\",\"Peleg\",\"Pelipi\",\r\n  \"Pellin\",\"Pendleton\",\"Penfield\",\"Pengolod\",\"Penhallow\",\"Penniman\",\"Penrhyn\",\"Pepperell\",\"Pereban\",\"Peredon\",\"Peregrin\",\"Peregrine\",\"Perith\",\r\n  \"Peronn\",\"Perrin\",\"Persifor\",\"Pestivar\",\"Peter\",\"Pethros\",\"Petra\",\"Petrea\",\"Petronella\",\"Pflarr\",\"Phanuel\",\"Pharatnond\",\"Pharcellus\",\r\n  \"Phelim\",\"Philo\",\"Philpot\",\"Phimister\",\"Phoenix\",\"Phyrrus\",\"Pia\",\"Picar\",\"Pickman\",\"Pigot\",\"Pike\",\"Pine\",\"Pinkham\",\r\n  \"Pinkney\",\"Pinkstone\",\"Piotr\",\"Pittheus\",\"Plaisted\",\"Plunimer\",\"Plunkett\",\"Polassar\",\"Pollard\",\"Pollock\",\"Polonius\",\"Polycarp\",\"Pomeroy\",\r\n  \"Porthios\",\"Powell\",\"Prafulla\",\"Prendergast\",\"Preston\",\"Prichard\",\"Proctor\",\"Prospero\",\"Provida\",\"Psilofyr\",\"Puck\",\"Pue\",\"Pulisk\",\r\n  \"Pulteney\",\"Purdon\",\"Pyke\",\"Pyros\",\"Pysander\",\"Quaan\",\"Quagel\",\"Qualin\",\"Quan\",\"Quarles\",\"Quasar\",\"Quascar\",\"Quass\",\r\n  \"Quebba\",\"Quelfinas\",\"Quesan\",\"Queygo\",\"Quiddle\",\"Quinn\",\"Quiss\",\"Quixano\",\"Quora\",\"Quvar\",\"Quvean\",\"Raagon\",\"Raban\",\r\n  \"Rabind\",\"Rabur\",\"Rach\",\"Rachid\",\"Rackafel\",\"Rackhir\",\"Radagast\",\"Radija\",\"Rae\",\"Rael\",\"Raen\",\"Rafa\",\"Rafael\",\r\n  \"Rafur\",\"Ragen\",\"Ragna\",\"Ragnal\",\"Ragnar\",\"Ragnhild\",\"Rahaz\",\"Rai\",\"Raikes\",\"Rails\",\"Raimon\",\"Raina\",\"Raine\",\r\n  \"Raisa\",\"Raistlin\",\"Ralina\",\"Ralmanor\",\"Ralph\",\"Ramen\",\"Ramli\",\"Ramman\",\"Ramona\",\"Ramora\",\"Ramous\",\"Ramza\",\"Ranald\",\r\n  \"Ranath\",\"Rancor\",\"Rand\",\"Randar\",\"Randoer\",\"Randolf\",\"Randor\",\"Ranfurly\",\"Ranjan\",\"Rankin\",\"Rannuif\",\"Rannveig\",\"Raphael\",\r\n  \"Rary\",\"Rashiel\",\"Rasputin\",\"Rathack\",\"Rathanos\",\"Rathgar\",\"Rattray\",\"Rauros\",\"Ravenor\",\"Ravi\",\"Rayne\",\"Razamor\",\"Raziel\",\r\n  \"Razzan\",\"Rebecca\",\"Recoun\",\"Redcliffe\",\"Regalorn\",\"Regnar\",\"Reina\",\"Reis\",\"Relm\",\"Rem\",\"Remi\",\"Remnor\",\"Remus\",\r\n  \"Renar\",\"Renata\",\"Rendel\",\"Rengoll\",\"Reoc\",\"Resha\",\"Rethral\",\"Reva\",\"Rex\",\"Reyna\",\"Rezah\",\"Rhadry\",\"Rhaederle\",\r\n  \"Rhaeryn\",\"Rhea\",\"Rhiannon\",\"Rhiow\",\"Rhodhy\",\"Rhona\",\"Rhonda\",\"Rhora\",\"Rhorleif\",\"Rhorvald\",\"Rhundas\",\"Rhymer\",\"Rhynn\",\r\n  \"Rhys\",\"Riallus\",\"Riamon\",\"Rickard\",\"Ricyn\",\"Rigolio\",\"Rilir\",\"Rinaldus\",\"Ringgold\",\"Risaya\",\"Riss\",\"Rith\",\"Riven\",\r\n  \"Roach\",\"Roark\",\"Rockhill\",\"Rodefer\",\"Roderic\",\"Rodhan\",\"Rognvald\",\"Roignar\",\"Roland\",\"Rolf\",\"Rollo\",\"Roman\",\"Romelia\",\r\n  \"Romer\",\"Romney\",\"Ronan\",\"Root\",\"Rorik\",\"Rosalyn\",\"Rosamund\",\"Roscoe\",\"Rose\",\"Rosefyre\",\"Roseline\",\"Roshena\",\"Rosskeen\",\r\n  \"Roundell\",\"Rowena\",\"Ruadan\",\"Ruan\",\"Rubar\",\"Ruben\",\"Rubrick\",\"Ruby\",\"Rucker\",\"Rudyard\",\"Rufina\",\"Rufus\",\"Ruggles\",\r\n  \"Ruhollah\",\"Ruinar\",\"Rulian\",\"Rulinian\",\"Rumil\",\"Runa\",\"Runold\",\"Runolf\",\"Runus\",\"Rurik\",\"Rusgar\",\"Ruth\",\"Rutland\",\r\n  \"Ruwen\",\"Ryana\",\"Rycaro\",\"Rychanna\",\"Rygar\",\"Ryll\",\"Rylla\",\"Rynnyn\",\"Ryodan\",\"Ryoga\",\"Ryoka\",\"Saalem\",\"Sabal\",\r\n  \"Sabhel\",\"Sabriel\",\"Sabrok\",\"Sacheverall\",\"Sackville\",\"Saddam\",\"Sadler\",\"Sador\",\"Saedd\",\"Saermund\",\"Saeunn\",\"Safrin\",\"Saia\",\r\n  \"Said\",\"Saifai\",\"Saiwyn\",\"Salina\",\"Salmon\",\"Salter\",\"Sam\",\"Sambrea\",\"Samia\",\"Samira\",\"Sammel\",\"Samuel\",\"Sanfrid\",\r\n  \"Sano'rye\",\"Sanoreya\",\"Sanoria\",\"Sarcyn\",\"Sardior\",\"Sardul\",\"Sarel\",\"Sarevok\",\"Sargonus\",\"Saria\",\"Sarina\",\"Sarisin\",\"Sariya\",\r\n  \"Sarrask\",\"Saruman\",\"Sasha\",\"Saska\",\"Saturn\",\"Sauron\",\"Savah\",\"Savion\",\"Sawdon\",\"Sayan\",\"Scenesefa\",\"Scudamore\",\"Scythe\",\r\n  \"Sebastian\",\"Sebrinth\",\"Sechier\",\"Sedgely\",\"Seersha\",\"Segojan\",\"Sehanine\",\"Seitarin\",\"Selema\",\"Selena\",\"Selene\",\"Selig\",\"Selim\",\r\n  \"Selina\",\"Selis\",\"Selith\",\"Selune\",\"Selwyn\",\"Semuta\",\"Senith\",\"Senna\",\"Sephia\",\"Sephya\",\"Sepiroth\",\"Seramir\",\"Seraphina\",\r\n  \"Serena\",\"Serenyi\",\"Sergei\",\"Seriozha\",\"Seryan\",\"Seryl\",\"Seryth\",\"Seth\",\"Sethron\",\"Sevadia\",\"Severin\",\"Sevros\",\"Sevy\",\r\n  \"Sha'dar\",\"Sha'rell\",\"Shackerley\",\"Shadizad\",\"Shadrach\",\"Shadworth\",\"Shaera\",\"Shaivar\",\"Shaivir\",\"Shala\",\"Shalamar\",\"Shalandain\",\"Shalat\",\r\n  \"Shalhassan\",\"Shalindra\",\"Shalon\",\"Shalpan\",\"Shamane\",\"Shamir\",\"Shana\",\"Shandalar\",\"Shanell\",\"Shar\",\"Sharada\",\"Sharaq\",\"Shard\",\r\n  \"Sharif\",\"Sharilla\",\"Sharl\",\"Sharla\",\"Sharmaine\",\"Sharman\",\"Sharna\",\"Sharnira\",\"Sharra\",\"Sharteel\",\"Shaundra\",\"Sharyn\",\"Shayera\",\r\n  \"Shayla\",\"Shayll\",\"Shayonea\",\"Shea\",\"Sheegoth\",\"Sheeryl\",\"Sheherazad\",\"Shemsin\",\"Sheridan\",\"Sherif\",\"Sherry\",\"Shezael\",\"Shima'onari\",\r\n  \"Shintaro\",\"Shiza\",\"Shuinn\",\"Shuna\",\"Shurakai\",\"Shurik\",\"Shushila\",\"Shylock\",\"Siandar\",\"Sibert\",\"Sibyl\",\"Sidhe\",\"Siglinde\",\r\n  \"Sigmund\",\"Signe\",\"Sigred\",\"Sigrid\",\"Sigtrydd\",\"Sigurd\",\"Sigvaldi\",\"Silatasar\",\"Silius\",\"Silma\",\"Silmariel\",\"Silphane\",\"Silvain\",\r\n  \"Silvan\",\"Silvanus\",\"Silvera\",\"Silveron\",\"Silvia\",\"Silvyn\",\"Simir\",\"Simmu\",\"Sinbad\",\"Sindarin\",\"Sinir\",\"Sinjin\",\"Siranush\",\r\n  \"Sirisir\",\"Sirli'in\",\"Sirona\",\"Sirranon\",\"Sirwin\",\"Sisimar\",\"Siski\",\"Sivesh\",\"Siveth\",\"Siward\",\"Sjerdi\",\"Skamkel\",\"Skelmar\",\r\n  \"Skorian\",\"Slade\",\"Slania\",\"Slater\",\"Slava\",\"Sligh\",\"Slingsby\",\"Smedley\",\"Snargg\",\"Snorri\",\"Snyder\",\"Sodorn\",\"Soilir\",\r\n  \"Soisil\",\"Sokki\",\"Solaris\",\"Solera\",\"Solevig\",\"Solmund\",\"Solomon\",\"Solvi\",\"Sonnet\",\"Sooth\",\"Sora\",\"Sorass\",\"Sorcha\",\r\n  \"Sorin\",\"Sornovas\",\"Soth\",\"Southall\",\"Sovaz\",\"Soveh\",\"Soyadi\",\"Sparrow\",\"Sprigg\",\"Squall\",\"Srass\",\"Stabyl\",\"Stanwood\",\r\n  \"Starkad\",\"Starke\",\"Stedman\",\"Stefan\",\"Stehman\",\"Stein\",\"Steinkel\",\"Steinthor\",\"Stelectra\",\"Stenger\",\"Stenwulf\",\"Steponas\",\"Sterndale\",\r\n  \"Stetson\",\"Stetter\",\"Stiliman\",\"Stilingfleet\",\"Stopford\",\"Storm\",\"Stowna\",\"Strachan\",\"Straygoth\",\"Stroud\",\"Strudwick\",\"Strybyorn\",\"Strykar\",\r\n  \"Sturla\",\"Sturm\",\"Styx\",\"Sudeha\",\"Suleiman\",\"Sulimo\",\"Sulkas\",\"Sumarlidi\",\"Suras\",\"Surridge\",\"Susin\",\"Susur\",\"Sutan\",\r\n  \"Svala\",\"Svan\",\"Svante\",\"Svatopluk\",\"Sveata\",\"Sven\",\"Swain\",\"Swartwout\",\"Sydnor\",\"Syllva\",\"Sylvane\",\"Sylvia\",\"Sylvin\",\r\n  \"Sylvine\",\"Syndarra\",\"Synnyn\",\"Syranita\",\"Syrioll\",\"Tabar\",\"Tabitha\",\"Tabor\",\"Tabu\",\"Tacey\",\"Tachel\",\"Tadashi\",\"Tadeus\",\r\n  \"Tadia\",\"Tadisha\",\"Tadra\",\"Taennyn\",\"Taeynnyn\",\"Taggart\",\"Tahir\",\"Tailabar\",\"Taina\",\"Takhisis\",\"Taleen\",\"Talen\",\"Taleth\",\r\n  \"Talia\",\"Taliesin\",\"Talin\",\"Talmora\",\"Talobar\",\"Talona\",\"Taloxi\",\"Taltos\",\"Talus\",\"Tamar\",\"Tamara\",\"Tameryn\",\"Tamias\",\r\n  \"Tamlin\",\"Tamoreya\",\"Tanina\",\"Tanis\",\"Tanith\",\"Tanyc\",\"Tar\",\"Tara\",\"Taran\",\"Tarcia\",\"Taria\",\"Tarik\",\"Taromas\",\r\n  \"Taron\",\"Tarran\",\"Taryn\",\"Tas\",\"Tasharra\",\"Tasker\",\"Tatyana\",\"Taurus\",\"Taveli\",\"Taylian\",\"Taylin\",\"Tedra\",\"Tegan\",\r\n  \"Tekia\",\"Telena\",\"Tell\",\"Tench\",\"Tenna\",\"Tenser\",\"Teoddry\",\"Ter\",\"Teralyn\",\"Teressa\",\"Terix\",\"Teruah\",\"Tesin\",\r\n  \"Tesla\",\"Tessa\",\"Tevran\",\"Thaal\",\"Thacker\",\"Thaddeus\",\"Thaki\",\"Thal\",\"Thalen\",\"Thalessa\",\"Thalia\",\"Thalna\",\"Tham\",\r\n  \"Thana\",\"Thane\",\"Thanatos\",\"Thantos\",\"Thar\",\"Tharbad\",\"Tharkesh\",\"Tharn\",\"Thax\",\"Thecla\",\"Theda\",\"Theleb\",\"Theoden\",\r\n  \"Theodor\",\"Theodoric\",\"Theodosia\",\"Theodric\",\"Theoric\",\"Thera\",\"Therad\",\"Theresa\",\"Therios\",\"Theros\",\"Thesius\",\"Thieras\",\"Thieryn\",\r\n  \"Thingyr\",\"Thio\",\"Tholan\",\"Thomas\",\"Thomulor\",\"Thora\",\"Thoran\",\"Thorarin\",\"Thorburn\",\"Thord\",\"Thordarson\",\"Thordis\",\"Thorfel\",\r\n  \"Thorfinn\",\"Thorfinna\",\"Thorgeir\",\"Thorgerd\",\"Thorgest\",\"Thorgils\",\"Thorgrim\",\"Thorgunna\",\"Thorhall\",\"Thorhalla\",\"Thorhild\",\"Thorin\",\"Thorir\",\r\n  \"Thorkatla\",\"Thorkell\",\"Thorkild\",\"Thormod\",\"Thormodr\",\"Thormond\",\"Thorn\",\"Thorndike\",\"Thornwell\",\"Thorold\",\"Thorolf\",\"Thorsager\",\"Thorstein\",\r\n  \"Thorunn\",\"Thorvald\",\"Thorvaldur\",\"Thorvar\",\"Thorzyl\",\"Thoth\",\"Thrain\",\"Thrand\",\"Throck\",\"Thule\",\"Thurid\",\"Thylda\",\"Thyra\",\r\n  \"Thyri\",\"Thyrza\",\"Thyssa\",\"Tiana\",\"Tiffany\",\"Tihan\",\"Tika\",\"Tilford\",\"Tilica\",\"Tilir\",\"Tillinghast\",\"Tilloch\",\"Timon\",\r\n  \"Tioniel\",\"Tirion\",\"Tisha\",\"Tisheri\",\"Titania\",\"Titia\",\"Titiana\",\"Tivernee\",\"Tiyagar\",\"Tnin\",\"Tobias\",\"Tobis\",\"Todhunter\",\r\n  \"Tolbert\",\"Tolenka\",\"Topaz\",\"Topham\",\"Torc\",\"Tortbold\",\"Tosti\",\"Tosya\",\"Toulac\",\"Tovi\",\"Trafford\",\"Trebor\",\"Trelane\",\r\n  \"Trelawny\",\"Trella\",\"Trevel\",\"Trick\",\"Trigg\",\"Trill\",\"Triona\",\"Trir\",\"Tristam\",\"Tristan\",\"Trost\",\"Trotwood\",\"Trowbridge\",\r\n  \"Truesdell\",\"Tuane\",\"Tufnell\",\"Tugan\",\"Tuilleth\",\"Tulio\",\"Tulkas\",\"Tundine\",\"Tunstall\",\"Tuor\",\"Turan\",\"Turgoz\",\"Turhan\",\r\n  \"Turin\",\"Turpin\",\"Tuttle\",\"Tuula\",\"Twyla\",\"Tylden\",\"Tyldoran\",\"Tylen\",\"Tylien\",\"Tylynn\",\"Tymar\",\"Tymora\",\"Tymoriel\",\r\n  \"Tynnyn\",\"Tyr\",\"Tyra\",\"Tyranina\",\"Tyreen\",\"Tyrwhitt\",\"Uamian\",\"Ubriani\",\"Ucarsh\",\"Uda\",\"Uhier\",\"Uhlain\",\"Uhlume\",\r\n  \"Uholedil\",\"Uinen\",\"Ula\",\"Ulf\",\"Ulgor\",\"Ulis\",\"Uljas\",\"Ulji\",\"Ulmaerr\",\"Ulmo\",\"Ulosh\",\"Ulric\",\"Ulrich\",\r\n  \"Ultron\",\"Umaiar\",\"Umbar\",\"Umda\",\"Umgalad\",\"Una\",\"Uneitna\",\"Ungon\",\"Unius\",\"Unn\",\"Unrak\",\"Unwin\",\"Upal\",\r\n  \"Upton\",\"Urabi\",\"Urania\",\"Uranos\",\"Uranus\",\"Uriel\",\"Urish\",\"Urokoz\",\"Ursula\",\"Usher\",\"Uta\",\"Utumno\",\"Uusoae\",\r\n  \"Uvanimor\",\"Uziel\",\"Vabryn\",\"Vadarin\",\"Vadi\",\"Vaeddyn\",\"Vagn\",\"Vai\",\"Val\",\"Valadan\",\"Valandario\",\"Valandor\",\"Valarindi\",\r\n  \"Valborg\",\"Valda\",\"Valdain\",\"Valdemar\",\"Valen\",\"Valenka\",\"Valentia\",\"Valerand\",\"Valeria\",\"Valerian\",\"Valeska\",\"Valgar\",\"Valgard\",\r\n  \"Valgerd\",\"Valiah\",\"Valion\",\"Valisa\",\"Valiss\",\"Valistor\",\"Valkor\",\"Valla\",\"Vallo\",\"Valmar\",\"Valminder\",\"Valor\",\"Valsera\",\r\n  \"Valurian\",\"Valya\",\"Valynard\",\"Vandrad\",\"Vane\",\"Vanechka\",\"Vanidor\",\"Vanion\",\"Vannevar\",\"Vannyn\",\"Vanya\",\"Vanyar\",\"Vanyel\",\r\n  \"Varda\",\"Vardis\",\"Varina\",\"Varion\",\"Varken\",\"Varnum\",\"Vasava\",\"Vash\",\"Vasha\",\"Vasilii\",\"Vasin\",\"Vaydin\",\"Vaydir\",\r\n  \"Vayi\",\"Vecna\",\"Veda\",\"Veldahar\",\"Veldan\",\"Velex\",\"Velior\",\"Venable\",\"Vendor\",\"Veorcyn\",\"Vercyn\",\"Verdina\",\"Vereesa\",\r\n  \"Verline\",\"Vermund\",\"Verna\",\"Ves\",\"Vespar\",\"Vestein\",\"Veva\",\"Vevina\",\"Vexter\",\"Viasta\",\"Vicarr\",\"Vicat\",\"Vicentia\",\r\n  \"Viconia\",\"Victor\",\"Vida\",\"Vidkun\",\"Vidron\",\"Vieno\",\"Viera\",\"Vierna\",\"Vigdis\",\"Vigfus\",\"Vilhelm\",\"Vilka\",\"Vilrna\",\r\n  \"Vinatta\",\"Vincas\",\"Vincent\",\"Vintar\",\"Violet\",\"Vircyn\",\"Vishali\",\"Viveka\",\"Vladimir\",\"Vladislav\",\"Vlaric\",\"Vobur\",\"Voirath\",\r\n  \"Vokos\",\"Voldor\",\"Volkan\",\"Volney\",\"Volodya\",\"Volund\",\"Vonya\",\"Voranor\",\"Vrashin\",\"Vulpen\",\"Vurog\",\"Vusil\",\"Vyecheslav\",\r\n  \"Vyner\",\"Wadleigh\",\"Waenwryht\",\"Wager\",\"Waisham\",\"Waivan\",\"Wakeman\",\"Wakkar\",\"Walborg\",\"Walda\",\"Waldan\",\"Waldegrave\",\"Waldemar\",\r\n  \"Waleran\",\"Walford\",\"Walid\",\"Walker\",\"Wanhim\",\"Waring\",\"Wariv\",\"Wark\",\"Warne\",\"Warrender\",\"Warrigel\",\"Warwick\",\"Waryk\",\r\n  \"Watson\",\"Watt\",\"Waylan\",\"Wayland\",\"Waylon\",\"Wealin\",\"Wedlake\",\"Weilborn\",\"Weiryn\",\"Wel\",\"Wemick\",\"Wendolyn\",\"Wertha\",\r\n  \"Westcott\",\"Westen\",\"Weyrn\",\"Wharrom\",\"Whitwell\",\"Whyte\",\"Wicca\",\"Wideman\",\"Wightman\",\"Wildhair\",\"Wilfrid\",\"Wilhelm\",\"Wilhelmina\",\r\n  \"Wilibald\",\"Will\",\"Willa\",\"William\",\"Willock\",\"Willow\",\"Wilma\",\"Wilmar\",\"Wilner\",\"Wilven\",\"Windham\",\"Winfrey\",\"Winian\",\r\n  \"Winslow\",\"Winton\",\"Wisp\",\"Wisuth\",\"Wivianne\",\"Wizlow\",\"Woart\",\"Wodan\",\"Wolfgang\",\"Wolmar\",\"Womal\",\"Woodfin\",\"Woodruff\",\r\n  \"Wooligar\",\"Wortley\",\"Wotan\",\"Wulf\",\"Wulfgar\",\"Wulfric\",\"Wulgar\",\"Wychnor\",\"Wycliffe\",\"Wyllows\",\"Wyly\",\"Wynkyn\",\"Wynne\",\r\n  \"Wynston\",\"Wyvan\",\"Xaandria\",\"Xaath\",\"Xabian\",\"Xabiel\",\"Xabu\",\"Xain\",\"Xalthan\",\"Xan\",\"Xanaphel\",\"Xanathar\",\"Xander\",\r\n  \"Xandra\",\"Xandria\",\"Xanthon\",\"Xanthus\",\"Xarek\",\"Xarolith\",\"Xaver\",\"Xavier\",\"Xavin\",\"Xela\",\"Xelmonth\",\"Xena\",\"Xenia\",\r\n  \"Xenoba\",\"Xera\",\"Xercon\",\"Xerravin\",\"Xiombarg\",\"Xoncarg\",\"Xoran\",\"Xulan\",\"Xyas\",\"Xydra\",\"Xyko\",\"Xylah\",\"Xylia\",\r\n  \"Xymoya\",\"Xystus\",\"Xythrin\",\"Xytrin\",\"Yacima\",\"Yaheira\",\"Yahira\",\"Yaigin\",\"Yakov\",\"Yalan\",\"Yali\",\"Yalin\",\"Yalniz\",\r\n  \"Yamari\",\"Yana\",\"Yandell\",\"Yangin\",\"Yanira\",\"Yannul\",\"Yara\",\"Yaraia\",\"Yarali\",\"Yardim\",\"Yardley\",\"Yari\",\"Yarim\",\r\n  \"Yarin\",\"Yarir\",\"Yaritza\",\"Yartrina\",\"Yasimina\",\"Yasir\",\"Yasmina\",\"Yasser\",\"Yastar\",\"Yatay\",\"Yavana\",\"Yazihane\",\"Yelain\",\r\n  \"Yeni\",\"Yetne\",\"Yevgenii\",\"Yezade\",\"Ygerna\",\"Ygraine\",\"Yishana\",\"Ynryc\",\"Ynvar\",\"Yoda\",\"Yolanda\",\"Yondalla\",\"York\",\r\n  \"Yradry\",\"Yreoddyn\",\"Yrrkoon\",\"Yrsa\",\"Yrun\",\"Yryllyn\",\"Ysabel\",\"Ysgerryn\",\"Ysolde\",\"Yuri\",\"Yvain\",\"Yvette\",\"Yvonne\",\r\n  \"Yvyr\",\"Yénisar\",\"Yérusha\",\"Zabdiel\",\"Zacarias\",\"Zachary\",\"Zachris\",\"Zadock\",\"Zahara\",\"Zahra\",\"Zaidh\",\"Zalazar\",\"Zalbar\",\r\n  \"Zan\",\"Zandra\",\"Zanifa\",\"Zanthar\",\"Zara\",\"Zaranthe\",\"Zared\",\"Zarimarth\",\"Zarquan\",\"Zathras\",\"Zavel\",\"Zaviv\",\"Zay\",\r\n  \"Zazumel\",\"Zebalane\",\"Zebulon\",\"Zehir\",\"Zelda\",\"Zemenar\",\"Zenda\",\"Zendrac\",\"Zenith\",\"Zenobia\",\"Zenon\",\"Zepher\",\"Zephyr\",\r\n  \"Zerika\",\"Zerin\",\"Zeswick\",\"Zhalore\",\"Zhanna\",\"Zharvek\",\"Zhenya\",\"Zhirek\",\"Zhirem\",\"Zhoreb\",\"Zia\",\"Zigmal\",\"Zilar\",\r\n  \"Zinaida\",\"Zincir\",\"Zion\",\"Ziona\",\"Zircon\",\"Zirzihin\",\"Zita\",\"Zoe\",\"Zolabar\",\"Zoltan\",\"Zona\",\"Zora\",\"Zorashad\",\r\n  \"Zorayas\",\"Zorlan\",\"Zosia\",\"Zotar\",\"Zumurrud\",\"Zurrog\",\"Zykhiralamshad\"];\r\n  makeArrays();\r\n}",
                        "onModelContext": "const modifier = (text) => {\n\n  return { text: text }\n}\n\n// Don't modify this part\nmodifier(text)\n"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1337082",
                "publicId": "e9157a20-6ca3-11eb-8c3a-2d8999c45f76",
                "published": false,
                "title": "(OLD VERSION - WILL BE DELETED) Skyrim: the Old Kingdom of Mereth",
                "description": "Skyrim, the northernmost province of Tamriel, is a cold and mountainous region also known as the Old Kingdom, Mereth, or the Fatherland, or Keizaal in the dragon tongue. Many past battles have given it a ravaged appearance and many ruins.",
                "tags": [],
                "createdAt": "2021-02-11T20:01:21.090Z",
                "updatedAt": "2021-04-19T01:22:32.328Z",
                "memory": "",
                "authorsNote": "",
                "mode": "creative",
                "prompt": "Though currently inhabited primarily by Nords, the Elves who they replaced had resided there since time immemorial. The sovereign, the High King of Skyrim, is chosen by the Moot, a convention of Jarls. A Jarl is a regional ruler chosen through heredity and, rarely, through right of arms. \n\nThe High King typically rules until death, though acts of dishonor, particularly the appearance of cowardice, can lead to the recall and reconsideration of the Moot. Since the Pact of Chieftains was signed in 1E 420, the Moot does not give serious consideration to anyone but the High King's direct heir unless one is not available.\n\nChoose your class:",
                "quests": [],
                "worldInfo": [],
                "gameCode": {
                        "onInput": "const modifier = (text) => {\r\n  let stop = false;\r\n  let modifiedText = text;\r\n  const lowered = text.toLowerCase();\r\n\r\n  if (!state.init && info.actionCount < 1) {\r\n    grabAllBrackets(text);\r\n    modifiedText = text.replace(BRACKETS, '');\r\n    \r\n    state.character = [{\r\n      name: state.placeholders[0],\r\n      gender: state.placeholders[1],\r\n      race: state.placeholders[2],\r\n      class: state.placeholders[3]\r\n    }];\r\n\r\n    state.message = state.character.name + state.character.gender + state.character.race + state.character.class;\r\n\r\n    getInventory();\r\n    state.init = true;\r\n  }\r\n\r\n  if (lowered.includes('inventory')) {\r\n    if (lowered.includes('check')) {\r\n      stop = true;\r\n      modifiedText += checkInventory();\r\n      state.message = modifiedText;\r\n      console.log(getInventory());\r\n    } else if (lowered.includes('add')) {\r\n      stop = true;\r\n      const itemToBeAdded = lowered.split('add').pop().split('to')[0];\r\n      const itemName = capitalize(itemToBeAdded.replace(LETTER_REGEX, '').trim());\r\n      const itemQuantity = parseInt(itemToBeAdded.replace(DIGIT_REGEX, '').trim());\r\n\r\n      modifiedText += addToInventory(itemName, itemQuantity);\r\n      state.message = modifiedText;\r\n      console.log(getInventory());\r\n    } else if (lowered.includes('remove')) {\r\n      stop = true;\r\n      const itemToBeRemoved = lowered.split('remove').pop().split('from')[0];\r\n      const itemName = capitalize(itemToBeRemoved.replace(LETTER_REGEX, '').trim());\r\n      const itemQuantity = parseInt(itemToBeRemoved.replace(DIGIT_REGEX, '').trim());\r\n\r\n      modifiedText += removeFromInventory(itemName, itemQuantity);\r\n      state.message = modifiedText;\r\n      console.log(getInventory());\r\n    }\r\n  }\r\n\r\n  return { text: modifiedText, stop: stop };\r\n}\r\n\r\nmodifier(text);",
                        "onOutput": "\r\n// Checkout the repo examples to get an idea of other ways you can use scripting \r\n// https://github.com/latitudegames/Scripting/blob/master/examples\r\n\r\nconst modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n\r\n  // The text passed in is either the user's input or players output to modify.\r\n  if (lowered.includes('you become king') || lowered.includes('you are now king')) {\r\n    // You can modify the state variable to keep track of state throughout the adventure\r\n    state.isKing = true\r\n\r\n    // Setting state.memory.context will cause that to be used instead of the user set memory\r\n    state.memory = { context: 'You are now the king.' }\r\n\r\n    // You can modify world info entries using the below commands\r\n    // addWorldEntry(keys, entry)\r\n    // removeWorldEntry(index)\r\n    // updateWorldEntry(index, keys, entry)\r\n\r\n    // You can read world info keys with worldInfo \r\n    const entries = worldInfo\r\n\r\n    // Setting state.message will set an info message that will be displayed in the game\r\n    // This can be useful for debugging\r\n    state.message = JSON.stringify(entries)\r\n\r\n    // You can log things to the side console when testing with console.log\r\n    console.log('Player is now king')\r\n\r\n    modifiedText = text + '\\nYou are now the king!'\r\n  }\r\n\r\n  // You must return an object with the text property defined.\r\n  return { text: modifiedText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n",
                        "sharedLibrary": "const LETTER_REGEX = /[0-9]/g;\r\nconst DIGIT_REGEX = /\\D/g;\r\nconst BRACKETED = /\\[(.*?)\\]/g;\r\nconst BRACKETS = /\\[|\\]/g;\r\n\r\n/**\r\n * Bracker handler by Gnurro.\r\n * \r\n * Removes backets from input text to handle them as placeholders\r\n */\r\nconst grabAllBrackets = (text) => {\r\n  if (text.match(BRACKETED)) {\r\n    for (entry of text.match(BRACKETED)) {\r\n      entry = entry.replace(BRACKETS, '');\r\n      if (!state.placeholders) {\r\n        state.placeholders = new Array();\r\n      }\r\n\r\n      state.placeholders.push(entry);\r\n    }\r\n\r\n    console.log(state.placeholders);\r\n  }\r\n}\r\n\r\n/**\r\n * Simple frunction to capitalize the first letter of a string\r\n * \r\n * @param {string} string \r\n */\r\nconst capitalize = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n\r\n/**\r\n * Finds an item in the player's inventory\r\n * @param {string} itemName \r\n */\r\nconst findItemInInventory = (itemName) => {\r\n  return getInventory().find(item => {\r\n    return item.name == itemName;\r\n  });\r\n}\r\n\r\n/**\r\n * Removes an item from player's inventory\r\n * \r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst removeFromInventory = (itemName, itemQuantity) => {\r\n  let item = findItemInInventory(itemName);\r\n  if (!(item.quantity == itemQuantity) && (item.quantity > 1 && item.quantity >= itemQuantity)) {\r\n    item.quantity -= itemQuantity;\r\n    return `\\nYou have removed ${itemQuantity} ${itemName} from your inventory.`;\r\n  }\r\n\r\n  let index = getInventory().indexOf(item);\r\n  getInventory().splice(index, 1);\r\n  return `\\nYou have removed all ${itemName} from your inventory.`;\r\n}\r\n\r\n/**\r\n * Checks player's inventory and returns what's inside\r\n */\r\nconst checkInventory = () => {\r\n\r\n  if (getInventory().length > 0) {\r\n    return `\\nYour inventory contains: ` + getInventory().join(', ');\r\n  }\r\n\r\n  return `\\nYour inventory is empty.`;\r\n}\r\n\r\n/**\r\n * Returns player's inventory. If the array in undefined, define it\r\n */\r\nconst getInventory = () => {\r\n  if (typeof state.inventory == 'undefined') {\r\n    state.inventory = [];\r\n  }\r\n\r\n  return state.inventory;\r\n}\r\n\r\n/**\r\n * Adds item to player's inventory\r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst addToInventory = (itemName, itemQuantity) => {\r\n\r\n  let item = findItemInInventory(itemName);\r\n  if (typeof item == 'undefined') {\r\n    item = {\r\n      name: itemName,\r\n      quantity: itemQuantity\r\n    };\r\n\r\n    state.inventory.push(item);\r\n  } else {\r\n    item.quantity = item.quantity + itemQuantity;\r\n  }\r\n\r\n  return `\\nYou have added ${itemQuantity} ${itemName} to your inventory.`;\r\n}",
                        "onModelContext": "\r\n// Checkout the repo examples to get an idea of other ways you can use scripting\r\n// https://github.com/latitudegames/Scripting/blob/master/examples\r\n\r\n// info.memoryLength is the length of the memory section of text.\r\n// info.maxChars is the maximum length that text can be. The server will truncate the text you return to this length.\r\n\r\n// This modifier re-implements Author's Note as an example.\r\nconst modifier = (text) => {\r\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : ''\r\n  const context = info.memoryLength ? text.slice(info.memoryLength) : text\r\n  const lines = context.split(\"\\n\")\r\n  if (lines.length > 2) {\r\n    // Uncomment to use this!\r\n    // const authorsNote = \"Everyone in this story is an AI programmer.\"\r\n    // lines.splice(-3, 0, `[Author's note: ${authorsNote}]`)\r\n  }\r\n  // Make sure the new context isn't too long, or it will get truncated by the server.\r\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength))\r\n  const finalText = [contextMemory, combinedLines].join(\"\")\r\n  return { text: finalText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [
                        {
                                "publicId": "4270e8f0-7007-11eb-81d7-515b04adcbc7",
                                "title": "Random character",
                                "createdAt": "2021-02-16T03:30:04.671Z"
                        },
                        {
                                "publicId": "7566b270-75e4-11eb-aa36-e1e9fc3bcc16",
                                "title": "Create character",
                                "createdAt": "2021-02-23T14:36:04.759Z"
                        },
                        {
                                "publicId": "98aae120-8ec1-11eb-98c3-49d95a5f8011",
                                "title": "Custom prompt",
                                "createdAt": "2021-03-27T05:59:30.611Z"
                        }
                ],
                "isOption": true
        },
        {
                "id": "1720262",
                "publicId": "e8f205d0-a0a7-11eb-8bbe-5f4ba14ef800",
                "published": false,
                "title": "Skyrim: the Old Kingdom of Mereth",
                "description": "Skyrim, the northernmost province of Tamriel, is a cold and mountainous region also known as the Old Kingdom, Mereth, or the Fatherland, or Keizaal in the dragon tongue. Many past battles have given it a ravaged appearance and many ruins.",
                "tags": [],
                "createdAt": "2021-04-19T00:40:59.309Z",
                "updatedAt": "2021-04-19T02:40:43.111Z",
                "memory": "",
                "authorsNote": "",
                "mode": "creative",
                "prompt": "Though currently inhabited primarily by Nords, the Elves who they replaced had resided there since time immemorial. The sovereign, the High King of Skyrim, is chosen by the Moot, a convention of Jarls. A Jarl is a regional ruler chosen through heredity and, rarely, through right of arms. \n\nThe High King typically rules until death, though acts of dishonor, particularly the appearance of cowardice, can lead to the recall and reconsideration of the Moot. Since the Pact of Chieftains was signed in 1E 420, the Moot does not give serious consideration to anyone but the High King's direct heir unless one is not available.",
                "quests": [],
                "worldInfo": [],
                "gameCode": {
                        "onInput": "\r\n// Checkout the repo examples to get an idea of other ways you can use scripting \r\n// https://github.com/latitudegames/Scripting/blob/master/examples\r\n\r\nconst modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n\r\n  // The text passed in is either the user's input or players output to modify.\r\n  if (lowered.includes('you become king') || lowered.includes('you are now king')) {\r\n    // You can modify the state variable to keep track of state throughout the adventure\r\n    state.isKing = true\r\n\r\n    // Setting state.memory.context will cause that to be used instead of the user set memory\r\n    state.memory = { context: 'You are now the king.' }\r\n\r\n    // You can modify world info entries using the below commands\r\n    // addWorldEntry(keys, entry)\r\n    // removeWorldEntry(index)\r\n    // updateWorldEntry(index, keys, entry)\r\n\r\n    // You can read world info keys with worldInfo \r\n    const entries = worldInfo\r\n\r\n    // Setting state.message will set an info message that will be displayed in the game\r\n    // This can be useful for debugging\r\n    state.message = JSON.stringify(entries)\r\n\r\n    // You can log things to the side console when testing with console.log\r\n    console.log('Player is now king')\r\n\r\n    modifiedText = text + '\\nYou are now the king!'\r\n  }\r\n\r\n  // You must return an object with the text property defined.\r\n  return { text: modifiedText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n",
                        "onOutput": "\r\n// Checkout the repo examples to get an idea of other ways you can use scripting \r\n// https://github.com/latitudegames/Scripting/blob/master/examples\r\n\r\nconst modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n\r\n  // The text passed in is either the user's input or players output to modify.\r\n  if (lowered.includes('you become king') || lowered.includes('you are now king')) {\r\n    // You can modify the state variable to keep track of state throughout the adventure\r\n    state.isKing = true\r\n\r\n    // Setting state.memory.context will cause that to be used instead of the user set memory\r\n    state.memory = { context: 'You are now the king.' }\r\n\r\n    // You can modify world info entries using the below commands\r\n    // addWorldEntry(keys, entry)\r\n    // removeWorldEntry(index)\r\n    // updateWorldEntry(index, keys, entry)\r\n\r\n    // You can read world info keys with worldInfo \r\n    const entries = worldInfo\r\n\r\n    // Setting state.message will set an info message that will be displayed in the game\r\n    // This can be useful for debugging\r\n    state.message = JSON.stringify(entries)\r\n\r\n    // You can log things to the side console when testing with console.log\r\n    console.log('Player is now king')\r\n\r\n    modifiedText = text + '\\nYou are now the king!'\r\n  }\r\n\r\n  // You must return an object with the text property defined.\r\n  return { text: modifiedText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n",
                        "sharedLibrary": "// Any functions you define here will be available in your other modifier scripts.\r\n\r\nfunction bringJoy(string) {\r\n  return string.replace(/\\b(sad|angry)\\b/g, 'happy')\r\n}\r\n",
                        "onModelContext": "\r\n// Checkout the repo examples to get an idea of other ways you can use scripting\r\n// https://github.com/latitudegames/Scripting/blob/master/examples\r\n\r\n// info.memoryLength is the length of the memory section of text.\r\n// info.maxChars is the maximum length that text can be. The server will truncate the text you return to this length.\r\n\r\n// This modifier re-implements Author's Note as an example.\r\nconst modifier = (text) => {\r\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : ''\r\n  const context = info.memoryLength ? text.slice(info.memoryLength) : text\r\n  const lines = context.split(\"\\n\")\r\n  if (lines.length > 2) {\r\n    // Uncomment to use this!\r\n    // const authorsNote = \"Everyone in this story is an AI programmer.\"\r\n    // lines.splice(-3, 0, `[Author's note: ${authorsNote}]`)\r\n  }\r\n  // Make sure the new context isn't too long, or it will get truncated by the server.\r\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength))\r\n  const finalText = [contextMemory, combinedLines].join(\"\")\r\n  return { text: finalText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [
                        {
                                "publicId": "92b9a810-a0a9-11eb-bf24-139d1565e768",
                                "title": "Create character",
                                "createdAt": "2021-04-19T00:52:53.649Z"
                        },
                        {
                                "publicId": "d7cfd050-a0a9-11eb-bf6c-81a52787bef7",
                                "title": "Random character",
                                "createdAt": "2021-04-19T00:54:49.557Z"
                        },
                        {
                                "publicId": "f32f69a0-a0a9-11eb-bd0f-e1a6a438fcde",
                                "title": "Custom prompt",
                                "createdAt": "2021-04-19T00:55:35.482Z"
                        }
                ],
                "isOption": true
        },
        {
                "id": "1352920",
                "publicId": "4270e8f0-7007-11eb-81d7-515b04adcbc7",
                "published": false,
                "title": "Random character",
                "description": "This is a random scenario. The place where you'll start and your situation will be randomly generated, and you'll need to do what you can to get where you want to get to.",
                "tags": [],
                "createdAt": "2021-02-16T03:30:04.671Z",
                "updatedAt": "2021-04-07T23:31:04.623Z",
                "memory": "",
                "authorsNote": "[Genre: fantasy] [Writing style: narrative, roleplaying, gothic]",
                "mode": "creative",
                "prompt": "Your name is",
                "quests": [],
                "worldInfo": [
                        {
                                "id": "0.745118808720757",
                                "keys": "Ungvid,Jarl of Winterhold,Ruler of Winterhold",
                                "entry": "[ Ungvid description:< name ≡ Ungvid / Jarl Ungvid>/< age  ≡ 62y>/< ♂>/<race ≡ Nord>. Ungvid appearance:< body ≡ 179cm_height/ 65kg_weight/ slim/ slender/ full beard/ long hair/ dark blonde hair>. Ungvid mental:< stubborn/ serious/ arrogant/ prepotent/ pretentious>. Ungvid moniker:< Ruler of Winterhold>. Ungvid traits:< arrogant/ pretentious/ stubborn>. Ungvid speech:< harsh& deep voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.47441051249600963",
                                "keys": "Yolanda,Jarl of Whiterun,Ruler of Whiterun",
                                "entry": "[ Yolanda description:< name ≡ Yolanda/ Jarl Yolanda>/< age ≡ 30y>/< ♀>/<race ≡ Nord>. Yolanda appearance:< body ≡ slim/ 178cm_height/ 50kg_weight/ blonde hair/ blue eyes/ small breasts>. Yolanda mental:< party animal& happy& likes the nightlife& likes having fun& fools around>. Yolanda moniker:< Ruler of Whiterun>. Yolanda traits:< naughty/ dirty/ manipulative>. Yolanda speech:<sweet voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.21837675048437033",
                                "keys": "Argo,Jarl of Riften,Jarl of the Rift,Ruler of Riften,Ruler of the Rift",
                                "entry": "[Argo description:< name ≡ Argo / Jarl Argo>/< age  ≡ 57y>/< ♂>/<race ≡ Nord>. Argo appearance:< body ≡ 180cm_height/ 90kg_weight/ slim/ shaved beard/ bald head>. Argo mental:< arrogant& pedantic& self-righteous& tightly wound>. Argo moniker:< Ruler of the Rift/ Ruler of Riften>. Argo traits:< arrogant& pedantic& self-righteous>. Argo speech:< harsh& deep voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.2826822841965928",
                                "keys": "Vrage,Vrage the Gifted,King of Skyrim,High King of Skyrim,Jarl of Haafingar,Jarl of Solitude,Ruler of Haafingar,Ruler of Solitude,Ruler of Skyrim",
                                "entry": "[ Vrage description:< name ≡ Vrage / High King Vrage/ King Vrage/ Jarl Vrage/ Vrage the Gifted>/< age ≡ 42y>/< ♂>/<race ≡ Nord>. Vrage appearance:< body ≡ 198cm_height/ 80kg_weight/ tall/ muscular/ fair skin/ brown hair/ full beard>. Vrage mental:< assertive/ strong/ good leader/ loyal>. Vrage moniker:< High King of Skyrim/ King of Skyrim>. Vrage traits:< good leader/ loyal>. Vrage speech:< deep voice& heavy nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.456758676983456345758",
                                "keys": "Uror,Ruler of Falkreath,Jarl of Falkreath",
                                "entry": "[    Uror description:< name ≡ Uror / Jarl Uror/< age ≡ 55y>/< ♂>/<race ≡ Nord>.   Uror appearance:< body ≡ 180cm_height/ 75kg_weight/ tall/ muscular body/ red beard and hair>.   Uror mental:< courageous/ brave/ good humored/ optimistic/ intelligent/ talkative/ stubborn>.    Uror moniker:< Ruler of Falkreath>.    Uror traits:< courageous/ brave/ good humored>.    Uror speech:< deep voice& thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.9765384539248597",
                                "keys": "Katariah,Empress of Cyrodill,Empress of Tamriel,the Empress,the Emperor,Emperor of Tamriel,the Emperor",
                                "entry": "[  Katariah description:< name ≡ Katariah / Empress Katariah/ Katariah Ra'athim>/< age ≡ 38y>/< ♀>/<race ≡ Dunmer>. Katariah appearance:< body ≡ 170cm_height/ 40kg_weight/ slim/ slender/ hair< long& black>/ red eyes/ dark grey skin>. Katariah mental:< just/ smart/ clever/ fair/ happy/ calm>.  Katariah moniker:< Empress& Emperor of Cyrodiil& Tamriel>.  Katariah traits:< just/ smart/ clever/ fair/ happy>.  Katariah speech:< harsh& sweet& calm voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.6754768658567867",
                                "keys": "Atmor,Ruler of Eastmarch,Jarl of Eastmarch,Ruler of Windhelm,Jarl of Windhelm",
                                "entry": "[  Atmor description:< name ≡ Atmor / Jarl Atmor/< age ≡ 48y>/< ♂>/<race ≡ Nord>.  Atmor appearance:< body ≡ 180cm_height/ 75kg_weight/ tall/ muscular/ fit/ short dark blond hair>.  Atmor mental:< grumpy,sarcastic,hopeful,curious>.  Atmor moniker:< Ruler of Eastmarch& Windhelm>.  Atmor traits:< grumpy/ sarcastic/ hopeful/ curious>.  Atmor speech:< thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.498746768876574541654654",
                                "keys": "Bolgeir,Ruler of Markarth,Jarl of Markarth,Ruler of the Reach,Jarl of the Reach",
                                "entry": "[ Bolgeir description:< name ≡ Bolgeir / Jarl Bolgeir/< age ≡ 73y>/< ♂>/<race ≡ Nord>.  Bolgeir appearance:< body ≡ 174cm_height/ 70kg_weight/ tall/ muscular/ reddish hair/ beard>.  Bolgeir mental:< very brave and bold, rather arrogant, a natural leader>.  Bolgeir moniker:< Ruler of the Reach& Markarth>.  Bolgeir traits:< natural leader& very brave and bold>.  Bolgeir speech:< thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.57632498934634",
                                "keys": "Dagny,Ruler of the Pale,Jarl of the Pale,Ruler of Dawnstar,Jarl of Dawnstar",
                                "entry": "[  Dagny description:< name ≡ Dagny / Jarl Dagny/< age ≡ 58y>/< ♀>/<race ≡ Nord>.  Dagny appearance:< body ≡ 159cm_height/ 40kg_weight/ tall/ muscular/ fit/ short dark blond hair>.  Dagny mental:< courageous/ fearless/ brave/ friendly/ optimistic/ determined>.  Dagny moniker:< Ruler of Dawnstar& the Pale>.  Dagny traits:< friendly& optimistic>.  Dagny speech:< thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.76858732657834643564357",
                                "keys": "Thora,Ruler of Hjaalmarch,Jarl of Hjaalmarch,Ruler of Morthal,Jarl of Morthal",
                                "entry": "[  Thora description:< name ≡ Thora / Jarl Thora/< age ≡ 58y>/< ♂>/<race ≡ Nord>.  Thora appearance:< body ≡ 185cm_height/ 62kg_weight/ tall/ muscular/ athletic body/ blonde hair/ blue>.  Thora mental:< brave/ courageous/ strong-willed/ fearless/ adventurous/ determined>.  Thora moniker:< Ruler of Morthal& Hjaalmarch>.  Thora traits:< courageous/ strong-willed>.  Thora speech:< sweet voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.7072372796081579",
                                "keys": "gods, the gods, divines, nine divines",
                                "entry": "The Nine Divines:[TYPE<The Nine Divines>:religion;DESC<The Nine Divines>:the eight divines is the official pantheon of the empire. it worships the eight gods related to creation. these gods are  Akatosh/Arkay/Dibella/Julianos/Kynareth/Mara/Stendarr/Talos/and Zenithar..]",
                                "hidden": false
                        },
                        {
                                "id": "0.6041881392204211",
                                "keys": "akatosh,alkosh,auriel,auri-el",
                                "entry": "[ Akatosh description:< name ≡ Akatosh/ Alkosh/ Auri-El>/< age ≡ as old as time>/< gender ≡ genderless>.  Akatosh appearance:< body ≡ scaly/ big dragon>.  Akatosh mental:< benevolent& good& cryptic& mystic& insane>.  Akatosh occupation:< god of time/ chief god of the divines/ chief god of the imperial pantheon>.  Akatosh SUMM:< Akatosh is the dragon god of time, and the chief god in the Imperial Pantheon of the Divines. He is an Aedra. He is usually depicted as a dragon, and appears in all Tamrielic religions, though sometimes with different names>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.794449885354221",
                                "keys": "Arkay,Ark'ay,Lord of the Wheel of Life",
                                "entry": "Arkay:[TYPE<Arkay>:god;SPHERE<Arkay>:life and death/burials and funerals;DESC<Arkay>:Arkay is the god of burials and funeral rites/and is generally associated with cyclical occasions/such as the seasons and life and death. His priests are staunch opponents of necromancy and all forms of the undead/and are empowered to bestow Arkay's blessings which prevent the forceful misuse of a mortal soul. Thus/any body properly buried by a priest observing the proper rituals is protected by Arkay's Law from being raised as undead.Therefore/necromancers view Arkay as their ultimate enemy/and make covert efforts to undermine his worship throughout Tamriel. Because of this association with/and protection of/mortality/he is sometimes called the Mortals' God..]",
                                "hidden": false
                        },
                        {
                                "id": "0.8297917578640153",
                                "keys": "Dibella,Passion Dancer,Our Blessed Lady",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/love and affection;DESC<Dibella>:Dibella is the Goddess of Beauty/Love/and Affection. She is also acclaimed as the Lady of Love/Beauty/Art/and Music. Dibella is the Queen of Heaven/and is one of the Divines..]",
                                "hidden": false
                        },
                        {
                                "id": "0.06898112900599718",
                                "keys": "Julianos",
                                "entry": "Julianos:[TYPE<Julianos>:god;SPHERE<Julianos>:wisdom and logic;DESC<Julianos>:Julianos is one of the Divines/governing the realms of literature/law/history/and contradiction. He is usually associated with magic/and thus is often revered by wizards..]",
                                "hidden": false
                        },
                        {
                                "id": "0.8450550691624958",
                                "keys": "Kynareth ",
                                "entry": "Kynareth :[TYPE<Kynareth >:god;SPHERE<Kynareth >:heavens/the winds/the elements/and the unseen spirits of the air;DESC<Kynareth >:Kynareth is the goddess of the heavens/the winds/the elements/and the unseen spirits of the air. She is a member of the Divines and Patron of sailors and travelers. Kynareth is often invoked for auspicious stars at birth and for good fortune in daily life. In some legends/she is the first to agree to Lorkhan's divine plan to create the mortal plane/and provides the space in the void for its creation. Furthermore/she is associated with rain/a phenomenon that is said not to have occurred before the removal of Lorkhan's divine spark..]",
                                "hidden": false
                        },
                        {
                                "id": "0.11128933049439915",
                                "keys": "Mara,Mother Mara, Mother Mild",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love/fertility/compassion and agriculture;DESC<Mara>:Mara/also known as Mother Mara/Mother Mild/and the Divine Mother/is the Goddess of Love/Fertility/Agriculture/and Compassion. She is also acclaimed as the Mother-Goddess/and is one of the Divines..]",
                                "hidden": false
                        },
                        {
                                "id": "0.43928152447985225",
                                "keys": "Stendarr",
                                "entry": "Stendarr:[TYPE<Stendarr>:god;SPHERE<Stendarr>:mercy/charity/luck;DESC<Stendarr>:Stendarr/also known as Stendarr the Steadfast/is the God of Mercy/Charity/Well-Earned Luck/and Justice. He is also acclaimed as the God of Compassion/and Righteous Rule by Might and Merciful Forbearance. Stendarr is the Apologist of Men/patron of the Imperial Legion/magistrates/rulers/and knights errant/and one of the Divines..]",
                                "hidden": false
                        },
                        {
                                "id": "0.8211141194493385",
                                "keys": "Zenithar,Z'en,Provider of our Ease",
                                "entry": "Zenithar:[TYPE<Zenithar>:god;SPHERE<Zenithar>:Work and Commerce;DESC<Zenithar>:Zenithar/the God of Work and Commerce/the Provider of our Ease/is one of the Divines. The Trader God is frequently seen as the same deity as the Bosmeri god Z'en. In the Empire/however/Zenithar is considered a more cultivated god of merchants and middle nobility/being the deity of wealth/labor/commerce and communication..]",
                                "hidden": false
                        },
                        {
                                "id": "0.09888611188658047",
                                "keys": "Talos,Stormcrown,Ysmir,Dragon of the North",
                                "entry": "Talos:[TYPE<Talos>:god;SPHERE<Talos>:mankind/war/strength;DESC<Talos>:Talos is the most important hero-god of Mankind. In his mortal form/known as Tiber Septim/he conquered all of Tamriel and ushered in the Third Era (and the Third Empire). After death/his spirit ascended to the heavens to become the ninth and youngest divine/under the name given to him by the Nords: Talos. Also called Ysmir/'Dragon of the North'. One of the Nine Divines. Less prominent sects/such as the Talos Cult/have been inspired by his apotheosis..]",
                                "hidden": false
                        },
                        {
                                "id": "0.9530940012940066",
                                "keys": "nord religion,acient nord religion,traditional nord religion",
                                "entry": "Nord Religion:[TYPE<Nord Religion>:religion;DESC<Nord Religion>:The Ancient Nords worshiped Totems/that became gods with their own names after Ysgramor came back to Skyrim. Each of these Totems became a god of the nord pantheon. These animals were there the Snake/the Hawk/the Dragon/the Fox/the Whale/the Owl/the Bear/the Wolf and the Moth. Just by listening to which animals the nords worshiped/you might be able to guess which gods they represent..]",
                                "hidden": false
                        },
                        {
                                "id": "0.989329231849934",
                                "keys": "jhunal",
                                "entry": "Jhunal:[TYPE<Jhunal>:god;SPHERE<Jhunal>:knowledge/widsom/mathematics;DESC<Jhunal>:Jhunal is represented by the Owl. He is the Rune God/and represents language/mathematics/knowledge and wisdom. He became Julianos in the Imperial Pantheon/and orders dedicated to him became keepers of the Elder Scrolls..]",
                                "hidden": false
                        },
                        {
                                "id": "0.7248995633897974",
                                "keys": "kyne",
                                "entry": "Kyne:[TYPE<Kyne>:god;SPHERE<Kyne>:storms/mother god/wind;DESC<Kyne>:Kyne is the Hawk/and is out goddess of storms/the mother of all Nords. Kyne created the Nords atop the Snow Throat/and sent us to Altmora to fight against the elves. She is the wife of Shor/the nord Chief of Gods. With her aid/the Nords of old managed to learn to speak as dragons The Tongues and the Greybeards were created with her and because of her/to fight against the tyranny of Alduin. The Thu'um spoken by the dragons is roughly translated to Tamrielic as \"Storm Voice\"/in a reference to her. | Even the dragons acknowledge her/and call her Kaan. When Nords die/Kyne leads us to rest in Sovngarde..]",
                                "hidden": false
                        },
                        {
                                "id": "0.022990195127124524",
                                "keys": "orkey",
                                "entry": "Orkey:[TYPE<Orkey>:god;SPHERE<Orkey>:death;DESC<Orkey>:Orkey is the Snake/and is the God of Death. He is a Testing God. Nords used to live as long as elves in the times of old. Orkey summoned Alduin/and the lifespan of the nords was eaten down to six years old/or \"bound them to the count of winters\" as the saying goes. High King Ysmir Wulfharth/who was turned into a boy/pleaded to Shor for help. Shor fought Alduin in Sovngarde/just as he did before Time had begun/and won the battle. | Most of the curse was thrown onto the nearby Orcs who worshiped Orkey as their patron. It was during this battle that Ysmir learned to use the Thu'um. Unfortunately/this battle cost his life. | In the Imperial Pantheon/Orkey became Arkay/the God of Life..]",
                                "hidden": false
                        },
                        {
                                "id": "0.3151155897995812",
                                "keys": "shor",
                                "entry": "Shor:[TYPE<Shor>:god;SPHERE<Shor>:humankind/chief god;DESC<Shor>:Shor is the Fox/and is the Chief God of the nord pantheon. He's the husband of Kyne/and is the patron of mankind. The old Imperial religion knows him as Shezarr/while Bretons call him Sheor. He might also be known as Doom Drum/Sep/Lorkhan/Lorkh and Lorkhaj by other races. Shor/Stuhn and Tsun led the Nords against the elven armies of Auri-El and Trinimac in Atmora/in a war known as the War of Manifest Metaphors. After the war ended/the Nords settled there. This led to the death of Shor and Tsun. Trinimac tore out Shor's heart and hid it from the Nords/so the nords would never get their Chief God back..]",
                                "hidden": false
                        },
                        {
                                "id": "0.06384271959154919",
                                "keys": "mara",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love;DESC<Mara>:Mara is the Wolf. She's the goddess of love/and is the handmaiden of Kyne. When Alessia took the Nord Pantheon and modified it/she kept Mara as the goddess of love. But for the Empire/she is a matron goddess. The Nords know her as Kyne's handmaiden..]",
                                "hidden": false
                        },
                        {
                                "id": "0.03891031103246201",
                                "keys": "dibella",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/art/music;DESC<Dibella>:Dibella is the Moth/and she represents beauty/art and music. Some claim she was the mistress of Shor/but some believe that to be heresy. She is still worshiped in the Empire/but some places think her cult to be vulgar and inappropriate. That is also heresy to some..]",
                                "hidden": false
                        },
                        {
                                "id": "0.3226602575939199",
                                "keys": "tsun",
                                "entry": "Tsun:[TYPE<Tsun>:god;SPHERE<Tsun>:adversity;DESC<Tsun>:Tsun is the Bear/and is the God of Adversity. He died during the War of Manifest Metaphors while protecting Shor/and his death is remembered as the beginning of the current world. He guards the Whalebone Bridge in Sovngarde/and only lets those worthy to pass the bridge and go into the Hall of Valor. He had great respect for magic/and was a master of the Voice..]",
                                "hidden": false
                        },
                        {
                                "id": "0.08577198333505698",
                                "keys": "Stuhn",
                                "entry": "Stuhn:[TYPE<Stuhn>:god;SPHERE<Stuhn>:random/justice;DESC<Stuhn>:Stuhn is the Whale/and is the God of Ransom and Justice. He was the shield-thane of Shor/and brother of Tsun. He fought in the war against the ancient elves in Altmora/but lost his brother Tsun in the process. In the Imperial Pantheon/he became Stendarr..]",
                                "hidden": false
                        },
                        {
                                "id": "0.7877515302308626",
                                "keys": "hermaeus mora, hermorah, herma-mora",
                                "entry": "[ Hermaeus Mora description:< name ≡ Hermaeus Mora/ Herma-Mora/ Hermorah>/< age ≡ unknown>/< genderless>.  Hermaeus Mora summ:< Usually referred to as a male, his plane of Oblivion is Apocrypha>.  Hermaeus Mora appearance:< body ≡ tentacles/ many eyes/ floating monster/ wretched abyss/ dark purple vortex>.  Hermaeus Mora mental:< smart& intelligent& knows all& possessive& manipulative& arrogant& deceiver>. Hermaeus Mora occupation:< god of knowledge/ daedric prince of knowledge>. Hermaeus Mora traits:< arrogant/ prepotent/ manipulative>.  Hermaeus Mora speech:< telepathy>.  Hermaeus Mora abilities:< knowing all>/< manipulation>/< mind puppeteer>/< controlling people>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.798461458",
                                "keys": "sheogorath,daedric prince of madness,god of madness",
                                "entry": "[    Sheogorath description:< name ≡ Sheogorath>/ < age ≡ old as time>.   Sheogorath summ:< Usually referred to as a male, his plane of Oblivion is the Shivering Isles>.   Sheogorath appearance:< body ≡ 162cm_height/ 60kg_weight/ slim/ thin/ hair< greying& short>/ eyes< cat-like& light brown>/ full greying beard>.    Sheogorath mental:< crazy/ insane/ funny/ jokester/ sarcastic/ mad>.    Sheogorath moniker:< Daedric Prince of Madness/ God of Madness>.    Sheogorath traits:< sarcastic& crazy>.   Sheogorath speech:< thick accent>. ]",
                                "hidden": false
                        },
                        {
                                "id": "0.5441",
                                "keys": "boethiah,boethia,boethra",
                                "entry": "[ Boethiah description:< name ≡ Boethiah& Boethia& Boethra>/< age ≡ primeval>. Boethiah summary:< appears ≡ female>/< location ≡ Realm of Boethia>. Boethiah appearance:< any form she wants>. Boethiah mental:< arrogant& prepotent& bossy& pedantic& sarcastic>. Boethiah occupation:< Daedric Prince of Plots/ God of Plots>. Boethiah speech:< commanding>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.88748",
                                "keys": "clavicus vile,vile,clavicus",
                                "entry": "[ Clavicus Vile description:< name ≡ Clavicus Vile& Vile>/< age ≡ primeval>. Clavicus Vile summary:< appears ≡ male>/< location ≡ The Fields of Regret>/< almost always with his hound Barbas by his side>. Clavicus Vile appearance:< skin ≡ yellow>/< long black horns>/< eyes ≡ red>. Clavicus Vile mental:< jokester& sarcastic& trickster& manipulative>. Clavicus Vile occupation:< Daedric Prince of Trickery and Bargains/ God of Trickery and Bargains>. Clavicus Vile speech:< mocking tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.78511",
                                "keys": "barbas,hound of clavicus vile",
                                "entry": "[ Barbas description:< name ≡ Barbas>/< age ≡ primeval>. Barbas summary:< appears ≡ male>/< location ≡ The Fields of Regret>/< almost always with his owner Clavicus Vile>. Barbas appearance:< skin ≡ yellow>/< long black horns>/< eyes ≡ red>/< most times appears in the form of a dog>. Barbas mental:< jokester& sarcastic& trickster& manipulative>. Barbas occupation:< Hound of Clavicus Vile>. Barbas speech:< mocking tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.874111",
                                "keys": "meridia,merid-nunda",
                                "entry": "[ Meridia description:< name ≡ Meridia& Merid-Nunda>/< age ≡ primeval>. Meridia summary:< appears ≡ female>/< location ≡ The Colored Rooms>/< considers the undead and such aberrations>. Meridia appearance:< height ≡ 162cm>/< weight ≡ 60kg& slim& thin>/< skin ≡ pale>/< hair ≡ shoulder_length& dark brown>/< eyes ≡ dark brown>. Meridia mental:< arrogant& pedantic& bossy>. Meridia occupation:< Daedric Prince of Light and Life>. Meridia speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.9964572",
                                "keys": "mehrunes,dagon,merrunz",
                                "entry": "[ Mehrunes Dagon description:< name ≡ Mehrunes Dagon& Merrunz& Dagon& Mehrunes>/< age ≡ primeval>. Mehrunes Dagon summary:< appears ≡ male>/< location ≡ The Deadlands>. Mehrunes Dagon appearance:< skin ≡ red>/< hair ≡ shaved>/< eyes ≡ red>/< gigantic form with four arms and muscular figure>. Mehrunes Dagon mental:< arrogant& pedantic& violent>. Mehrunes Dagon occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Mehrunes Dagon speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.45454177",
                                "keys": "sanguine",
                                "entry": "[ Sanguine description:< name ≡ Sanguine>/< age ≡ primeval>. Sanguine summary:< appears ≡ male>/< location ≡ The Deadlands>. Sanguine appearance:< skin ≡ jet_black>/< hair ≡ black& long>/< eyes ≡ black>/< long black horns& pointed ears>. Sanguine mental:< nice& drunk& funny>. Sanguine occupation:< Daedric Prince of Revelry and Debauchery>. Sanguine speech:< drunk& nice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5787786326537",
                                "keys": "molag bal,bal",
                                "entry": "[ Molag Bal description:< name ≡ Molag Bal& Bal>/< age ≡ primeval>. Molag Bal summary:< appears ≡ male>/< location ≡ Coldharbour>/< almost always wielding his mace>. Molag Bal appearance:< skin ≡ blue-grey>/< hair ≡ shaved>/< eyes ≡ neon blue>/< body ≡ extremely muscular>/< horns coming out of his ears>. Molag Bal mental:< arrogant& pedantic& violent& sadistic>. Molag Bal occupation:< Daedric Prince of Domination and Enslavement>. Molag Bal speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.57856537",
                                "keys": "mephala,mafala",
                                "entry": "[ Mephala description:< name ≡ Mephala& Mafala>/< age ≡ primeval>. Mephala summary:< appears ≡ female>/< location ≡ Spiral Skein>. Mephala appearance:< skin ≡ dark grey>/< hair ≡ long& black>/< eyes ≡ red>/< she may also take the form of a spider>. Mephala mental:< arrogant& pedantic& belittling>. Mephala occupation:< Daedric Prince of Duality, Sex and Murder, Truth and Falsehood>. Mephala speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.578666537",
                                "keys": "Malacath,Malauch,Mauloch,Malak,Orkey,Orkha,Malooc",
                                "entry": "[ Malacath description:< name ≡ Malacath& Malauch& Mauloch& Malak& Orkey& Orkha& Malooc>/< age ≡ primeval>. Malacath summary:< appears ≡ male>/< location ≡ Ashpit>. Malacath appearance:< skin ≡ grayish-green>/< hair ≡ shaved>/< body ≡ extremely muscular/ looks like an orc>. Malacath mental:< stubborn& arrogant& violent>. Malacath occupation:< Daedric Prince of the Bloody Oath, Flesh and Bone>. Malacath speech:< commanding>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8687678",
                                "keys": "hircine",
                                "entry": "[ Hircine description:< name ≡ Hircine>/< age ≡ primeval>. Hircine summary:< appears ≡ male>/< location ≡ Hunting Grounds>. Hircine appearance:< skin ≡ pale>/< eyes ≡ red>/< has the head of a horned elk>. Hircine mental:< values hunters and bravery& >. Hircine occupation:< Daedric Prince of the Hunt>. Hircine speech:< commanding tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.578634537",
                                "keys": "nocturnal,noctra",
                                "entry": "[ Nocturnal description:< name ≡ Nocturnal& Noctra >/< age ≡ primeval>. Nocturnal summary:< appears ≡ female>/< location ≡ Evergloam>. Nocturnal appearance:< skin ≡ pale>/< hair ≡ long& black>. Nocturnal wearing:< long dark blue dress with cleavage and a hood>. Nocturnal mental:< arrogant& pedantic>. Nocturnal occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Nocturnal speech:< pretentious& arrogant>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5788766535437",
                                "keys": "peryite,taskmaster",
                                "entry": "[ Peryite description:< name ≡ Peryite& Taskmaster>/< age ≡ primeval>. Peryite summary:< appears ≡ male>/< location ≡ Realm of Peryite>. Peryite appearance:< usually takes the form of a four-legged dragon>. Peryite mental:< sadistic& pestilent>. Peryite occupation:< Daedric Prince of Pestilence>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5786537",
                                "keys": "jyggalag",
                                "entry": "[ Jyggalag description:< name ≡ Jyggalag>/< age ≡ primeval>. Jyggalag summary:< appears ≡ male>/< location ≡ Jyggalag's Realm>/< is the antithesis of Sheogorath>. Jyggalag appearance:< has the form of a humanoid made of shiny silver crystals>. Jyggalag mental:< arrogant& obsessive& pretentious>. Jyggalag occupation:< Daedric Prince of Order>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.3364947531043463",
                                "keys": "skyrim, province of skyrim, land of the nords, home of the nords",
                                "entry": " Skyrim:[ CLIMATE< Skyrim>: snowy and freezing to the north/ temperate and warm to the south/ tundras to the west/ deep woods to the south/ grasslands in the center/ temperate to the east; GEOGRAPHY< Skyrim>: mountainous/ full of valleys/ rivers/ forests/ woods/ wildlife; DESC< Skyrim>: The current ruler& high king of skyrim is Vrage. Homeland of the nords/ province of the empire/ high king is the title of the ruler/ solitude is the capital city/ is divided into nine holds/ each hold is governed by a jarl/ jarl is the ruler of a hold.]",
                                "hidden": false
                        },
                        {
                                "id": "0.4958877490012459",
                                "keys": "Whiterun Hold",
                                "entry": " Whiterun Hold:[ CLIMATE< Whiterun Hold>: temperate/ warm; GEOGRAPHY< Whiterun Hold>: grassy tundras/ white river/ open fields; DESC< Whiterun Hold>: The current ruler& jarl of whiterun is Yolanda. Whiterun Hold is the centermost hold of Skyrim/ being located right in the middle of the province. It borders the Rift/ the Pale/ Falkreath and Hjaalmarch. It is home to the ancient town of Rorikstead/ as well as the small town of Riverwood. The city of Whiterun is the capital of the hold/and is known as the economic capital of Skyrim due to its proximity to the Cyrodiil border.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8858901310060372",
                                "keys": "Whiterun,Whiterun City,City of Whiterun",
                                "entry": " Whiterun:[ CLIMATE< Whiterun>: temperate/ warm; GEOGRAPHY< Whiterun>: on top of a hill/ big city; DESC< Whiterun>: The current ruler& jarl of whiterun is Yolanda. Whiterun is one of the richest cities in Skyrim/ and one of the oldest. It is located in the Whiterun Hold/ and is known for Jorrvaskr and the Skyforge/ both locations being known from ancient times/ in the Merethic Era when Ysgramor himself arrived in Tamriel. It is also known for Dragonsreach/ the city castle and Jarl's palace. Dragonsreach was built to trap dragons/ and there is the skull of a dragon on top the Jarl's throne. The city is divided into three districts: the Plains District/ where commerce is located/as well as the inn and the market square. The Winds District/ where houses and the temple are located/ as well as the entrance to Jorrvaskr and the Skyforge. The Cloud District/ where Dragonsreach is located.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5565239795951209",
                                "keys": "the rift,rift hold",
                                "entry": " The Rift:[ CLIMATE< The Rift>: temperate/ warm/ sunny; GEOGRAPHY< The Rift>: temperate woods/ grasslands/ mountainous; DESC< The Rift>: The current ruler& jarl of the Rift is Argo. The rift is a beautiful place/ a warm place/ mountainous/ home to lake honrich/ the capital of the rift is riften/ yellow and beautiful trees/ beautiful lake/ beautiful sights/ jerall mountains to the south/ velothi mountains to the east/ borders morrowind to the east/ borders cyrodiil to the south.]",
                                "hidden": false
                        },
                        {
                                "id": "0.29560338203552283",
                                "keys": "riften,city of riften",
                                "entry": " Riften:[ CLIMATE< Riften>: temperate/ warm/ sunny; GEOGRAPHY< Riften>: temperate woods/ grasslands/ mountainous/ fishing port at lake honrich; DESC< Riften>: The current ruler& jarl of Riften is Argo. Riften is a beautiful fishing city/ a big city/ capital of the rift/ capital of the rift hold/ the mad mammoth is the local inn/ the mad mammoth is the local tavern/ the city is dedicated to the goddess mara/ the temple of mara is located in riften.]",
                                "hidden": false
                        },
                        {
                                "id": "0.7557881723928688",
                                "keys": "winterhold, city of winterhold, winter hold",
                                "entry": " Winterhold:[ CLIMATE< Winterhold>: polar/ cold/ freezing/ snowy; GEOGRAPHY< Winterhold>: rocky/ mountainous/ frozen mountains/ coastal; DESC< Winterhold>: The current ruler& jarl of Winterhold is Ungvid. Winterhold is a cold place/ full of mountains/ home to the college of winterhold/ fronzen hearth is the local inn/ frozen hearth is the local tavern/ sea of ghosts to the north/ jarl is the title of the ruler.]",
                                "hidden": false
                        },
                        {
                                "id": "0.465198479866984165",
                                "keys": "Falkreath,Falkreath Hold",
                                "entry": " Falkreath:[  CLIMATE< Falkreath>: temperate/ sunny/ rainy/ rainforest climate;  GEOGRAPHY< Falkreath>: Falkreath lies in the southern forests of Skyrim, on a strategic crossroad in the middle of its respective hold and the provincial border towards Hammerfell's wilder country, the Dragon's Teeth Mountains, and with Cyrodiil through the Pale Pass in the Jerall Mountains. Home of Skyrim's famous Pine Forest, Falkreath Hold is covered in a fine mist that makes the land seem without season. It borders the Skyrim holds of Whiterun, the Reach and the Rift.; DESC< Falkreath>: Uror is the current Jarl of Falkreath. It is a city that is heavily reliant to the lumber industry, due to the abundance of resources around them.; ]",
                                "hidden": false
                        },
                        {
                                "id": "0.65374578856786794567456437",
                                "keys": "the reach",
                                "entry": " The Reach:[  CLIMATE< The Reach>: temperate/ sunny/ warm/ hot;  GEOGRAPHY< The Reach>: Near the southwestern corner, the capital Markarth, formerly a Dwemer stronghold, emerges from the living rock of the Druadach Mountains, which transition into the Jerall Mountains near the hold's southeast corner. The Karth River begins in the southern region and drains the mountains, running like a deep gouge through the middle of the hold called the Karth River Canyon. The peaks of the Druadach range lie to the west of it, and high bluffs typically rise on the east leading to grassland and tundra;  DESC< The Reach>: Bolgeir is the current Jarl of the Reach. The Reach is the westernmost hold of Skyrim, bordering the provinces of Cyrodiil, Hammerfell and High Rock. It is a vast tundra made of grasslands, and is famous because the Karth River begins here before passing through Haafingar and connecting to the See of Ghosts in the north. The native people of the Reach are known as Reachmen.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.48569468597795675",
                                "keys": "markarth,city of stone,markarth side",
                                "entry": " Markarth:[  CLIMATE< Markarth>: temperate/ sunny/ warm/ hot;  GEOGRAPHY< Markarth>: Nestled in the river valley of the Druadach Mountains. It is unique in that the city's layout is intricately built into the mountain of Karthmad, dividing the city into two districts. The northern end, Dryside has streets that ascend above each other with well-refined homes, below the main square and marketplace where the populace tend to congregate. The city's southern end is the Riverside, the basin populated by the lower-class and the bustling silver mines. These districts meet each other at either end of the city, at the main gates on the east side, while on the west side, they ascend high towards the top of the crag and at Understone Keep, which contains the Mournful Throne, the seat of power in the Reach.; DESC< Markarth>: Bolgeir is the current Jarl of Markarh. Markarth is one of the nine major cities in the province of Skyrim, found in the river valley of the Reach. Known colloquially as the Ci",
                                "hidden": false
                        },
                        {
                                "id": "0.984516878451",
                                "keys": "the pale",
                                "entry": "The Pale:[  CLIMATE< The Pale>: cold& snowy/ freezing;  GEOGRAPHY< The Pale>: It stretches from the center of Skyrim all the way to its Northern Coast. Dominated by ice fields and glacial deposits, especially along its northern shore, some scattered ragged peaks, snow-covered ground, and little sunshine means most of the Nords congregate at the city of Dawnstar, a popular port and mining town.The Pale lacks waterways, save for Lake Yorgrim, located in the southeastern corner of the Hold.;  DESC< The Pale>: Dagny is the current Jarl of the Pale. The Pale, named for the pallid Tundra and pigmentation of its Nord inhabitants, is one of the four oldest Holds in Skyrim. The harsh environment here makes life a chore rather than a joy, and the shape of the Hold has led some to refer to it as “the old boot.”;]",
                                "hidden": false
                        },
                        {
                                "id": "0.1654984165468746878945123546854745311234",
                                "keys": "dawnstar",
                                "entry": " Dawnstar:[  CLIMATE< Dawnstar>: cold& snowy/ freezing;  GEOGRAPHY< Dawnstar>: The city has two mines, Iron-Breaker Mine and Quicksilver Mine, which supply iron and quicksilver respectively. It is home to many fishermen and is an important port.;  DESC< Dawnstar>: Dagny is the current Jarl of Dawnstar. Dawnstar is a settlement on the northern coast of Skyrim, and the hold capital of the Pale. t was once a garrison town, which served as an exile post due to the cold harsh climate and notorious gales. The settlement seemingly got its name due to its reputation for greeting the sun as it begins its journey.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.465167984",
                                "keys": "Hjaalmarch",
                                "entry": " Hjaalmarch:[  CLIMATE< Hjaalmarch>: temperate/ warm/ hot;  GEOGRAPHY< Hjaalmarch>: Roughly half the hold consists of the Drajkmyr marsh, although some farms dot the tundra. The region is veined with waterways that empty into the Sea of Ghosts, and the Skyborn Range further isolates the area from the east and southern border. Hjaalmarch is home to the Karth delta where the mighty Karth River and the smaller River Hjaal empty into the Sea of Ghosts through a variety of intricate channels.  The Deathbell flower is known to be abundant throughout the swamps.;  DESC< Hjaalmarch>: Thora is the current Jarl of Hjaalmarch. Hjaalmarch, or Hjaalmarch Hold, is a lowland coastal hold in Skyrim. Morthal is the capital and the only settlement in the hold. Combined with the fog that surrounds the marshes and the creatures that stalk the land (Wispmothers purportedly originated here), Hjaalmarch is considered one of the more mysterious holds in Skyrim. Many ruins dot the hold, including the legendary",
                                "hidden": false
                        },
                        {
                                "id": "0.65849879/84541",
                                "keys": "morthal",
                                "entry": " Morthal:[  CLIMATE< Morthal>: temperate/ warm/ hot;  GEOGRAPHY< Morthal>: swamps, rivers, marsh;  DESC< Morthal>: Thora is the current Jarl of Morthal. Morthal, supposedly named after the great Nord hero Morihaus, is the capital of Hjaalmarch, although it is a fairly small, humble town of little economic or strategic importance besides its small lumber mill. The town's symbol is a green triskelion.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.97894615",
                                "keys": "eastmarch",
                                "entry": " Eastmarch:[  CLIMATE< Eastmarch>: freezing cold in the north/ temperate and warm in the south near the water springs;  GEOGRAPHY< Eastmarch>: Darkwater River winds north from Lake Geir into this treacherous hot spot, where it meets the White River which then drains into the Sea of Ghosts as it passes Windhelm. The Skyrim part of the Velothi mountains are in Eastmarch.  Windhelm is the only sizable city in the otherwise rural province due to the expansive hot springs which dominate the hold.;  DESC< Eastmarch>: Atmor is the current Jarl of Eastmarch. Eastmarch is the eastern hold of Skyrim, and one of the four known collectively as the Old Holds. As its name suggests, it lies against the province's eastern border, close to the Dunmeth Pass, the only passage to and from Morrowind in the area due to the high and rugged Velothi Mountains.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.587486516",
                                "keys": "windhelm",
                                "entry": " Windhelm:[  CLIMATE< Windhelm>: cold/ freezing/ snowy;  GEOGRAPHY< Windhelm>: city build from stone, its entrance bridge above the White River;  DESC< Windhelm>: Atmor is the current Jarl of Windhelm. Windhelm is a city in northeastern Skyrim, close to the border with Morrowind, and is the only substantial city in the Hold of Eastmarch. It is not only the oldest city in Skyrim, but is the oldest continuously inhabited human settlement in Tamriel.Windhelm was once the capital of the First Empire of the Nords and the old palace of the Ysgramor dynasty, the Palace of the Kings, still stands in the center of the city.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.5297422967695256",
                                "keys": "Haafingar,haafingar hold",
                                "entry": "Haafingar:[CLIMATE<Haafingar>:temperate and warm and sunny to the south/cold to and frozen to the north;GEOGRAPHY<Haafingar>:mountainous/karth river cuts the hold and goes out in the sea of ghosts to the north/kilkreath mountain/druadach mountains;DESC<Haafingar>:haafingar is currently the imperial seat in skyrim/solitude is the capital city of haafingar/solitude is the capital of skyrim/dragon bridge is a settlement south of solitude/the kilkreath temple is a temple dedicated to the daedric prince meridia/kilkreath temple has a huge statue of meridia/kilkreath temple is south of solitude/haafingar borders high rock to the west.]",
                                "hidden": false
                        },
                        {
                                "id": "0.059520193664433174",
                                "keys": "solitude,city of solitude",
                                "entry": "Solitude:[CLIMATE<Solitude>:temperate and warm and sunny to the south/cold to and frozen to the north;GEOGRAPHY<Solitude>:mountainous/karth river cuts the hold and goes out in the sea of ghosts to the north/kilkreath mountain/druadach mountains;DESC<Solitude>:solitude is a big city/solitude is the capital of skyrim/solitude has a huge keep called castle dour/solitude has the biggest temple in skyrim that is dedicated to the nine divines/the seat of the king in solitude is the blue palace/solitude is located on top of a huge stone arch/solitude port is the most important port in skyrim and goes out to the sea of ghosts/the east empire company headquarters in skyrim is located in solitude.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5734576345345",
                                "keys": "bards college,college of bards",
                                "entry": " Bards College: { < The Bards College is an ancient institution dedicated to the formation of the arts>, < It is the most prestigious school of art in Tamriel, and the most ancient>, < It was founded some time in the First Era, during the reign of High King Olaf>, < Most of the best bards and painters in the history of Tamriel have studied here>, < It is a very prestigious academy of art located in the city of Solitude> }",
                                "hidden": false
                        },
                        {
                                "id": "0.547564756867876575467",
                                "keys": "antiquarians circle,antiquarian circle",
                                "entry": " Antiquarians Circle: { < The Antiquarians Circle is the name of the campus of the University of Gwyllim that is dedicated to the study of History, Archaelogy and Paleontology, and is located in the city of Solitude>, < It is one of the most prestigious institutions of education in Tamriel, and many of the most prestigious historians and archaelogists studied at the Antiquarians Circle>, < It is located in the city of Solitude, while the other campi of the Unviersity of Gwyllim are located in Cyrodiil> }",
                                "hidden": false
                        },
                        {
                                "id": "0.4936504478941153",
                                "keys": "college of winterhold",
                                "entry": "College of Winterhold:[TYPE<College of Winterhold>:guild/university/school/academy/college/guild of mages/college of mages/arcane school/university for learning magic/school of magic;LOCATION<College of Winterhold>:Winterhold;LEADER TITLE<College of Winterhold>:Arch-Mage;VICE LEADER TITLE<College of Winterhold>:Master Wizard;CITY<College of Winterhold>:Winterhold;REGION<College of Winterhold>:Winterhold;DESC<College of Winterhold>:the college of winterhold is a school of magic/the leader of the college has the title of arch-mage/the vice-leader has the title of master wizard/it is a big building in the city of winterhold/it is a big construction/it is a big castle/it is a beautiful construction/the college is thousands of years old/the college was founded by arch-mage shalidor/the college is a famous school of magic.]",
                                "hidden": false
                        },
                        {
                                "id": "0.3756130377106148",
                                "keys": "Companions",
                                "entry": "[ Companions description:< leader_title ≡ harbinger/ details ≡ The Companions are a group of fighters that date back to the Merethic Era, and were founded by Ysgramor. They're the oldest guild in Tamriel, and their headquarters is Jorrvaskr, in the city of Whiterun. They do contracts for those willing to pay, and also fight for the good and for the honor of Skyrim when need be>. Companions headquarters< Jorrvaskr>. Companions location< The Companions are in the city of Whiterun. Their headquarters is the ancient ship of Ysgramor, called Jorrvaskr>. ]",
                                "hidden": false
                        },
                        {
                                "id": "0.8639915656760206",
                                "keys": "karth river",
                                "entry": "Karth River:[TYPE<Karth River>:river;LOCATION<Karth River>:haafingar/the reach;DESC<Karth River>:the karth river is a big river that starts in the reach and empties in haafingar/into the sea of ghosts. The Karth is well-known for its violent rapids and the dangerous terrain/such as jutted sharp stones and the crashing torrents on the river valley. But despite this/the Karth River provides a wealth of resource and life to the local people..]",
                                "hidden": false
                        },
                        {
                                "id": "0.13894551310988978",
                                "keys": "white river",
                                "entry": "White River:[TYPE<White River>:river;LOCATION<White River>:whiterun hold/eastmarch/falkreath;DESC<White River>:The White River is the longest river in Skyrim/stretching from the south of the province to the northeast corner. Its source is Lake Ilinalta/north of Falkreath. It flows northeast to join the Sea of Ghosts past Windhelm. Along the way/it passes through Riverwood and near Whiterun..]",
                                "hidden": false
                        },
                        {
                                "id": "0.5164146546794",
                                "keys": "Lake Geir",
                                "entry": " Lake Geir: {  < Lake Geir is a lake in the western Rift. Ivarstead is built on its western shores>,  < The lake is fed by Treva River and is drained by Darkwater River>,  < It is named after Archmage Geirmund, a First Era wizard who died nearby in a duel with Sigdis Gauldurson, the son of Archmage Gauldur>,  < A tomb for the Archmage can still be found on the largest island in the lake> }",
                                "hidden": false
                        },
                        {
                                "id": "0.5645",
                                "keys": "Lake Ilinalta",
                                "entry": " Lake Ilinalta: {  < Lake Ilinalta is a lake in west-central Falkreath Hold, in the middle of Skyrim's pine forest>,  < It is the source of the White River, and a notable Skyrim landmark. The town of Helgen was less than a day's ride to the southeast,[2] and the Hold's capital of Falkreath is directly south>,  < The Imperial Legion used to have a fort along its shore, until the entire facility mysteriously sank into the water in a single day>,  < According to local legend, the place is cursed and travelers are known to go missing> }",
                                "hidden": false
                        },
                        {
                                "id": "0.65777",
                                "keys": "Lake Yorgrim",
                                "entry": " Lake Yorgrim: {  < Lake Yorgrim is a lake in the eastern the Pale, to the west of Windhelm. It is the source of River Yorgrim>,  < In or around the time of the Dragon War, the dragon Viinturuth was killed and then interred in a burial mound near the shores of the lake> }",
                                "hidden": false
                        },
                        {
                                "id": "0.55577757",
                                "keys": "Darkwater River",
                                "entry": " Darkwater River: {  < Darkwater River, or simply the Darkwater, is a river in eastern Skyrim connecting Lake Geir to the White River>,  < Lake Geir drains into it at the western end of the Rift. The river flows northeast into Eastmarch, cascading down the famous cliff which divides the two holds>,  < After this series of pools and waterfalls, the river bends northwest, and merges with the White River a few miles downstream, south-southwest of Windhelm and west of the famous fetid swamps of Eastmarch>,  < The fishing is said to be good. A large tributary flows separately from Lake Geir>,  < It passes north through Ivarstead, then curves northeast and creates its own series of waterfalls down the cliff, then connects with Darkwater River in Eastmarch, which then merges shortly after with the White River and terminates> }",
                                "hidden": false
                        },
                        {
                                "id": "0.257272472742752",
                                "keys": "River Hjaal",
                                "entry": " River Hjaal: {  < The River Hjaal is the main river that flows through the center of Hjaalmarch in Skyrim>,  < Its headwaters are located in northwestern Whiterun Hold, in the highlands south of Morthal. After dropping down a series of waterfalls and entering Hjaalmarch, the river passes northeast through Morthal>,  < Then spreads out and drains into the Karth delta, the marshy area where the River Hjaal and the larger Karth River empty into the icy Sea of Ghosts through a variety of intricate channels>,  < Fishermen can collect a wide range of fish from the river> }",
                                "hidden": false
                        },
                        {
                                "id": "0.2573272",
                                "keys": "River Yorgrim",
                                "entry": " River Yorgrim: {   < The River Yorgrim is a short tributary in Skyrim which connects Lake Yorgrim to the White River>,   < It flows east out of the eponymous lake in the Pale and enters Eastmarch, dropping through a series of waterfalls and rapids until it merges with the White River near the entrance to Windhelm> }",
                                "hidden": false
                        },
                        {
                                "id": "0.5775757",
                                "keys": "Treva River",
                                "entry": " Treva River: {  < The Treva River is a small river at the center of the Rift in southeastern Skyrim>,  < It flows northwest from Lake Honrich to Lake Geir>,  < It was perhaps named after the eponymous founder of Treva's Farm on its eastern bank> }",
                                "hidden": false
                        },
                        {
                                "id": "0.534634564356",
                                "keys": " Jerall Mountains,Jeralls",
                                "entry": " Jerall Mountains: {  < The Jerall Mountains, also called the Jeralls, are a mountain range on the border between Cyrodiil and Skyrim>,  < They meet the Velothi and Valus Mountains at the Morrowind border, and the Dragontail Mountains at the Hammerfell border>,  < The Jeralls are rugged, steep, and inhospitable, with only a few traversable passes>,  < Of particular note is the Pale Pass, which was the site of the abrupt end to the First Akaviri Invasion in 1E 2703, after which its location was lost> }",
                                "hidden": false
                        },
                        {
                                "id": "0.8867098",
                                "keys": "Valus Mountains",
                                "entry": " Valus Mountains: {  < The Valus Mountains are a mountain range on the border between Cyrodiil and Morrowind>,  < They meet the Jerall Mountains at the Skyrim border. They are sometimes considered an extension of the Velothi Mountains> }",
                                "hidden": false
                        },
                        {
                                "id": "0.8674553",
                                "keys": "Dragontail Mountains",
                                "entry": " Dragontail Mountains: {   < The Dragontail Mountains are a mountain range in western Skyrim>,   < They are the limit of Skyrim's territory, where it borders Hammerfell>,   < On the other side of the Dragontail Mountains is the region of Hammerfell called Craglorn> }",
                                "hidden": false
                        },
                        {
                                "id": "0.744132532",
                                "keys": "Dragon's Teeth Mountains",
                                "entry": " Dragon's Teeth Mountains: {   < The Dragon's Teeth Mountains is an expansive mountain range that spans a large portion of western Tamriel>,   < stretching from the frozen summits of High Rock all the way to the forests of Valenwood, passing through Cyrodiil, Skyrim, and Hammerfell>,   < The Dragon's Teeth Mountains are found near the Nordic town of Falkreath> }",
                                "hidden": false
                        },
                        {
                                "id": "0.9878675",
                                "keys": "Druadach Mountains",
                                "entry": " Druadach Mountains: {   < The Druadach Mountains are a mountain range which separate western Skyrim and eastern High Rock and Hammerfell>,   < The misty peaks tower over Markarth and Karthwasten in the Reach, though they gradually diminish closer to Haafingar and Solitude>,   < The range curves around the Karth River, and nearly stretches into Falkreath Hold>,   < The mountains border the High Rock regions of Wrothgar and Bangkorai to the east> }",
                                "hidden": false
                        },
                        {
                                "id": "0.977844114",
                                "keys": "Velothi Mountains",
                                "entry": " Velothi Mountains: {  < The Velothi Mountains are the mountain range separating Morrowind from Skyrim>,  < They are named after the Chimer prophet Veloth who led the Chimer to leave their ancestral homes and resettle in Morrowind>,  < The mountains form the eastern border of the Skyrim regions of Eastmarch and The Rift>,  < At the southern tip of the mountain range, where it meets the Jerall and Valus Mountains> }",
                                "hidden": false
                        },
                        {
                                "id": "0.844l89474",
                                "keys": "Throat of the World,Snow Throat",
                                "entry": " Throat of the World: {   < The Throat of the World, also called Snow Throat, is the highest peak in the province of Skyrim>,   < Seven thousand steps lead up the mountain to its summit, where the settlement of High Hrothgar is located, where the Greybeards live their lives of absolute silence>,   < The legends of the Nords state that mankind was formed on the mountain when the sky breathed onto the land>,   < Many pilgrims travel to the mountain and climb the seven thousand steps to its peak> }",
                                "hidden": false
                        },
                        {
                                "id": "0.7741966482043361",
                                "keys": "Jorrvaskr",
                                "entry": " Jorrvaskr: { <Jorrvask is the meadhall that is home to the Companions in the city of Whiterun>, <Jorrvaskr is made from the boat that brought Ysgramor from Atmora to Tamriel>, <Jorrvaskr is made of wood, since it is a ship upside down> }",
                                "hidden": false
                        },
                        {
                                "id": "0.13524379575253298",
                                "keys": "Skyforge",
                                "entry": " Skyforge: { <The Skyforge is an ancient forge located in Whiterun>, <Only the blacksmith of the Companions is allowed to use it>, <It is said that the Skyforge is magical and this is the reason equipment made there is so good>, <It is said that the Skyforge was blessed by Kyne herself>, <There is a huge hawk statue on top of the Skyforge> }",
                                "hidden": false
                        },
                        {
                                "id": "0.7920305945087891",
                                "keys": "Dragonsreach,palace of the jarl",
                                "entry": " Dragonsreach: { <Dragonsreach is the palace of the Jarl of Whiterun, a huge castle on top of the hill where the city of Whiterun is located>, <Dragonsreach was build to trap dragons before they became extinct>, <It is said that a dragon called Numinex was trapped in Dragonsreach by High King Olaf One-Eye in the First Era>, <The skull of Numinex lies on top of the Jarl's throne until today> }",
                                "hidden": false
                        },
                        {
                                "id": "0.6546465498798",
                                "keys": "understone keep",
                                "entry": " Understone Keep:{  <Understone Keep is the seat of power in the Reach, located in the city of Markarth>,  <In ancient times, it used to be part of the Dwemer city of Nchuand-Zel, one of the many cities built by the Dwemer inside mountains and underground>,  <Because of this fact, the old name Nchuand-Zel stopped being used in favor of the new name, Understone Keep>,  <The Jarl of the Reach resides in Understone Keep>}",
                                "hidden": false
                        },
                        {
                                "id": "0.63464396745487985476",
                                "keys": "palace of the kings,palace of kings",
                                "entry": " Palace of the Kings:{   <The Palace of the Kings, known historically as the Palace of Ysgramor, is a large castle at the far end of the Valunstrad district in Windhelm>,   <It is one of the last remaining structures from the days of the First Empire of the Nords and is home to the hold's Jarl>,   <Ysgramor built the palace so as to tower over the city, showing man's dominion over the very winds that had caused Yngol's death on the voyage from Atmora>,   <It is made of stone blocks, in a unique architecture found only in Windhelm> }",
                                "hidden": false
                        },
                        {
                                "id": "0.818803105546712",
                                "keys": "riften inn,riften tavern,mad mammoth",
                                "entry": "The Mad Mammoth:[TYPE<The Mad Mammoth>:inn/bar/pub/tavern;OWNER<The Mad Mammoth>:andkvar;INHABITANTS<The Mad Mammoth>:Andkvar/Narca/Bujela/Freyte/Torbndir;LOCATION<The Mad Mammoth>:Riften;CITY<The Mad Mammoth>:Riften;DESC<The Mad Mammoth>:the mad mammoth is the local inn and tavern in riften/it is owned by andkvar/has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/andkvar lives here/narca lives here/bujela lives here/freyte lives here/torbndir lives here/five people live here;EXIT<The Mad Mammoth>:one exit goes out to riften in the market square/one exit goes to riften in the entrance bridge.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8251141022498825",
                                "keys": "winterhold inn, frozen hearth, winterhold tavern",
                                "entry": "The Frozen Hearth:[TYPE<The Frozen Hearth>:inn/bar/pub/tavern;OWNER<The Frozen Hearth>:Bjormar;INHABITANTS<The Frozen Hearth>:Bjormar/Astrid/Aengvir/Balor;LOCATION<The Frozen Hearth>:Winterhold;CITY<The Frozen Hearth>:Winterhold;DESC<The Frozen Hearth>:the frozen hearth is the local inn and tavern in winterhold/it is owned by Bjormar/it has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/balor lives here/Bjormar owns the place/astrid lives here/aengvir lives here/there are four people here/balor lives here;EXIT<The Frozen Hearth>:exit that goes out to the city of winterhold.]",
                                "hidden": false
                        },
                        {
                                "id": "0.3548538694560268",
                                "keys": "bloated goat, whiterun inn, whiterun tavern",
                                "entry": "The Bloated Goat:[TYPE<The Bloated Goat>:inn/bar/pub/tavern;OWNER<The Bloated Goat>:Isekaid;INHABITANTS<The Bloated Goat>:Isekaid/Sigrid;LOCATION<The Bloated Goat>:whiterun/city of whiterun;CITY<The Bloated Goat>:whiterun/city of whiterun;DESC<The Bloated Goat>:The Bloated Goat is the inn and tavern in the city of Whiterun/owned by Isekaid and his wife Sigrid. They both live at the inn/in their private room in the ground floor. The inn is a two story building with 10 rooms for rent.;EXIT<The Bloated Goat>:One main exit goes out to the Whiterun market square/located in the Plains District..]",
                                "hidden": false
                        },
                        {
                                "id": "0.13879806616371204",
                                "keys": "temple of kyne",
                                "entry": "Temple of Kyne:[TYPE<Temple of Kyne>:temple/church/cathedral;INHABITANTS<Temple of Kyne>:Irene/Mauricius/Nonnata;LOCATION<Temple of Kyne>:whiterun/city of whiterun;CITY<Temple of Kyne>:whiterun/city of whiterun;DESC<Temple of Kyne>:Temple dedicated to Kyne/the goddess of wind and air. It's the main temple to Kyne in Skyrim/located in the Winds District.;EXIT<Temple of Kyne>:One main exit goes out to the Whiterun tree square/located in the Winds District.]",
                                "hidden": false
                        },
                        {
                                "id": "0.21949257720023918",
                                "keys": "sigrid",
                                "entry": " Sigrid:[      DESC: nord/ female/ 38y/ 169cm/ 45kg/ born in riften/ inkeeper of the bloated goat;      WORN: green dress;      MIND: good& good humored& solidary& fun;  ]",
                                "hidden": false
                        },
                        {
                                "id": "0.40410765739865107",
                                "keys": "isekaid,innkeeper of bloated goat",
                                "entry": " Isekaid:[      DESC: nord/ male/ 40y/ 175cm/ 80kg/ born in rorikstead/ inkeeper of the bloated goat;      WORN: brown leather jerkin/ green breeches;      MIND: good& good humored& solidary& fun;  ]",
                                "hidden": false
                        },
                        {
                                "id": "0.33787729259857935",
                                "keys": "toli",
                                "entry": "Toli:[DESC<Toli>:male/40y/180cm/80kg/small and weak for a nord/fair skin/hazel eyes/light brown hair/meek/timid/kind hearted/naive/innocence/wants to run the best inn in all of skyrim/born in solitude;WORN<Toli>:brown tunic/dark brown hose;RACE<Toli>:nord;SUMMARY<Toli>:male/40y/180cm/80kg/small and weak for a nord/fair skin/hazel eyes/light brown hair/meek/timid/kind hearted/naive/innocence/wants to run the best inn in all of skyrim/born in solitude;MIND<Toli>:meek/timid/kind hearted/naive/innocence.]",
                                "hidden": false
                        },
                        {
                                "id": "0.643240642392414",
                                "keys": "winterhold innkeeper, winterhold bartender",
                                "entry": "Bjormar:[DESC<Bjormar>:male/185cm/muscular body/big arms/big hands/47y/auburn hair/short hair/hardworking/heavy nord accent;WORN<Bjormar>:brown jerkin/tight pants/leather shoes;RACE<Bjormar>:nord;SUMMARY<Bjormar>:nord/male/47y/born in winterhold/owner of the frozen hearth/innkeeper by trade/185cm/100kg;MIND<Bjormar>:good humor/funny/nice/jokester/dislikes argonians/dislikes elves/short fused;RELATIONS<Bjormar>:wife<astrid>/friend<aengvir>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.4517321761638551",
                                "keys": "winterhold innkeeper, winterhold bartender",
                                "entry": " Astrid:[DESC<Astrid>:female/180cm/60kg/thin body/small hands/small feet/thin/long hair/blonde hair/38y/heavy nord accent/hardworking/working class;WORN<Astrid>:white jerkin/tight pants/leather apron;RACE<Astrid>:nord;SUMMARY<Astrid>:nord/female/38y/born in windhelm/wife of Bjormar/married to Bjormar/owner of the frozen hearth/innkeeper by trade/180cm/60kg;MIND<Astrid>:shy/funny/quiet/dislikes elves/dislikes argonians;RELATIONS<Astrid>:husband<Bjormar>/friend<aengvir>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.044367797985053636",
                                "keys": "balor",
                                "entry": " Balor:[DESC<Balor>:male/170cm/fat body/big hands/hardworking/heavy nord accent/26y/120kg/toupet hair/dark brown hair;WORN<Balor>:blue mage robes;RACE<Balor>:nord;SUMMARY<Balor>:nord/male/26y/170cm/120kg/born in whiterun/member of the college of winterhold/mage/wizard/middle class;MIND<Balor>:smart/intelligent/serious/funny/technical/nice/polite/educated.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8083626610017034",
                                "keys": "mélanie,arch-mage,arch mage,archmage",
                                "entry": " Mélanie:[DESC:breton/female/60y/165cm/40kg/arch-mage of the college of winterhold;APPE:thin/delicate/stunning/blue eyes/light brown hair/long straight hair;WORN:blue master wizard robes/fur collar/fur hood/gold diamond necklace/leather gloves/leather boots;MIND:serious/smart/intelligent/strategic/technical/well read;SUMM:friend<ahmad/rostfa/ungvid>;]",
                                "hidden": false
                        },
                        {
                                "id": "0.6864424343697011",
                                "keys": "ahmad,master wizard of winterhold",
                                "entry": " Ahmad:[DESC:redguard/male/42y/172cm/80kg/master wizard of winterhold;APPE:strong/black eyes/dark brown hair/dreadlock hair:WORN:red master wizard robes/leather boots/gold emerald necklace/gold ruby ring;MIND:good humor/smart/intelligent/strategic/technical/funny/well read;SUMM:friend<rostfa/mélanie/ungvid>;]",
                                "hidden": false
                        },
                        {
                                "id": "0.649148444342674",
                                "keys": "aengvir",
                                "entry": " Aengvir:[DESC<Aengvir>:male/170cm/70kg/thin body/slender/weak body/drunkard/drunk/drinks a lot/55y/fisherman by trade/long hair/aurburn hair;WORN<Aengvir>:brown tunic/dark brown hose;RACE<Aengvir>:nord;SUMMARY<Aengvir>:nord/male/55y170cm/70kg/born in winterhold/fisherman by trade/peasant/drunk/drunkard/mead is favorite drink;MIND<Aengvir>:short fuse/irritated/bad mood/unpolite;RELATIONS<Aengvir>:friend<rostfa>/wife<snolfi>/daughter<britte>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.13092095227421896",
                                "keys": "rostfa",
                                "entry": " Rostfa:[DESC<Rostfa>:female/170cm/fat body/big hands/hardworking/heavy nord accent/45y/100kg/long curly hair/dark brown hair;WORN<Rostfa>:blue mage robes;RACE<Rostfa>:nord;SUMMARY<Rostfa>:nord/male/45y/170cm/100kg/born in riften/member of the college of winterhold/mage/wizard/middle class/court mage of winterhold;MIND<Rostfa>:smart/intelligent/serious/funny/technical/nice/polite/educated;RELATIONS<Rostfa>:friend<ungvid/balor/ahmad kareem/méliane sindeaux>.]",
                                "hidden": false
                        }
                ],
                "gameCode": {
                        "onInput": "const modifier = (text) => {\r\n  let stop = false;\r\n  let modifiedText = nameReplace(text);\r\n  const lowered = modifiedText.toLowerCase();\r\n  const commandMatcher = modifiedText.match(/\\n? ?(?:> You |> You say \"|)\\/(.+?)[\"]?[.]?\\n?$/i);\r\n\r\n  if (!state.init && info.actionCount < 1) {\r\n    getInventory();\r\n    generateCharacter();\r\n\r\n    state.init = true;\r\n    state.shouldStop = false;\r\n    modifiedText = text\r\n      + ` ${state.character.name}, and you are a ${state.character.gender} ${state.character.race} ${state.character.class}. You are ${state.character.age} years old, and your personality traits are: ${state.character.personality}. You eyes are ${state.character.eyes.eyeColor}, and your hair is of the style ${state.character.hair.hairStyle} and of color ${state.character.hair.hairColor}. You are ${state.character.appearance.height} centimeters tall, and you weigh ${state.character.appearance.weight} kg. Your physical features are: ${state.character.appearance.features}.\\n\\n---------------------------------------\\n\\n`\r\n      + state.character.storyStart\r\n        .replace('YOUR_NAME', state.character.name)\r\n        .replace('PLAYER_GENDER', state.character.gender)\r\n        .replace('PLAYER_RACE', state.character.race);\r\n  }\r\n\r\n  if (commandMatcher) {\r\n    console.log(`Command detected`);\r\n    console.log(commandMatcher);\r\n\r\n    stop = true;\r\n    modifiedText = '';\r\n\r\n    const cmd = commandMatcher[1].split(' ')[0];\r\n    const params = commandMatcher[1].replace(cmd, '') != null ? commandMatcher[1].replace(cmd, '').trim() : '';\r\n\r\n    if (cmd == 'invCheck') {\r\n      console.log(`Begin inventory check.`);\r\n      state.message = `${checkInventory()}`;\r\n      console.log(`End inventory check.`);\r\n    } else if (cmd == 'invAdd') {\r\n      console.log(`Begin inventory add.`);\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        state.message = `${addToInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        state.message = `You cannot add less than 1 unit of an item to your inventory.`;\r\n      }\r\n\r\n      console.log(`End inventory add.`);\r\n    } else if (cmd == 'invRemove') {\r\n      console.log(`Begin inventory remove.`);\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        state.message = `${removeFromInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        state.message = `You cannot remove less than 1 unit of an item from your inventory.`;\r\n      }\r\n\r\n      console.log(`End inventory remove.`);\r\n    } else if (cmd == 'invEquip') {\r\n      console.log(`Begin inventory equip.`);\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      state.message = `${equipItem(itemName)}`;\r\n      console.log(`End inventory equip.`);\r\n    } else if (cmd == 'invDebugWi') {\r\n      console.log(`Begin inventory debug.`);\r\n      debugInventory();\r\n      state.message = `Your inventory and player WI have been debugged.`;\r\n      console.log(`End inventory debug.`);\r\n    }\r\n  }\r\n\r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      if (encounterDB[encounter].inputLock) {\r\n        console.log(`Input checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      //for outputMod:\r\n      /*\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(`Output checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      */\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        console.log(`curTextNote after getRndFromList: ${modifiedText}`)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          console.log(`curTextNote after fillPlaceholders: ${modifiedText}`)\r\n          // for outputs:\r\n          // modifiedText += ` ${curTextNote}`\r\n          modifiedText += `\\n${curTextNote}`\r\n          console.log(`Text shown to player: ${modifiedText}`)\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      // if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n      console.log(`Input lock before branch looping: ${state.currentEncounter.inputLock}`)\r\n      console.log(`Branches found in ${state.currentEncounter.encounterID}: ${state.currentEncounter.branches}`)\r\n      if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          console.log()\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            console.log(`Triggers in '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}': ${chkBranch.branchTriggers.toString()}`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      // modifiedText += ` ${curTextNote}`\r\n                      modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText, stop: stop };\r\n}\r\n\r\nmodifier(text);",
                        "onOutput": "const modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n\r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      /*\r\n      if (encounterDB[encounter].inputLock) {\r\n          console.log(\"Input checking disabled on this encounter.\")\r\n          continue globalLoop\r\n      }\r\n      */\r\n      //for outputMod:\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(\"Output checking disabled on this encounter.\")\r\n        continue globalLoop\r\n      }\r\n\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          // for outputs:\r\n          modifiedText += ` ${curTextNote}`\r\n          // modifiedText += `\\n${curTextNote}`\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n        // if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      modifiedText += ` ${curTextNote}`\r\n                      // modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n",
                        "sharedLibrary": "const BRACKETED = /\\[(.*?)\\]/g;\r\nconst BRACKETS = /\\[|\\]/g;\r\nconst DIGIT_REGEX = /\\D/g;\r\nconst LETTER_REGEX = /[0-9]/g;\r\nconst PUNCTUATION_REMOVE = /[^\\w\\s]/gi;\r\nconst WEAPON_REGEX = new RegExp(/(crossbow|bow)/i);\r\nconst WORN_REGEX = new RegExp(`(?<=WORN<you>:)(.*)(?=;)`);\r\nconst INVENTORY_REGEX = new RegExp(`(?<=INV<you>:)(.*)(?=.)`);\r\n\r\nconst WEAPONS = [\r\n  'sword', 'knife', 'spear', 'hammer', 'axe', 'battleaxe', 'sledgehammer', 'longsword', 'bow', 'pickaxe'\r\n];\r\n\r\nconst CLOTHING = [\r\n  'rags', 'armor', 'dress', 'kilt', 'skirt', 'jerkin', 'shirt', 'clothes', 'robes', 'leathers', 'hooded', 'cuirass', 'chainmail', 'gauntlets', 'vambraces', 'tights'\r\n];\r\n\r\nconst RANDOM_CHARACTERS = [\r\n  {\r\n    name: `Rolff Stone-Fist`,\r\n    gender: `male`,\r\n    race: `Nord`,\r\n    age: '17',\r\n    personality: 'strong, tough, intimidating',\r\n    class: 'peasant',\r\n    eyes: {\r\n      eyeColor: 'light brown'\r\n    },\r\n    hair: {\r\n      hairStyle: 'short and messy',\r\n      hairColor: 'light blond'\r\n    },\r\n    appearance: {\r\n      height: '187',\r\n      weight: '90',\r\n      features: 'muscular, long square jaw, short beard'\r\n    },\r\n    storyStart: `You look around. Your friends are working their backs off in the mine, just like you. You know their families, and they're good people. You feel for them, as you all struggle to make ends meet. You have to do something about that.`,\r\n    worn: `loose green breeches and white shirt`,\r\n    weapon: 'pickaxe'\r\n  },\r\n  {\r\n    name: `Pasha Antine`,\r\n    gender: `female`,\r\n    race: `Dunmer`,\r\n    age: `25`,\r\n    personality: `very intimidating`,\r\n    class: `peasant`,\r\n    eyes: {\r\n      eyeColor: `dark brown`\r\n    },\r\n    hair: {\r\n      hairStyle: `long hair`,\r\n      hairColor: `black`\r\n    },\r\n    appearance: {\r\n      height: `182`,\r\n      weight: `75`,\r\n      features: `beautiful, tall, striking`\r\n    },\r\n    storyStart: `You are at your home. You've worked the mine your entire life, just like your parents. But you want more. You want to see the world, to set sail and go abroad. You want adventure. Your father does not approve of your dream, and you get in an argument with him.\\n\"Pasha, you need to think about life. You can't go around traveling, this is no life for someone like you. Where will you get money to stay alive?\", you father asks. He seems angry with your ideals.`,\r\n    worn: `loose green breeches and white shirt`,\r\n    weapon: 'pickaxe'\r\n  },\r\n  {\r\n    name: `Sirilias`,\r\n    gender: `male`,\r\n    race: `Imperial`,\r\n    age: `32`,\r\n    personality: `brave, kind, loyal`,\r\n    class: `sailor`,\r\n    eyes: {\r\n      eyeColor: `blue`\r\n    },\r\n    hair: {\r\n      hairStyle: `curly`,\r\n      hairColor: `brown`\r\n    },\r\n    appearance: {\r\n      height: `185`,\r\n      weight: `79`,\r\n      features: `muscular, strong jaw, prominent chin`\r\n    },\r\n    storyStart: `You are in the middle of the woods, and you're lost. You don't know how to get to civilization, and the bandits that imprisioned you are looking for you. You have a shiv, and that's all you can use to defend yourself. The woods of Skyrim are known to be home to wolves, sabre cats and bears.`,\r\n    worn: `rags`,\r\n    weapon: `shiv`\r\n  },\r\n  {\r\n    name: `Ryana`,\r\n    gender: `female`,\r\n    race: `Imperial`,\r\n    age: `26`,\r\n    personality: `calm, quiet, friendly, loyal`,\r\n    class: `warrior`,\r\n    eyes: {\r\n      eyeColor: `green`\r\n    },\r\n    hair: {\r\n      hairStyle: `long and straight`,\r\n      hairColor: `brown`\r\n    },\r\n    appearance: {\r\n      height: `170`,\r\n      weight: `60`,\r\n      features: `birthmark on right shoulder, calloused and scarred hands, oval face`\r\n    },\r\n    storyStart: `You are in the middle of the woods, and you're lost. You don't know how to get to civilization, and the bandits that imprisioned you are looking for you. You have a shiv, and that's all you can use to defend yourself. The woods of Skyrim are known to be home to wolves, sabre cats and bears.`,\r\n    worn: `rags`,\r\n    weapon: `shiv`\r\n  },\r\n  {\r\n    name: `Torel Forgewood`,\r\n    gender: `male`,\r\n    race: `Nord`,\r\n    age: `26`,\r\n    personality: `self-centered,arrogant,dishonorable`,\r\n    class: `warrior`,\r\n    eyes: {\r\n      eyeColor: `steely blue`\r\n    },\r\n    hair: {\r\n      hairStyle: `long and straight`,\r\n      hairColor: `dark blonde`\r\n    },\r\n    appearance: {\r\n      height: `180`,\r\n      weight: `90`,\r\n      features: `strong chin and jawline,strong and muscular,tanned skin`\r\n    },\r\n    storyStart: `You are at your mercenary corp's base, in the woods of Falkreath. Talagar, the leader of the mercenary, comes to you with a mission. A noble has hired you to escort him from the Pale Pass to Solitude. Talagar approaches you and says:`,\r\n    worn: `steel cuirass over his fur tunic and steel greaves and fur and leather boots and leather and steel gauntlets`,\r\n    weapon: `long steel sword`\r\n  },\r\n  {\r\n    name: `Tulla Jenssen`,\r\n    gender: `female`,\r\n    race: `Nord`,\r\n    age: `23`,\r\n    personality: `brave,courageous,foolhardy`,\r\n    class: `warrior`,\r\n    eyes: {\r\n      eyeColor: `blue`\r\n    },\r\n    hair: {\r\n      hairStyle: `long`,\r\n      hairColor: `blonde`\r\n    },\r\n    appearance: {\r\n      height: `180`,\r\n      weight: `75`,\r\n      features: `tall,muscular,strong`\r\n    },\r\n    storyStart: `You get in an argument with your father. You tell him that you will run away from home if he doesn't let you marry the blacksmith. He's furious with you, and threatens to disown you if you don't obey his demands. Defiant, you pack up your things and leave your family house. You make your way to the blacksmith's house, as you know your beloved will be working there. However, when you arrive at the blacksmith's house, the place is dark and abandoned. You panic and break into tears.`,\r\n    worn: `fine silk dress with a long coat`,\r\n    weapon: `wooden long bow`\r\n  }\r\n];\r\n\r\n/**\r\n * Function that generates random characters\r\n *  \r\n */\r\nconst generateCharacter = () => {\r\n  state.character = RANDOM_CHARACTERS[Math.floor(Math.random() * RANDOM_CHARACTERS.length)];\r\n  playerWorldInfo = {\r\n    keys: `${state.character.name},you`,\r\n    hidden: false,\r\n    entry: 'you:['\r\n      + `NAME:${state.character.name}; `\r\n      + `SUMM:age<${state.character.age}y>/race<${state.character.race}>/${state.character.appearance.height}cm&${state.character.appearance.weight}kg; `\r\n      + `APPE<you>:${state.character.appearance.features}/eyes<${state.character.eyes.eyeColor}>/hair<${state.character.hair.hairStyle}&${state.character.hair.hairColor}>; `\r\n      + `MIND:${state.character.personality}; `\r\n      + `WORN<you>:nothing; `\r\n      + `INV<you>:nothing.`\r\n      + ']'\r\n  };\r\n\r\n  addWorldEntry(playerWorldInfo.keys, playerWorldInfo.entry, false);\r\n  state.character.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes(state.character.name));\r\n\r\n  addToInventory(state.character.worn, 1);\r\n  addToInventory(state.character.weapon, 1);\r\n  equipItem(state.character.worn);\r\n  equipItem(state.character.weapon);\r\n}\r\n\r\n/**\r\n * Simple frunction to capitalize the first letter of a string\r\n * \r\n * @param {string} string \r\n */\r\nconst capitalize = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Limits player details provided in prompt to only three items\r\n * \r\n * @param {string} text \r\n */\r\n function limitCharacterDetails(text) {\r\n  console.log(`START limitCharacterDetails(): parsing character details: ${text}`);\r\n  return text.replace(/, /g, ',').split(',').slice(0, 3).join('/').trim();\r\n}\r\n\r\n/**\r\n * Finds an item in the player's inventory\r\n * @param {string} itemName \r\n */\r\nconst findItemInInventory = (itemName) => {\r\n  console.log(`START findItemInInventory(): Looking for item \"${itemName}\" in player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let itemFound = getInventory().find((item) => {\r\n    return item.name == loweredName;\r\n  });\r\n\r\n  if (typeof itemFound != 'undefined') {\r\n    console.log(`END findItemInInventory(): Item \"${itemName}\" found. Returning it.`);\r\n    return itemFound;\r\n  }\r\n\r\n  console.log(`END findItemInInventory(): Item \"${itemName}\" not found in inventory.`);\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Removes an item from player's inventory\r\n * \r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst removeFromInventory = (itemName, itemQuantity) => {\r\n  console.log(`START removeFromInventory(): Removing ${itemQuantity} instances of \"${itemName}\" from player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (!(item.quantity == itemQuantity) && (item.quantity > 1 && item.quantity >= itemQuantity)) {\r\n    console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n    item.quantity -= itemQuantity;\r\n    return `\\nYou have removed ${itemQuantity} ${loweredName} from your inventory.`;\r\n  }\r\n\r\n  let index = getInventory().indexOf(item);\r\n  getInventory().splice(index, 1);\r\n  updateInventory();\r\n  console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n  return `\\nYou have removed all ${loweredName} from your inventory.`;\r\n}\r\n\r\n/**\r\n * Checks player's inventory and returns what's inside\r\n */\r\nconst checkInventory = () => {\r\n\r\n  console.log(`START checkInventory(): Checking player's inventory.`);\r\n  if (getInventory().length > 0) {\r\n    let items = getInventory().map((item) => item.name).join(', ');\r\n    let itemsWorn = getInventory().filter((item) => item.status == 'worn').map((item) => item.name).join(', ');\r\n    console.log(`END checkInventory(): Player's inventory contains: ${items}.`);\r\n    return `\\nYour inventory contains: ${items}. Items equipped: ${itemsWorn}.`;\r\n  }\r\n\r\n  console.log(`END checkInventory(): Player's inventory is empty.`);\r\n  return `\\nYour inventory is empty.`;\r\n}\r\n\r\n/**\r\n * Returns player's inventory. If the array in undefined, define it\r\n */\r\nconst getInventory = () => {\r\n  console.log(`START getInventory(): verifying player's inventory.`);\r\n  if (typeof state.inventory == 'undefined') {\r\n    console.log(`INSIDE getInventory(): Inventory array is undefined. Declaring it with an empty array.`);\r\n    state.inventory = [];\r\n  }\r\n\r\n  console.log(`END getInventory(): player's inventory exists. Returning its contents.`);\r\n  return state.inventory;\r\n}\r\n\r\n/**\r\n * Adds item to player's inventory\r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst addToInventory = (itemName, itemQuantity) => {\r\n\r\n  console.log(`START addToInventory(): adding ${itemQuantity} instances of \"${itemName}\" to player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (typeof item == 'undefined') {\r\n    console.log(`INSIDE addToInventory(): Player has no other instances of this item in their inventory. Adding these.`);\r\n    item = {\r\n      name: loweredName,\r\n      quantity: itemQuantity,\r\n      status: 'in inventory',\r\n      type: getType(itemName)\r\n    };\r\n\r\n    state.inventory.push(item);\r\n  } else {\r\n    console.log(`INSIDE addToInventory(): Player already has other instances of this item in their inventory. Incrementing the quantity by ${itemQuantity}.`);\r\n    item.quantity = item.quantity + itemQuantity;\r\n  }\r\n\r\n  updateInventory();\r\n  console.log(`END addToInventory(): ${itemQuantity} instances of \"${itemName}\" added to player's inventory.`);\r\n  return `\\nYou have added ${itemQuantity} ${loweredName} to your inventory.`;\r\n}\r\n\r\n/**\r\n * Simple function to make the player equip something.\r\n * \r\n * @param {string} itemName \r\n */\r\nconst equipItem = (itemName) => {\r\n  console.log(`START equipItem(): equipping ${itemName}`);\r\n  const itemNameLowerCase = itemName.toLowerCase();\r\n  let itemToBeEquipped = findItemInInventory(itemNameLowerCase);\r\n  if (typeof itemToBeEquipped != 'undefined') {\r\n    const itemToBeEquippedIndex = state.inventory.findIndex(x => x.name == itemToBeEquipped.name);\r\n    console.log(`INSIDE equipItem(): ${itemName} exists in player's inventory`);\r\n    if (itemToBeEquipped.type != 'weapon' && itemToBeEquipped.type != 'clothing') {\r\n      console.log(`END equipItem(): item is not equippable.`);\r\n      return `\\n${capitalize(itemNameLowerCase)} is not an equippable item.`;\r\n    }\r\n\r\n    let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n    let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n    let oldItem = getInventory().find(oldItem => oldItem.status == 'worn' && oldItem.type == itemToBeEquipped.type);\r\n    if (typeof oldItem != 'undefined') {\r\n      const oldItemIndex = state.inventory.findIndex(x => x.name == oldItem.name);\r\n      console.log(`INSIDE equipItem(): Player has another item of the same type equipped. Unequipping old item.`);\r\n      itemsWorn.replace(oldItem.name.toLowerCase(), '');\r\n      console.log(`INSIDE equipItem(): Removing worn status from ${oldItem.name}.`);\r\n      oldItem.status = 'in inventory';\r\n      state.inventory[oldItemIndex] = oldItem;\r\n    }\r\n\r\n    itemToBeEquipped.status = 'worn';\r\n    state.inventory[itemToBeEquippedIndex] = itemToBeEquipped;\r\n    itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n      .map((k) => {\r\n        console.log(`INSIDE equipItem(): worn item found in inventory -> ${k.name}`);\r\n        return k.name;\r\n      }).join('/');\r\n\r\n    console.log(`INSIDE equipItem(): finished building new WORN string -> ${itemsWorn}`);\r\n    playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n\r\n    console.log(`END equipItem(): ${itemToBeEquipped.name} has been equipped.`);\r\n    return `\\nYou are now ${itemToBeEquipped.type == 'weapon' ? 'wielding' : 'wearing'} ${itemToBeEquipped.name}.`;\r\n  }\r\n\r\n  console.log(`END equipItem(): Player does not have \"${itemNameLowerCase}\" in their inventory.`);\r\n  return `\\nYou do not have \"${itemNameLowerCase}\" in your inventory.`;\r\n}\r\n\r\n/**\r\n * Debugs your inventory and corrects the player's WI in case it fails\r\n */\r\nconst debugInventory = () => {\r\n  console.log(`START debugInventory(): debugging player's inventory`);\r\n  state.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes('you'));\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n\r\n  let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n\r\n  itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n    .map((k) => {\r\n      console.log(`INSIDE debugInventory(): Updating player WI with worn items`);\r\n      return k.name;\r\n    }).join('/');\r\n\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE debugInventory(): Updating player WI with inventory items`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n\r\n  console.log(\"INSIDE debugInventory(): Fixed player WI with inventory's items.\");\r\n  console.log(`END debugInventory(): Player's WI saved at index ${state.worldInfoIndex}.`);\r\n}\r\n\r\n/**\r\n * Updates the player's inventory and corrects the WI\r\n */\r\nconst updateInventory = () => {\r\n  console.log(`START updateInventory(): updating player's inventory and WI with current items`);\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE updateInventory(): Sorting inventory items and quantities into player WI`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n  console.log(`END updateInventory(): updated player's inventory and WI with current items`);\r\n}\r\n\r\n/**\r\n * Function to determine item type\r\n * \r\n * @param {string} itemType\r\n */\r\nconst getType = (itemName) => {\r\n  const checker = (input) => {\r\n    return WEAPONS.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'weapon' :\r\n      CLOTHING.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'clothing' : 'misc';\r\n  }\r\n\r\n  return checker(itemName);\r\n}\r\n\r\n/**************************************************************************\r\n***************************************************************************\r\n***************************************************************************\r\n*********************** FUNCTIONS MADE BY OTHER DEVS **********************\r\n***************************************************************************\r\n***************************************************************************\r\n**************************************************************************/\r\n\r\n/**\r\n * Bracket handler by Gnurro.\r\n * \r\n * Removes backets from input text to handle them as placeholders\r\n * \r\n * @param {string} text\r\n */\r\nconst grabAllBrackets = (text) => {\r\n  for (entry of text.match(BRACKETED)) {\r\n    entry = entry.replace(BRACKETS, '');\r\n    if (!state.placeholders) {\r\n      state.placeholders = new Array();\r\n    }\r\n\r\n    state.placeholders.push(entry);\r\n  }\r\n\r\n  console.log(state.placeholders);\r\n}\r\n\r\n/**\r\n * Encounters by Gnurro.\r\n * \r\n * Makes random encounters possible in-game\r\n */\r\nencounterDB = {\r\n  /** Fight encounters */\r\n  wolfAttack: {\r\n    encounterID: 'wolfAttack',\r\n    triggers: [\"(spot|see|find).*wol(f|ves).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 80,\r\n    duration: 5,\r\n    messageString: `Wolf attack!`,\r\n    contextNotes: ['You are being attacked by a wolf!', 'A wolf is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*(wol(f|ves))\"],\r\n    textNotes: [\r\n      `You hear howling, not far from where you are. The howling gets closer, and you start to feel uneasy. You look around, trying to find where it's coming from, and when you turn around. It's a wolf!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packWolfAttack',\r\n        branchChance: 50,\r\n        branchTextNotes: [\r\n          `You hear howling, not far from where you are. The howling gets closer, and now it sounds like more than one. You look around, trying to find where it's coming from, and then you see it. It's a pack of wolves!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  bearAttack: {\r\n    encounterID: 'bearAttack',\r\n    triggers: [\"(spot|see|find).*bear(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Bear attack',\r\n    contextNotes: ['You are being attacked by a bear!', 'A bear is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*bear(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling. It's definetely a bear. You hear it getting close, and you start to feel uneasy. When you look to your right, you see it. It's a bear!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packBearAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [\r\n          `You hear some growling. It's definetely a bear. But it doesn't sound like just one. It's uncommon for bears to attack in groups, but you seem to haven been chosen. It's a sleuth of bears!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  sabreCatAttack: {\r\n    encounterID: 'sabreCatAttack',\r\n    triggers: [\"(spot|see|find).*sabre cat(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Sabre cat attack!',\r\n    contextNotes: ['You are being attacked by a sabre cat!', 'A sabre cat is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*sabre cat(|s)\"],\r\n    textNotes: [\r\n      `You hear some roaring, but you can't tell what animal it is. But it sounds angry... and hungry. You hear it getting close, and you start to feel uneasy. When you turn around... it's a sabre cat!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packSabreCatAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [`You hear some roaring... and it sounds like there's more than one animal tracking. You start to feel uneasy, as you're sure you're about to be attacked. When you turn arround... it's a pack of sabre cats!`],\r\n      }\r\n    ]\r\n  },\r\n  trollAttack: {\r\n    encounterID: 'trollAttack',\r\n    triggers: [\"(spot|see|find).*troll(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 20,\r\n    duration: 5,\r\n    messageString: 'Troll attack!',\r\n    contextNotes: ['You are being attacked by a troll!', 'A troll is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*troll(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling and roaring. You can't tell what kind of creature is making this horrendous sound, but it's close. And getting closer. It's approaches you, and you turn to look at it. It's a troll!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packTrollAttack',\r\n        branchChance: 5,\r\n        branchTextNotes: [\r\n          `You hear some growling and roaring. It sounds like more than one creature, and they're getting closer... when you think of looking around, they show themselves. Two trolls are attacking you!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n\r\n  /** Weather */\r\n  weather: {\r\n    inputLock: true,\r\n    encounterID: 'weather',\r\n    chance: 50,\r\n    memoryAdd: {\r\n      memoryText: 'The weather has changed!',\r\n      memoryLocation: 'top',\r\n      memoryLingerDuration: 5\r\n    },\r\n    cooldown: 10,\r\n    duration: 0,\r\n    branches: [\r\n      {\r\n        branchTriggers: [\r\n          '.*(snow(|ing)|road|out(doors|side)|freezing|cold).*'\r\n        ],\r\n        branchID: 'weatherSnowStorm',\r\n        branchChance: 5,\r\n        branchChained: ['snowStorm']\r\n      },\r\n      {\r\n        branchTriggers: [\r\n          '.*(road|out(doors|side)|night).*'\r\n        ],\r\n        branchID: 'weatherBeautifulNight',\r\n        branchChance: 15,\r\n        branchChained: ['beautifulNight']\r\n      }\r\n    ]\r\n  },\r\n  snowStorm: {\r\n    inputLock: true,\r\n    encounterID: 'snowStorm',\r\n    messageString: 'A snow storm! Be careful! It will last for 10 actions!',\r\n    contextNotes: [\r\n      'A snow storm is here! Protect yourself or you\\'ll freeze to death!'\r\n    ],\r\n    textNotes: [\r\n      `The air starts to feel cold all of a sudden, and a freezing breeze touches you. You start shaking from the cold, and the wind gets faster. You can't see anything, as it's all white. You're caught in a snow storm!`\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50\r\n  },\r\n  beautifulNight: {\r\n    inputLock: true,\r\n    encounterID: 'beautifulNight',\r\n    messageString: 'It\\'s a beautiful night!',\r\n    contextNotes: [\r\n      'It\\'s a beautiful night!'\r\n    ],\r\n    textNotes: [\r\n      `You look up. The night sky is amazing! You can see the stars bright in the distance, and the aurora is shimmering in the sky like an ethereal snake. The night is bright because of the beautiful lights in the sky, and you just can't stop looking at them. It's too beautiful.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50,\r\n  },\r\n\r\n  /** Random events */\r\n  rebellion: {\r\n    outputLock: true,\r\n    encounterID: 'rebellion',\r\n    chance: 1,\r\n    messageString: `A rebellion is happening!`,\r\n    memoryAdd: {\r\n      memoryText: `A rebellion is happening!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    cooldown: 20,\r\n    duration: 0,\r\n    chained: ['whiterunRebellion', 'riftenRebellion',]\r\n  },\r\n  whiterunRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'whiterunRebellion',\r\n    messageString: `The citizens of Whiterun are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Whiterun are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Whiterun. The citizens of the city are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  riftenRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'riftenRebellion',\r\n    messageString: `The citizens of Riften are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Riften are revolting against Jarl Erikur for his negligence towards people's safaty! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Riften. The citizens are revolting against Jarl Erikur for his negligence towards people's safety! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  tavernBrawl: {\r\n    encounterID: 'tavernBrawl',\r\n    triggers: [\r\n      '.*(bar|pub|tavern|inn|brawl(|ing|er(|s))).*'\r\n    ],\r\n    chance: 10,\r\n    cooldown: 10,\r\n    duration: 5,\r\n    branches: [\r\n      {\r\n        branchID: 'brawlWithYouBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithYou']\r\n      },\r\n      {\r\n        branchID: 'brawlWithBrawlersBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithBrawlers']\r\n      }\r\n    ]\r\n  },\r\n  brawlWithYouBranch: {\r\n    encounterID: 'brawlWithYouBranch',\r\n    messageString: 'Someone challanged you to a brawl!',\r\n    contextNotes: [\r\n      `You're brawling with someone!`\r\n    ],\r\n    textNotes: [\r\n      `A random drunk man starts screaming at you for some reason. He's so drunk you can't really understand what he says. He charges at you, and punches you in the face.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  },\r\n  brawlWithBrawlers: {\r\n    encounterID: 'brawlWithBrawlers',\r\n    messageString: 'There are people brawling at the tavern!',\r\n    contextNotes: [\r\n      'People are brawling at the tavern!'\r\n    ],\r\n    textNotes: [\r\n      `Two guys are yelling at each other, they seem angry. One of them gets up from his chair and just punches the other one in the face. The man who got punched screams something unintelligible and charges at the other one. They're in a serious brawl.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  }\r\n}\r\n\r\n// word list stuff like gauntlet script:\r\nencounterWordLists = {\r\n  /* Remove this line (and the one below) to enable the example word lists\r\n  charClass:[\"mage\",\"fighter\",\"valkyrie\"],\r\n  pattern:[\"sprinkles\", \"dots\", \"lines\"],\r\n  color:[\"red\",\"blue\",\"green\",\"yellow\",\"orange\"],\r\n  amount:[\"many\",\"few\",\"all of them\"]\r\n   */ // Remove this line (and the one above) to enable the example word lists\r\n}\r\n\r\n// WI data imports:\r\nfor (WIentry of worldInfo) {\r\n  // encounters from WI:\r\n  // these will be lower priority then the hardcoded ones above!\r\n  if (WIentry.keys.includes('!encounterDef')) {\r\n    encounterDefFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterDef for '${encounterDefFromWI.encounterID}', adding it to the DB!`)\r\n    encounterDB[encounterDefFromWI.encounterID] = encounterDefFromWI\r\n  }\r\n  // word lists from WI:\r\n  if (WIentry.keys.includes('!encounterWordListsFull')) {\r\n    encounterWordListsFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found full WI encounterWordLists entry, adding them to the DB!`)\r\n    for (encounterSingleWordList in encounterWordListsFromWI) {\r\n      encounterWordLists[encounterSingleWordList] = Object.values(encounterWordListsFromWI[encounterSingleWordList])\r\n    }\r\n  }\r\n  if (WIentry.keys.includes('!encounterWordListSingle')) {\r\n    encounterWordListSingleFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterWordList, adding it to the DB!`)\r\n    encounterWordLists[Object.keys(encounterWordListSingleFromWI)[0]] = Object.values(encounterWordListSingleFromWI)\r\n  }\r\n}\r\n\r\n\r\n// encounter functions: (DON'T MESS WITH THESE!)\r\nfunction updateCurrentEncounter(encounterUpcoming) { // sets or clears currentEncounter; if argument empty, clears current encounter\r\n  // limiting encounter recurrence:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.recurrenceLimit) {\r\n      if (!state.limitedEncounters) {\r\n        state.limitedEncounters = []\r\n        state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n      } else {\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == state.currentEncounter.encounterID) {\r\n            console.log(`'${state.currentEncounter.encounterID}' recurrence already has a limit.`)\r\n            if (limiter[1] > 0) {\r\n              limiter[1] = limiter[1] - 1\r\n            }\r\n          } else {\r\n            state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (state.currentEncounter.cooldown) {\r\n      if (!state.cooldownEncounters) {\r\n        state.cooldownEncounters = []\r\n      }\r\n      state.cooldownEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.cooldown])\r\n    }\r\n  }\r\n  if (encounterUpcoming) {\r\n    console.log(`Setting current encounter to '${encounterUpcoming}'.`)\r\n    state.currentEncounter = encounterDB[encounterUpcoming]\r\n    // random initial values handling:\r\n    randomizables = ['duration', 'activationDelay', 'cooldown']\r\n    for (encounterValue of randomizables) {\r\n      if (typeof (state.currentEncounter[encounterValue]) !== 'undefined') {\r\n        if (typeof (state.currentEncounter[encounterValue]) !== 'number' && state.currentEncounter[encounterValue].length == 2) {\r\n          console.log(`${encounterUpcoming} has random ${encounterValue}: ${state.currentEncounter[encounterValue]}`)\r\n          state.currentEncounter[encounterValue] = getRndInteger(state.currentEncounter[encounterValue][0], state.currentEncounter[encounterValue][1])\r\n          console.log(`${encounterUpcoming} random ${encounterValue} set to ${state.currentEncounter[encounterValue]}`)\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    console.log(\"Clearing current encounter.\")\r\n    delete state.currentEncounter\r\n  }\r\n}\r\n\r\nfunction updateCurrentEffects() { // 'activates' currentEncounter; or clears encounter effects if there is no active encounter\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.messageString) {\r\n      state.message = state.currentEncounter.messageString\r\n    }\r\n    if (state.currentEncounter.contextNotes) {\r\n      state.encounterNote = getRndFromList(state.currentEncounter.contextNotes)\r\n    }\r\n    if (state.currentEncounter.displayStatNotes) {\r\n      displayStatsUpdate(getRndFromList(state.currentEncounter.displayStatNotes))\r\n    }\r\n  } else {\r\n    delete state.message\r\n    delete state.encounterNote\r\n  }\r\n}\r\n\r\nfunction fillPlaceholders(placeHolderString) {\r\n  curPlaceholderMatches = placeHolderString.match(/\\{(.*?)\\}/g)\r\n  if (curPlaceholderMatches) {\r\n    console.log(`Matched placeholders: ${curPlaceholderMatches}`)\r\n    for (placeholder of curPlaceholderMatches) {\r\n      console.log(`Current placeholder: ${placeholder}`)\r\n      if (placeholder[1] == '*') {\r\n        console.log(`Current placeholder ${placeholder} contains a *, checking temporary word lists...`)\r\n        placeholder = placeholder.replace(/(\\*|{|})/gi, '')\r\n        if (typeof (tempWordLists) == 'undefined') {\r\n          tempWordLists = {}\r\n        }\r\n        if (!tempWordLists[placeholder] || tempWordLists[placeholder].length == 0) {\r\n          console.log(`${placeholder} temporary wordlist is either non-existant or empty! Getting a new one.`)\r\n          tempWordLists[placeholder] = JSON.parse(JSON.stringify(encounterWordLists[placeholder]))\r\n        }\r\n        console.log(`Current temporary word lists:${tempWordLists}`)\r\n        for (insertTag in tempWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag in temporary list: ${insertTag}`)\r\n            pickedInsert = getRndFromList(tempWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert from temporary list: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{\\\\*${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n            tempWordLists[placeholder].splice(tempWordLists[placeholder].indexOf(pickedInsert), 1)\r\n          }\r\n        }\r\n      } else {\r\n        for (insertTag in encounterWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag: ${insertTag}`)\r\n            pickedInsert = getRndFromList(encounterWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    delete tempWordLists\r\n  }\r\n\r\n  return placeHolderString;\r\n}\r\n\r\n// misc helper functions:\r\n// get random\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n\r\n// list-picker, dynamically handles weighted lists\r\nfunction getRndFromList(list) {\r\n  if (list[0].length == 2) {\r\n    console.log(`${list} looks like a weighted list, doing that!`)\r\n    return (getRndFromListWeighted(list))\r\n  } else {\r\n    console.log(`${list} looks like a plain list, simply picking from it!`)\r\n    return (list[getRndInteger(0, list.length)])\r\n  }\r\n}\r\n\r\n// list picker for lists with weighted items:\r\n// currently works kinda like oldschool D&D encounter lists\r\nfunction getRndFromListWeighted(weightedList) {\r\n  cutOff = getRndInteger(1, 100)\r\n  console.log(`Picking from weighted list, cutoff: ${cutOff}`)\r\n  for (item of weightedList) {\r\n    console.log(`'${item[0]}' threshold: ${item[1]}.`)\r\n    if (cutOff <= item[1]) {\r\n      console.log(`'${item[0]}' cutoff below threshold, picking it!`)\r\n      return item[0]\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\n// displayStats handling:\r\nfunction displayStatsUpdate([inKey, inValue, inColor]) {\r\n  // if key already exists, update; else push new entry; if no value given, removes displayStat entry matching key, if it exists\r\n  if (!state.displayStats) {\r\n    state.displayStats = []\r\n  }\r\n  let displayStatUpdated = false\r\n  for (displayStat of state.displayStats) {\r\n    console.log(`Checking ${displayStat.key} displayStats entry...`)\r\n    let curDisplayStatIndex = state.displayStats.indexOf(displayStat)\r\n    if (displayStat.key == inKey) {\r\n      console.log(`Found ${inKey} displayStats entry: ${state.displayStats[curDisplayStatIndex].key}, ${state.displayStats[curDisplayStatIndex].value}, ${state.displayStats[curDisplayStatIndex].color}, updating!`)\r\n      if (inValue) {\r\n        if (typeof (inValue) == 'string') {\r\n          inValue = fillPlaceholders(inValue)\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        } else {\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        }\r\n      } else {\r\n        console.log(`No value to update displayStat inputted, removing entry.`)\r\n        state.displayStats.splice(curDisplayStatIndex, 1)\r\n        displayStatUpdated = true\r\n        break\r\n      }\r\n      if (inColor) {\r\n        state.displayStats[curDisplayStatIndex].color = fillPlaceholders(inColor)\r\n      }\r\n      displayStatUpdated = true\r\n      break\r\n    }\r\n  }\r\n  if (!displayStatUpdated) {\r\n    console.log(`No ${inKey} displayStats entry found, adding it!`)\r\n    state.displayStats.push({ 'key': inKey, 'value': inValue, 'color': inColor })\r\n  }\r\n}\r\n\r\n/**\r\n * Name synthesizer by Zaltys\r\n * \r\n * Removed unwanted names and replaces them with better ones\r\n * \r\n */\r\n// List the names you wish to replace with random ones in this const.\r\nconst BADNAMES = ['Ackerson', 'Alison', 'Annah', 'Anu', 'Arat', 'Arrorn', 'Ashton', 'Azajaja', 'Big Red',\r\n  'Brot', 'Brother Gray', 'Bucklesberg', 'Captain Dario', 'Captain Eckard', 'Captain Hayes', 'Captain Ian', 'Captain Illam', 'Carn',\r\n  'Castus', 'Cloudpeak', 'Count Gray', 'Count Grey', 'Dark Order', 'David', 'Delantium', 'Delerg', 'Dendrin', 'Derg',\r\n  'Dert', 'Dessel', 'Dorna', 'Dr. Kessel', 'Dr. Kovas', 'Drake', 'Draven', 'Durge', 'Ebony Claw', 'Elam',\r\n  'Eldolith', 'Eliza', 'Eternals', 'Father Féval', 'Father Tomas', 'Felkan', 'Flog', 'Garrick', 'Grolik', \"Gro'tesk\", 'Haygarth',\r\n  'Hessla', 'Holgard', 'Isabella', \"J'Arel\", 'Jacob', 'Jicol', 'Karth', 'Kelso',\r\n  'Klemto', 'Klyton', 'Kralmer', 'Kyros', 'Lenay', 'Lord Rostov', 'Ludmilla', 'Magos Cern', 'Meliodas',\r\n  'Merk', 'Mihrab', 'Mr. Demar', 'Mr. Gaange', 'Mr. Reynolds', 'Nalin', 'Nolazir', 'Null', 'Nuro', 'Oalkwardner',\r\n  'Olive', 'Olivia', 'Oren', 'Quala', 'Ragnor', 'Ral', 'Rask', 'Retlad', 'Roldan', 'Rolomag', 'Sheriff Buckly',\r\n  'Sir Ignate', 'Sodran', 'Svelk', 'Talia', 'Teckleville', 'The Craxil', 'The Ghoul King', 'The Great Lich Lord',\r\n  'The Nightmare Tyrant', 'Theo', 'Trelik', 'Tulan', 'Ulivik', 'Vaughn', 'Velzix', 'Wessel', 'Zalan', 'Zalmora', 'Zuzu'];\r\n\r\n// This shuffles the arrays.\r\nconst shuffle = array =>\r\n  [...Array(array.length)]\r\n    .map((...args) => Math.floor(Math.random() * (args[1] + 1)))\r\n    .reduce((a, rv, i) => ([a[i], a[rv]] = [a[rv], a[i]]) && a, array);\r\n\r\n// Generates and saves arrays; ran only once.\r\nfunction makeArrays() {\r\n  state.mid = [];\r\n  state.end = [];\r\n  list = state.names.map(x => x.substring(1)); // Trim beginning.\r\n  list.forEach(addMid);\r\n}\r\n\r\nfunction addMid(seg) { // Generate array of possible mid-segments.\r\n  while (seg.length > 3) {\r\n    if (state.mid.indexOf(seg.substring(0, 4)) === -1) { state.mid.push(seg.substring(0, 4)) };\r\n    seg = seg.substring(1);\r\n  }\r\n  state.end.push(seg);\r\n}\r\n\r\nfunction synthName() {\r\n  var name_length = state.names[Math.floor(Math.random() * state.names.length)].length - 1;\r\n  var base = state.names[Math.floor(Math.random() * state.names.length)];\r\n  if (base.length < 3) { return Base; }\r\n  else {\r\n    var nomen = base.substring(0, 3);\r\n    while (nomen.length < name_length) {\r\n      mid = shuffle(state.mid).find(x => nomen.substring(nomen.length - 2, nomen.length) == x.substring(0, 2))\r\n      if (mid) { nomen += mid.substring(2); }\r\n      else { name_length = 0; } // No valid segments found, just skip ahead.\r\n    }\r\n    var end = shuffle(state.end).find(x => nomen.substring(nomen.length - 1, nomen.length) == x.substring(0, 1));\r\n    if (end) { nomen += end.substring(1); }\r\n    return nomen;\r\n  }\r\n}\r\n\r\nfunction nameReplace(text) {\r\n  if (!state.names_setup) { setupNamelist(); }\r\n  for (name of BADNAMES) {\r\n    if (text.includes(name)) { text = text.replace(name, synthName()); }\r\n  }\r\n  return text;\r\n}\r\n\r\n// This giant list is the list of names that this generator uses as examples to synthesize new names.\r\n// You can replace it with a more specific list, such as names from certain culture.\r\n// To work well, you need at least 100 names on the list.\r\nfunction setupNamelist() {\r\n  state.names_setup = true;\r\n  state.names = [\"Aby\", \"Aage\", \"Aakesh\", \"Aanon\", \"Aarlen\", \"Aaron\", \"Aart\", \"Aasta\", \"Abarden\", \"Abbathor\", \"Abbathorn\", \"Abraham\", \"Abryn\",\r\n    \"Abu\", \"Acadia\", \"Achard\", \"Acheron\", \"Achim\", \"Achlarg\", \"Ada\", \"Adair\", \"Adalbert\", \"Adanac\", \"Adario\", \"Adeisteen\", \"Adelaide\",\r\n    \"Adelin\", \"Adelot\", \"Adeen\", \"Aden\", \"Adena\", \"Aderyn\", \"Adeva\", \"Adger\", \"Adia\", \"Adin\", \"Adina\", \"Aditu\", \"Adlay\",\r\n    \"Adolf\", \"Adolmus\", \"Adoniram\", \"Adraeran\", \"Adriaan\", \"Adriel\", \"Adrienne\", \"Aedha\", \"Aeiran\", \"Ael\", \"Aelgifu\", \"Aelis\", \"Aerdrie\",\r\n    \"Aeriel\", \"Aerin\", \"Aeris\", \"Aeriss\", \"Aeron\", \"Aeru'in\", \"Aeruin\", \"Aethelweard\", \"Aethon\", \"Aethyr\", \"Afra\", \"Agate\", \"Agatha\",\r\n    \"Agathon\", \"Agathos\", \"Agenor\", \"Agidius\", \"Agnar\", \"Agora\", \"Agrias\", \"Aguidran\", \"Aguilla\", \"Ahanna\", \"Ahmre\", \"Aicha\", \"Aidan\",\r\n    \"Aidaron\", \"Aiden\", \"Aidred\", \"Aidro\", \"Aidwin\", \"Aifreda\", \"Aifrida\", \"Aiker\", \"Aikikia\", \"Aikman\", \"Ailcaer\", \"Aileen\", \"Ailric\",\r\n    \"Ailvar\", \"Aimee\", \"Aimo\", \"Aino\", \"Ainu\", \"Aipheus\", \"Airalyn\", \"Aircristir\", \"Airen\", \"Airis\", \"Airmid\", \"Aisha\", \"Aislinn\",\r\n    \"Aithne\", \"Aitken\", \"Akebia\", \"Aki\", \"Akira\", \"Aksel\", \"Al\", \"Aladan\", \"Aladar\", \"Aladdin\", \"Alain\", \"Alaine\", \"Alais\",\r\n    \"Alan\", \"Alana\", \"Alanson\", \"Alardan\", \"Alaric\", \"Alarion\", \"Alaris\", \"Alaron\", \"Alastair\", \"Alastrina\", \"Alastyr\", \"Albaral\", \"Alberich\",\r\n    \"Alberik\", \"Alberon\", \"Albert\", \"Alberta\", \"Albin\", \"Albion\", \"Albrecht\", \"Albright\", \"Alcan\", \"Alcina\", \"Alda\", \"Aldaren\", \"Aldegond\",\r\n    \"Alden\", \"Aldert\", \"Aldhelm\", \"Aldis\", \"Aldrich\", \"Aldridge\", \"Aldus\", \"Aldwerth\", \"Aldwin\", \"Aldwulf\", \"Alea\", \"Alec\", \"Alena\",\r\n    \"Alers\", \"Ales\", \"Alessandra\", \"Alexander\", \"Alexei\", \"Alf\", \"Alfdis\", \"Alfgeir\", \"Alfhid\", \"Alfons\", \"Alford\", \"Alfred\", \"Algernon\",\r\n    \"Algus\", \"Alhana\", \"Ali\", \"Alia\", \"Alicia\", \"Aliendre\", \"Alienor\", \"Alin\", \"Aline\", \"Alineric\", \"Alisbone\", \"Alison\", \"Alistair\",\r\n    \"Alister\", \"Allaire\", \"Allard\", \"Allart\", \"Allene\", \"Alliston\", \"Almas\", \"Almer\", \"Almira\", \"Almroth\", \"Almu\", \"Aloise\", \"Alor\",\r\n    \"Alora\", \"Alorosaz\", \"Aloysius\", \"Alphons\", \"Alrik\", \"Alsop\", \"Althalus\", \"Altin\", \"Alton\", \"Alured\", \"Alvan\", \"Alvey\", \"Alvina\",\r\n    \"Alvord\", \"Alvred\", \"Alwen\", \"Alwyn\", \"Alya\", \"Alyanna\", \"Alyce\", \"Alyssa\", \"Alyvia\", \"Ama\", \"Amadis\", \"Amain\", \"Amalina\",\r\n    \"Aman\", \"Amanfea\", \"Amar\", \"Amarah\", \"Amber\", \"Ambros\", \"Amelia\", \"Ames\", \"Amethyst\", \"Amilion\", \"Amin\", \"Amina\", \"Amineh\",\r\n    \"Ammdar\", \"Amschel\", \"Amundi\", \"Anandra\", \"Anastasia\", \"Anatol\", \"Anatolia\", \"Ancarion\", \"Ancelyn\", \"Anclaiar\", \"Ancla´ar\", \"Andara'an\", \"Andaraan\",\r\n    \"Andemon\", \"Andni\", \"Andolan\", \"Andre\", \"Andrei\", \"Andrew\", \"Andrus\", \"Aneurin\", \"Anfar\", \"Angelica\", \"Angelina\", \"Angharad\", \"Angheryn\",\r\n    \"Angmar\", \"Angus\", \"Anici\", \"Anigh\", \"Anika\", \"Anita\", \"Anitra\", \"Anlaf\", \"Anna\", \"Annion\", \"Annora\", \"Anouar\", \"Anseim\",\r\n    \"Ansel\", \"Anskar\", \"Anson\", \"Antal\", \"Antalya´ar\", \"Antares\", \"Antheirne\", \"Anton\", \"Antone\", \"Antony\", \"Antrim\", \"Anvar\", \"Anya\",\r\n    \"Anzie\", \"Apad\", \"April\", \"Apthorp\", \"Aquill\", \"Arabel\", \"Arabella\", \"Arabeth\", \"Aradan\", \"Aradh\", \"Aragon\", \"Aragorn\", \"Arakin\",\r\n    \"Aralik\", \"Aranel\", \"Arania\", \"Arathorn\", \"Aravis\", \"Arawn\", \"Arax\", \"Araz\", \"Archibald\", \"Arcarune\", \"Arctor\", \"Ardal\", \"Arden\",\r\n    \"Arder\", \"Ardesh\", \"Ardis\", \"Areagne\", \"Arell\", \"Areta\", \"Aretas\", \"Argethlam\", \"Argoeth\", \"Ari\", \"Aria\", \"Ariad\", \"Arian\",\r\n    \"Arianth\", \"Aribeth\", \"Aric\", \"Arid\", \"Ariel\", \"Aries\", \"Arilyn\", \"Arioch\", \"Arka\", \"Arkadia\", \"Arkron\", \"Arkwright\", \"Arlaith\",\r\n    \"Arlan\", \"Arlana\", \"Arlean\", \"Arleano\", \"Arlo\", \"Arlya\", \"Armand\", \"Armar\", \"Armin\", \"Armitage\", \"Armo\", \"Armod\", \"Arn\",\r\n    \"Arnbella\", \"Arnesen\", \"Arnfinn\", \"Arngrim\", \"Arni\", \"Arnlaug\", \"Arno\", \"Arnold\", \"Arnor\", \"Arnora\", \"Arnot\", \"Arnthora\", \"Arnuif\",\r\n    \"Arnulf\", \"Arnvid\", \"Aron\", \"Arrah\", \"Arronax\", \"Arshavir\", \"Arshel\", \"Artemis\", \"Artemus\", \"Arthol\", \"Arthryn\", \"Arthur\", \"Artnistead\",\r\n    \"Artreyu\", \"Artur\", \"Arun\", \"Arvid\", \"Arvida\", \"Arving\", \"Arvo\", \"Arwen\", \"Arwin\", \"Aryen\", \"Aryion\", \"Aryon\", \"Aryus\",\r\n    \"Arzamark\", \"Asa\", \"Asaf\", \"Aschar\", \"Asfrid\", \"Asgard\", \"Asger\", \"Asgerd\", \"Asgrim\", \"Ash\", \"Ashan\", \"Ashane\", \"Ashburton\",\r\n    \"Ashcar\", \"Ashdown\", \"Ashgaroth\", \"Ashley\", \"Ashlyn\", \"Ashne'e\", \"Ashnici\", \"Ashur\", \"Asiria\", \"Askew\", \"Askold\", \"Aslak\", \"Aslan\",\r\n    \"Asleif\", \"Aslior\", \"Asperon\", \"Asta\", \"Astar\", \"Astinus\", \"Astnid\", \"Astnild\", \"Astoiphe\", \"Astra\", \"Astraea\", \"Astran\", \"Astrid\",\r\n    \"Astrin\", \"Atazra\", \"Athabasca\", \"Athana\", \"Athol\", \"Atiaran\", \"Atli\", \"Atmeh\", \"Atreyu\", \"Atropos\", \"Atticus\", \"Attor\", \"Atul\",\r\n    \"Aturin\", \"Atyre\", \"Aubrey\", \"Aud\", \"Audrey\", \"Audrianna\", \"Audric\", \"August\", \"Augustus\", \"Aule\", \"Aulius\", \"Aun\", \"Aura\",\r\n    \"Aurian\", \"Auril\", \"Aurion\", \"Aurora\", \"Avall\", \"Avarath\", \"Avascaen\", \"Avedar\", \"Aveole\", \"Avery\", \"Avon\", \"Avril\", \"Axel\",\r\n    \"Aya\", \"Ayame\", \"Ayaron\", \"Ayarèn\", \"Ayin\", \"Ayir\", \"Aylin\", \"Aylmer\", \"Ayrie\", \"Azeal\", \"Azeezeh\", \"Azgoth\", \"Azhrarn\",\r\n    \"Aziz\", \"Azmodeus\", \"Azrean\", \"Azreck\", \"Azriaz\", \"Aztira\", \"Azure\", \"Azuth\", \"Baba\", \"Babacar\", \"Babrak\", \"Babrine\", \"Babylos\",\r\n    \"Baduk\", \"Baern\", \"Baeron\", \"Baervan\", \"Bag\", \"Bahamut\", \"Baird\", \"Bal\", \"Balain\", \"Baldor\", \"Baldrick\", \"Balduin\", \"Baldur\",\r\n    \"Baldwin\", \"Balendar\", \"Balfour\", \"Balin\", \"Baliol\", \"Ballard\", \"Balor\", \"Balthasard\", \"Balthazar\", \"Bandobras\", \"Bane\", \"Baraca\", \"Barahir\",\r\n    \"Barak\", \"Baralan\", \"Baravar\", \"Barbara\", \"Bardach\", \"Bardel\", \"Bardi\", \"Bardsley\", \"Bardwell\", \"Barend\", \"Barent\", \"Baring\", \"Barll\",\r\n    \"Barlo\", \"Barlow\", \"Barnabas\", \"Barnas\", \"Barnus\", \"Barr\", \"Barret\", \"Barron\", \"Barry\", \"Barstow\", \"Barthel\", \"Bartle\", \"Bartnel\",\r\n    \"Barton\", \"Baslayan\", \"Bayard\", \"Beams\", \"Beatrix\", \"Bechir\", \"Beck\", \"Bede\", \"Bedegran\", \"Begnus\", \"Beldaran\", \"Beldas\", \"Belerion\",\r\n    \"Belgarath\", \"Belgarion\", \"Belita\", \"Bella\", \"Belle\", \"Bellin\", \"Bellinus\", \"Belloc\", \"Belrene\", \"Beltane\", \"Belva\", \"Ben\", \"Benekander\",\r\n    \"Bengt\", \"Benita\", \"Benoist\", \"Beorn\", \"Beowulf\", \"Bera\", \"Bercan\", \"Berek\", \"Berem\", \"Beren\", \"Bergen\", \"Bergthor\", \"Berim\",\r\n    \"Bern\", \"Berna\", \"Bernhart\", \"Bernt\", \"Berronar\", \"Berryn\", \"Bersi\", \"Berta\", \"Bertil\", \"Bertilde\", \"Bertram\", \"Bertran\", \"Bertrem\",\r\n    \"Beryl\", \"Besma\", \"Bestagar\", \"Beth\", \"Bevil\", \"Beyash\", \"Beylard\", \"Bhimrao\", \"Bhoskar\", \"Bhupindar\", \"Bidwell\", \"Bilbo\", \"Bile\",\r\n    \"Bilmar\", \"Bindon\", \"Bion\", \"Bipin\", \"Birath\", \"Birbeck\", \"Birchard\", \"Birger\", \"Birgit\", \"Birket\", \"Bisuneh\", \"Bjarni\", \"Bjorn\",\r\n    \"Bjornstern\", \"Blackwood\", \"Blade\", \"Blaen\", \"Blair\", \"Blame\", \"Blasco\", \"Blaze\", \"Bledsoe\", \"Blenda\", \"Bleran\", \"Blount\", \"Blunyc\",\r\n    \"Bninna\", \"Bo\", \"Bodil\", \"Bodvar\", \"Bolthorn\", \"Boner\", \"Booker\", \"Boott\", \"Boris\", \"Bork\", \"Borlace\", \"Bormor\", \"Boromir\",\r\n    \"Bors\", \"Botho\", \"Botolf\", \"Bourke\", \"Bowie\", \"Boyd\", \"Bracca\", \"Brace\", \"Bracken\", \"Brand\", \"Brandec\", \"Brangwen\", \"Brann\",\r\n    \"Brannon\", \"Branwell\", \"Branwen\", \"Breanon\", \"Bremen\", \"Brenna\", \"Brenner\", \"Brent\", \"Bress\", \"Bretaine\", \"Breyugar\", \"Brianna\", \"Bridget\",\r\n    \"Brielle\", \"Brigantu\", \"Brighton\", \"Brinn\", \"Brion\", \"Bristan\", \"Brita\", \"Brithael\", \"Brock\", \"Brockden\", \"Brodhead\", \"Brodribb\", \"Brogan\",\r\n    \"Bron\", \"Brona\", \"Bronwyn\", \"Bror\", \"Broun\", \"Bruna\", \"Bruno\", \"Brunt\", \"Brynhild\", \"Brynit\", \"Bryoni\", \"Bunnvor\", \"Bupu\",\r\n    \"Burcan\", \"Buri\", \"Burkard\", \"Buzurg\", \"Byam\", \"Byblos\", \"Byre\", \"Byrna\", \"Byrne\", \"Bysshe\", \"Cabell\", \"Cabillo\", \"Caddor\",\r\n    \"Caden\", \"Cadfael\", \"Cadmar\", \"Cadrach\", \"Cadwallader\", \"Caecyn\", \"Cael\", \"Caelon\", \"Caer\", \"Cai\", \"Cail\", \"Cairn\", \"Caitlin\",\r\n    \"Caladon\", \"Calandria\", \"Calbraith\", \"Calder\", \"Cale\", \"Caleb\", \"Calera\", \"Caliban\", \"Callan\", \"Callcott\", \"Calmic\", \"Calrohir\", \"Calumn\",\r\n    \"Calvert\", \"Camber\", \"Cambree\", \"Camiya\", \"Canina\", \"Caprice\", \"Cardon\", \"Caramon\", \"Carelia\", \"Carey\", \"Caribou\", \"Caris\", \"Carl\",\r\n    \"Carless\", \"Carli\", \"Carlyle\", \"Caryne\", \"Caron\", \"Carsten\", \"Carvell\", \"Caryl\", \"Cashin\", \"Caspian\", \"Cassandra\", \"Cassaway\", \"Cathal\",\r\n    \"Catherine\", \"Cathla'in\", \"Cathlain\", \"Cathlin\", \"Cayl\", \"Caylin\", \"Cecilia\", \"Cecily\", \"Cedric\", \"Cedrick\", \"Cedrim\", \"Celadae\", \"Celebdil\",\r\n    \"Celeborn\", \"Celeren\", \"Celes\", \"Celeste\", \"Celestine\", \"Celia\", \"Celowen\", \"Cemark\", \"Ceomyr\", \"Ceowulf\", \"Cercyon\", \"Ceremon\", \"Cerimon\",\r\n    \"Cerindar\", \"Cermor\", \"Cernd\", \"Ceryx\", \"Cespar\", \"Cevir\", \"Ceylinn\", \"Chaka\", \"Chalfant\", \"Challen\", \"Chamon\", \"Chanti\", \"Chard\",\r\n    \"Charissa\", \"Charlene\", \"Charlotte\", \"Chauncey\", \"Chauntea\", \"Chavir\", \"Chaya\", \"Checotah\", \"Chevonne\", \"Chevran\", \"Chichester\", \"Chimaera\", \"Chiodwig\",\r\n    \"Chiron\", \"Chittenden\", \"Chloe\", \"Christopher\", \"Chronepsis\", \"Chronos\", \"Chrowder\", \"Chuz\", \"Cid\", \"Cilmar\", \"Cinerva\", \"Cirkin\", \"Civar\",\r\n    \"Claed\", \"Clafin\", \"Claire\", \"Clarinda\", \"Claudia\", \"Cleghorn\", \"Clerihew\", \"Clinch\", \"Clipster\", \"Clopton\", \"Cloud\", \"Clover\", \"Clovis\",\r\n    \"Cnud\", \"Cnut\", \"Coalter\", \"Cobryn\", \"Coddry\", \"Coel\", \"Coela\", \"Cohn\", \"Colden\", \"Colgan\", \"Colmen\", \"Colon\", \"Colwyn\",\r\n    \"Coma\", \"Conall\", \"Conan\", \"Congal\", \"Conlan\", \"Conn\", \"Connell\", \"Connidas\", \"Connon\", \"Connop\", \"Conor\", \"Conrad\", \"Constantius\",\r\n    \"Conwy\", \"Conyasal\", \"Coprates\", \"Cora\", \"Coral\", \"Corbin\", \"Corellon\", \"Coren\", \"Corin\", \"Corinne\", \"Corinth\", \"Cormac\", \"Cornelius\",\r\n    \"Corrowr\", \"Corry\", \"Corryn\", \"Corwin\", \"Cotton\", \"Cowan\", \"Cowden\", \"Cowper\", \"Coyan\", \"Craigh\", \"Cray\", \"Crewzel\", \"Creydah\",\r\n    \"Cronyn\", \"Croyble\", \"Crundall\", \"Crynal\", \"Crysania\", \"Cryshandylin\", \"Cryunnos\", \"Cuall\", \"Cuane\", \"Cuddry\", \"Cuhaid\", \"Culiross\", \"Culkin\",\r\n    \"Cullen\", \"Cullyn\", \"Cuthalion\", \"Cuthbert\", \"Cylarus\", \"Cylie\", \"Cylmar\", \"Cymbeline\", \"Cyndor\", \"Cynoril\", \"Cyria\", \"Cyriel\", \"Cyrilla\",\r\n    \"Cyrillus\", \"Cyrus\", \"Cyryl\", \"Cythnar\", \"Cyton\", \"Daburn\", \"Daen\", \"Dagar\", \"Dagda\", \"Dagmar\", \"Dagni\", \"Dagny\", \"Dagwyn\",\r\n    \"Dahil\", \"Daikkah\", \"Daila\", \"Daila'in\", \"Daimhin\", \"Daimon\", \"Daisy\", \"Dakamon\", \"Dakoda\", \"Dalamar\", \"Dall\", \"Dalla\", \"Dallandra\",\r\n    \"Dalziel\", \"Damar\", \"Damien\", \"Damon\", \"Dana\", \"Danforth\", \"Daniel\", \"Dannun\", \"Dannyn\", \"Danu\", \"Danuvius\", \"Daood\", \"Daphin\",\r\n    \"Dara\", \"Daragor\", \"Darandriel\", \"Darell\", \"Darien\", \"Dario\", \"Darius\", \"Darkash\", \"Darkboon\", \"Darkspur\", \"Darlis\", \"Daron\", \"Darrell\",\r\n    \"Darrin\", \"Darvin\", \"Daryan\", \"Dashiell\", \"Dashwood\", \"Dasyani\", \"Dathan\", \"Dathanja\", \"Daugas\", \"David\", \"Davnet\", \"Davros\", \"Dawn\",\r\n    \"Dayyan\", \"Dekteon\", \"Delevan\", \"Delita\", \"Dell\", \"Dellin\", \"Delmund\", \"Demarest\", \"Demi\", \"Deminar\", \"Demtris\", \"Denethor\", \"Denhain\",\r\n    \"Denor\", \"Denton\", \"Denzil\", \"Deogol\", \"Derfel\", \"Derian\", \"Dermaria\", \"Derran\", \"Derroll\", \"Derval\", \"Dervilia\", \"Desmona\", \"Devabriel\",\r\n    \"Devaron\", \"Deveron\", \"Devra\", \"Dexter\", \"Dhakos\", \"Dhan\", \"Dharijor\", \"Dholemtrix\", \"Dhur\", \"Diadra\", \"Diagur\", \"Dian\", \"Diarmud\",\r\n    \"Diderik\", \"Diehi\", \"Dighton\", \"Dillon\", \"Dimura\", \"Dinham\", \"Dinivan\", \"Dino\", \"Dionetta\", \"Diony\", \"Dirk\", \"Dirrach\", \"Divos\",\r\n    \"Djamal\", \"Dmitri\", \"Doak\", \"Dolman\", \"Dolyan\", \"Domnu\", \"Donagh\", \"Donal\", \"Donblas\", \"Dongal\", \"Doniol\", \"Donivesh\", \"Donovan\",\r\n    \"Doral\", \"Dorea\", \"Dorian\", \"Dorin\", \"Dorn\", \"Dornhnall\", \"Dorr\", \"Dorsan\", \"Dorvai\", \"Dotta\", \"Doud\", \"Dougal\", \"Doust\",\r\n    \"Draco\", \"Dragan\", \"Dragus\", \"Dragutin\", \"Draka\", \"Drake\", \"Drako\", \"Dran\", \"Draoi\", \"Draven\", \"Drax\", \"Drayko\", \"Dred\",\r\n    \"Dreed\", \"Drexel\", \"Drezael\", \"Drezaem\", \"Drin\", \"Drinda\", \"Drion\", \"Drusilla\", \"Drynn\", \"Dréagg\", \"Duain\", \"Duald\", \"Duana\",\r\n    \"Duer\", \"Dugal\", \"Dugald\", \"Dugdale\", \"Dulasiri\", \"Dumathoin\", \"Dunbar\", \"Dundas\", \"Dunglas\", \"Dunnabar\", \"Dunstan\", \"Dunwody\", \"Duny\",\r\n    \"Dunya\", \"Dur-Shuk\", \"Duran\", \"Durek\", \"Durin\", \"Durnik\", \"Durward\", \"Dwarkanath\", \"Dweomer\", \"Dwyer\", \"Dyce\", \"Dyer\", \"Dygardo\",\r\n    \"Dyke\", \"Dylan\", \"Dymphna\", \"Dynar\", \"Dyneley\", \"Dynera\", \"Dynie\", \"Dytan\", \"Dyvim\", \"E'thane\", \"Eadweard\", \"Eager\", \"Eamon\",\r\n    \"Eanger\", \"Eardley\", \"Earle\", \"Earnest\", \"Eastman\", \"Ebany\", \"Ebba\", \"Eberhard\", \"Ebony\", \"Echael\", \"Eckert\", \"Eckhard\", \"Ector\",\r\n    \"Edcyl\", \"Edda\", \"Edeva\", \"Edgar\", \"Edina\", \"Edla\", \"Edmond\", \"Edmondstone\", \"Edric\", \"Edrie\", \"Edson\", \"Eduard\", \"Edwin\",\r\n    \"Edwina\", \"Edwyn\", \"Eevin\", \"Efiath\", \"Efrem\", \"Egan\", \"Egbert\", \"Egerton\", \"Egil\", \"Egon\", \"Egron\", \"Ehlreth\", \"Ehrman\",\r\n    \"Eilhard\", \"Eilif\", \"Eilinud\", \"Einar\", \"Eindrini\", \"Eirech\", \"Eirik\", \"Eiron\", \"Eithne\", \"Eivind\", \"Ekaterina\", \"Elaine\", \"Elath\",\r\n    \"Elbert\", \"Eldath\", \"Eldavon\", \"Eldgrim\", \"Eldid\", \"Eldin\", \"Eldon\", \"Eldred\", \"Eldric\", \"Eldrin\", \"Eldron\", \"Eldìvèn\", \"Eleanor\",\r\n    \"Eleazar\", \"Electa\", \"Elelil\", \"Elena\", \"Elendil\", \"Eleno'in\", \"Elentari\", \"Elerion\", \"Elessar\", \"Elfnida\", \"Elfnide\", \"Elfnieda\", \"Elford\",\r\n    \"Elhanan\", \"Eliakini\", \"Eliard\", \"Elinor\", \"Elion\", \"Eliseth\", \"Elispeth\", \"Elisseer\", \"Elistan\", \"Eliwood\", \"Elizabeth\", \"Ella\", \"Ellanath\",\r\n    \"Ellen\", \"Ellin\", \"Ellingwood\", \"Ellydryr\", \"Ellynor\", \"Elmeric\", \"Elmira\", \"Eloisa\", \"Elora\", \"Elowen\", \"Elrad\", \"Elric\", \"Elrik\",\r\n    \"Elrodin\", \"Elron\", \"Elrond\", \"Elsa\", \"Elsbeth\", \"Elsdon\", \"Elspeth\", \"Elswyth\", \"Elton\", \"Elu\", \"Elva\", \"Elvalind\", \"Elvarion\",\r\n    \"Elvin\", \"Elvina\", \"Elvira\", \"Elvrit\", \"Elvérion\", \"Elwell\", \"Elwin\", \"Elwyn\", \"Elysia\", \"Emberyl\", \"Emerynn\", \"Emirah\", \"Emma\",\r\n    \"Emna\", \"Emory\", \"Endemian\", \"Endicott\", \"Endoray\", \"Endrede\", \"Endsor\", \"Engeihard\", \"Enigma\", \"Enn\", \"Ennorath\", \"Envi\", \"Enzoray\",\r\n    \"Eolair\", \"Eomer\", \"Eosin\", \"Eowyn\", \"Ephyre\", \"Erana\", \"Erard\", \"Ercan\", \"Erdmann\", \"Erebor\", \"Ergon\", \"Erian\", \"Eric\",\r\n    \"Erich\", \"Erie\", \"Erik\", \"Erika\", \"Erilyth\", \"Erland\", \"Erlend\", \"Erling\", \"Ernald\", \"Ernan\", \"Ernata\", \"Errine\", \"Ervin\",\r\n    \"Eryka\", \"Eryn\", \"Esghar\", \"Eslin\", \"Esmeralda\", \"Esmond\", \"Esnar\", \"Essa\", \"Esselin\", \"Estheria\", \"Estrella\", \"Etelka\", \"Ethelbearn\",\r\n    \"Ethelbert\", \"Ethelburga\", \"Ethelred\", \"Ethelreda\", \"Eudo\", \"Eugene\", \"Eulala\", \"Evadne\", \"Evaine\", \"Evald\", \"Evan\", \"Evarts\", \"Evelina\",\r\n    \"Evelyn\", \"Everard\", \"Evert\", \"Evind\", \"Evo\", \"Evolyn\", \"Evska\", \"Ewald\", \"Ewen\", \"Ewugan\", \"Eystein\", \"Eyulf\", \"Eyvind\",\r\n    \"Ezail\", \"Ezellohar\", \"Ezirith\", \"Ezme\", \"Ezrabar\", \"Ezri\", \"Faber\", \"Fabian\", \"Fael\", \"Faelyn\", \"Fahs\", \"Fairfax\", \"Fairtnan\",\r\n    \"Falathar\", \"Falcon\", \"Falgar\", \"Fali\", \"Falias\", \"Falkiner\", \"Falmalinnar\", \"Falyrias\", \"Fanchon\", \"Fangorn\", \"Fanshaw\", \"Faraday\", \"Farah\",\r\n    \"Farale\", \"Faramir\", \"Faran\", \"Farathar\", \"Farid\", \"Farith\", \"Farli\", \"Farnham\", \"Farouk\", \"Farquhar\", \"Farrin\", \"Farwehl\", \"Fatima\",\r\n    \"Fausto\", \"Fawn\", \"Faysal\", \"Fea\", \"Feargus\", \"Fedor\", \"Feike\", \"Felam\", \"Felladin\", \"Fellador\", \"Fellathor\", \"Fellow\", \"Fenella\",\r\n    \"Fenton\", \"Fenwick\", \"Fera\", \"Ferantay\", \"Ferazhin\", \"Ferdinand\", \"Fergus\", \"Fernand\", \"Feron\", \"Feustmann\", \"Fhinders\", \"Fhorgeir\", \"Fiana\",\r\n    \"Fiathna\", \"Fielding\", \"Fikir\", \"Filippe\", \"Finarfin\", \"Finbar\", \"Findegil\", \"Findley\", \"Finegan\", \"Fingal\", \"Fingalla\", \"Fingil\", \"Finias\",\r\n    \"Finn\", \"Finnbogi\", \"Finos\", \"Fiona\", \"Fiorag\", \"Fiori\", \"Firca\", \"Firin\", \"Firon\", \"Firozhan\", \"Fistandantilus\", \"Fistar\", \"Fistor\",\r\n    \"Fitzedward\", \"Fitzroy\", \"Fizban\", \"Fjolnir\", \"Flandrena\", \"Flare\", \"Flavius\", \"Flint\", \"Floki\", \"Florimund\", \"Flosi\", \"Flygare\", \"Flynn\",\r\n    \"Fnida\", \"Fomorii\", \"Forbus\", \"Forester\", \"Fornost\", \"Foronte\", \"Fothergill\", \"Francisco\", \"Frayja\", \"Freda\", \"Frederic\", \"Frederica\", \"Frederick\",\r\n    \"Fredrick\", \"Fredrik\", \"Freeborn\", \"Freeman\", \"Frey\", \"Freya\", \"Freydis\", \"Fridgeir\", \"Frodo\", \"Fryniwyd\", \"Fuad\", \"Fumorak\", \"Furnifold\",\r\n    \"Fury\", \"Fyodor\", \"Fyodr\", \"Fyza\", \"Gaarn\", \"Gabniela\", \"Gabriel\", \"Gadsby\", \"Gaea\", \"Gael\", \"Gaelinar\", \"Gaena\", \"Gaerdal\",\r\n    \"Gaillard\", \"Gairdner\", \"Galach\", \"Galadren\", \"Galan\", \"Galanna\", \"Galapas\", \"Galaphon\", \"Galar\", \"Galbard\", \"Galderon\", \"Galdor\", \"Gale\",\r\n    \"Galeia\", \"Galen\", \"Galfrey\", \"Galion\", \"Galrandar\", \"Galrion\", \"Gama\", \"Gandalf\", \"Ganduil\", \"Ganith\", \"Gannon\", \"Ganvan\", \"Gardi\",\r\n    \"Garet\", \"Gareth\", \"Garion\", \"Garith\", \"Garl\", \"Garland\", \"Garlenon\", \"Garn\", \"Garon\", \"Garrick\", \"Garrott\", \"Garth\", \"Gartnas\",\r\n    \"Garvin\", \"Garwood\", \"Gaston\", \"Gavendra\", \"Gavin\", \"Gavina\", \"Gawain\", \"Gealsgiath\", \"Gebhard\", \"Geir\", \"Geirmund\", \"Geirstein\", \"Gelonna\",\r\n    \"Genevieve\", \"Geoffrey\", \"Georgii\", \"Gerald\", \"Gerard\", \"Gerd\", \"Gerhard\", \"Gerhart\", \"Gerloc\", \"Gerrard\", \"Gerreint\", \"Gerrish\", \"Gertrude\",\r\n    \"Gervaise\", \"Gesin\", \"Gest\", \"Ghirra\", \"Ghislain\", \"Gholson\", \"Gia\", \"Gibbon\", \"Gilberta\", \"Gilda\", \"Gilden\", \"Gildersleeve\", \"Giles\",\r\n    \"Gilfanon\", \"Gilian\", \"Gilir\", \"Gilli\", \"Gillion\", \"Gillyn\", \"Gilm\", \"Gilraen\", \"Gilthanas\", \"Gimli\", \"Gird\", \"Girin\", \"Gisgin\",\r\n    \"Gizur\", \"Gladstone\", \"Glassford\", \"Glebur\", \"Gleda\", \"Gleocyn\", \"Gleridower\", \"Glida\", \"Glogan\", \"Gloisur\", \"Glorfindel\", \"Glugwyn\", \"Glum\",\r\n    \"Glyn\", \"Glynn\", \"Gnazia\", \"Godfred\", \"Godfrey\", \"Godwin\", \"Goibhniu\", \"Golding\", \"Goldwin\", \"Gollum\", \"Gongalo\", \"Goodhue\", \"Gorbash\",\r\n    \"Gordalius\", \"Gorias\", \"Gorion\", \"Gorm\", \"Gotthard\", \"Govier\", \"Govind\", \"Gowen\", \"Grace\", \"Graham\", \"Graine\", \"Gralon\", \"Grani\",\r\n    \"Grania\", \"Gravin\", \"Greegan\", \"Greenleaf\", \"Gregor\", \"Gregory\", \"Grendahl\", \"Greyfell\", \"Grian\", \"Gridley\", \"Griffid\", \"Griffin\", \"Griffith\",\r\n    \"Griggs\", \"Grim\", \"Grima\", \"Grimhilda\", \"Grimnir\", \"Grindan\", \"Griniing\", \"Grisha\", \"Griswold\", \"Groa\", \"Grover\", \"Grunak\", \"Grunnhild\",\r\n    \"Gruumsh\", \"Gualat\", \"Gudmund\", \"Gudmundur\", \"Gudrid\", \"Gudris\", \"Gudrun\", \"Guibert\", \"Guida\", \"Guido\", \"Gulian\", \"Gunila\", \"Gunnar\",\r\n    \"Gunning\", \"Gunther\", \"Gurnarok\", \"Gurney\", \"Gustav\", \"Guthorm\", \"Guthrie\", \"Guthum\", \"Gutzon\", \"Guy\", \"Gwacyn\", \"Gwaihir\", \"Gweddyn\",\r\n    \"Gwen\", \"Gwenca\", \"Gwenda\", \"Gwendolyn\", \"Gwenevere\", \"Gweniver\", \"Gwildor\", \"Gwoc\", \"Gwomyr\", \"Gwydion\", \"Gwyn\", \"Gwyneth\", \"Gwynfryd\",\r\n    \"Gwyran\", \"Gwythinn\", \"Gyda\", \"Gylian\", \"Gymir\", \"Haakon\", \"Habib\", \"Hablot\", \"Hack\", \"Haddon\", \"Hadrian\", \"Haestan\", \"Hafez\",\r\n    \"Hafgrim\", \"Hagar\", \"Haigh\", \"Hakatri\", \"Haki\", \"Hakon\", \"Halbert\", \"Halcyon\", \"Haldane\", \"Haldor\", \"Hale\", \"Halfdan\", \"Haliina\",\r\n    \"Hall\", \"Halldis\", \"Halldor\", \"Halley\", \"Hallfred\", \"Hallfrid\", \"Hallgerd\", \"Hallkel\", \"Hallock\", \"Halloweii\", \"Hallveig\", \"Halvord\", \"Hamlin\",\r\n    \"Hamnet\", \"Hanford\", \"Hani\", \"Haninah\", \"Hannibal\", \"Hanoran\", \"Hansine\", \"Hapweth\", \"Harald\", \"Harbaugh\", \"Harcourt\", \"Hardernan\", \"Hardon\",\r\n    \"Hardwicke\", \"Harek\", \"Harkness\", \"Harlan\", \"Harlo\", \"Harold\", \"Haroon\", \"Harpo\", \"Harren\", \"Harthan\", \"Harthran\", \"Hartpole\", \"Hartwig\",\r\n    \"Harwood\", \"Hasket\", \"Hassan\", \"Hastein\", \"Hatcher\", \"Hattrick\", \"Hauk\", \"Havard\", \"Havelock\", \"Hayvan\", \"Hazard\", \"Hazel\", \"Haziran\",\r\n    \"Hazrond\", \"Healdon\", \"Heardred\", \"Heaslip\", \"Heather\", \"Hector\", \"Hedda\", \"Hedin\", \"Hedwig\", \"Heimer\", \"Helena\", \"Helga\", \"Helgi\",\r\n    \"Helir\", \"Helix\", \"Helm\", \"Helma\", \"Helmi\", \"Heman\", \"Hemming\", \"Hendrik\", \"Hengist\", \"Henna\", \"Henrick\", \"Henry\", \"Geramon\",\r\n    \"Herdis\", \"Herekin\", \"Hereward\", \"Herijar\", \"Hermione\", \"Heron\", \"Hertha\", \"Heryom\", \"Herzog\", \"Heward\", \"Hhaba'id\", \"Hhabezur\", \"Hickling\",\r\n    \"Hidohebhi\", \"Hifryn\", \"Hild\", \"Hilda\", \"Hildebrand\", \"Hildegarde\", \"Hildric\", \"Himli\", \"Hisar\", \"Hislop\", \"Hjalmar\", \"Hjalti\", \"Hjeldin\",\r\n    \"Hjort\", \"Hjorth\", \"Hlif\", \"Hoadley\", \"Hoar\", \"Hobart\", \"Hodgdon\", \"Hogg\", \"Hogni\", \"Holbrook\", \"Holger\", \"Holgi\", \"Hollister\",\r\n    \"Holly\", \"Homli\", \"Hookham\", \"Horan\", \"Horatio\", \"Hord\", \"Horik\", \"Hormstein\", \"Horsa\", \"Hortensia\", \"Horton\", \"Hoskuld\", \"Hosni\",\r\n    \"Hossein\", \"Howarth\", \"Howland\", \"Hrafn\", \"Hrapp\", \"Hrefna\", \"Hrethel\", \"Hring\", \"Hroald\", \"Hrodyn\", \"Hrolf\", \"Hrothgar\", \"Hrugan\",\r\n    \"Hruggek\", \"Hruse\", \"Hrut\", \"Huffatn\", \"Hulbeart\", \"Hulda\", \"Hultz\", \"Humbert\", \"Hunter\", \"Hurd\", \"Hurgal\", \"Hurvin\", \"Hussain\",\r\n    \"Hustana\", \"Hyarantar\", \"Hyarante\", \"Hyder\", \"Hyfryn\", \"Hygelac\", \"Hylissa\", \"Hynman\", \"Hyrak\", \"Ian\", \"Iana\", \"Ibitz\", \"Ibrahim\",\r\n    \"Ibrandul\", \"Ica\", \"Icarus\", \"Icava\", \"Ick\", \"Ida\", \"Idarolan\", \"Iden\", \"Idris\", \"Iduna\", \"Iduné\", \"Ies'lorn\", \"Igjaru\",\r\n    \"Igor\", \"Ikarin\", \"Ilena\", \"Ilermath\", \"Ilia\", \"Iliriya\", \"Illentik\", \"Illuin\", \"Illyana\", \"Ilmare\", \"Ilniora\", \"Ilthoss\", \"Iluvatar\",\r\n    \"Ilya\", \"Ilyesha\", \"Imajin\", \"Imnar\", \"Imoen\", \"Imphela\", \"Imrador\", \"Imrahan\", \"Imrahim\", \"Imril\", \"Imryr\", \"Inahwen\", \"Indech\",\r\n    \"Indigo\", \"Indira\", \"Indreju\", \"Indria\", \"Ingald\", \"Ingeborg\", \"Ingen\", \"Ingi\", \"Ingirid\", \"Ingolf\", \"Ingram\", \"Ingrid\", \"Ingunn\",\r\n    \"Inifael\", \"Inigo\", \"Inisfa'il\", \"Iosaz\", \"Iosef\", \"Irgash\", \"Irial\", \"Irian\", \"Iris\", \"Irma\", \"Irphilin\", \"Irsai\", \"Irvin\",\r\n    \"Irwick\", \"Isael\", \"Isak\", \"Isambard\", \"Isbeorn\", \"Iscal\", \"Iselore\", \"Isengard\", \"Isengrim\", \"Iserion\", \"Isgrimnur\", \"Ishmael\", \"Isidora\",\r\n    \"Isiki\", \"Isildur\", \"Isilith\", \"Isleif\", \"Ismail\", \"Isolde\", \"Isorn\", \"Issak\", \"Ithaca\", \"Iuz\", \"Ivan\", \"Ivar\", \"Ivor\",\r\n    \"Ivy\", \"Iwanda\", \"Iyu'nigato\", \"Izard\", \"Izebel\", \"Izvire\", \"Jace\", \"Jacinth\", \"Jacoby\", \"Jacor\", \"Jade\", \"Jaden\", \"Jadzia\",\r\n    \"Jael\", \"Jaffar\", \"Jagadis\", \"Jaheira\", \"Jahrec\", \"Jahverbhai\", \"Jalasil\", \"Jalavier\", \"Jaligal\", \"Jamila\", \"Janda'nan\", \"Jandanan\", \"Janix\",\r\n    \"Janna\", \"Janus\", \"Janvel\", \"Jarak\", \"Jarazal\", \"Jared\", \"Jarek\", \"Jarnagua\", \"Jarriel\", \"Jarvin\", \"Jasara\", \"Jasek\", \"Jaseve\",\r\n    \"Jasha\", \"Jasmine\", \"Jason\", \"Javair\", \"Javon\", \"Jawaharial\", \"Jayce\", \"Jayden\", \"Jaylidan\", \"Jayna\", \"Jaysen\", \"Jazhara\", \"Jazrel\",\r\n    \"Jedd\", \"Jeffen\", \"Jehryn\", \"Jelyn\", \"Jenantar\", \"Jenkin\", \"Jennifer\", \"Jens\", \"Jensine\", \"Jephson\", \"Jerec\", \"Jeryth\", \"Jesiper\",\r\n    \"Jespar\", \"Jesslyn\", \"Jestyn\", \"Jethis\", \"Jevan\", \"Jevist\", \"Jezryanadar\", \"Jhael\", \"Jhaelen\", \"Jhany\", \"Jhardamòr\", \"Jharkor\", \"Jhary\",\r\n    \"Jihad\", \"Jillian\", \"Jingizu\", \"Jintah\", \"Jiriki\", \"Jirnost\", \"Jocelyn\", \"Jochan\", \"Johannes\", \"John\", \"Jolan\", \"Jomano\", \"Jonaya\",\r\n    \"Joran\", \"Jordan\", \"Joriel\", \"Jornadesh\", \"Jorunn\", \"Joscelyn\", \"Joseph\", \"Josephine\", \"Josette\", \"Joshua\", \"Jotham\", \"Jovena\", \"Jubini\",\r\n    \"Jullana\", \"Junius\", \"Juno\", \"Juntalin\", \"Jura\", \"Jurim\", \"Jusif\", \"Juss\", \"Jyresh\", \"K'aarna\", \"Kaarna\", \"Kael\", \"Kaelin\",\r\n    \"Kaffa\", \"Kai\", \"Kaia\", \"Kailyn\", \"Kaimana\", \"Kaitlinn\", \"Kaja\", \"Kalan\", \"Kalantir\", \"Kalar\", \"Kaldar\", \"Kaleen\", \"Kalen\",\r\n    \"Kalf\", \"Kalia\", \"Kalina\", \"Kalvan\", \"Kalvaro\", \"Kalyra\", \"Kalysha\", \"Kamril\", \"Kamshir\", \"Kanoa\", \"Kaori\", \"Kaprin\", \"Kara\",\r\n    \"Karali\", \"Karel\", \"Karelia\", \"Kari\", \"Karim\", \"Karinca\", \"Karine\", \"Karis\", \"Karitsa\", \"Karker\", \"Karl\", \"Karlsefni\", \"Karran\",\r\n    \"Karya\", \"Kaschak\", \"Kasia\", \"Kaspar\", \"Kasreyn\", \"Kathena\", \"Kathran\", \"Katishimo\", \"Katla\", \"Katnina\", \"Katrin\", \"Katrina\", \"Kavalam\",\r\n    \"Kavalnir\", \"Kaylianna\", \"Kaylin\", \"Kazairl\", \"Kazalim\", \"Kazir\", \"Keavy\", \"Keelan\", \"Kegan\", \"Keiko\", \"Keldorn\", \"Kelin\", \"Kellin\",\r\n    \"Kelma'in\", \"Kelson\", \"Kelth\", \"Kelvin\", \"Kemble\", \"Kendall\", \"Kendra\", \"Kendrick\", \"Kenesaw\", \"Kenin\", \"Kenny\", \"Kenobi\", \"Kenrick\",\r\n    \"Kerik\", \"Kerish\", \"Kermit\", \"Kerrigan\", \"Keshar\", \"Kesrick\", \"Kethios\", \"Ketial\", \"Ketil\", \"Kettali\", \"Kevan\", \"Keven\", \"Kevlin\",\r\n    \"Keyrnon\", \"Khader\", \"Khalia\", \"Khalid\", \"Khanzadian\", \"Kharas\", \"Khealynn\", \"Khelben\", \"Kheldor\", \"Khelen\", \"Khelin\", \"Khelyn\", \"Khendraja'aro\",\r\n    \"Khenel\", \"Khezeed\", \"Khindawe\", \"Khirsha\", \"Khlor\", \"Khris\", \"Khyved\", \"Ki'ushapo\", \"Kian\", \"Kiborno\", \"Kiera\", \"Kieran\", \"Kikkasut\",\r\n    \"Kilas\", \"Kilian\", \"Killion\", \"Kimmuriel\", \"Kimura\", \"Kinloch\", \"Kinson\", \"Kippler\", \"Kira\", \"Kiri\", \"Kirjava\", \"Kirk\", \"Kirren\",\r\n    \"Kirsopp\", \"Kirsten\", \"Kishin\", \"Kisin\", \"Kitiara\", \"Kjeldor\", \"Kjindar\", \"Klaus\", \"Klean\", \"Klerak\", \"Knud\", \"Knut\", \"Knute\",\r\n    \"Koabon\", \"Kolbein\", \"Kolchash\", \"Kolskegg\", \"Kolya\", \"Kona\", \"Konrad\", \"Konstantine\", \"Korban\", \"Kord\", \"Koreth\", \"Korgan\", \"Korm\",\r\n    \"Kormar\", \"Kornag\", \"Korska\", \"Kosh\", \"Kota\", \"Kovelir\", \"Krinn\", \"Krishnalai\", \"Kroh\", \"Krom\", \"Kronos\", \"Kuno\", \"Kurd\",\r\n    \"Kurn\", \"Kurt\", \"Kurin\", \"Kuros\", \"Kurtulmak\", \"Ky'ishi\", \"Ky'varan\", \"Kyle\", \"Kylindra\", \"Kypros\", \"Kyrie\", \"Kyriel\", \"La'ahl\",\r\n    \"Lachesis\", \"Lachian\", \"Ladia\", \"Ladoros\", \"Laeli\", \"Laelia\", \"Laerrui\", \"Lahar\", \"Lahsai\", \"Lalely\", \"Lamar\", \"Lambi\", \"Lan\",\r\n    \"Lana\", \"Lance\", \"Lancelot\", \"Landailyn\", \"Landoris\", \"Landrea\", \"Laneth\", \"Langhorne\", \"Langrian\", \"Langston\", \"Lanthal\", \"Lanthorn\", \"Larad\",\r\n    \"Lardner\", \"Larisa\", \"Larkin\", \"Larn\", \"Larnea\", \"Lars\", \"Larz\", \"Lashar\", \"Lateia\", \"Lathander\", \"Laurana\", \"Laurelin\", \"Laxton\",\r\n    \"Lazar\", \"Lazlo\", \"Lea\", \"Leareth\", \"Leathian\", \"Lec\", \"Ledyard\", \"Leela\", \"Legolas\", \"Legrand\", \"Leif\", \"Leighton\", \"Leika\",\r\n    \"Leila\", \"Leilah\", \"Leli\", \"Lembar\", \"Lenka\", \"Lenox\", \"Leo\", \"Leofric\", \"Leon\", \"Leonard\", \"Leonardo\", \"Leopond\", \"Lesesne\",\r\n    \"Lestyn\", \"Leta\", \"Letor\", \"Lev\", \"Lewellyri\", \"Lexan\", \"Lexx\", \"Lhuc\", \"Lia\", \"Liana\", \"Liena\", \"Lightfoot\", \"Liliane\",\r\n    \"Lilin\", \"Lina\", \"Lindar\", \"Linmer\", \"Linnea\", \"Lios\", \"Liphar\", \"Lippard\", \"Liptrot\", \"Lirith\", \"Lithar\", \"Littleton\", \"Livermore\",\r\n    \"Livia\", \"Ljot\", \"Ljotolf\", \"Lluth\", \"Llyn\", \"Llythin\", \"Lobelia\", \"Lobryn\", \"Lobur\", \"Locke\", \"Lockwood\", \"Loddlaen\", \"Lodica\",\r\n    \"Lodin\", \"Loella\", \"Logan\", \"Loibur\", \"Loili\", \"Lola\", \"Lonvan\", \"Lore\", \"Loric\", \"Lorin\", \"Lormyr\", \"Lothar\", \"Lothrop\",\r\n    \"Lott\", \"Lotta\", \"Loudon\", \"Louisa\", \"Lovegood\", \"Lovva\", \"Lovyan\", \"Luas\", \"Lucan\", \"Lucca\", \"Lucia\", \"Lucian\", \"Lucinda\",\r\n    \"Lucius\", \"Lucrecia\", \"Ludmila\", \"Luella\", \"Lufkin\", \"Lugh\", \"Luhsane\", \"Lum\", \"Lumbar\", \"Luna\", \"Lunar\", \"Lunetta\", \"Lupin\",\r\n    \"Lurican\", \"Lurue\", \"Luscan\", \"Luther\", \"Luthian\", \"Luvina\", \"Lycias\", \"Lydia\", \"Lylas\", \"Lyle\", \"Lymo\", \"Lyndall\", \"Lyndon\",\r\n    \"Lynette\", \"Lynis\", \"Lynn\", \"Lypilla\", \"Lyra\", \"Lyrian\", \"Lyrin\", \"Lyron\", \"Lysander\", \"Lyssa\", \"Lythia\", \"Lythian\", \"Lytler\",\r\n    \"Lyzandra\", \"Lyzette\", \"Lórien\", \"Mabon\", \"Macallan\", \"Macaulay\", \"Macer\", \"Mackim\", \"Macvey\", \"Maddern\", \"Maddock\", \"Madelon\", \"Madhao\",\r\n    \"Madora\", \"Maec\", \"Maegwin\", \"Mael\", \"Maerraent\", \"Mafka\", \"Magda\", \"Magh\", \"Magill\", \"Magna\", \"Magnus\", \"Magus\", \"Mahion\",\r\n    \"Mahmud\", \"Mahri\", \"Maia\", \"Maidah\", \"Maidak\", \"Maihar\", \"Makoma\", \"Malach\", \"Malachias\", \"Maladack\", \"Malador\", \"Malak\", \"Malar\",\r\n    \"Malcoff\", \"Malcolm\", \"Malfar\", \"Malia\", \"Maliforin\", \"Malkil\", \"Malto\", \"Malvin\", \"Malvtha\", \"Mama\", \"Mamba\", \"Mana\", \"Manala\",\r\n    \"Manaverr\", \"Manfred\", \"Mankey\", \"Mannin\", \"Manon\", \"Mansour\", \"Manton\", \"Manwe\", \"Maoll\", \"March\", \"Marcus\", \"Marena\", \"Margarita\",\r\n    \"Margery\", \"Mariandor\", \"Marid\", \"Marina\", \"Marion\", \"Marissa\", \"Marisse\", \"Mark\", \"Markham\", \"Maroof\", \"Marques\", \"Marsden\", \"Marshtnan\",\r\n    \"Marsineh\", \"Marta\", \"Martin\", \"Martus\", \"Mary\", \"Maryn\", \"Mathilda\", \"Mathilde\", \"Matilda\", \"Matthew\", \"Matthias\", \"Maudlin\", \"Maura\",\r\n    \"Mavis\", \"Maxander\", \"Maxfield\", \"Maximilian\", \"Maximus\", \"Maya\", \"Mayhew\", \"Mazrak\", \"Medar\", \"Medart\", \"Medea\", \"Meder\", \"Medrom\",\r\n    \"Megan\", \"Meghnad\", \"Mehmet\", \"Mekeesha\", \"Melba\", \"Melchior\", \"Meleri\", \"Meliadoul\", \"Melian\", \"Melisande\", \"Melkor\", \"Mellyora\", \"Melnyth\",\r\n    \"Melora\", \"Melva\", \"Melvaig\", \"Memor\", \"Men\", \"Menard\", \"Mendolin\", \"Menelvagor\", \"Mennefer\", \"Meoran\", \"Mephistopheles\", \"Merah\", \"Merasye\",\r\n    \"Meredith\", \"Meriadoc\", \"Merifa\", \"Merivan\", \"Merlin\", \"Merrilee\", \"Merryn\", \"Mervyn\", \"Merwold\", \"Merwolf\", \"Mes'ard\", \"Meta\", \"Methos\",\r\n    \"Methuen\", \"Michael\", \"Michel\", \"Mideya\", \"Midhat\", \"Midra\", \"Mignon\", \"Miguel\", \"Mikhail\", \"Mila\", \"Milada\", \"Milander\", \"Milandro\",\r\n    \"Mileaha\", \"Millard\", \"Milo\", \"Mimir\", \"Mina\", \"Minella\", \"Miner\", \"Minna\", \"Minx\", \"Mira\", \"Miragon\", \"Miranda\", \"Mirandros\",\r\n    \"Miriel\", \"Mirrash\", \"Mirromi\", \"Miryam\", \"Misha\", \"Mishanti\", \"Misin\", \"Mist\", \"Mithrandir\", \"Mithryl\", \"Mitre\", \"Miwa\", \"Mizra\",\r\n    \"Moda\", \"Modeus\", \"Moffett\", \"Mohammed\", \"Mohieddin\", \"Moina\", \"Moira\", \"Moiriane\", \"Moisur\", \"Molina\", \"Mona\", \"Monach\", \"Montfort\",\r\n    \"Mora\", \"Moradin\", \"Mord\", \"Moredlin\", \"Morgan\", \"Morgon\", \"Morgwin\", \"Moriana\", \"Morik\", \"Morin\", \"Morley\", \"Morna\", \"Morpheus\",\r\n    \"Morrigan\", \"Mortos\", \"Mortrock\", \"Morven\", \"Moya\", \"Muammar\", \"Mubur\", \"Muhammed\", \"Muhlwena\", \"Mujibur\", \"Muktar\", \"Munin\", \"Murdo\",\r\n    \"Murias\", \"Murina\", \"Murrough\", \"Mussa\", \"Mustadio\", \"Mustafa\", \"Mylin\", \"Mylé\", \"Myna\", \"Myra\", \"Myriam\", \"Myrick\", \"Myrmeen\",\r\n    \"Myrna\", \"Myron\", \"Myrrdyn\", \"Myrrha\", \"Myshella\", \"Mythil\", \"Myvor\", \"N'hadha\", \"Nada\", \"Nadezhda\", \"Nadia\", \"Nadir\", \"Nagai\",\r\n    \"Nagel\", \"Nagvar\", \"Nahar\", \"Naia\", \"Naidel\", \"Najib\", \"Nakea\", \"Nalia\", \"Nall\", \"Nanorion\", \"Naois\", \"Naomi\", \"Napollo\",\r\n    \"Narasen\", \"Narcista\", \"Narisa\", \"Narvi\", \"Nasir\", \"Nasser\", \"Natalia\", \"Natasha\", \"Nathalia\", \"Nathalie\", \"Natty\", \"Nazar\", \"Nebron\",\r\n    \"Nedda\", \"Nedstar\", \"Neelix\", \"Negley\", \"Nemm\", \"Nemuel\", \"Neral\", \"Neri\", \"Nerian\", \"Nerilka\", \"Nerissa\", \"Nerull\", \"Nesbit\",\r\n    \"Nesta\", \"Nethuan\", \"Neva\", \"Nevaeh\", \"Nevard\", \"Nevena\", \"Nevile\", \"Nevyn\", \"Newall\", \"Newbold\", \"Newman\", \"Neysa\", \"Neza\",\r\n    \"Nibbidard\", \"Nichol\", \"Nicor\", \"Nienna\", \"Night\", \"Nigil\", \"Nikolai\", \"Nikua\", \"Nila\", \"Nimir\", \"Nimrodel\", \"Nina\", \"Ninian\",\r\n    \"Niomir\", \"Nira'in\", \"Nirnir\", \"Nita\", \"Nivek\", \"Nivilian\", \"Nizam\", \"Nizar\", \"Nobanion\", \"Nodaran\", \"Noela\", \"Nolan\", \"Nona\",\r\n    \"Noora\", \"Nor\", \"Nordri\", \"Noreen\", \"Norine\", \"Norle\", \"Norna\", \"Norval\", \"Norvin\", \"Norwood\", \"Nova\", \"Novalis\", \"Novita\",\r\n    \"Novomira\", \"Nu'endo\", \"Nuada\", \"Nuadi\", \"Nuala\", \"Nuale\", \"Nuanni\", \"Nungo\", \"Nunila\", \"Nura\", \"Nurdoch\", \"Nurgan\", \"Nuri\",\r\n    \"Nushia\", \"Nyassa\", \"Nylan\", \"Nymara\", \"Nynaeve\", \"Nyra\", \"Nytasa\", \"Oakes\", \"Oalyn\", \"Obed\", \"Oberon\", \"Ocar\", \"Oda\",\r\n    \"Odar\", \"Odd\", \"Oden\", \"Odilia\", \"Odimus\", \"Odo\", \"Odona\", \"Ofeig\", \"Ogden\", \"Oghma\", \"Ogma\", \"Ogmund\", \"Ogrus\",\r\n    \"Okander\", \"Olac\", \"Olaf\", \"Oldac\", \"Oldham\", \"Olga\", \"Olissa\", \"Olof\", \"Olorin\", \"Oloru\", \"Olvir\", \"Olya\", \"Omandras\",\r\n    \"Omar\", \"Omassus\", \"Ombrum\", \"Omer\", \"Onslow\", \"Onufrio\", \"Onund\", \"Onyx\", \"Ooma\", \"Oona\", \"Oonai\", \"Opal\", \"Ophelia\",\r\n    \"Orah\", \"Orcrist\", \"Ordway\", \"Oriana\", \"Orin\", \"Orion\", \"Orius\", \"Orivaen\", \"Orlandu\", \"Orlata\", \"Orm\", \"Ormsby\", \"Orome\",\r\n    \"Oron\", \"Orren\", \"Orridge\", \"Orsola\", \"Orson\", \"Osa\", \"Osiris\", \"Oskavar\", \"Ospar\", \"Osric\", \"Oswin\", \"Othello\", \"Othilia\",\r\n    \"Otho\", \"Othran\", \"Otiluke\", \"Otkel\", \"Otrygg\", \"Ottar\", \"Ottilia\", \"Otto\", \"Overton\", \"Owain\", \"Owen\", \"Owyn\", \"Ozatras\",\r\n    \"Ozto\", \"Ozur\", \"Padraic\", \"Padrias\", \"Paget\", \"Pala\", \"Palma\", \"Pamar\", \"Pan\", \"Parbha\", \"Pargascor\", \"Parr\", \"Pasca\",\r\n    \"Paschal\", \"Passmore\", \"Patnas\", \"Pattabhai\", \"Pavel\", \"Pean\", \"Pearl\", \"Pearsall\", \"Peffer\", \"Peiham\", \"Peitar\", \"Peleg\", \"Pelipi\",\r\n    \"Pellin\", \"Pendleton\", \"Penfield\", \"Pengolod\", \"Penhallow\", \"Penniman\", \"Penrhyn\", \"Pepperell\", \"Pereban\", \"Peredon\", \"Peregrin\", \"Peregrine\", \"Perith\",\r\n    \"Peronn\", \"Perrin\", \"Persifor\", \"Pestivar\", \"Peter\", \"Pethros\", \"Petra\", \"Petrea\", \"Petronella\", \"Pflarr\", \"Phanuel\", \"Pharatnond\", \"Pharcellus\",\r\n    \"Phelim\", \"Philo\", \"Philpot\", \"Phimister\", \"Phoenix\", \"Phyrrus\", \"Pia\", \"Picar\", \"Pickman\", \"Pigot\", \"Pike\", \"Pine\", \"Pinkham\",\r\n    \"Pinkney\", \"Pinkstone\", \"Piotr\", \"Pittheus\", \"Plaisted\", \"Plunimer\", \"Plunkett\", \"Polassar\", \"Pollard\", \"Pollock\", \"Polonius\", \"Polycarp\", \"Pomeroy\",\r\n    \"Porthios\", \"Powell\", \"Prafulla\", \"Prendergast\", \"Preston\", \"Prichard\", \"Proctor\", \"Prospero\", \"Provida\", \"Psilofyr\", \"Puck\", \"Pue\", \"Pulisk\",\r\n    \"Pulteney\", \"Purdon\", \"Pyke\", \"Pyros\", \"Pysander\", \"Quaan\", \"Quagel\", \"Qualin\", \"Quan\", \"Quarles\", \"Quasar\", \"Quascar\", \"Quass\",\r\n    \"Quebba\", \"Quelfinas\", \"Quesan\", \"Queygo\", \"Quiddle\", \"Quinn\", \"Quiss\", \"Quixano\", \"Quora\", \"Quvar\", \"Quvean\", \"Raagon\", \"Raban\",\r\n    \"Rabind\", \"Rabur\", \"Rach\", \"Rachid\", \"Rackafel\", \"Rackhir\", \"Radagast\", \"Radija\", \"Rae\", \"Rael\", \"Raen\", \"Rafa\", \"Rafael\",\r\n    \"Rafur\", \"Ragen\", \"Ragna\", \"Ragnal\", \"Ragnar\", \"Ragnhild\", \"Rahaz\", \"Rai\", \"Raikes\", \"Rails\", \"Raimon\", \"Raina\", \"Raine\",\r\n    \"Raisa\", \"Raistlin\", \"Ralina\", \"Ralmanor\", \"Ralph\", \"Ramen\", \"Ramli\", \"Ramman\", \"Ramona\", \"Ramora\", \"Ramous\", \"Ramza\", \"Ranald\",\r\n    \"Ranath\", \"Rancor\", \"Rand\", \"Randar\", \"Randoer\", \"Randolf\", \"Randor\", \"Ranfurly\", \"Ranjan\", \"Rankin\", \"Rannuif\", \"Rannveig\", \"Raphael\",\r\n    \"Rary\", \"Rashiel\", \"Rasputin\", \"Rathack\", \"Rathanos\", \"Rathgar\", \"Rattray\", \"Rauros\", \"Ravenor\", \"Ravi\", \"Rayne\", \"Razamor\", \"Raziel\",\r\n    \"Razzan\", \"Rebecca\", \"Recoun\", \"Redcliffe\", \"Regalorn\", \"Regnar\", \"Reina\", \"Reis\", \"Relm\", \"Rem\", \"Remi\", \"Remnor\", \"Remus\",\r\n    \"Renar\", \"Renata\", \"Rendel\", \"Rengoll\", \"Reoc\", \"Resha\", \"Rethral\", \"Reva\", \"Rex\", \"Reyna\", \"Rezah\", \"Rhadry\", \"Rhaederle\",\r\n    \"Rhaeryn\", \"Rhea\", \"Rhiannon\", \"Rhiow\", \"Rhodhy\", \"Rhona\", \"Rhonda\", \"Rhora\", \"Rhorleif\", \"Rhorvald\", \"Rhundas\", \"Rhymer\", \"Rhynn\",\r\n    \"Rhys\", \"Riallus\", \"Riamon\", \"Rickard\", \"Ricyn\", \"Rigolio\", \"Rilir\", \"Rinaldus\", \"Ringgold\", \"Risaya\", \"Riss\", \"Rith\", \"Riven\",\r\n    \"Roach\", \"Roark\", \"Rockhill\", \"Rodefer\", \"Roderic\", \"Rodhan\", \"Rognvald\", \"Roignar\", \"Roland\", \"Rolf\", \"Rollo\", \"Roman\", \"Romelia\",\r\n    \"Romer\", \"Romney\", \"Ronan\", \"Root\", \"Rorik\", \"Rosalyn\", \"Rosamund\", \"Roscoe\", \"Rose\", \"Rosefyre\", \"Roseline\", \"Roshena\", \"Rosskeen\",\r\n    \"Roundell\", \"Rowena\", \"Ruadan\", \"Ruan\", \"Rubar\", \"Ruben\", \"Rubrick\", \"Ruby\", \"Rucker\", \"Rudyard\", \"Rufina\", \"Rufus\", \"Ruggles\",\r\n    \"Ruhollah\", \"Ruinar\", \"Rulian\", \"Rulinian\", \"Rumil\", \"Runa\", \"Runold\", \"Runolf\", \"Runus\", \"Rurik\", \"Rusgar\", \"Ruth\", \"Rutland\",\r\n    \"Ruwen\", \"Ryana\", \"Rycaro\", \"Rychanna\", \"Rygar\", \"Ryll\", \"Rylla\", \"Rynnyn\", \"Ryodan\", \"Ryoga\", \"Ryoka\", \"Saalem\", \"Sabal\",\r\n    \"Sabhel\", \"Sabriel\", \"Sabrok\", \"Sacheverall\", \"Sackville\", \"Saddam\", \"Sadler\", \"Sador\", \"Saedd\", \"Saermund\", \"Saeunn\", \"Safrin\", \"Saia\",\r\n    \"Said\", \"Saifai\", \"Saiwyn\", \"Salina\", \"Salmon\", \"Salter\", \"Sam\", \"Sambrea\", \"Samia\", \"Samira\", \"Sammel\", \"Samuel\", \"Sanfrid\",\r\n    \"Sano'rye\", \"Sanoreya\", \"Sanoria\", \"Sarcyn\", \"Sardior\", \"Sardul\", \"Sarel\", \"Sarevok\", \"Sargonus\", \"Saria\", \"Sarina\", \"Sarisin\", \"Sariya\",\r\n    \"Sarrask\", \"Saruman\", \"Sasha\", \"Saska\", \"Saturn\", \"Sauron\", \"Savah\", \"Savion\", \"Sawdon\", \"Sayan\", \"Scenesefa\", \"Scudamore\", \"Scythe\",\r\n    \"Sebastian\", \"Sebrinth\", \"Sechier\", \"Sedgely\", \"Seersha\", \"Segojan\", \"Sehanine\", \"Seitarin\", \"Selema\", \"Selena\", \"Selene\", \"Selig\", \"Selim\",\r\n    \"Selina\", \"Selis\", \"Selith\", \"Selune\", \"Selwyn\", \"Semuta\", \"Senith\", \"Senna\", \"Sephia\", \"Sephya\", \"Sepiroth\", \"Seramir\", \"Seraphina\",\r\n    \"Serena\", \"Serenyi\", \"Sergei\", \"Seriozha\", \"Seryan\", \"Seryl\", \"Seryth\", \"Seth\", \"Sethron\", \"Sevadia\", \"Severin\", \"Sevros\", \"Sevy\",\r\n    \"Sha'dar\", \"Sha'rell\", \"Shackerley\", \"Shadizad\", \"Shadrach\", \"Shadworth\", \"Shaera\", \"Shaivar\", \"Shaivir\", \"Shala\", \"Shalamar\", \"Shalandain\", \"Shalat\",\r\n    \"Shalhassan\", \"Shalindra\", \"Shalon\", \"Shalpan\", \"Shamane\", \"Shamir\", \"Shana\", \"Shandalar\", \"Shanell\", \"Shar\", \"Sharada\", \"Sharaq\", \"Shard\",\r\n    \"Sharif\", \"Sharilla\", \"Sharl\", \"Sharla\", \"Sharmaine\", \"Sharman\", \"Sharna\", \"Sharnira\", \"Sharra\", \"Sharteel\", \"Shaundra\", \"Sharyn\", \"Shayera\",\r\n    \"Shayla\", \"Shayll\", \"Shayonea\", \"Shea\", \"Sheegoth\", \"Sheeryl\", \"Sheherazad\", \"Shemsin\", \"Sheridan\", \"Sherif\", \"Sherry\", \"Shezael\", \"Shima'onari\",\r\n    \"Shintaro\", \"Shiza\", \"Shuinn\", \"Shuna\", \"Shurakai\", \"Shurik\", \"Shushila\", \"Shylock\", \"Siandar\", \"Sibert\", \"Sibyl\", \"Sidhe\", \"Siglinde\",\r\n    \"Sigmund\", \"Signe\", \"Sigred\", \"Sigrid\", \"Sigtrydd\", \"Sigurd\", \"Sigvaldi\", \"Silatasar\", \"Silius\", \"Silma\", \"Silmariel\", \"Silphane\", \"Silvain\",\r\n    \"Silvan\", \"Silvanus\", \"Silvera\", \"Silveron\", \"Silvia\", \"Silvyn\", \"Simir\", \"Simmu\", \"Sinbad\", \"Sindarin\", \"Sinir\", \"Sinjin\", \"Siranush\",\r\n    \"Sirisir\", \"Sirli'in\", \"Sirona\", \"Sirranon\", \"Sirwin\", \"Sisimar\", \"Siski\", \"Sivesh\", \"Siveth\", \"Siward\", \"Sjerdi\", \"Skamkel\", \"Skelmar\",\r\n    \"Skorian\", \"Slade\", \"Slania\", \"Slater\", \"Slava\", \"Sligh\", \"Slingsby\", \"Smedley\", \"Snargg\", \"Snorri\", \"Snyder\", \"Sodorn\", \"Soilir\",\r\n    \"Soisil\", \"Sokki\", \"Solaris\", \"Solera\", \"Solevig\", \"Solmund\", \"Solomon\", \"Solvi\", \"Sonnet\", \"Sooth\", \"Sora\", \"Sorass\", \"Sorcha\",\r\n    \"Sorin\", \"Sornovas\", \"Soth\", \"Southall\", \"Sovaz\", \"Soveh\", \"Soyadi\", \"Sparrow\", \"Sprigg\", \"Squall\", \"Srass\", \"Stabyl\", \"Stanwood\",\r\n    \"Starkad\", \"Starke\", \"Stedman\", \"Stefan\", \"Stehman\", \"Stein\", \"Steinkel\", \"Steinthor\", \"Stelectra\", \"Stenger\", \"Stenwulf\", \"Steponas\", \"Sterndale\",\r\n    \"Stetson\", \"Stetter\", \"Stiliman\", \"Stilingfleet\", \"Stopford\", \"Storm\", \"Stowna\", \"Strachan\", \"Straygoth\", \"Stroud\", \"Strudwick\", \"Strybyorn\", \"Strykar\",\r\n    \"Sturla\", \"Sturm\", \"Styx\", \"Sudeha\", \"Suleiman\", \"Sulimo\", \"Sulkas\", \"Sumarlidi\", \"Suras\", \"Surridge\", \"Susin\", \"Susur\", \"Sutan\",\r\n    \"Svala\", \"Svan\", \"Svante\", \"Svatopluk\", \"Sveata\", \"Sven\", \"Swain\", \"Swartwout\", \"Sydnor\", \"Syllva\", \"Sylvane\", \"Sylvia\", \"Sylvin\",\r\n    \"Sylvine\", \"Syndarra\", \"Synnyn\", \"Syranita\", \"Syrioll\", \"Tabar\", \"Tabitha\", \"Tabor\", \"Tabu\", \"Tacey\", \"Tachel\", \"Tadashi\", \"Tadeus\",\r\n    \"Tadia\", \"Tadisha\", \"Tadra\", \"Taennyn\", \"Taeynnyn\", \"Taggart\", \"Tahir\", \"Tailabar\", \"Taina\", \"Takhisis\", \"Taleen\", \"Talen\", \"Taleth\",\r\n    \"Talia\", \"Taliesin\", \"Talin\", \"Talmora\", \"Talobar\", \"Talona\", \"Taloxi\", \"Taltos\", \"Talus\", \"Tamar\", \"Tamara\", \"Tameryn\", \"Tamias\",\r\n    \"Tamlin\", \"Tamoreya\", \"Tanina\", \"Tanis\", \"Tanith\", \"Tanyc\", \"Tar\", \"Tara\", \"Taran\", \"Tarcia\", \"Taria\", \"Tarik\", \"Taromas\",\r\n    \"Taron\", \"Tarran\", \"Taryn\", \"Tas\", \"Tasharra\", \"Tasker\", \"Tatyana\", \"Taurus\", \"Taveli\", \"Taylian\", \"Taylin\", \"Tedra\", \"Tegan\",\r\n    \"Tekia\", \"Telena\", \"Tell\", \"Tench\", \"Tenna\", \"Tenser\", \"Teoddry\", \"Ter\", \"Teralyn\", \"Teressa\", \"Terix\", \"Teruah\", \"Tesin\",\r\n    \"Tesla\", \"Tessa\", \"Tevran\", \"Thaal\", \"Thacker\", \"Thaddeus\", \"Thaki\", \"Thal\", \"Thalen\", \"Thalessa\", \"Thalia\", \"Thalna\", \"Tham\",\r\n    \"Thana\", \"Thane\", \"Thanatos\", \"Thantos\", \"Thar\", \"Tharbad\", \"Tharkesh\", \"Tharn\", \"Thax\", \"Thecla\", \"Theda\", \"Theleb\", \"Theoden\",\r\n    \"Theodor\", \"Theodoric\", \"Theodosia\", \"Theodric\", \"Theoric\", \"Thera\", \"Therad\", \"Theresa\", \"Therios\", \"Theros\", \"Thesius\", \"Thieras\", \"Thieryn\",\r\n    \"Thingyr\", \"Thio\", \"Tholan\", \"Thomas\", \"Thomulor\", \"Thora\", \"Thoran\", \"Thorarin\", \"Thorburn\", \"Thord\", \"Thordarson\", \"Thordis\", \"Thorfel\",\r\n    \"Thorfinn\", \"Thorfinna\", \"Thorgeir\", \"Thorgerd\", \"Thorgest\", \"Thorgils\", \"Thorgrim\", \"Thorgunna\", \"Thorhall\", \"Thorhalla\", \"Thorhild\", \"Thorin\", \"Thorir\",\r\n    \"Thorkatla\", \"Thorkell\", \"Thorkild\", \"Thormod\", \"Thormodr\", \"Thormond\", \"Thorn\", \"Thorndike\", \"Thornwell\", \"Thorold\", \"Thorolf\", \"Thorsager\", \"Thorstein\",\r\n    \"Thorunn\", \"Thorvald\", \"Thorvaldur\", \"Thorvar\", \"Thorzyl\", \"Thoth\", \"Thrain\", \"Thrand\", \"Throck\", \"Thule\", \"Thurid\", \"Thylda\", \"Thyra\",\r\n    \"Thyri\", \"Thyrza\", \"Thyssa\", \"Tiana\", \"Tiffany\", \"Tihan\", \"Tika\", \"Tilford\", \"Tilica\", \"Tilir\", \"Tillinghast\", \"Tilloch\", \"Timon\",\r\n    \"Tioniel\", \"Tirion\", \"Tisha\", \"Tisheri\", \"Titania\", \"Titia\", \"Titiana\", \"Tivernee\", \"Tiyagar\", \"Tnin\", \"Tobias\", \"Tobis\", \"Todhunter\",\r\n    \"Tolbert\", \"Tolenka\", \"Topaz\", \"Topham\", \"Torc\", \"Tortbold\", \"Tosti\", \"Tosya\", \"Toulac\", \"Tovi\", \"Trafford\", \"Trebor\", \"Trelane\",\r\n    \"Trelawny\", \"Trella\", \"Trevel\", \"Trick\", \"Trigg\", \"Trill\", \"Triona\", \"Trir\", \"Tristam\", \"Tristan\", \"Trost\", \"Trotwood\", \"Trowbridge\",\r\n    \"Truesdell\", \"Tuane\", \"Tufnell\", \"Tugan\", \"Tuilleth\", \"Tulio\", \"Tulkas\", \"Tundine\", \"Tunstall\", \"Tuor\", \"Turan\", \"Turgoz\", \"Turhan\",\r\n    \"Turin\", \"Turpin\", \"Tuttle\", \"Tuula\", \"Twyla\", \"Tylden\", \"Tyldoran\", \"Tylen\", \"Tylien\", \"Tylynn\", \"Tymar\", \"Tymora\", \"Tymoriel\",\r\n    \"Tynnyn\", \"Tyr\", \"Tyra\", \"Tyranina\", \"Tyreen\", \"Tyrwhitt\", \"Uamian\", \"Ubriani\", \"Ucarsh\", \"Uda\", \"Uhier\", \"Uhlain\", \"Uhlume\",\r\n    \"Uholedil\", \"Uinen\", \"Ula\", \"Ulf\", \"Ulgor\", \"Ulis\", \"Uljas\", \"Ulji\", \"Ulmaerr\", \"Ulmo\", \"Ulosh\", \"Ulric\", \"Ulrich\",\r\n    \"Ultron\", \"Umaiar\", \"Umbar\", \"Umda\", \"Umgalad\", \"Una\", \"Uneitna\", \"Ungon\", \"Unius\", \"Unn\", \"Unrak\", \"Unwin\", \"Upal\",\r\n    \"Upton\", \"Urabi\", \"Urania\", \"Uranos\", \"Uranus\", \"Uriel\", \"Urish\", \"Urokoz\", \"Ursula\", \"Usher\", \"Uta\", \"Utumno\", \"Uusoae\",\r\n    \"Uvanimor\", \"Uziel\", \"Vabryn\", \"Vadarin\", \"Vadi\", \"Vaeddyn\", \"Vagn\", \"Vai\", \"Val\", \"Valadan\", \"Valandario\", \"Valandor\", \"Valarindi\",\r\n    \"Valborg\", \"Valda\", \"Valdain\", \"Valdemar\", \"Valen\", \"Valenka\", \"Valentia\", \"Valerand\", \"Valeria\", \"Valerian\", \"Valeska\", \"Valgar\", \"Valgard\",\r\n    \"Valgerd\", \"Valiah\", \"Valion\", \"Valisa\", \"Valiss\", \"Valistor\", \"Valkor\", \"Valla\", \"Vallo\", \"Valmar\", \"Valminder\", \"Valor\", \"Valsera\",\r\n    \"Valurian\", \"Valya\", \"Valynard\", \"Vandrad\", \"Vane\", \"Vanechka\", \"Vanidor\", \"Vanion\", \"Vannevar\", \"Vannyn\", \"Vanya\", \"Vanyar\", \"Vanyel\",\r\n    \"Varda\", \"Vardis\", \"Varina\", \"Varion\", \"Varken\", \"Varnum\", \"Vasava\", \"Vash\", \"Vasha\", \"Vasilii\", \"Vasin\", \"Vaydin\", \"Vaydir\",\r\n    \"Vayi\", \"Vecna\", \"Veda\", \"Veldahar\", \"Veldan\", \"Velex\", \"Velior\", \"Venable\", \"Vendor\", \"Veorcyn\", \"Vercyn\", \"Verdina\", \"Vereesa\",\r\n    \"Verline\", \"Vermund\", \"Verna\", \"Ves\", \"Vespar\", \"Vestein\", \"Veva\", \"Vevina\", \"Vexter\", \"Viasta\", \"Vicarr\", \"Vicat\", \"Vicentia\",\r\n    \"Viconia\", \"Victor\", \"Vida\", \"Vidkun\", \"Vidron\", \"Vieno\", \"Viera\", \"Vierna\", \"Vigdis\", \"Vigfus\", \"Vilhelm\", \"Vilka\", \"Vilrna\",\r\n    \"Vinatta\", \"Vincas\", \"Vincent\", \"Vintar\", \"Violet\", \"Vircyn\", \"Vishali\", \"Viveka\", \"Vladimir\", \"Vladislav\", \"Vlaric\", \"Vobur\", \"Voirath\",\r\n    \"Vokos\", \"Voldor\", \"Volkan\", \"Volney\", \"Volodya\", \"Volund\", \"Vonya\", \"Voranor\", \"Vrashin\", \"Vulpen\", \"Vurog\", \"Vusil\", \"Vyecheslav\",\r\n    \"Vyner\", \"Wadleigh\", \"Waenwryht\", \"Wager\", \"Waisham\", \"Waivan\", \"Wakeman\", \"Wakkar\", \"Walborg\", \"Walda\", \"Waldan\", \"Waldegrave\", \"Waldemar\",\r\n    \"Waleran\", \"Walford\", \"Walid\", \"Walker\", \"Wanhim\", \"Waring\", \"Wariv\", \"Wark\", \"Warne\", \"Warrender\", \"Warrigel\", \"Warwick\", \"Waryk\",\r\n    \"Watson\", \"Watt\", \"Waylan\", \"Wayland\", \"Waylon\", \"Wealin\", \"Wedlake\", \"Weilborn\", \"Weiryn\", \"Wel\", \"Wemick\", \"Wendolyn\", \"Wertha\",\r\n    \"Westcott\", \"Westen\", \"Weyrn\", \"Wharrom\", \"Whitwell\", \"Whyte\", \"Wicca\", \"Wideman\", \"Wightman\", \"Wildhair\", \"Wilfrid\", \"Wilhelm\", \"Wilhelmina\",\r\n    \"Wilibald\", \"Will\", \"Willa\", \"William\", \"Willock\", \"Willow\", \"Wilma\", \"Wilmar\", \"Wilner\", \"Wilven\", \"Windham\", \"Winfrey\", \"Winian\",\r\n    \"Winslow\", \"Winton\", \"Wisp\", \"Wisuth\", \"Wivianne\", \"Wizlow\", \"Woart\", \"Wodan\", \"Wolfgang\", \"Wolmar\", \"Womal\", \"Woodfin\", \"Woodruff\",\r\n    \"Wooligar\", \"Wortley\", \"Wotan\", \"Wulf\", \"Wulfgar\", \"Wulfric\", \"Wulgar\", \"Wychnor\", \"Wycliffe\", \"Wyllows\", \"Wyly\", \"Wynkyn\", \"Wynne\",\r\n    \"Wynston\", \"Wyvan\", \"Xaandria\", \"Xaath\", \"Xabian\", \"Xabiel\", \"Xabu\", \"Xain\", \"Xalthan\", \"Xan\", \"Xanaphel\", \"Xanathar\", \"Xander\",\r\n    \"Xandra\", \"Xandria\", \"Xanthon\", \"Xanthus\", \"Xarek\", \"Xarolith\", \"Xaver\", \"Xavier\", \"Xavin\", \"Xela\", \"Xelmonth\", \"Xena\", \"Xenia\",\r\n    \"Xenoba\", \"Xera\", \"Xercon\", \"Xerravin\", \"Xiombarg\", \"Xoncarg\", \"Xoran\", \"Xulan\", \"Xyas\", \"Xydra\", \"Xyko\", \"Xylah\", \"Xylia\",\r\n    \"Xymoya\", \"Xystus\", \"Xythrin\", \"Xytrin\", \"Yacima\", \"Yaheira\", \"Yahira\", \"Yaigin\", \"Yakov\", \"Yalan\", \"Yali\", \"Yalin\", \"Yalniz\",\r\n    \"Yamari\", \"Yana\", \"Yandell\", \"Yangin\", \"Yanira\", \"Yannul\", \"Yara\", \"Yaraia\", \"Yarali\", \"Yardim\", \"Yardley\", \"Yari\", \"Yarim\",\r\n    \"Yarin\", \"Yarir\", \"Yaritza\", \"Yartrina\", \"Yasimina\", \"Yasir\", \"Yasmina\", \"Yasser\", \"Yastar\", \"Yatay\", \"Yavana\", \"Yazihane\", \"Yelain\",\r\n    \"Yeni\", \"Yetne\", \"Yevgenii\", \"Yezade\", \"Ygerna\", \"Ygraine\", \"Yishana\", \"Ynryc\", \"Ynvar\", \"Yoda\", \"Yolanda\", \"Yondalla\", \"York\",\r\n    \"Yradry\", \"Yreoddyn\", \"Yrrkoon\", \"Yrsa\", \"Yrun\", \"Yryllyn\", \"Ysabel\", \"Ysgerryn\", \"Ysolde\", \"Yuri\", \"Yvain\", \"Yvette\", \"Yvonne\",\r\n    \"Yvyr\", \"Yénisar\", \"Yérusha\", \"Zabdiel\", \"Zacarias\", \"Zachary\", \"Zachris\", \"Zadock\", \"Zahara\", \"Zahra\", \"Zaidh\", \"Zalazar\", \"Zalbar\",\r\n    \"Zan\", \"Zandra\", \"Zanifa\", \"Zanthar\", \"Zara\", \"Zaranthe\", \"Zared\", \"Zarimarth\", \"Zarquan\", \"Zathras\", \"Zavel\", \"Zaviv\", \"Zay\",\r\n    \"Zazumel\", \"Zebalane\", \"Zebulon\", \"Zehir\", \"Zelda\", \"Zemenar\", \"Zenda\", \"Zendrac\", \"Zenith\", \"Zenobia\", \"Zenon\", \"Zepher\", \"Zephyr\",\r\n    \"Zerika\", \"Zerin\", \"Zeswick\", \"Zhalore\", \"Zhanna\", \"Zharvek\", \"Zhenya\", \"Zhirek\", \"Zhirem\", \"Zhoreb\", \"Zia\", \"Zigmal\", \"Zilar\",\r\n    \"Zinaida\", \"Zincir\", \"Zion\", \"Ziona\", \"Zircon\", \"Zirzihin\", \"Zita\", \"Zoe\", \"Zolabar\", \"Zoltan\", \"Zona\", \"Zora\", \"Zorashad\",\r\n    \"Zorayas\", \"Zorlan\", \"Zosia\", \"Zotar\", \"Zumurrud\", \"Zurrog\", \"Zykhiralamshad\"];\r\n  makeArrays();\r\n}",
                        "onModelContext": "const modifier = (text) => {\r\n  const lowered = text.toLowerCase();\r\n  let stop = false;\r\n\r\n  if (state.shouldStop) {\r\n    state.shouldStop = false;\r\n    stop = true;\r\n  }\r\n\r\n  // BEGIN Encounters\r\n  // for mashing with other context scripts, keep this codeblock before 'const contextMemory'\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    memoryLoop:\r\n    for (encounterMemory of state.encounterMemories) {\r\n      // take care to not overload memory, unless forced:\r\n      if (!encounterMemory.memoryGreed && (encounterMemory.memoryText.length + memory.length) > 1000) {\r\n        console.log(`Non-greedy encounterMemory too long, not inserting it!`)\r\n        continue memoryLoop\r\n      }\r\n      state.memory.context = memory\r\n      if (encounterMemory.memoryLocation == 'bottom') {\r\n        state.memory.context = `${state.memory.context}\\n${encounterMemory.memoryText}`\r\n      } else if (encounterMemory.memoryLocation == 'top') {\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      } else {\r\n        console.log(`No memoryLocation defined for '${encounterMemory.memoryText}', defaulting to 'top'.`)\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      }\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : ''\r\n  const context = info.memoryLength ? text.slice(info.memoryLength + 1) : text\r\n  const lines = context.split(\"\\n\")\r\n\r\n  // BEGIN Encounters\r\n  // for mashing with other context scripts, keep this between 'const lines' and 'const combinedLines'\r\n  if (typeof (state.currentEncounter) !== 'undefined') { // if there's an event...\r\n    lines.splice(-3, 0, state.encounterNote) // ...put it right below AN, so AI knows what's up\r\n  }\r\n  // END Encounters\r\n\r\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength));\r\n  const finalText = [contextMemory, combinedLines].join(\"\");\r\n  return { text: finalText, stop: stop };\r\n}\r\n\r\nmodifier(text);"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1404562",
                "publicId": "7566b270-75e4-11eb-aa36-e1e9fc3bcc16",
                "published": false,
                "title": "Create character",
                "description": "This is a scenario that lets you create your own character. You will start in Whiterun and your adventure will continue from there.",
                "tags": [],
                "createdAt": "2021-02-23T14:36:04.759Z",
                "updatedAt": "2021-04-19T00:53:23.652Z",
                "memory": "",
                "authorsNote": "[Genre: fantasy] [Writing style: narrative, roleplaying, gothic]",
                "mode": "creative",
                "prompt": "Your name is [${character.name}], and you are a [${Enter your character's gender...}] [${Choose a race: Altmer (High Elf), Bosmer (Wood Elf), Dunmer (Dark Elf), Orsimer (Orc), Nord, Imperial, Breton, Khajiit, Argonian or Redguard}] [${Choose a class: Mage, Warrior, Ranger, Peasant, Thief, Assassin}] that has just arrived in the city of Whiterun. You are [${Enter your age...}] years old, and your personality traits are: [${Enter your personality traits separated by commas...}]. You eyes are [${Enter your eye color...}], and your hair is of the style [${Enter your hair style...}] and of color [${Enter your hair color...}]. You are [${Enter your height in centimeters...}] centimeters tall, and you weigh [${Enter your weight in kilos...}] kg. Your physical features are: [${Enter your physical features...}].\n\n---------------------------------------\n\nWhiterun is one of the nine-major cities in the province of Skyrim, serving as the capital of Whiterun Hold and its vast open tundra. It is found in the heart of Skyrim, and because of this, it is the center of trade across the province. It has been described as the \"Imperial City of Skyrim\" and its large palace, called Dragonsreach, has been compared to Cyrodilic castles. But it has a rich and important history that dates back to the Five Hundred Companions and the mythical forge known as the Skyforge.\n\nYou are at the Bloated Goat, the local tavern and inn. It is owned by a Nord called Isekaid and his wife, Sigrid. \nIsekaid looks at you and says ",
                "quests": [],
                "worldInfo": [
                        {
                                "id": "0.745118808720757",
                                "keys": "Ungvid,Jarl of Winterhold,Ruler of Winterhold",
                                "entry": "[ Ungvid description:< name ≡ Ungvid / Jarl Ungvid>/< age  ≡ 62y>/< ♂>/<race ≡ Nord>. Ungvid appearance:< body ≡ 179cm_height/ 65kg_weight/ slim/ slender/ full beard/ long hair/ dark blonde hair>. Ungvid mental:< stubborn/ serious/ arrogant/ prepotent/ pretentious>. Ungvid moniker:< Ruler of Winterhold>. Ungvid traits:< arrogant/ pretentious/ stubborn>. Ungvid speech:< harsh& deep voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.47441051249600963",
                                "keys": "Yolanda,Jarl of Whiterun,Ruler of Whiterun",
                                "entry": "[ Yolanda description:< name ≡ Yolanda/ Jarl Yolanda>/< age ≡ 30y>/< ♀>/<race ≡ Nord>. Yolanda appearance:< body ≡ slim/ 178cm_height/ 50kg_weight/ blonde hair/ blue eyes/ small breasts>. Yolanda mental:< party animal& happy& likes the nightlife& likes having fun& fools around>. Yolanda moniker:< Ruler of Whiterun>. Yolanda traits:< naughty/ dirty/ manipulative>. Yolanda speech:<sweet voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.21837675048437033",
                                "keys": "Argo,Jarl of Riften,Jarl of the Rift,Ruler of Riften,Ruler of the Rift",
                                "entry": "[Argo description:< name ≡ Argo / Jarl Argo>/< age  ≡ 57y>/< ♂>/<race ≡ Nord>. Argo appearance:< body ≡ 180cm_height/ 90kg_weight/ slim/ shaved beard/ bald head>. Argo mental:< arrogant& pedantic& self-righteous& tightly wound>. Argo moniker:< Ruler of the Rift/ Ruler of Riften>. Argo traits:< arrogant& pedantic& self-righteous>. Argo speech:< harsh& deep voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.2826822841965928",
                                "keys": "Vrage,Vrage the Gifted,King of Skyrim,High King of Skyrim,Jarl of Haafingar,Jarl of Solitude,Ruler of Haafingar,Ruler of Solitude,Ruler of Skyrim",
                                "entry": "[ Vrage description:< name ≡ Vrage / High King Vrage/ King Vrage/ Jarl Vrage/ Vrage the Gifted>/< age ≡ 42y>/< ♂>/<race ≡ Nord>. Vrage appearance:< body ≡ 198cm_height/ 80kg_weight/ tall/ muscular/ fair skin/ brown hair/ full beard>. Vrage mental:< assertive/ strong/ good leader/ loyal>. Vrage moniker:< High King of Skyrim/ King of Skyrim>. Vrage traits:< good leader/ loyal>. Vrage speech:< deep voice& heavy nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.456758676983456345758",
                                "keys": "Uror,Ruler of Falkreath,Jarl of Falkreath",
                                "entry": "[    Uror description:< name ≡ Uror / Jarl Uror/< age ≡ 55y>/< ♂>/<race ≡ Nord>.   Uror appearance:< body ≡ 180cm_height/ 75kg_weight/ tall/ muscular body/ red beard and hair>.   Uror mental:< courageous/ brave/ good humored/ optimistic/ intelligent/ talkative/ stubborn>.    Uror moniker:< Ruler of Falkreath>.    Uror traits:< courageous/ brave/ good humored>.    Uror speech:< deep voice& thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.9765384539248597",
                                "keys": "Katariah,Empress of Cyrodill,Empress of Tamriel,the Empress,the Emperor,Emperor of Tamriel,the Emperor",
                                "entry": "[  Katariah description:< name ≡ Katariah / Empress Katariah/ Katariah Ra'athim>/< age ≡ 38y>/< ♀>/<race ≡ Dunmer>. Katariah appearance:< body ≡ 170cm_height/ 40kg_weight/ slim/ slender/ hair< long& black>/ red eyes/ dark grey skin>. Katariah mental:< just/ smart/ clever/ fair/ happy/ calm>.  Katariah moniker:< Empress& Emperor of Cyrodiil& Tamriel>.  Katariah traits:< just/ smart/ clever/ fair/ happy>.  Katariah speech:< harsh& sweet& calm voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.6754768658567867",
                                "keys": "Atmor,Ruler of Eastmarch,Jarl of Eastmarch,Ruler of Windhelm,Jarl of Windhelm",
                                "entry": "[  Atmor description:< name ≡ Atmor / Jarl Atmor/< age ≡ 48y>/< ♂>/<race ≡ Nord>.  Atmor appearance:< body ≡ 180cm_height/ 75kg_weight/ tall/ muscular/ fit/ short dark blond hair>.  Atmor mental:< grumpy,sarcastic,hopeful,curious>.  Atmor moniker:< Ruler of Eastmarch& Windhelm>.  Atmor traits:< grumpy/ sarcastic/ hopeful/ curious>.  Atmor speech:< thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.498746768876574541654654",
                                "keys": "Bolgeir,Ruler of Markarth,Jarl of Markarth,Ruler of the Reach,Jarl of the Reach",
                                "entry": "[ Bolgeir description:< name ≡ Bolgeir / Jarl Bolgeir/< age ≡ 73y>/< ♂>/<race ≡ Nord>.  Bolgeir appearance:< body ≡ 174cm_height/ 70kg_weight/ tall/ muscular/ reddish hair/ beard>.  Bolgeir mental:< very brave and bold, rather arrogant, a natural leader>.  Bolgeir moniker:< Ruler of the Reach& Markarth>.  Bolgeir traits:< natural leader& very brave and bold>.  Bolgeir speech:< thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.57632498934634",
                                "keys": "Dagny,Ruler of the Pale,Jarl of the Pale,Ruler of Dawnstar,Jarl of Dawnstar",
                                "entry": "[  Dagny description:< name ≡ Dagny / Jarl Dagny/< age ≡ 58y>/< ♀>/<race ≡ Nord>.  Dagny appearance:< body ≡ 159cm_height/ 40kg_weight/ tall/ muscular/ fit/ short dark blond hair>.  Dagny mental:< courageous/ fearless/ brave/ friendly/ optimistic/ determined>.  Dagny moniker:< Ruler of Dawnstar& the Pale>.  Dagny traits:< friendly& optimistic>.  Dagny speech:< thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.76858732657834643564357",
                                "keys": "Thora,Ruler of Hjaalmarch,Jarl of Hjaalmarch,Ruler of Morthal,Jarl of Morthal",
                                "entry": "[  Thora description:< name ≡ Thora / Jarl Thora/< age ≡ 58y>/< ♂>/<race ≡ Nord>.  Thora appearance:< body ≡ 185cm_height/ 62kg_weight/ tall/ muscular/ athletic body/ blonde hair/ blue>.  Thora mental:< brave/ courageous/ strong-willed/ fearless/ adventurous/ determined>.  Thora moniker:< Ruler of Morthal& Hjaalmarch>.  Thora traits:< courageous/ strong-willed>.  Thora speech:< sweet voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.3364947531043463",
                                "keys": "skyrim, province of skyrim, land of the nords, home of the nords",
                                "entry": " Skyrim:[ CLIMATE< Skyrim>: snowy and freezing to the north/ temperate and warm to the south/ tundras to the west/ deep woods to the south/ grasslands in the center/ temperate to the east; GEOGRAPHY< Skyrim>: mountainous/ full of valleys/ rivers/ forests/ woods/ wildlife; DESC< Skyrim>: The current ruler& high king of skyrim is Vrage. Homeland of the nords/ province of the empire/ high king is the title of the ruler/ solitude is the capital city/ is divided into nine holds/ each hold is governed by a jarl/ jarl is the ruler of a hold.]",
                                "hidden": false
                        },
                        {
                                "id": "0.4958877490012459",
                                "keys": "Whiterun Hold",
                                "entry": " Whiterun Hold:[ CLIMATE< Whiterun Hold>: temperate/ warm; GEOGRAPHY< Whiterun Hold>: grassy tundras/ white river/ open fields; DESC< Whiterun Hold>: The current ruler& jarl of whiterun is Yolanda. Whiterun Hold is the centermost hold of Skyrim/ being located right in the middle of the province. It borders the Rift/ the Pale/ Falkreath and Hjaalmarch. It is home to the ancient town of Rorikstead/ as well as the small town of Riverwood. The city of Whiterun is the capital of the hold/and is known as the economic capital of Skyrim due to its proximity to the Cyrodiil border.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8858901310060372",
                                "keys": "Whiterun,Whiterun City,City of Whiterun",
                                "entry": " Whiterun:[ CLIMATE< Whiterun>: temperate/ warm; GEOGRAPHY< Whiterun>: on top of a hill/ big city; DESC< Whiterun>: The current ruler& jarl of whiterun is Yolanda. Whiterun is one of the richest cities in Skyrim/ and one of the oldest. It is located in the Whiterun Hold/ and is known for Jorrvaskr and the Skyforge/ both locations being known from ancient times/ in the Merethic Era when Ysgramor himself arrived in Tamriel. It is also known for Dragonsreach/ the city castle and Jarl's palace. Dragonsreach was built to trap dragons/ and there is the skull of a dragon on top the Jarl's throne. The city is divided into three districts: the Plains District/ where commerce is located/as well as the inn and the market square. The Winds District/ where houses and the temple are located/ as well as the entrance to Jorrvaskr and the Skyforge. The Cloud District/ where Dragonsreach is located.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5565239795951209",
                                "keys": "the rift,rift hold",
                                "entry": " The Rift:[ CLIMATE< The Rift>: temperate/ warm/ sunny; GEOGRAPHY< The Rift>: temperate woods/ grasslands/ mountainous; DESC< The Rift>: The current ruler& jarl of the Rift is Argo. The rift is a beautiful place/ a warm place/ mountainous/ home to lake honrich/ the capital of the rift is riften/ yellow and beautiful trees/ beautiful lake/ beautiful sights/ jerall mountains to the south/ velothi mountains to the east/ borders morrowind to the east/ borders cyrodiil to the south.]",
                                "hidden": false
                        },
                        {
                                "id": "0.29560338203552283",
                                "keys": "riften,city of riften",
                                "entry": " Riften:[ CLIMATE< Riften>: temperate/ warm/ sunny; GEOGRAPHY< Riften>: temperate woods/ grasslands/ mountainous/ fishing port at lake honrich; DESC< Riften>: The current ruler& jarl of Riften is Argo. Riften is a beautiful fishing city/ a big city/ capital of the rift/ capital of the rift hold/ the mad mammoth is the local inn/ the mad mammoth is the local tavern/ the city is dedicated to the goddess mara/ the temple of mara is located in riften.]",
                                "hidden": false
                        },
                        {
                                "id": "0.7557881723928688",
                                "keys": "winterhold, city of winterhold, winter hold",
                                "entry": " Winterhold:[ CLIMATE< Winterhold>: polar/ cold/ freezing/ snowy; GEOGRAPHY< Winterhold>: rocky/ mountainous/ frozen mountains/ coastal; DESC< Winterhold>: The current ruler& jarl of Winterhold is Ungvid. Winterhold is a cold place/ full of mountains/ home to the college of winterhold/ fronzen hearth is the local inn/ frozen hearth is the local tavern/ sea of ghosts to the north/ jarl is the title of the ruler.]",
                                "hidden": false
                        },
                        {
                                "id": "0.465198479866984165",
                                "keys": "Falkreath,Falkreath Hold",
                                "entry": " Falkreath:[  CLIMATE< Falkreath>: temperate/ sunny/ rainy/ rainforest climate;  GEOGRAPHY< Falkreath>: Falkreath lies in the southern forests of Skyrim, on a strategic crossroad in the middle of its respective hold and the provincial border towards Hammerfell's wilder country, the Dragon's Teeth Mountains, and with Cyrodiil through the Pale Pass in the Jerall Mountains. Home of Skyrim's famous Pine Forest, Falkreath Hold is covered in a fine mist that makes the land seem without season. It borders the Skyrim holds of Whiterun, the Reach and the Rift.; DESC< Falkreath>: Uror is the current Jarl of Falkreath. It is a city that is heavily reliant to the lumber industry, due to the abundance of resources around them.; ]",
                                "hidden": false
                        },
                        {
                                "id": "0.65374578856786794567456437",
                                "keys": "the reach",
                                "entry": " The Reach:[  CLIMATE< The Reach>: temperate/ sunny/ warm/ hot;  GEOGRAPHY< The Reach>: Near the southwestern corner, the capital Markarth, formerly a Dwemer stronghold, emerges from the living rock of the Druadach Mountains, which transition into the Jerall Mountains near the hold's southeast corner. The Karth River begins in the southern region and drains the mountains, running like a deep gouge through the middle of the hold called the Karth River Canyon. The peaks of the Druadach range lie to the west of it, and high bluffs typically rise on the east leading to grassland and tundra;  DESC< The Reach>: Bolgeir is the current Jarl of the Reach. The Reach is the westernmost hold of Skyrim, bordering the provinces of Cyrodiil, Hammerfell and High Rock. It is a vast tundra made of grasslands, and is famous because the Karth River begins here before passing through Haafingar and connecting to the See of Ghosts in the north. The native people of the Reach are known as Reachmen.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.48569468597795675",
                                "keys": "markarth,city of stone,markarth side",
                                "entry": " Markarth:[  CLIMATE< Markarth>: temperate/ sunny/ warm/ hot;  GEOGRAPHY< Markarth>: Nestled in the river valley of the Druadach Mountains. It is unique in that the city's layout is intricately built into the mountain of Karthmad, dividing the city into two districts. The northern end, Dryside has streets that ascend above each other with well-refined homes, below the main square and marketplace where the populace tend to congregate. The city's southern end is the Riverside, the basin populated by the lower-class and the bustling silver mines. These districts meet each other at either end of the city, at the main gates on the east side, while on the west side, they ascend high towards the top of the crag and at Understone Keep, which contains the Mournful Throne, the seat of power in the Reach.; DESC< Markarth>: Bolgeir is the current Jarl of Markarh. Markarth is one of the nine major cities in the province of Skyrim, found in the river valley of the Reach. Known colloquially as the Ci",
                                "hidden": false
                        },
                        {
                                "id": "0.984516878451",
                                "keys": "the pale",
                                "entry": "The Pale:[  CLIMATE< The Pale>: cold& snowy/ freezing;  GEOGRAPHY< The Pale>: It stretches from the center of Skyrim all the way to its Northern Coast. Dominated by ice fields and glacial deposits, especially along its northern shore, some scattered ragged peaks, snow-covered ground, and little sunshine means most of the Nords congregate at the city of Dawnstar, a popular port and mining town.The Pale lacks waterways, save for Lake Yorgrim, located in the southeastern corner of the Hold.;  DESC< The Pale>: Dagny is the current Jarl of the Pale. The Pale, named for the pallid Tundra and pigmentation of its Nord inhabitants, is one of the four oldest Holds in Skyrim. The harsh environment here makes life a chore rather than a joy, and the shape of the Hold has led some to refer to it as “the old boot.”;]",
                                "hidden": false
                        },
                        {
                                "id": "0.1654984165468746878945123546854745311234",
                                "keys": "dawnstar",
                                "entry": " Dawnstar:[  CLIMATE< Dawnstar>: cold& snowy/ freezing;  GEOGRAPHY< Dawnstar>: The city has two mines, Iron-Breaker Mine and Quicksilver Mine, which supply iron and quicksilver respectively. It is home to many fishermen and is an important port.;  DESC< Dawnstar>: Dagny is the current Jarl of Dawnstar. Dawnstar is a settlement on the northern coast of Skyrim, and the hold capital of the Pale. t was once a garrison town, which served as an exile post due to the cold harsh climate and notorious gales. The settlement seemingly got its name due to its reputation for greeting the sun as it begins its journey.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.465167984",
                                "keys": "Hjaalmarch",
                                "entry": " Hjaalmarch:[  CLIMATE< Hjaalmarch>: temperate/ warm/ hot;  GEOGRAPHY< Hjaalmarch>: Roughly half the hold consists of the Drajkmyr marsh, although some farms dot the tundra. The region is veined with waterways that empty into the Sea of Ghosts, and the Skyborn Range further isolates the area from the east and southern border. Hjaalmarch is home to the Karth delta where the mighty Karth River and the smaller River Hjaal empty into the Sea of Ghosts through a variety of intricate channels.  The Deathbell flower is known to be abundant throughout the swamps.;  DESC< Hjaalmarch>: Thora is the current Jarl of Hjaalmarch. Hjaalmarch, or Hjaalmarch Hold, is a lowland coastal hold in Skyrim. Morthal is the capital and the only settlement in the hold. Combined with the fog that surrounds the marshes and the creatures that stalk the land (Wispmothers purportedly originated here), Hjaalmarch is considered one of the more mysterious holds in Skyrim. Many ruins dot the hold, including the legendary",
                                "hidden": false
                        },
                        {
                                "id": "0.65849879/84541",
                                "keys": "morthal",
                                "entry": " Morthal:[  CLIMATE< Morthal>: temperate/ warm/ hot;  GEOGRAPHY< Morthal>: swamps, rivers, marsh;  DESC< Morthal>: Thora is the current Jarl of Morthal. Morthal, supposedly named after the great Nord hero Morihaus, is the capital of Hjaalmarch, although it is a fairly small, humble town of little economic or strategic importance besides its small lumber mill. The town's symbol is a green triskelion.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.97894615",
                                "keys": "eastmarch",
                                "entry": " Eastmarch:[  CLIMATE< Eastmarch>: freezing cold in the north/ temperate and warm in the south near the water springs;  GEOGRAPHY< Eastmarch>: Darkwater River winds north from Lake Geir into this treacherous hot spot, where it meets the White River which then drains into the Sea of Ghosts as it passes Windhelm. The Skyrim part of the Velothi mountains are in Eastmarch.  Windhelm is the only sizable city in the otherwise rural province due to the expansive hot springs which dominate the hold.;  DESC< Eastmarch>: Atmor is the current Jarl of Eastmarch. Eastmarch is the eastern hold of Skyrim, and one of the four known collectively as the Old Holds. As its name suggests, it lies against the province's eastern border, close to the Dunmeth Pass, the only passage to and from Morrowind in the area due to the high and rugged Velothi Mountains.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.587486516",
                                "keys": "windhelm",
                                "entry": " Windhelm:[  CLIMATE< Windhelm>: cold/ freezing/ snowy;  GEOGRAPHY< Windhelm>: city build from stone, its entrance bridge above the White River;  DESC< Windhelm>: Atmor is the current Jarl of Windhelm. Windhelm is a city in northeastern Skyrim, close to the border with Morrowind, and is the only substantial city in the Hold of Eastmarch. It is not only the oldest city in Skyrim, but is the oldest continuously inhabited human settlement in Tamriel.Windhelm was once the capital of the First Empire of the Nords and the old palace of the Ysgramor dynasty, the Palace of the Kings, still stands in the center of the city.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.5297422967695256",
                                "keys": "Haafingar,haafingar hold",
                                "entry": "Haafingar:[CLIMATE<Haafingar>:temperate and warm and sunny to the south/cold to and frozen to the north;GEOGRAPHY<Haafingar>:mountainous/karth river cuts the hold and goes out in the sea of ghosts to the north/kilkreath mountain/druadach mountains;DESC<Haafingar>:haafingar is currently the imperial seat in skyrim/solitude is the capital city of haafingar/solitude is the capital of skyrim/dragon bridge is a settlement south of solitude/the kilkreath temple is a temple dedicated to the daedric prince meridia/kilkreath temple has a huge statue of meridia/kilkreath temple is south of solitude/haafingar borders high rock to the west.]",
                                "hidden": false
                        },
                        {
                                "id": "0.059520193664433174",
                                "keys": "solitude,city of solitude",
                                "entry": "Solitude:[CLIMATE<Solitude>:temperate and warm and sunny to the south/cold to and frozen to the north;GEOGRAPHY<Solitude>:mountainous/karth river cuts the hold and goes out in the sea of ghosts to the north/kilkreath mountain/druadach mountains;DESC<Solitude>:solitude is a big city/solitude is the capital of skyrim/solitude has a huge keep called castle dour/solitude has the biggest temple in skyrim that is dedicated to the nine divines/the seat of the king in solitude is the blue palace/solitude is located on top of a huge stone arch/solitude port is the most important port in skyrim and goes out to the sea of ghosts/the east empire company headquarters in skyrim is located in solitude.]",
                                "hidden": false
                        },
                        {
                                "id": "0.7072372796081579",
                                "keys": "gods, the gods, divines, nine divines",
                                "entry": "The Nine Divines:[TYPE<The Nine Divines>:religion;DESC<The Nine Divines>:the eight divines is the official pantheon of the empire. it worships the eight gods related to creation. these gods are  Akatosh/Arkay/Dibella/Julianos/Kynareth/Mara/Stendarr/Talos/and Zenithar..]",
                                "hidden": false
                        },
                        {
                                "id": "0.6041881392204211",
                                "keys": "akatosh,alkosh,auriel,auri-el",
                                "entry": "[ Akatosh description:< name ≡ Akatosh/ Alkosh/ Auri-El>/< age ≡ as old as time>/< gender ≡ genderless>.  Akatosh appearance:< body ≡ scaly/ big dragon>.  Akatosh mental:< benevolent& good& cryptic& mystic& insane>.  Akatosh occupation:< god of time/ chief god of the divines/ chief god of the imperial pantheon>.  Akatosh SUMM:< Akatosh is the dragon god of time, and the chief god in the Imperial Pantheon of the Divines. He is an Aedra. He is usually depicted as a dragon, and appears in all Tamrielic religions, though sometimes with different names>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.794449885354221",
                                "keys": "Arkay,Ark'ay,Lord of the Wheel of Life",
                                "entry": "Arkay:[TYPE<Arkay>:god;SPHERE<Arkay>:life and death/burials and funerals;DESC<Arkay>:Arkay is the god of burials and funeral rites/and is generally associated with cyclical occasions/such as the seasons and life and death. His priests are staunch opponents of necromancy and all forms of the undead/and are empowered to bestow Arkay's blessings which prevent the forceful misuse of a mortal soul. Thus/any body properly buried by a priest observing the proper rituals is protected by Arkay's Law from being raised as undead.Therefore/necromancers view Arkay as their ultimate enemy/and make covert efforts to undermine his worship throughout Tamriel. Because of this association with/and protection of/mortality/he is sometimes called the Mortals' God..]",
                                "hidden": false
                        },
                        {
                                "id": "0.8297917578640153",
                                "keys": "Dibella,Passion Dancer,Our Blessed Lady",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/love and affection;DESC<Dibella>:Dibella is the Goddess of Beauty/Love/and Affection. She is also acclaimed as the Lady of Love/Beauty/Art/and Music. Dibella is the Queen of Heaven/and is one of the Divines..]",
                                "hidden": false
                        },
                        {
                                "id": "0.06898112900599718",
                                "keys": "Julianos",
                                "entry": "Julianos:[TYPE<Julianos>:god;SPHERE<Julianos>:wisdom and logic;DESC<Julianos>:Julianos is one of the Divines/governing the realms of literature/law/history/and contradiction. He is usually associated with magic/and thus is often revered by wizards..]",
                                "hidden": false
                        },
                        {
                                "id": "0.8450550691624958",
                                "keys": "Kynareth ",
                                "entry": "Kynareth :[TYPE<Kynareth >:god;SPHERE<Kynareth >:heavens/the winds/the elements/and the unseen spirits of the air;DESC<Kynareth >:Kynareth is the goddess of the heavens/the winds/the elements/and the unseen spirits of the air. She is a member of the Divines and Patron of sailors and travelers. Kynareth is often invoked for auspicious stars at birth and for good fortune in daily life. In some legends/she is the first to agree to Lorkhan's divine plan to create the mortal plane/and provides the space in the void for its creation. Furthermore/she is associated with rain/a phenomenon that is said not to have occurred before the removal of Lorkhan's divine spark..]",
                                "hidden": false
                        },
                        {
                                "id": "0.11128933049439915",
                                "keys": "Mara,Mother Mara, Mother Mild",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love/fertility/compassion and agriculture;DESC<Mara>:Mara/also known as Mother Mara/Mother Mild/and the Divine Mother/is the Goddess of Love/Fertility/Agriculture/and Compassion. She is also acclaimed as the Mother-Goddess/and is one of the Divines..]",
                                "hidden": false
                        },
                        {
                                "id": "0.43928152447985225",
                                "keys": "Stendarr",
                                "entry": "Stendarr:[TYPE<Stendarr>:god;SPHERE<Stendarr>:mercy/charity/luck;DESC<Stendarr>:Stendarr/also known as Stendarr the Steadfast/is the God of Mercy/Charity/Well-Earned Luck/and Justice. He is also acclaimed as the God of Compassion/and Righteous Rule by Might and Merciful Forbearance. Stendarr is the Apologist of Men/patron of the Imperial Legion/magistrates/rulers/and knights errant/and one of the Divines..]",
                                "hidden": false
                        },
                        {
                                "id": "0.8211141194493385",
                                "keys": "Zenithar,Z'en,Provider of our Ease",
                                "entry": "Zenithar:[TYPE<Zenithar>:god;SPHERE<Zenithar>:Work and Commerce;DESC<Zenithar>:Zenithar/the God of Work and Commerce/the Provider of our Ease/is one of the Divines. The Trader God is frequently seen as the same deity as the Bosmeri god Z'en. In the Empire/however/Zenithar is considered a more cultivated god of merchants and middle nobility/being the deity of wealth/labor/commerce and communication..]",
                                "hidden": false
                        },
                        {
                                "id": "0.09888611188658047",
                                "keys": "Talos,Stormcrown,Ysmir,Dragon of the North",
                                "entry": "Talos:[TYPE<Talos>:god;SPHERE<Talos>:mankind/war/strength;DESC<Talos>:Talos is the most important hero-god of Mankind. In his mortal form/known as Tiber Septim/he conquered all of Tamriel and ushered in the Third Era (and the Third Empire). After death/his spirit ascended to the heavens to become the ninth and youngest divine/under the name given to him by the Nords: Talos. Also called Ysmir/'Dragon of the North'. One of the Nine Divines. Less prominent sects/such as the Talos Cult/have been inspired by his apotheosis..]",
                                "hidden": false
                        },
                        {
                                "id": "0.9530940012940066",
                                "keys": "nord religion,acient nord religion,traditional nord religion",
                                "entry": "Nord Religion:[TYPE<Nord Religion>:religion;DESC<Nord Religion>:The Ancient Nords worshiped Totems/that became gods with their own names after Ysgramor came back to Skyrim. Each of these Totems became a god of the nord pantheon. These animals were there the Snake/the Hawk/the Dragon/the Fox/the Whale/the Owl/the Bear/the Wolf and the Moth. Just by listening to which animals the nords worshiped/you might be able to guess which gods they represent..]",
                                "hidden": false
                        },
                        {
                                "id": "0.989329231849934",
                                "keys": "jhunal",
                                "entry": "Jhunal:[TYPE<Jhunal>:god;SPHERE<Jhunal>:knowledge/widsom/mathematics;DESC<Jhunal>:Jhunal is represented by the Owl. He is the Rune God/and represents language/mathematics/knowledge and wisdom. He became Julianos in the Imperial Pantheon/and orders dedicated to him became keepers of the Elder Scrolls..]",
                                "hidden": false
                        },
                        {
                                "id": "0.7248995633897974",
                                "keys": "kyne",
                                "entry": "Kyne:[TYPE<Kyne>:god;SPHERE<Kyne>:storms/mother god/wind;DESC<Kyne>:Kyne is the Hawk/and is out goddess of storms/the mother of all Nords. Kyne created the Nords atop the Snow Throat/and sent us to Altmora to fight against the elves. She is the wife of Shor/the nord Chief of Gods. With her aid/the Nords of old managed to learn to speak as dragons The Tongues and the Greybeards were created with her and because of her/to fight against the tyranny of Alduin. The Thu'um spoken by the dragons is roughly translated to Tamrielic as \"Storm Voice\"/in a reference to her. | Even the dragons acknowledge her/and call her Kaan. When Nords die/Kyne leads us to rest in Sovngarde..]",
                                "hidden": false
                        },
                        {
                                "id": "0.022990195127124524",
                                "keys": "orkey",
                                "entry": "Orkey:[TYPE<Orkey>:god;SPHERE<Orkey>:death;DESC<Orkey>:Orkey is the Snake/and is the God of Death. He is a Testing God. Nords used to live as long as elves in the times of old. Orkey summoned Alduin/and the lifespan of the nords was eaten down to six years old/or \"bound them to the count of winters\" as the saying goes. High King Ysmir Wulfharth/who was turned into a boy/pleaded to Shor for help. Shor fought Alduin in Sovngarde/just as he did before Time had begun/and won the battle. | Most of the curse was thrown onto the nearby Orcs who worshiped Orkey as their patron. It was during this battle that Ysmir learned to use the Thu'um. Unfortunately/this battle cost his life. | In the Imperial Pantheon/Orkey became Arkay/the God of Life..]",
                                "hidden": false
                        },
                        {
                                "id": "0.3151155897995812",
                                "keys": "shor",
                                "entry": "Shor:[TYPE<Shor>:god;SPHERE<Shor>:humankind/chief god;DESC<Shor>:Shor is the Fox/and is the Chief God of the nord pantheon. He's the husband of Kyne/and is the patron of mankind. The old Imperial religion knows him as Shezarr/while Bretons call him Sheor. He might also be known as Doom Drum/Sep/Lorkhan/Lorkh and Lorkhaj by other races. Shor/Stuhn and Tsun led the Nords against the elven armies of Auri-El and Trinimac in Atmora/in a war known as the War of Manifest Metaphors. After the war ended/the Nords settled there. This led to the death of Shor and Tsun. Trinimac tore out Shor's heart and hid it from the Nords/so the nords would never get their Chief God back..]",
                                "hidden": false
                        },
                        {
                                "id": "0.06384271959154919",
                                "keys": "mara",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love;DESC<Mara>:Mara is the Wolf. She's the goddess of love/and is the handmaiden of Kyne. When Alessia took the Nord Pantheon and modified it/she kept Mara as the goddess of love. But for the Empire/she is a matron goddess. The Nords know her as Kyne's handmaiden..]",
                                "hidden": false
                        },
                        {
                                "id": "0.03891031103246201",
                                "keys": "dibella",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/art/music;DESC<Dibella>:Dibella is the Moth/and she represents beauty/art and music. Some claim she was the mistress of Shor/but some believe that to be heresy. She is still worshiped in the Empire/but some places think her cult to be vulgar and inappropriate. That is also heresy to some..]",
                                "hidden": false
                        },
                        {
                                "id": "0.3226602575939199",
                                "keys": "tsun",
                                "entry": "Tsun:[TYPE<Tsun>:god;SPHERE<Tsun>:adversity;DESC<Tsun>:Tsun is the Bear/and is the God of Adversity. He died during the War of Manifest Metaphors while protecting Shor/and his death is remembered as the beginning of the current world. He guards the Whalebone Bridge in Sovngarde/and only lets those worthy to pass the bridge and go into the Hall of Valor. He had great respect for magic/and was a master of the Voice..]",
                                "hidden": false
                        },
                        {
                                "id": "0.08577198333505698",
                                "keys": "Stuhn",
                                "entry": "Stuhn:[TYPE<Stuhn>:god;SPHERE<Stuhn>:random/justice;DESC<Stuhn>:Stuhn is the Whale/and is the God of Ransom and Justice. He was the shield-thane of Shor/and brother of Tsun. He fought in the war against the ancient elves in Altmora/but lost his brother Tsun in the process. In the Imperial Pantheon/he became Stendarr..]",
                                "hidden": false
                        },
                        {
                                "id": "0.8639915656760206",
                                "keys": "karth river",
                                "entry": "Karth River:[TYPE<Karth River>:river;LOCATION<Karth River>:haafingar/the reach;DESC<Karth River>:the karth river is a big river that starts in the reach and empties in haafingar/into the sea of ghosts. The Karth is well-known for its violent rapids and the dangerous terrain/such as jutted sharp stones and the crashing torrents on the river valley. But despite this/the Karth River provides a wealth of resource and life to the local people..]",
                                "hidden": false
                        },
                        {
                                "id": "0.13894551310988978",
                                "keys": "white river",
                                "entry": "White River:[TYPE<White River>:river;LOCATION<White River>:whiterun hold/eastmarch/falkreath;DESC<White River>:The White River is the longest river in Skyrim/stretching from the south of the province to the northeast corner. Its source is Lake Ilinalta/north of Falkreath. It flows northeast to join the Sea of Ghosts past Windhelm. Along the way/it passes through Riverwood and near Whiterun..]",
                                "hidden": false
                        },
                        {
                                "id": "0.5164146546794",
                                "keys": "Lake Geir",
                                "entry": " Lake Geir: {  < Lake Geir is a lake in the western Rift. Ivarstead is built on its western shores>,  < The lake is fed by Treva River and is drained by Darkwater River>,  < It is named after Archmage Geirmund, a First Era wizard who died nearby in a duel with Sigdis Gauldurson, the son of Archmage Gauldur>,  < A tomb for the Archmage can still be found on the largest island in the lake> }",
                                "hidden": false
                        },
                        {
                                "id": "0.5645",
                                "keys": "Lake Ilinalta",
                                "entry": " Lake Ilinalta: {  < Lake Ilinalta is a lake in west-central Falkreath Hold, in the middle of Skyrim's pine forest>,  < It is the source of the White River, and a notable Skyrim landmark. The town of Helgen was less than a day's ride to the southeast,[2] and the Hold's capital of Falkreath is directly south>,  < The Imperial Legion used to have a fort along its shore, until the entire facility mysteriously sank into the water in a single day>,  < According to local legend, the place is cursed and travelers are known to go missing> }",
                                "hidden": false
                        },
                        {
                                "id": "0.65777",
                                "keys": "Lake Yorgrim",
                                "entry": " Lake Yorgrim: {  < Lake Yorgrim is a lake in the eastern the Pale, to the west of Windhelm. It is the source of River Yorgrim>,  < In or around the time of the Dragon War, the dragon Viinturuth was killed and then interred in a burial mound near the shores of the lake> }",
                                "hidden": false
                        },
                        {
                                "id": "0.55577757",
                                "keys": "Darkwater River",
                                "entry": " Darkwater River: {  < Darkwater River, or simply the Darkwater, is a river in eastern Skyrim connecting Lake Geir to the White River>,  < Lake Geir drains into it at the western end of the Rift. The river flows northeast into Eastmarch, cascading down the famous cliff which divides the two holds>,  < After this series of pools and waterfalls, the river bends northwest, and merges with the White River a few miles downstream, south-southwest of Windhelm and west of the famous fetid swamps of Eastmarch>,  < The fishing is said to be good. A large tributary flows separately from Lake Geir>,  < It passes north through Ivarstead, then curves northeast and creates its own series of waterfalls down the cliff, then connects with Darkwater River in Eastmarch, which then merges shortly after with the White River and terminates> }",
                                "hidden": false
                        },
                        {
                                "id": "0.257272472742752",
                                "keys": "River Hjaal",
                                "entry": " River Hjaal: {  < The River Hjaal is the main river that flows through the center of Hjaalmarch in Skyrim>,  < Its headwaters are located in northwestern Whiterun Hold, in the highlands south of Morthal. After dropping down a series of waterfalls and entering Hjaalmarch, the river passes northeast through Morthal>,  < Then spreads out and drains into the Karth delta, the marshy area where the River Hjaal and the larger Karth River empty into the icy Sea of Ghosts through a variety of intricate channels>,  < Fishermen can collect a wide range of fish from the river> }",
                                "hidden": false
                        },
                        {
                                "id": "0.2573272",
                                "keys": "River Yorgrim",
                                "entry": " River Yorgrim: {   < The River Yorgrim is a short tributary in Skyrim which connects Lake Yorgrim to the White River>,   < It flows east out of the eponymous lake in the Pale and enters Eastmarch, dropping through a series of waterfalls and rapids until it merges with the White River near the entrance to Windhelm> }",
                                "hidden": false
                        },
                        {
                                "id": "0.5775757",
                                "keys": "Treva River",
                                "entry": " Treva River: {  < The Treva River is a small river at the center of the Rift in southeastern Skyrim>,  < It flows northwest from Lake Honrich to Lake Geir>,  < It was perhaps named after the eponymous founder of Treva's Farm on its eastern bank> }",
                                "hidden": false
                        },
                        {
                                "id": "0.534634564356",
                                "keys": " Jerall Mountains,Jeralls",
                                "entry": " Jerall Mountains: {  < The Jerall Mountains, also called the Jeralls, are a mountain range on the border between Cyrodiil and Skyrim>,  < They meet the Velothi and Valus Mountains at the Morrowind border, and the Dragontail Mountains at the Hammerfell border>,  < The Jeralls are rugged, steep, and inhospitable, with only a few traversable passes>,  < Of particular note is the Pale Pass, which was the site of the abrupt end to the First Akaviri Invasion in 1E 2703, after which its location was lost> }",
                                "hidden": false
                        },
                        {
                                "id": "0.8867098",
                                "keys": "Valus Mountains",
                                "entry": " Valus Mountains: {  < The Valus Mountains are a mountain range on the border between Cyrodiil and Morrowind>,  < They meet the Jerall Mountains at the Skyrim border. They are sometimes considered an extension of the Velothi Mountains> }",
                                "hidden": false
                        },
                        {
                                "id": "0.8674553",
                                "keys": "Dragontail Mountains",
                                "entry": " Dragontail Mountains: {   < The Dragontail Mountains are a mountain range in western Skyrim>,   < They are the limit of Skyrim's territory, where it borders Hammerfell>,   < On the other side of the Dragontail Mountains is the region of Hammerfell called Craglorn> }",
                                "hidden": false
                        },
                        {
                                "id": "0.744132532",
                                "keys": "Dragon's Teeth Mountains",
                                "entry": " Dragon's Teeth Mountains: {   < The Dragon's Teeth Mountains is an expansive mountain range that spans a large portion of western Tamriel>,   < stretching from the frozen summits of High Rock all the way to the forests of Valenwood, passing through Cyrodiil, Skyrim, and Hammerfell>,   < The Dragon's Teeth Mountains are found near the Nordic town of Falkreath> }",
                                "hidden": false
                        },
                        {
                                "id": "0.9878675",
                                "keys": "Druadach Mountains",
                                "entry": " Druadach Mountains: {   < The Druadach Mountains are a mountain range which separate western Skyrim and eastern High Rock and Hammerfell>,   < The misty peaks tower over Markarth and Karthwasten in the Reach, though they gradually diminish closer to Haafingar and Solitude>,   < The range curves around the Karth River, and nearly stretches into Falkreath Hold>,   < The mountains border the High Rock regions of Wrothgar and Bangkorai to the east> }",
                                "hidden": false
                        },
                        {
                                "id": "0.977844114",
                                "keys": "Velothi Mountains",
                                "entry": " Velothi Mountains: {  < The Velothi Mountains are the mountain range separating Morrowind from Skyrim>,  < They are named after the Chimer prophet Veloth who led the Chimer to leave their ancestral homes and resettle in Morrowind>,  < The mountains form the eastern border of the Skyrim regions of Eastmarch and The Rift>,  < At the southern tip of the mountain range, where it meets the Jerall and Valus Mountains> }",
                                "hidden": false
                        },
                        {
                                "id": "0.844l89474",
                                "keys": "Throat of the World,Snow Throat",
                                "entry": " Throat of the World: {   < The Throat of the World, also called Snow Throat, is the highest peak in the province of Skyrim>,   < Seven thousand steps lead up the mountain to its summit, where the settlement of High Hrothgar is located, where the Greybeards live their lives of absolute silence>,   < The legends of the Nords state that mankind was formed on the mountain when the sky breathed onto the land>,   < Many pilgrims travel to the mountain and climb the seven thousand steps to its peak> }",
                                "hidden": false
                        },
                        {
                                "id": "0.7741966482043361",
                                "keys": "Jorrvaskr",
                                "entry": " Jorrvaskr: { <Jorrvask is the meadhall that is home to the Companions in the city of Whiterun>, <Jorrvaskr is made from the boat that brought Ysgramor from Atmora to Tamriel>, <Jorrvaskr is made of wood, since it is a ship upside down> }",
                                "hidden": false
                        },
                        {
                                "id": "0.13524379575253298",
                                "keys": "Skyforge",
                                "entry": " Skyforge: { <The Skyforge is an ancient forge located in Whiterun>, <Only the blacksmith of the Companions is allowed to use it>, <It is said that the Skyforge is magical and this is the reason equipment made there is so good>, <It is said that the Skyforge was blessed by Kyne herself>, <There is a huge hawk statue on top of the Skyforge> }",
                                "hidden": false
                        },
                        {
                                "id": "0.7920305945087891",
                                "keys": "Dragonsreach,palace of the jarl",
                                "entry": " Dragonsreach: { <Dragonsreach is the palace of the Jarl of Whiterun, a huge castle on top of the hill where the city of Whiterun is located>, <Dragonsreach was build to trap dragons before they became extinct>, <It is said that a dragon called Numinex was trapped in Dragonsreach by High King Olaf One-Eye in the First Era>, <The skull of Numinex lies on top of the Jarl's throne until today> }",
                                "hidden": false
                        },
                        {
                                "id": "0.6546465498798",
                                "keys": "understone keep",
                                "entry": " Understone Keep:{  <Understone Keep is the seat of power in the Reach, located in the city of Markarth>,  <In ancient times, it used to be part of the Dwemer city of Nchuand-Zel, one of the many cities built by the Dwemer inside mountains and underground>,  <Because of this fact, the old name Nchuand-Zel stopped being used in favor of the new name, Understone Keep>,  <The Jarl of the Reach resides in Understone Keep>}",
                                "hidden": false
                        },
                        {
                                "id": "0.63464396745487985476",
                                "keys": "palace of the kings,palace of kings",
                                "entry": " Palace of the Kings:{   <The Palace of the Kings, known historically as the Palace of Ysgramor, is a large castle at the far end of the Valunstrad district in Windhelm>,   <It is one of the last remaining structures from the days of the First Empire of the Nords and is home to the hold's Jarl>,   <Ysgramor built the palace so as to tower over the city, showing man's dominion over the very winds that had caused Yngol's death on the voyage from Atmora>,   <It is made of stone blocks, in a unique architecture found only in Windhelm> }",
                                "hidden": false
                        },
                        {
                                "id": "0.7877515302308626",
                                "keys": "hermaeus mora, hermorah, herma-mora",
                                "entry": "[ Hermaeus Mora description:< name ≡ Hermaeus Mora/ Herma-Mora/ Hermorah>/< age ≡ unknown>/< genderless>.  Hermaeus Mora summ:< Usually referred to as a male, his plane of Oblivion is Apocrypha>.  Hermaeus Mora appearance:< body ≡ tentacles/ many eyes/ floating monster/ wretched abyss/ dark purple vortex>.  Hermaeus Mora mental:< smart& intelligent& knows all& possessive& manipulative& arrogant& deceiver>. Hermaeus Mora occupation:< god of knowledge/ daedric prince of knowledge>. Hermaeus Mora traits:< arrogant/ prepotent/ manipulative>.  Hermaeus Mora speech:< telepathy>.  Hermaeus Mora abilities:< knowing all>/< manipulation>/< mind puppeteer>/< controlling people>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.798461458",
                                "keys": "sheogorath,daedric prince of madness,god of madness",
                                "entry": "[    Sheogorath description:< name ≡ Sheogorath>/ < age ≡ old as time>.   Sheogorath summ:< Usually referred to as a male, his plane of Oblivion is the Shivering Isles>.   Sheogorath appearance:< body ≡ 162cm_height/ 60kg_weight/ slim/ thin/ hair< greying& short>/ eyes< cat-like& light brown>/ full greying beard>.    Sheogorath mental:< crazy/ insane/ funny/ jokester/ sarcastic/ mad>.    Sheogorath moniker:< Daedric Prince of Madness/ God of Madness>.    Sheogorath traits:< sarcastic& crazy>.   Sheogorath speech:< thick accent>. ]",
                                "hidden": false
                        },
                        {
                                "id": "0.5441",
                                "keys": "boethiah,boethia,boethra",
                                "entry": "[ Boethiah description:< name ≡ Boethiah& Boethia& Boethra>/< age ≡ primeval>. Boethiah summary:< appears ≡ female>/< location ≡ Realm of Boethia>. Boethiah appearance:< any form she wants>. Boethiah mental:< arrogant& prepotent& bossy& pedantic& sarcastic>. Boethiah occupation:< Daedric Prince of Plots/ God of Plots>. Boethiah speech:< commanding>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.88748",
                                "keys": "clavicus vile,vile,clavicus",
                                "entry": "[ Clavicus Vile description:< name ≡ Clavicus Vile& Vile>/< age ≡ primeval>. Clavicus Vile summary:< appears ≡ male>/< location ≡ The Fields of Regret>/< almost always with his hound Barbas by his side>. Clavicus Vile appearance:< skin ≡ yellow>/< long black horns>/< eyes ≡ red>. Clavicus Vile mental:< jokester& sarcastic& trickster& manipulative>. Clavicus Vile occupation:< Daedric Prince of Trickery and Bargains/ God of Trickery and Bargains>. Clavicus Vile speech:< mocking tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.78511",
                                "keys": "barbas,hound of clavicus vile",
                                "entry": "[ Barbas description:< name ≡ Barbas>/< age ≡ primeval>. Barbas summary:< appears ≡ male>/< location ≡ The Fields of Regret>/< almost always with his owner Clavicus Vile>. Barbas appearance:< skin ≡ yellow>/< long black horns>/< eyes ≡ red>/< most times appears in the form of a dog>. Barbas mental:< jokester& sarcastic& trickster& manipulative>. Barbas occupation:< Hound of Clavicus Vile>. Barbas speech:< mocking tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.874111",
                                "keys": "meridia,merid-nunda",
                                "entry": "[ Meridia description:< name ≡ Meridia& Merid-Nunda>/< age ≡ primeval>. Meridia summary:< appears ≡ female>/< location ≡ The Colored Rooms>/< considers the undead and such aberrations>. Meridia appearance:< height ≡ 162cm>/< weight ≡ 60kg& slim& thin>/< skin ≡ pale>/< hair ≡ shoulder_length& dark brown>/< eyes ≡ dark brown>. Meridia mental:< arrogant& pedantic& bossy>. Meridia occupation:< Daedric Prince of Light and Life>. Meridia speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.9964572",
                                "keys": "mehrunes,dagon,merrunz",
                                "entry": "[ Mehrunes Dagon description:< name ≡ Mehrunes Dagon& Merrunz& Dagon& Mehrunes>/< age ≡ primeval>. Mehrunes Dagon summary:< appears ≡ male>/< location ≡ The Deadlands>. Mehrunes Dagon appearance:< skin ≡ red>/< hair ≡ shaved>/< eyes ≡ red>/< gigantic form with four arms and muscular figure>. Mehrunes Dagon mental:< arrogant& pedantic& violent>. Mehrunes Dagon occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Mehrunes Dagon speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.45454177",
                                "keys": "sanguine",
                                "entry": "[ Sanguine description:< name ≡ Sanguine>/< age ≡ primeval>. Sanguine summary:< appears ≡ male>/< location ≡ The Deadlands>. Sanguine appearance:< skin ≡ jet_black>/< hair ≡ black& long>/< eyes ≡ black>/< long black horns& pointed ears>. Sanguine mental:< nice& drunk& funny>. Sanguine occupation:< Daedric Prince of Revelry and Debauchery>. Sanguine speech:< drunk& nice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5787786326537",
                                "keys": "molag bal,bal",
                                "entry": "[ Molag Bal description:< name ≡ Molag Bal& Bal>/< age ≡ primeval>. Molag Bal summary:< appears ≡ male>/< location ≡ Coldharbour>/< almost always wielding his mace>. Molag Bal appearance:< skin ≡ blue-grey>/< hair ≡ shaved>/< eyes ≡ neon blue>/< body ≡ extremely muscular>/< horns coming out of his ears>. Molag Bal mental:< arrogant& pedantic& violent& sadistic>. Molag Bal occupation:< Daedric Prince of Domination and Enslavement>. Molag Bal speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.57856537",
                                "keys": "mephala,mafala",
                                "entry": "[ Mephala description:< name ≡ Mephala& Mafala>/< age ≡ primeval>. Mephala summary:< appears ≡ female>/< location ≡ Spiral Skein>. Mephala appearance:< skin ≡ dark grey>/< hair ≡ long& black>/< eyes ≡ red>/< she may also take the form of a spider>. Mephala mental:< arrogant& pedantic& belittling>. Mephala occupation:< Daedric Prince of Duality, Sex and Murder, Truth and Falsehood>. Mephala speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.578666537",
                                "keys": "Malacath,Malauch,Mauloch,Malak,Orkey,Orkha,Malooc",
                                "entry": "[ Malacath description:< name ≡ Malacath& Malauch& Mauloch& Malak& Orkey& Orkha& Malooc>/< age ≡ primeval>. Malacath summary:< appears ≡ male>/< location ≡ Ashpit>. Malacath appearance:< skin ≡ grayish-green>/< hair ≡ shaved>/< body ≡ extremely muscular/ looks like an orc>. Malacath mental:< stubborn& arrogant& violent>. Malacath occupation:< Daedric Prince of the Bloody Oath, Flesh and Bone>. Malacath speech:< commanding>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8687678",
                                "keys": "hircine",
                                "entry": "[ Hircine description:< name ≡ Hircine>/< age ≡ primeval>. Hircine summary:< appears ≡ male>/< location ≡ Hunting Grounds>. Hircine appearance:< skin ≡ pale>/< eyes ≡ red>/< has the head of a horned elk>. Hircine mental:< values hunters and bravery& >. Hircine occupation:< Daedric Prince of the Hunt>. Hircine speech:< commanding tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.578634537",
                                "keys": "nocturnal,noctra",
                                "entry": "[ Nocturnal description:< name ≡ Nocturnal& Noctra >/< age ≡ primeval>. Nocturnal summary:< appears ≡ female>/< location ≡ Evergloam>. Nocturnal appearance:< skin ≡ pale>/< hair ≡ long& black>. Nocturnal wearing:< long dark blue dress with cleavage and a hood>. Nocturnal mental:< arrogant& pedantic>. Nocturnal occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Nocturnal speech:< pretentious& arrogant>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5788766535437",
                                "keys": "peryite,taskmaster",
                                "entry": "[ Peryite description:< name ≡ Peryite& Taskmaster>/< age ≡ primeval>. Peryite summary:< appears ≡ male>/< location ≡ Realm of Peryite>. Peryite appearance:< usually takes the form of a four-legged dragon>. Peryite mental:< sadistic& pestilent>. Peryite occupation:< Daedric Prince of Pestilence>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5786537",
                                "keys": "jyggalag",
                                "entry": "[ Jyggalag description:< name ≡ Jyggalag>/< age ≡ primeval>. Jyggalag summary:< appears ≡ male>/< location ≡ Jyggalag's Realm>/< is the antithesis of Sheogorath>. Jyggalag appearance:< has the form of a humanoid made of shiny silver crystals>. Jyggalag mental:< arrogant& obsessive& pretentious>. Jyggalag occupation:< Daedric Prince of Order>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5734576345345",
                                "keys": "bards college,college of bards",
                                "entry": " Bards College: { < The Bards College is an ancient institution dedicated to the formation of the arts>, < It is the most prestigious school of art in Tamriel, and the most ancient>, < It was founded some time in the First Era, during the reign of High King Olaf>, < Most of the best bards and painters in the history of Tamriel have studied here>, < It is a very prestigious academy of art located in the city of Solitude> }",
                                "hidden": false
                        },
                        {
                                "id": "0.547564756867876575467",
                                "keys": "antiquarians circle,antiquarian circle",
                                "entry": " Antiquarians Circle: { < The Antiquarians Circle is the name of the campus of the University of Gwyllim that is dedicated to the study of History, Archaelogy and Paleontology, and is located in the city of Solitude>, < It is one of the most prestigious institutions of education in Tamriel, and many of the most prestigious historians and archaelogists studied at the Antiquarians Circle>, < It is located in the city of Solitude, while the other campi of the Unviersity of Gwyllim are located in Cyrodiil> }",
                                "hidden": false
                        },
                        {
                                "id": "0.4936504478941153",
                                "keys": "college of winterhold",
                                "entry": "College of Winterhold:[TYPE<College of Winterhold>:guild/university/school/academy/college/guild of mages/college of mages/arcane school/university for learning magic/school of magic;LOCATION<College of Winterhold>:Winterhold;LEADER TITLE<College of Winterhold>:Arch-Mage;VICE LEADER TITLE<College of Winterhold>:Master Wizard;CITY<College of Winterhold>:Winterhold;REGION<College of Winterhold>:Winterhold;DESC<College of Winterhold>:the college of winterhold is a school of magic/the leader of the college has the title of arch-mage/the vice-leader has the title of master wizard/it is a big building in the city of winterhold/it is a big construction/it is a big castle/it is a beautiful construction/the college is thousands of years old/the college was founded by arch-mage shalidor/the college is a famous school of magic.]",
                                "hidden": false
                        },
                        {
                                "id": "0.3756130377106148",
                                "keys": "Companions",
                                "entry": "[ Companions description:< leader_title ≡ harbinger/ details ≡ The Companions are a group of fighters that date back to the Merethic Era, and were founded by Ysgramor. They're the oldest guild in Tamriel, and their headquarters is Jorrvaskr, in the city of Whiterun. They do contracts for those willing to pay, and also fight for the good and for the honor of Skyrim when need be>. Companions headquarters< Jorrvaskr>. Companions location< The Companions are in the city of Whiterun. Their headquarters is the ancient ship of Ysgramor, called Jorrvaskr>. ]",
                                "hidden": false
                        },
                        {
                                "id": "0.818803105546712",
                                "keys": "riften inn,riften tavern,mad mammoth",
                                "entry": "The Mad Mammoth:[TYPE<The Mad Mammoth>:inn/bar/pub/tavern;OWNER<The Mad Mammoth>:andkvar;INHABITANTS<The Mad Mammoth>:Andkvar/Narca/Bujela/Freyte/Torbndir;LOCATION<The Mad Mammoth>:Riften;CITY<The Mad Mammoth>:Riften;DESC<The Mad Mammoth>:the mad mammoth is the local inn and tavern in riften/it is owned by andkvar/has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/andkvar lives here/narca lives here/bujela lives here/freyte lives here/torbndir lives here/five people live here;EXIT<The Mad Mammoth>:one exit goes out to riften in the market square/one exit goes to riften in the entrance bridge.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8251141022498825",
                                "keys": "winterhold inn, frozen hearth, winterhold tavern",
                                "entry": "The Frozen Hearth:[TYPE<The Frozen Hearth>:inn/bar/pub/tavern;OWNER<The Frozen Hearth>:Bjormar;INHABITANTS<The Frozen Hearth>:Bjormar/Astrid/Aengvir/Balor;LOCATION<The Frozen Hearth>:Winterhold;CITY<The Frozen Hearth>:Winterhold;DESC<The Frozen Hearth>:the frozen hearth is the local inn and tavern in winterhold/it is owned by Bjormar/it has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/balor lives here/Bjormar owns the place/astrid lives here/aengvir lives here/there are four people here/balor lives here;EXIT<The Frozen Hearth>:exit that goes out to the city of winterhold.]",
                                "hidden": false
                        },
                        {
                                "id": "0.3548538694560268",
                                "keys": "bloated goat, whiterun inn, whiterun tavern",
                                "entry": "The Bloated Goat:[TYPE<The Bloated Goat>:inn/bar/pub/tavern;OWNER<The Bloated Goat>:Isekaid;INHABITANTS<The Bloated Goat>:Isekaid/Sigrid;LOCATION<The Bloated Goat>:whiterun/city of whiterun;CITY<The Bloated Goat>:whiterun/city of whiterun;DESC<The Bloated Goat>:The Bloated Goat is the inn and tavern in the city of Whiterun/owned by Isekaid and his wife Sigrid. They both live at the inn/in their private room in the ground floor. The inn is a two story building with 10 rooms for rent.;EXIT<The Bloated Goat>:One main exit goes out to the Whiterun market square/located in the Plains District..]",
                                "hidden": false
                        },
                        {
                                "id": "0.13879806616371204",
                                "keys": "temple of kyne",
                                "entry": "Temple of Kyne:[TYPE<Temple of Kyne>:temple/church/cathedral;INHABITANTS<Temple of Kyne>:Irene/Mauricius/Nonnata;LOCATION<Temple of Kyne>:whiterun/city of whiterun;CITY<Temple of Kyne>:whiterun/city of whiterun;DESC<Temple of Kyne>:Temple dedicated to Kyne/the goddess of wind and air. It's the main temple to Kyne in Skyrim/located in the Winds District.;EXIT<Temple of Kyne>:One main exit goes out to the Whiterun tree square/located in the Winds District.]",
                                "hidden": false
                        },
                        {
                                "id": "0.21949257720023918",
                                "keys": "sigrid",
                                "entry": " Sigrid:[      DESC: nord/ female/ 38y/ 169cm/ 45kg/ born in riften/ inkeeper of the bloated goat;      WORN: green dress;      MIND: good& good humored& solidary& fun;  ]",
                                "hidden": false
                        },
                        {
                                "id": "0.40410765739865107",
                                "keys": "isekaid,innkeeper of bloated goat",
                                "entry": " Isekaid:[      DESC: nord/ male/ 40y/ 175cm/ 80kg/ born in rorikstead/ inkeeper of the bloated goat;      WORN: brown leather jerkin/ green breeches;      MIND: good& good humored& solidary& fun;  ]",
                                "hidden": false
                        },
                        {
                                "id": "0.33787729259857935",
                                "keys": "toli",
                                "entry": "Toli:[DESC<Toli>:male/40y/180cm/80kg/small and weak for a nord/fair skin/hazel eyes/light brown hair/meek/timid/kind hearted/naive/innocence/wants to run the best inn in all of skyrim/born in solitude;WORN<Toli>:brown tunic/dark brown hose;RACE<Toli>:nord;SUMMARY<Toli>:male/40y/180cm/80kg/small and weak for a nord/fair skin/hazel eyes/light brown hair/meek/timid/kind hearted/naive/innocence/wants to run the best inn in all of skyrim/born in solitude;MIND<Toli>:meek/timid/kind hearted/naive/innocence.]",
                                "hidden": false
                        },
                        {
                                "id": "0.643240642392414",
                                "keys": "winterhold innkeeper, winterhold bartender",
                                "entry": "Bjormar:[DESC<Bjormar>:male/185cm/muscular body/big arms/big hands/47y/auburn hair/short hair/hardworking/heavy nord accent;WORN<Bjormar>:brown jerkin/tight pants/leather shoes;RACE<Bjormar>:nord;SUMMARY<Bjormar>:nord/male/47y/born in winterhold/owner of the frozen hearth/innkeeper by trade/185cm/100kg;MIND<Bjormar>:good humor/funny/nice/jokester/dislikes argonians/dislikes elves/short fused;RELATIONS<Bjormar>:wife<astrid>/friend<aengvir>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.4517321761638551",
                                "keys": "winterhold innkeeper, winterhold bartender",
                                "entry": " Astrid:[DESC<Astrid>:female/180cm/60kg/thin body/small hands/small feet/thin/long hair/blonde hair/38y/heavy nord accent/hardworking/working class;WORN<Astrid>:white jerkin/tight pants/leather apron;RACE<Astrid>:nord;SUMMARY<Astrid>:nord/female/38y/born in windhelm/wife of Bjormar/married to Bjormar/owner of the frozen hearth/innkeeper by trade/180cm/60kg;MIND<Astrid>:shy/funny/quiet/dislikes elves/dislikes argonians;RELATIONS<Astrid>:husband<Bjormar>/friend<aengvir>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.044367797985053636",
                                "keys": "balor",
                                "entry": " Balor:[DESC<Balor>:male/170cm/fat body/big hands/hardworking/heavy nord accent/26y/120kg/toupet hair/dark brown hair;WORN<Balor>:blue mage robes;RACE<Balor>:nord;SUMMARY<Balor>:nord/male/26y/170cm/120kg/born in whiterun/member of the college of winterhold/mage/wizard/middle class;MIND<Balor>:smart/intelligent/serious/funny/technical/nice/polite/educated.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8083626610017034",
                                "keys": "mélanie,arch-mage,arch mage,archmage",
                                "entry": " Mélanie:[DESC:breton/female/60y/165cm/40kg/arch-mage of the college of winterhold;APPE:thin/delicate/stunning/blue eyes/light brown hair/long straight hair;WORN:blue master wizard robes/fur collar/fur hood/gold diamond necklace/leather gloves/leather boots;MIND:serious/smart/intelligent/strategic/technical/well read;SUMM:friend<ahmad/rostfa/ungvid>;]",
                                "hidden": false
                        },
                        {
                                "id": "0.6864424343697011",
                                "keys": "ahmad,master wizard of winterhold",
                                "entry": " Ahmad:[DESC:redguard/male/42y/172cm/80kg/master wizard of winterhold;APPE:strong/black eyes/dark brown hair/dreadlock hair:WORN:red master wizard robes/leather boots/gold emerald necklace/gold ruby ring;MIND:good humor/smart/intelligent/strategic/technical/funny/well read;SUMM:friend<rostfa/mélanie/ungvid>;]",
                                "hidden": false
                        },
                        {
                                "id": "0.649148444342674",
                                "keys": "aengvir",
                                "entry": " Aengvir:[DESC<Aengvir>:male/170cm/70kg/thin body/slender/weak body/drunkard/drunk/drinks a lot/55y/fisherman by trade/long hair/aurburn hair;WORN<Aengvir>:brown tunic/dark brown hose;RACE<Aengvir>:nord;SUMMARY<Aengvir>:nord/male/55y170cm/70kg/born in winterhold/fisherman by trade/peasant/drunk/drunkard/mead is favorite drink;MIND<Aengvir>:short fuse/irritated/bad mood/unpolite;RELATIONS<Aengvir>:friend<rostfa>/wife<snolfi>/daughter<britte>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.13092095227421896",
                                "keys": "rostfa",
                                "entry": " Rostfa:[DESC<Rostfa>:female/170cm/fat body/big hands/hardworking/heavy nord accent/45y/100kg/long curly hair/dark brown hair;WORN<Rostfa>:blue mage robes;RACE<Rostfa>:nord;SUMMARY<Rostfa>:nord/male/45y/170cm/100kg/born in riften/member of the college of winterhold/mage/wizard/middle class/court mage of winterhold;MIND<Rostfa>:smart/intelligent/serious/funny/technical/nice/polite/educated;RELATIONS<Rostfa>:friend<ungvid/balor/ahmad kareem/méliane sindeaux>.]",
                                "hidden": false
                        }
                ],
                "gameCode": {
                        "onInput": "const modifier = (text) => {\r\n  let stop = false;\r\n  let modifiedText = nameReplace(text);\r\n  const lowered = modifiedText.toLowerCase();\r\n  const commandMatcher = modifiedText.match(/\\n? ?(?:> You |> You say \"|)\\/(.+?)[\"]?[.]?\\n?$/i);\r\n\r\n  if (!state.init && info.actionCount < 1) {\r\n    grabAllBrackets(modifiedText);\r\n    state.character = {\r\n      name: state.placeholders[0].trim(),\r\n      gender: state.placeholders[1].trim(),\r\n      race: state.placeholders[2].trim(),\r\n      class: state.placeholders[3].trim(),\r\n      age: state.placeholders[4].trim(),\r\n      personality: limitCharacterDetails(state.placeholders[5]),\r\n      eyes: {\r\n        eyeColor: state.placeholders[6].trim()\r\n      },\r\n      hair: {\r\n        hairStyle: state.placeholders[7].trim(),\r\n        hairColor: state.placeholders[8].trim(),\r\n      },\r\n      appearance: {\r\n        height: state.placeholders[9].replace(DIGIT_REGEX, ''),\r\n        weight: state.placeholders[10].replace(DIGIT_REGEX, ''),\r\n        features: limitCharacterDetails(state.placeholders[11])\r\n      }\r\n    };\r\n\r\n    playerWorldInfo = {\r\n      keys: `${state.character.name},you`,\r\n      hidden: false,\r\n      entry: 'you:['\r\n        + `NAME:${state.character.name}; `\r\n        + `SUMM:age<${state.character.age}y>/race<${state.character.race}>/${state.character.appearance.height}cm&${state.character.appearance.weight}kg; `\r\n        + `APPE<you>:${state.character.appearance.features}/eyes<${state.character.eyes.eyeColor}>/hair<${state.character.hair.hairStyle}&${state.character.hair.hairColor}>; `\r\n        + `MIND:${state.character.personality}; `\r\n        + `WORN<you>:nothing; `\r\n        + `INV<you>:nothing.`\r\n        + ']'\r\n    };\r\n\r\n    addWorldEntry(playerWorldInfo.keys, playerWorldInfo.entry, false);\r\n    state.character.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes(state.character.name));\r\n\r\n    getInventory();\r\n    parseRace(state.character);\r\n    parseClass(state.character);\r\n    state.init = true;\r\n    state.shouldStop = false;\r\n    modifiedText = modifiedText.replace(BRACKETS, '') + generatePrompt();\r\n    delete state.placeholders;\r\n  }\r\n\r\n  if (commandMatcher) {\r\n    console.log(`Command detected`);\r\n    console.log(commandMatcher);\r\n\r\n    stop = true;\r\n    modifiedText = '';\r\n\r\n    const cmd = commandMatcher[1].split(' ')[0];\r\n    const params = commandMatcher[1].replace(cmd, '') != null ? commandMatcher[1].replace(cmd, '').trim() : '';\r\n\r\n    if (cmd == 'invCheck') {\r\n      console.log(`Begin inventory check.`);\r\n      state.message = `${checkInventory()}`;\r\n      console.log(`End inventory check.`);\r\n    } else if (cmd == 'invAdd') {\r\n      console.log(`Begin inventory add.`);\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        state.message = `${addToInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        state.message = `You cannot add less than 1 unit of an item to your inventory.`;\r\n      }\r\n\r\n      console.log(`End inventory add.`);\r\n    } else if (cmd == 'invRemove') {\r\n      console.log(`Begin inventory remove.`);\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        state.message = `${removeFromInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        state.message = `You cannot remove less than 1 unit of an item from your inventory.`;\r\n      }\r\n\r\n      console.log(`End inventory remove.`);\r\n    } else if (cmd == 'invEquip') {\r\n      console.log(`Begin inventory equip.`);\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      state.message = `${equipItem(itemName)}`;\r\n      console.log(`End inventory equip.`);\r\n    } else if (cmd == 'invDebugWi') {\r\n      console.log(`Begin inventory debug.`);\r\n      debugInventory();\r\n      state.message = `Your inventory and player WI have been debugged.`;\r\n      console.log(`End inventory debug.`);\r\n    }\r\n  }\r\n\r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      if (encounterDB[encounter].inputLock) {\r\n        console.log(`Input checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      //for outputMod:\r\n      /*\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(`Output checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      */\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          // for outputs:\r\n          // modifiedText += ` ${curTextNote}`\r\n          modifiedText += `\\n${curTextNote}`\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      // if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n      if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      // modifiedText += ` ${curTextNote}`\r\n                      modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText, stop: stop };\r\n}\r\n\r\nmodifier(text);",
                        "onOutput": "const modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n\r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      /*\r\n      if (encounterDB[encounter].inputLock) {\r\n          console.log(\"Input checking disabled on this encounter.\")\r\n          continue globalLoop\r\n      }\r\n      */\r\n      //for outputMod:\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(\"Output checking disabled on this encounter.\")\r\n        continue globalLoop\r\n      }\r\n\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          // for outputs:\r\n          modifiedText += ` ${curTextNote}`\r\n          // modifiedText += `\\n${curTextNote}`\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n        // if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      modifiedText += ` ${curTextNote}`\r\n                      // modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n",
                        "sharedLibrary": "const BRACKETED = /\\[(.*?)\\]/g;\r\nconst BRACKETS = /\\[|\\]/g;\r\nconst DIGIT_REGEX = /\\D/g;\r\nconst LETTER_REGEX = /[0-9]/g;\r\nconst PUNCTUATION_REMOVE = /[^\\w\\s]/gi;\r\nconst WEAPON_REGEX = new RegExp(/(crossbow|bow)/i);\r\nconst WORN_REGEX = new RegExp(`(?<=WORN<you>:)(.*)(?=;)`);\r\nconst INVENTORY_REGEX = new RegExp(`(?<=INV<you>:)(.*)(?=.)`);\r\n\r\nconst WEAPONS = [\r\n  'sword', 'knife', 'spear', 'hammer', 'axe', 'battleaxe', 'sledgehammer', 'longsword', 'bow', 'pickaxe'\r\n];\r\n\r\nconst CLOTHING = [\r\n  'rags', 'armor', 'dress', 'kilt', 'skirt', 'jerkin', 'shirt', 'clothes', 'robes', 'leathers', 'hooded', 'cuirass', 'chainmail', 'gauntlets', 'vambraces', 'tights'\r\n];\r\n\r\nlet possibleLines = [\r\n  '\"Welcome to the Bloated Goat! If you need anything, talk to me or to my wife Sigrid. We have warm beds and quality mead!\". Isekaid smiles.\\n',\r\n  '\"Need a room? We have warm beds and nice mead!\". Isekaid smiles.\\n',\r\n  `\"Need a room? Talk to me or my wife Sigrid, and we'll set you up!\"\\n`,\r\n];\r\n\r\n/**\r\n * Function that generates the initial prompt for the adventure\r\n */\r\nconst generatePrompt = () => {\r\n  return possibleLines[Math.floor(Math.random() * possibleLines.length)];\r\n}\r\n\r\n/**\r\n * Function that parses the character's race when they're created. This determines the innkeeper's behavior towards the player.\r\n * \r\n * @param {object} character\r\n */\r\nconst parseClass = (character) => {\r\n  let charClass = character.class.toLowerCase();\r\n  switch (charClass) {\r\n    case 'mage':\r\n      addToInventory('Apprentice Mage Robes', 1);\r\n      equipItem('Apprentice Mage Robes');\r\n      possibleLines.push(\r\n        `\"Oh, a mage? That's an impressive craft, friend. Have a mug of mead on the house!\". Isekaid smiles.\\n`,\r\n        `\"Oh, a mage? I'm impressed your types haven't blown up all of the world yet. No magic allowed in my inn!\". Isekaid seems annoyed by the fact that you're a mage.\\n\"`\r\n      );\r\n      break;\r\n    case 'warrior':\r\n      addToInventory('Rusty Iron Sword', 1);\r\n      addToInventory('Rusty Iron Armor', 1);\r\n      equipItem('Rusty Iron Sword');\r\n      equipItem('Rusty Iron Armor');\r\n      possibleLines.push(\r\n        `\"You look strong, friend. Here to join the Companions? Go up to Jorrvaskr. They need folk like you.\". Isekaid smiles.\\n`,\r\n        `\"A fellow warrior? ${character.race.toLowerCase().includes('nord') ? `A true Nord. Here's a mug od mead. And that's on me, friend! May you be worthy of Sovngarde!`\r\n          : `I respect warriors. Here's a mug of mead on the house!`}\". Isekaid smiles.\\n`\r\n      );\r\n      break;\r\n    case 'ranger':\r\n      addToInventory('Wooden Bow', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Wooden Bow');\r\n      equipItem('Leather Tights');\r\n      possibleLines.push(\r\n        `\"Oh, you fancy the bow? Smart techniques. Bet you never run out of good meat to eat, huh?\". Isekaid laughs.\\n`,\r\n        `\"A hunter! Hunters and farmers alike are the ones who provide us with food. May your hunt be fruitful, friend!\". Isekaid smiles.\\n`\r\n      );\r\n      break;\r\n    case 'peasant':\r\n      addToInventory('White Jerkin', 1);\r\n      addToInventory('Brown Breeches', 1);\r\n      equipItem('White Jerkin');\r\n      equipItem('Brown Breeches');\r\n      break;\r\n    case 'thief':\r\n      addToInventory('Rusty Iron Dagger', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Rusty Iron Dagger');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    case 'assassin':\r\n      addToInventory('Rusty Iron Dagger', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Rusty Iron Dagger');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    default:\r\n      state.message = 'You have chosen a class that is not one of the options. You have no items.';\r\n      console.log('No valid class selected.');\r\n      break;\r\n  }\r\n}\r\n\r\n/**\r\n * Function that parses the character's race when they're created. This determines the innkeeper's behavior towards the player.\r\n * \r\n * @param {object} character\r\n */\r\nconst parseRace = (character) => {\r\n\r\n  let race = character.race.toLowerCase();\r\n  if (race.includes(\"orsimer\") || race.includes(\"orc\")) {\r\n    race = 'Orsimer/Orc';\r\n    possibleLines.push(\r\n      `\"Oh, great. An Orc. Don't bash into my stuff, freak.\". You notice disdain in his voice.\\n`,\r\n      `\"An Orc? Damn brutes. If you so much break a cup, I'll have the guards kick you from the city.\". You notice disdain in his voice.\\n`\r\n    );\r\n  } else if (race.includes(\"altmer\") || race.includes(\"high elf\")) {\r\n    race = 'Altmer/High Elf';\r\n    possibleLines.push(\r\n      '\"What do you want here, elf?\"\\n',\r\n      '\"Another elf? Your kind is not welcome here.\"\\n',\r\n      `\"You may stay, but I'm watching you, damn elf. One false movement and I'll have you thrown in the White River!\"\\n`,\r\n      `\"Good, an Altmer. Now I'm happy.\". He speech seems sarcastic.\\n`\r\n    );\r\n  } else if (race.includes(\"dunmer\") || race.includes(\"dark elf\")) {\r\n    race = 'Dunmer/Dark Elf';\r\n    possibleLines.push(\r\n      '\"What do you want here, elf?\"\\n',\r\n      '\"Another elf? Your kind is not welcome here.\"\\n',\r\n      `\"You may stay, but I'm watching you, damn elf. One false movement and I'll have you thrown in the White River!\"\\n`,\r\n      `\"What do you want here? Is your kind trying to take over Skyrim? Now a damn Dunmer is Empress!\". You notice disdain in his voice.\\n`\r\n    );\r\n  } else if (race.includes(\"bosmer\") || race.includes(\"wood elf\")) {\r\n    race = 'Bosmer/Wood Elf';\r\n    possibleLines.push(\r\n      '\"What do you want here, elf?\"\\n',\r\n      '\"Another elf? Your kind is not welcome here.\"\\n',\r\n      `\"You may stay, but I'm watching you, damn elf. One false movement and I'll have you thrown in the White River!\"\\n`,\r\n      `\"Are you... a Bosmer? I've never seen one in real life. You ain't gonna eat me, right?\". He seems frightened.\\n`,\r\n      `\"You're a Bosmer? Is it true that you eat people's flesh?\". He seems frightened.\\n`\r\n    );\r\n  } else if (race == 'nord') {\r\n    possibleLines.push(\r\n      `\"Welcome, friend! How can I help a ${character.gender == 'male' ? 'brother' : 'sister'} Nord?\"\\n`,\r\n      `\"You must be cold, friend. Here, have a mug of mead on the house.\". He hands you a mug of mead.\\n`\r\n    );\r\n  } else if (race == 'breton') {\r\n    possibleLines.push(\r\n      `\"Oh, a midget. How can I help you, friend?\", Isekaid laughs.\\n`,\r\n      `\"A Breton in these parts? Are you lost, friend?\"\\n`\r\n    );\r\n  } else if (race == 'imperial') {\r\n    possibleLines.push(\r\n      `\"An Imperial in these parts? Are you lost, friend?\"\\n`,\r\n      `\"An Imperial? It's a long way from Cyrodiil, friend. Need a bed to rest?\"\\n`\r\n    );\r\n  } else if (race == 'khajiit') {\r\n    possibleLines.push(\r\n      `\"Here, kitty kitty kitty.\". He laughs out loud. \"I'm just joking, friend. What do you need?\"\\n`,\r\n      `\"Oh, a cat on two legs. Don't leave fur in our stuff. We're a hygienic bunch.\"\\n`\r\n    );\r\n  } else if (race == 'argonian') {\r\n    possibleLines.push(\r\n      `\"Good day, lizard. How may I help you?\"\\n`,\r\n      `\"A lizard? Nasty.\". He seems disgusted at you.\\n`\r\n    );\r\n  } else if (race == 'redguard') {\r\n    possibleLines.push(\r\n      `\"Good day, friend. Keeping well? It's a long way from Hammerfell. Enjoy your stay in Whiterun.\"\\n`,\r\n      `\"A Redguard? You're good people. Strong and foolhardy like us Nords, not a bunrch of milk-drinkers like these damned elves.\"\\n`\r\n    );\r\n  } else {\r\n    possibleLines.push(\r\n      `\"Oh, you're a weird one, aren't you?\". He laughs. \"What race are you, ${character.gender == 'male' ? 'lad' : 'lass'}?\"`,\r\n      `\"Oh, you're a weird one. What race are you? Doesn't matter, my family and I don't judge. What do you need, friend?\". Isekaid smiles.\\n`,\r\n      `\"Oh... hello...\". Isekaid looks at you and raises his eyebrow. He's clearly confused because you don't look like any known race. \"Do... you... need something?\"\\n`,\r\n      `\"Oh... you're on of those... people.\". Isekaid looks at you and raises his eyebrow. He's clearly confused because you don't look like any known race. \"Do you... need something?\"\\n`\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Simple frunction to capitalize the first letter of a string\r\n * \r\n * @param {string} string \r\n */\r\nconst capitalize = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Limits player details provided in prompt to only three items\r\n * \r\n * @param {string} text \r\n */\r\nfunction limitCharacterDetails(text) {\r\n  console.log(`START limitCharacterDetails(): parsing character details: ${text}`);\r\n  return text.replace(/, /g, ',').split(',').slice(0, 3).join('/').trim();\r\n}\r\n\r\n/**\r\n * Finds an item in the player's inventory\r\n * @param {string} itemName \r\n */\r\nconst findItemInInventory = (itemName) => {\r\n  console.log(`START findItemInInventory(): Looking for item \"${itemName}\" in player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let itemFound = getInventory().find((item) => {\r\n    return item.name == loweredName;\r\n  });\r\n\r\n  if (typeof itemFound != 'undefined') {\r\n    console.log(`END findItemInInventory(): Item \"${itemName}\" found. Returning it.`);\r\n    return itemFound;\r\n  }\r\n\r\n  console.log(`END findItemInInventory(): Item \"${itemName}\" not found in inventory.`);\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Removes an item from player's inventory\r\n * \r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst removeFromInventory = (itemName, itemQuantity) => {\r\n  console.log(`START removeFromInventory(): Removing ${itemQuantity} instances of \"${itemName}\" from player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (!(item.quantity == itemQuantity) && (item.quantity > 1 && item.quantity >= itemQuantity)) {\r\n    console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n    item.quantity -= itemQuantity;\r\n    return `\\nYou have removed ${itemQuantity} ${loweredName} from your inventory.`;\r\n  }\r\n\r\n  let index = getInventory().indexOf(item);\r\n  getInventory().splice(index, 1);\r\n  updateInventory();\r\n  console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n  return `\\nYou have removed all ${loweredName} from your inventory.`;\r\n}\r\n\r\n/**\r\n * Checks player's inventory and returns what's inside\r\n */\r\nconst checkInventory = () => {\r\n\r\n  console.log(`START checkInventory(): Checking player's inventory.`);\r\n  if (getInventory().length > 0) {\r\n    let items = getInventory().map((item) => item.name).join(', ');\r\n    let itemsWorn = getInventory().filter((item) => item.status == 'worn').map((item) => item.name).join(', ');\r\n    console.log(`END checkInventory(): Player's inventory contains: ${items}.`);\r\n    return `\\nYour inventory contains: ${items}. Items equipped: ${itemsWorn}.`;\r\n  }\r\n\r\n  console.log(`END checkInventory(): Player's inventory is empty.`);\r\n  return `\\nYour inventory is empty.`;\r\n}\r\n\r\n/**\r\n * Returns player's inventory. If the array in undefined, define it\r\n */\r\nconst getInventory = () => {\r\n  console.log(`START getInventory(): verifying player's inventory.`);\r\n  if (typeof state.inventory == 'undefined') {\r\n    console.log(`INSIDE getInventory(): Inventory array is undefined. Declaring it with an empty array.`);\r\n    state.inventory = [];\r\n  }\r\n\r\n  console.log(`END getInventory(): player's inventory exists. Returning its contents.`);\r\n  return state.inventory;\r\n}\r\n\r\n/**\r\n * Adds item to player's inventory\r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst addToInventory = (itemName, itemQuantity) => {\r\n\r\n  console.log(`START addToInventory(): adding ${itemQuantity} instances of \"${itemName}\" to player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (typeof item == 'undefined') {\r\n    console.log(`INSIDE addToInventory(): Player has no other instances of this item in their inventory. Adding these.`);\r\n    item = {\r\n      name: loweredName,\r\n      quantity: itemQuantity,\r\n      status: 'in inventory',\r\n      type: getType(itemName)\r\n    };\r\n\r\n    state.inventory.push(item);\r\n  } else {\r\n    console.log(`INSIDE addToInventory(): Player already has other instances of this item in their inventory. Incrementing the quantity by ${itemQuantity}.`);\r\n    item.quantity = item.quantity + itemQuantity;\r\n  }\r\n\r\n  updateInventory();\r\n  console.log(`END addToInventory(): ${itemQuantity} instances of \"${itemName}\" added to player's inventory.`);\r\n  return `\\nYou have added ${itemQuantity} ${loweredName} to your inventory.`;\r\n}\r\n\r\n/**\r\n * Simple function to make the player equip something.\r\n * \r\n * @param {string} itemName \r\n */\r\nconst equipItem = (itemName) => {\r\n  console.log(`START equipItem(): equipping ${itemName}`);\r\n  const itemNameLowerCase = itemName.toLowerCase();\r\n  let itemToBeEquipped = findItemInInventory(itemNameLowerCase);\r\n  if (typeof itemToBeEquipped != 'undefined') {\r\n    const itemToBeEquippedIndex = state.inventory.findIndex(x => x.name == itemToBeEquipped.name);\r\n    console.log(`INSIDE equipItem(): ${itemName} exists in player's inventory`);\r\n    if (itemToBeEquipped.type != 'weapon' && itemToBeEquipped.type != 'clothing') {\r\n      console.log(`END equipItem(): item is not equippable.`);\r\n      return `\\n${capitalize(itemNameLowerCase)} is not an equippable item.`;\r\n    }\r\n\r\n    let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n    let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n    let oldItem = getInventory().find(oldItem => oldItem.status == 'worn' && oldItem.type == itemToBeEquipped.type);\r\n    if (typeof oldItem != 'undefined') {\r\n      const oldItemIndex = state.inventory.findIndex(x => x.name == oldItem.name);\r\n      console.log(`INSIDE equipItem(): Player has another item of the same type equipped. Unequipping old item.`);\r\n      itemsWorn.replace(oldItem.name.toLowerCase(), '');\r\n      console.log(`INSIDE equipItem(): Removing worn status from ${oldItem.name}.`);\r\n      oldItem.status = 'in inventory';\r\n      state.inventory[oldItemIndex] = oldItem;\r\n    }\r\n\r\n    itemToBeEquipped.status = 'worn';\r\n    state.inventory[itemToBeEquippedIndex] = itemToBeEquipped;\r\n    itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n      .map((k) => {\r\n        console.log(`INSIDE equipItem(): worn item found in inventory -> ${k.name}`);\r\n        return k.name;\r\n      }).join('/');\r\n\r\n    console.log(`INSIDE equipItem(): finished building new WORN string -> ${itemsWorn}`);\r\n    playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n\r\n    console.log(`END equipItem(): ${itemToBeEquipped.name} has been equipped.`);\r\n    return `\\nYou are now ${itemToBeEquipped.type == 'weapon' ? 'wielding' : 'wearing'} ${itemToBeEquipped.name}.`;\r\n  }\r\n\r\n  console.log(`END equipItem(): Player does not have \"${itemNameLowerCase}\" in their inventory.`);\r\n  return `\\nYou do not have \"${itemNameLowerCase}\" in your inventory.`;\r\n}\r\n\r\n/**\r\n * Debugs your inventory and corrects the player's WI in case it fails\r\n */\r\nconst debugInventory = () => {\r\n  console.log(`START debugInventory(): debugging player's inventory`);\r\n  state.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes('you'));\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n\r\n  let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n\r\n  itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n    .map((k) => {\r\n      console.log(`INSIDE debugInventory(): Updating player WI with worn items`);\r\n      return k.name;\r\n    }).join('/');\r\n\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE debugInventory(): Updating player WI with inventory items`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n\r\n  console.log(\"INSIDE debugInventory(): Fixed player WI with inventory's items.\");\r\n  console.log(`END debugInventory(): Player's WI saved at index ${state.worldInfoIndex}.`);\r\n}\r\n\r\n/**\r\n * Updates the player's inventory and corrects the WI\r\n */\r\nconst updateInventory = () => {\r\n  console.log(`START updateInventory(): updating player's inventory and WI with current items`);\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE updateInventory(): Sorting inventory items and quantities into player WI`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n  console.log(`END updateInventory(): updated player's inventory and WI with current items`);\r\n}\r\n\r\n/**\r\n * Function to determine item type\r\n * \r\n * @param {string} itemType\r\n */\r\nconst getType = (itemName) => {\r\n  const checker = (input) => {\r\n    return WEAPONS.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'weapon' :\r\n      CLOTHING.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'clothing' : 'misc';\r\n  }\r\n\r\n  return checker(itemName);\r\n}\r\n\r\n/**************************************************************************\r\n***************************************************************************\r\n***************************************************************************\r\n*********************** FUNCTIONS MADE BY OTHER DEVS **********************\r\n***************************************************************************\r\n***************************************************************************\r\n**************************************************************************/\r\n\r\n/**\r\n * Bracket handler by Gnurro.\r\n * \r\n * Removes backets from input text to handle them as placeholders\r\n * \r\n * @param {string} text\r\n */\r\nconst grabAllBrackets = (text) => {\r\n  for (entry of text.match(BRACKETED)) {\r\n    entry = entry.replace(BRACKETS, '');\r\n    if (!state.placeholders) {\r\n      state.placeholders = new Array();\r\n    }\r\n\r\n    state.placeholders.push(entry);\r\n  }\r\n\r\n  console.log(state.placeholders);\r\n}\r\n\r\n/**\r\n * Encounters by Gnurro.\r\n * \r\n * Makes random encounters possible in-game\r\n */\r\nencounterDB = {\r\n  /** Fight encounters */\r\n  wolfAttack: {\r\n    encounterID: 'wolfAttack',\r\n    triggers: [\"(spot|see|find).*wol(f|ves).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 80,\r\n    duration: 5,\r\n    messageString: `Wolf attack!`,\r\n    contextNotes: ['You are being attacked by a wolf!', 'A wolf is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*(wol(f|ves))\"],\r\n    textNotes: [\r\n      `You hear howling, not far from where you are. The howling gets closer, and you start to feel uneasy. You look around, trying to find where it's coming from, and when you turn around. It's a wolf!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packWolfAttack',\r\n        branchChance: 50,\r\n        branchTextNotes: [\r\n          `You hear howling, not far from where you are. The howling gets closer, and now it sounds like more than one. You look around, trying to find where it's coming from, and then you see it. It's a pack of wolves!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  bearAttack: {\r\n    encounterID: 'bearAttack',\r\n    triggers: [\"(spot|see|find).*bear(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Bear attack',\r\n    contextNotes: ['You are being attacked by a bear!', 'A bear is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*bear(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling. It's definetely a bear. You hear it getting close, and you start to feel uneasy. When you look to your right, you see it. It's a bear!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packBearAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [\r\n          `You hear some growling. It's definetely a bear. But it doesn't sound like just one. It's uncommon for bears to attack in groups, but you seem to haven been chosen. It's a sleuth of bears!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  sabreCatAttack: {\r\n    encounterID: 'sabreCatAttack',\r\n    triggers: [\"(spot|see|find).*sabre cat(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Sabre cat attack!',\r\n    contextNotes: ['You are being attacked by a sabre cat!', 'A sabre cat is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*sabre cat(|s)\"],\r\n    textNotes: [\r\n      `You hear some roaring, but you can't tell what animal it is. But it sounds angry... and hungry. You hear it getting close, and you start to feel uneasy. When you turn around... it's a sabre cat!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packSabreCatAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [`You hear some roaring... and it sounds like there's more than one animal tracking. You start to feel uneasy, as you're sure you're about to be attacked. When you turn arround... it's a pack of sabre cats!`],\r\n      }\r\n    ]\r\n  },\r\n  trollAttack: {\r\n    encounterID: 'trollAttack',\r\n    triggers: [\"(spot|see|find).*troll(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 20,\r\n    duration: 5,\r\n    messageString: 'Troll attack!',\r\n    contextNotes: ['You are being attacked by a troll!', 'A troll is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*troll(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling and roaring. You can't tell what kind of creature is making this horrendous sound, but it's close. And getting closer. It's approaches you, and you turn to look at it. It's a troll!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packTrollAttack',\r\n        branchChance: 5,\r\n        branchTextNotes: [\r\n          `You hear some growling and roaring. It sounds like more than one creature, and they're getting closer... when you think of looking around, they show themselves. Two trolls are attacking you!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n\r\n  /** Weather */\r\n  weather: {\r\n    inputLock: true,\r\n    encounterID: 'weather',\r\n    chance: 50,\r\n    memoryAdd: {\r\n      memoryText: 'The weather has changed!',\r\n      memoryLocation: 'top',\r\n      memoryLingerDuration: 5\r\n    },\r\n    cooldown: 10,\r\n    duration: 0,\r\n    branches: [\r\n      {\r\n        branchTriggers: [\r\n          '.*(snow(|ing)|road|out(doors|side)|freezing|cold).*'\r\n        ],\r\n        branchID: 'weatherSnowStorm',\r\n        branchChance: 5,\r\n        branchChained: ['snowStorm']\r\n      },\r\n      {\r\n        branchTriggers: [\r\n          '.*(road|out(doors|side)|night).*'\r\n        ],\r\n        branchID: 'weatherBeautifulNight',\r\n        branchChance: 15,\r\n        branchChained: ['beautifulNight']\r\n      }\r\n    ]\r\n  },\r\n  snowStorm: {\r\n    inputLock: true,\r\n    encounterID: 'snowStorm',\r\n    messageString: 'A snow storm! Be careful! It will last for 10 actions!',\r\n    contextNotes: [\r\n      'A snow storm is here! Protect yourself or you\\'ll freeze to death!'\r\n    ],\r\n    textNotes: [\r\n      `The air starts to feel cold all of a sudden, and a freezing breeze touches you. You start shaking from the cold, and the wind gets faster. You can't see anything, as it's all white. You're caught in a snow storm!`\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50\r\n  },\r\n  beautifulNight: {\r\n    inputLock: true,\r\n    encounterID: 'beautifulNight',\r\n    messageString: 'It\\'s a beautiful night!',\r\n    contextNotes: [\r\n      'It\\'s a beautiful night!'\r\n    ],\r\n    textNotes: [\r\n      `You look up. The night sky is amazing! You can see the stars bright in the distance, and the aurora is shimmering in the sky like an ethereal snake. The night is bright because of the beautiful lights in the sky, and you just can't stop looking at them. It's too beautiful.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50,\r\n  },\r\n\r\n  /** Random events */\r\n  rebellion: {\r\n    outputLock: true,\r\n    encounterID: 'rebellion',\r\n    chance: 1,\r\n    messageString: `A rebellion is happening!`,\r\n    memoryAdd: {\r\n      memoryText: `A rebellion is happening!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    cooldown: 20,\r\n    duration: 0,\r\n    chained: ['whiterunRebellion', 'riftenRebellion',]\r\n  },\r\n  whiterunRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'whiterunRebellion',\r\n    messageString: `The citizens of Whiterun are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Whiterun are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Whiterun. The citizens of the city are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  riftenRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'riftenRebellion',\r\n    messageString: `The citizens of Riften are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Riften are revolting against Jarl Erikur for his negligence towards people's safaty! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Riften. The citizens are revolting against Jarl Erikur for his negligence towards people's safety! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  tavernBrawl: {\r\n    encounterID: 'tavernBrawl',\r\n    triggers: [\r\n      '.*(bar|pub|tavern|inn|brawl(|ing|er(|s))).*'\r\n    ],\r\n    chance: 10,\r\n    cooldown: 10,\r\n    duration: 5,\r\n    branches: [\r\n      {\r\n        branchID: 'brawlWithYouBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithYou']\r\n      },\r\n      {\r\n        branchID: 'brawlWithBrawlersBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithBrawlers']\r\n      }\r\n    ]\r\n  },\r\n  brawlWithYouBranch: {\r\n    encounterID: 'brawlWithYouBranch',\r\n    messageString: 'Someone challanged you to a brawl!',\r\n    contextNotes: [\r\n      `You're brawling with someone!`\r\n    ],\r\n    textNotes: [\r\n      `A random drunk man starts screaming at you for some reason. He's so drunk you can't really understand what he says. He charges at you, and punches you in the face.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  },\r\n  brawlWithBrawlers: {\r\n    encounterID: 'brawlWithBrawlers',\r\n    messageString: 'There are people brawling at the tavern!',\r\n    contextNotes: [\r\n      'People are brawling at the tavern!'\r\n    ],\r\n    textNotes: [\r\n      `Two guys are yelling at each other, they seem angry. One of them gets up from his chair and just punches the other one in the face. The man who got punched screams something unintelligible and charges at the other one. They're in a serious brawl.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  }\r\n}\r\n\r\n// word list stuff like gauntlet script:\r\nencounterWordLists = {\r\n  /* Remove this line (and the one below) to enable the example word lists\r\n  charClass:[\"mage\",\"fighter\",\"valkyrie\"],\r\n  pattern:[\"sprinkles\", \"dots\", \"lines\"],\r\n  color:[\"red\",\"blue\",\"green\",\"yellow\",\"orange\"],\r\n  amount:[\"many\",\"few\",\"all of them\"]\r\n   */ // Remove this line (and the one above) to enable the example word lists\r\n}\r\n\r\n// WI data imports:\r\nfor (WIentry of worldInfo) {\r\n  // encounters from WI:\r\n  // these will be lower priority then the hardcoded ones above!\r\n  if (WIentry.keys.includes('!encounterDef')) {\r\n    encounterDefFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterDef for '${encounterDefFromWI.encounterID}', adding it to the DB!`)\r\n    encounterDB[encounterDefFromWI.encounterID] = encounterDefFromWI\r\n  }\r\n  // word lists from WI:\r\n  if (WIentry.keys.includes('!encounterWordListsFull')) {\r\n    encounterWordListsFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found full WI encounterWordLists entry, adding them to the DB!`)\r\n    for (encounterSingleWordList in encounterWordListsFromWI) {\r\n      encounterWordLists[encounterSingleWordList] = Object.values(encounterWordListsFromWI[encounterSingleWordList])\r\n    }\r\n  }\r\n  if (WIentry.keys.includes('!encounterWordListSingle')) {\r\n    encounterWordListSingleFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterWordList, adding it to the DB!`)\r\n    encounterWordLists[Object.keys(encounterWordListSingleFromWI)[0]] = Object.values(encounterWordListSingleFromWI)\r\n  }\r\n}\r\n\r\n\r\n// encounter functions: (DON'T MESS WITH THESE!)\r\nfunction updateCurrentEncounter(encounterUpcoming) { // sets or clears currentEncounter; if argument empty, clears current encounter\r\n  // limiting encounter recurrence:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.recurrenceLimit) {\r\n      if (!state.limitedEncounters) {\r\n        state.limitedEncounters = []\r\n        state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n      } else {\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == state.currentEncounter.encounterID) {\r\n            console.log(`'${state.currentEncounter.encounterID}' recurrence already has a limit.`)\r\n            if (limiter[1] > 0) {\r\n              limiter[1] = limiter[1] - 1\r\n            }\r\n          } else {\r\n            state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (state.currentEncounter.cooldown) {\r\n      if (!state.cooldownEncounters) {\r\n        state.cooldownEncounters = []\r\n      }\r\n      state.cooldownEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.cooldown])\r\n    }\r\n  }\r\n  if (encounterUpcoming) {\r\n    console.log(`Setting current encounter to '${encounterUpcoming}'.`)\r\n    state.currentEncounter = encounterDB[encounterUpcoming]\r\n    // random initial values handling:\r\n    randomizables = ['duration', 'activationDelay', 'cooldown']\r\n    for (encounterValue of randomizables) {\r\n      if (typeof (state.currentEncounter[encounterValue]) !== 'undefined') {\r\n        if (typeof (state.currentEncounter[encounterValue]) !== 'number' && state.currentEncounter[encounterValue].length == 2) {\r\n          console.log(`${encounterUpcoming} has random ${encounterValue}: ${state.currentEncounter[encounterValue]}`)\r\n          state.currentEncounter[encounterValue] = getRndInteger(state.currentEncounter[encounterValue][0], state.currentEncounter[encounterValue][1])\r\n          console.log(`${encounterUpcoming} random ${encounterValue} set to ${state.currentEncounter[encounterValue]}`)\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    console.log(\"Clearing current encounter.\")\r\n    delete state.currentEncounter\r\n  }\r\n}\r\n\r\nfunction updateCurrentEffects() { // 'activates' currentEncounter; or clears encounter effects if there is no active encounter\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.messageString) {\r\n      state.message = state.currentEncounter.messageString\r\n    }\r\n    if (state.currentEncounter.contextNotes) {\r\n      state.encounterNote = getRndFromList(state.currentEncounter.contextNotes)\r\n    }\r\n    if (state.currentEncounter.displayStatNotes) {\r\n      displayStatsUpdate(getRndFromList(state.currentEncounter.displayStatNotes))\r\n    }\r\n  } else {\r\n    delete state.message\r\n    delete state.encounterNote\r\n  }\r\n}\r\n\r\nfunction fillPlaceholders(placeHolderString) {\r\n  curPlaceholderMatches = placeHolderString.match(/\\{(.*?)\\}/g)\r\n  if (curPlaceholderMatches) {\r\n    console.log(`Matched placeholders: ${curPlaceholderMatches}`)\r\n    for (placeholder of curPlaceholderMatches) {\r\n      console.log(`Current placeholder: ${placeholder}`)\r\n      if (placeholder[1] == '*') {\r\n        console.log(`Current placeholder ${placeholder} contains a *, checking temporary word lists...`)\r\n        placeholder = placeholder.replace(/(\\*|{|})/gi, '')\r\n        if (typeof (tempWordLists) == 'undefined') {\r\n          tempWordLists = {}\r\n        }\r\n        if (!tempWordLists[placeholder] || tempWordLists[placeholder].length == 0) {\r\n          console.log(`${placeholder} temporary wordlist is either non-existant or empty! Getting a new one.`)\r\n          tempWordLists[placeholder] = JSON.parse(JSON.stringify(encounterWordLists[placeholder]))\r\n        }\r\n        console.log(`Current temporary word lists:${tempWordLists}`)\r\n        for (insertTag in tempWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag in temporary list: ${insertTag}`)\r\n            pickedInsert = getRndFromList(tempWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert from temporary list: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{\\\\*${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n            tempWordLists[placeholder].splice(tempWordLists[placeholder].indexOf(pickedInsert), 1)\r\n          }\r\n        }\r\n      } else {\r\n        for (insertTag in encounterWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag: ${insertTag}`)\r\n            pickedInsert = getRndFromList(encounterWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    delete tempWordLists\r\n  }\r\n  return (placeHolderString)\r\n}\r\n\r\n// misc helper functions:\r\n// get random\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n\r\n// list-picker, dynamically handles weighted lists\r\nfunction getRndFromList(list) {\r\n  if (list[0].length == 2) {\r\n    console.log(`${list} looks like a weighted list, doing that!`)\r\n    return (getRndFromListWeighted(list))\r\n  } else {\r\n    console.log(`${list} looks like a plain list, simply picking from it!`)\r\n    return (list[getRndInteger(0, list.length)])\r\n  }\r\n}\r\n\r\n// list picker for lists with weighted items:\r\n// currently works kinda like oldschool D&D encounter lists\r\nfunction getRndFromListWeighted(weightedList) {\r\n  cutOff = getRndInteger(1, 100)\r\n  console.log(`Picking from weighted list, cutoff: ${cutOff}`)\r\n  for (item of weightedList) {\r\n    console.log(`'${item[0]}' threshold: ${item[1]}.`)\r\n    if (cutOff <= item[1]) {\r\n      console.log(`'${item[0]}' cutoff below threshold, picking it!`)\r\n      return item[0]\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\n// displayStats handling:\r\nfunction displayStatsUpdate([inKey, inValue, inColor]) {\r\n  // if key already exists, update; else push new entry; if no value given, removes displayStat entry matching key, if it exists\r\n  if (!state.displayStats) {\r\n    state.displayStats = []\r\n  }\r\n  let displayStatUpdated = false\r\n  for (displayStat of state.displayStats) {\r\n    console.log(`Checking ${displayStat.key} displayStats entry...`)\r\n    let curDisplayStatIndex = state.displayStats.indexOf(displayStat)\r\n    if (displayStat.key == inKey) {\r\n      console.log(`Found ${inKey} displayStats entry: ${state.displayStats[curDisplayStatIndex].key}, ${state.displayStats[curDisplayStatIndex].value}, ${state.displayStats[curDisplayStatIndex].color}, updating!`)\r\n      if (inValue) {\r\n        if (typeof (inValue) == 'string') {\r\n          inValue = fillPlaceholders(inValue)\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        } else {\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        }\r\n      } else {\r\n        console.log(`No value to update displayStat inputted, removing entry.`)\r\n        state.displayStats.splice(curDisplayStatIndex, 1)\r\n        displayStatUpdated = true\r\n        break\r\n      }\r\n      if (inColor) {\r\n        state.displayStats[curDisplayStatIndex].color = fillPlaceholders(inColor)\r\n      }\r\n      displayStatUpdated = true\r\n      break\r\n    }\r\n  }\r\n  if (!displayStatUpdated) {\r\n    console.log(`No ${inKey} displayStats entry found, adding it!`)\r\n    state.displayStats.push({ 'key': inKey, 'value': inValue, 'color': inColor })\r\n  }\r\n}\r\n\r\n/**\r\n * Name synthesizer by Zaltys\r\n * \r\n * Removed unwanted names and replaces them with better ones\r\n * \r\n */\r\n// List the names you wish to replace with random ones in this const.\r\nconst BADNAMES = ['Ackerson', 'Alison', 'Annah', 'Anu', 'Arat', 'Arrorn', 'Ashton', 'Azajaja', 'Big Red',\r\n  'Brot', 'Brother Gray', 'Bucklesberg', 'Captain Dario', 'Captain Eckard', 'Captain Hayes', 'Captain Ian', 'Captain Illam', 'Carn',\r\n  'Castus', 'Cloudpeak', 'Count Gray', 'Count Grey', 'Dark Order', 'David', 'Delantium', 'Delerg', 'Dendrin', 'Derg',\r\n  'Dert', 'Dessel', 'Dorna', 'Dr. Kessel', 'Dr. Kovas', 'Drake', 'Draven', 'Durge', 'Ebony Claw', 'Elam',\r\n  'Eldolith', 'Eliza', 'Eternals', 'Father Féval', 'Father Tomas', 'Felkan', 'Flog', 'Garrick', 'Grolik', \"Gro'tesk\", 'Haygarth',\r\n  'Hessla', 'Holgard', 'Isabella', \"J'Arel\", 'Jacob', 'Jicol', 'Karth', 'Kelso',\r\n  'Klemto', 'Klyton', 'Kralmer', 'Kyros', 'Lenay', 'Lord Rostov', 'Ludmilla', 'Magos Cern', 'Meliodas',\r\n  'Merk', 'Mihrab', 'Mr. Demar', 'Mr. Gaange', 'Mr. Reynolds', 'Nalin', 'Nolazir', 'Null', 'Nuro', 'Oalkwardner',\r\n  'Olive', 'Olivia', 'Oren', 'Quala', 'Ragnor', 'Ral', 'Rask', 'Retlad', 'Roldan', 'Rolomag', 'Sheriff Buckly',\r\n  'Sir Ignate', 'Sodran', 'Svelk', 'Talia', 'Teckleville', 'The Craxil', 'The Ghoul King', 'The Great Lich Lord',\r\n  'The Nightmare Tyrant', 'Theo', 'Trelik', 'Tulan', 'Ulivik', 'Vaughn', 'Velzix', 'Wessel', 'Zalan', 'Zalmora', 'Zuzu'];\r\n\r\n// This shuffles the arrays.\r\nconst shuffle = array =>\r\n  [...Array(array.length)]\r\n    .map((...args) => Math.floor(Math.random() * (args[1] + 1)))\r\n    .reduce((a, rv, i) => ([a[i], a[rv]] = [a[rv], a[i]]) && a, array);\r\n\r\n// Generates and saves arrays; ran only once.\r\nfunction makeArrays() {\r\n  state.mid = [];\r\n  state.end = [];\r\n  list = state.names.map(x => x.substring(1)); // Trim beginning.\r\n  list.forEach(addMid);\r\n}\r\n\r\nfunction addMid(seg) { // Generate array of possible mid-segments.\r\n  while (seg.length > 3) {\r\n    if (state.mid.indexOf(seg.substring(0, 4)) === -1) { state.mid.push(seg.substring(0, 4)) };\r\n    seg = seg.substring(1);\r\n  }\r\n  state.end.push(seg);\r\n}\r\n\r\nfunction synthName() {\r\n  var name_length = state.names[Math.floor(Math.random() * state.names.length)].length - 1;\r\n  var base = state.names[Math.floor(Math.random() * state.names.length)];\r\n  if (base.length < 3) { return Base; }\r\n  else {\r\n    var nomen = base.substring(0, 3);\r\n    while (nomen.length < name_length) {\r\n      mid = shuffle(state.mid).find(x => nomen.substring(nomen.length - 2, nomen.length) == x.substring(0, 2))\r\n      if (mid) { nomen += mid.substring(2); }\r\n      else { name_length = 0; } // No valid segments found, just skip ahead.\r\n    }\r\n    var end = shuffle(state.end).find(x => nomen.substring(nomen.length - 1, nomen.length) == x.substring(0, 1));\r\n    if (end) { nomen += end.substring(1); }\r\n    return nomen;\r\n  }\r\n}\r\n\r\nfunction nameReplace(text) {\r\n  if (!state.names_setup) { setupNamelist(); }\r\n  for (name of BADNAMES) {\r\n    if (text.includes(name)) { text = text.replace(name, synthName()); }\r\n  }\r\n  return text;\r\n}\r\n\r\n// This giant list is the list of names that this generator uses as examples to synthesize new names.\r\n// You can replace it with a more specific list, such as names from certain culture.\r\n// To work well, you need at least 100 names on the list.\r\nfunction setupNamelist() {\r\n  state.names_setup = true;\r\n  state.names = [\"Aby\", \"Aage\", \"Aakesh\", \"Aanon\", \"Aarlen\", \"Aaron\", \"Aart\", \"Aasta\", \"Abarden\", \"Abbathor\", \"Abbathorn\", \"Abraham\", \"Abryn\",\r\n    \"Abu\", \"Acadia\", \"Achard\", \"Acheron\", \"Achim\", \"Achlarg\", \"Ada\", \"Adair\", \"Adalbert\", \"Adanac\", \"Adario\", \"Adeisteen\", \"Adelaide\",\r\n    \"Adelin\", \"Adelot\", \"Adeen\", \"Aden\", \"Adena\", \"Aderyn\", \"Adeva\", \"Adger\", \"Adia\", \"Adin\", \"Adina\", \"Aditu\", \"Adlay\",\r\n    \"Adolf\", \"Adolmus\", \"Adoniram\", \"Adraeran\", \"Adriaan\", \"Adriel\", \"Adrienne\", \"Aedha\", \"Aeiran\", \"Ael\", \"Aelgifu\", \"Aelis\", \"Aerdrie\",\r\n    \"Aeriel\", \"Aerin\", \"Aeris\", \"Aeriss\", \"Aeron\", \"Aeru'in\", \"Aeruin\", \"Aethelweard\", \"Aethon\", \"Aethyr\", \"Afra\", \"Agate\", \"Agatha\",\r\n    \"Agathon\", \"Agathos\", \"Agenor\", \"Agidius\", \"Agnar\", \"Agora\", \"Agrias\", \"Aguidran\", \"Aguilla\", \"Ahanna\", \"Ahmre\", \"Aicha\", \"Aidan\",\r\n    \"Aidaron\", \"Aiden\", \"Aidred\", \"Aidro\", \"Aidwin\", \"Aifreda\", \"Aifrida\", \"Aiker\", \"Aikikia\", \"Aikman\", \"Ailcaer\", \"Aileen\", \"Ailric\",\r\n    \"Ailvar\", \"Aimee\", \"Aimo\", \"Aino\", \"Ainu\", \"Aipheus\", \"Airalyn\", \"Aircristir\", \"Airen\", \"Airis\", \"Airmid\", \"Aisha\", \"Aislinn\",\r\n    \"Aithne\", \"Aitken\", \"Akebia\", \"Aki\", \"Akira\", \"Aksel\", \"Al\", \"Aladan\", \"Aladar\", \"Aladdin\", \"Alain\", \"Alaine\", \"Alais\",\r\n    \"Alan\", \"Alana\", \"Alanson\", \"Alardan\", \"Alaric\", \"Alarion\", \"Alaris\", \"Alaron\", \"Alastair\", \"Alastrina\", \"Alastyr\", \"Albaral\", \"Alberich\",\r\n    \"Alberik\", \"Alberon\", \"Albert\", \"Alberta\", \"Albin\", \"Albion\", \"Albrecht\", \"Albright\", \"Alcan\", \"Alcina\", \"Alda\", \"Aldaren\", \"Aldegond\",\r\n    \"Alden\", \"Aldert\", \"Aldhelm\", \"Aldis\", \"Aldrich\", \"Aldridge\", \"Aldus\", \"Aldwerth\", \"Aldwin\", \"Aldwulf\", \"Alea\", \"Alec\", \"Alena\",\r\n    \"Alers\", \"Ales\", \"Alessandra\", \"Alexander\", \"Alexei\", \"Alf\", \"Alfdis\", \"Alfgeir\", \"Alfhid\", \"Alfons\", \"Alford\", \"Alfred\", \"Algernon\",\r\n    \"Algus\", \"Alhana\", \"Ali\", \"Alia\", \"Alicia\", \"Aliendre\", \"Alienor\", \"Alin\", \"Aline\", \"Alineric\", \"Alisbone\", \"Alison\", \"Alistair\",\r\n    \"Alister\", \"Allaire\", \"Allard\", \"Allart\", \"Allene\", \"Alliston\", \"Almas\", \"Almer\", \"Almira\", \"Almroth\", \"Almu\", \"Aloise\", \"Alor\",\r\n    \"Alora\", \"Alorosaz\", \"Aloysius\", \"Alphons\", \"Alrik\", \"Alsop\", \"Althalus\", \"Altin\", \"Alton\", \"Alured\", \"Alvan\", \"Alvey\", \"Alvina\",\r\n    \"Alvord\", \"Alvred\", \"Alwen\", \"Alwyn\", \"Alya\", \"Alyanna\", \"Alyce\", \"Alyssa\", \"Alyvia\", \"Ama\", \"Amadis\", \"Amain\", \"Amalina\",\r\n    \"Aman\", \"Amanfea\", \"Amar\", \"Amarah\", \"Amber\", \"Ambros\", \"Amelia\", \"Ames\", \"Amethyst\", \"Amilion\", \"Amin\", \"Amina\", \"Amineh\",\r\n    \"Ammdar\", \"Amschel\", \"Amundi\", \"Anandra\", \"Anastasia\", \"Anatol\", \"Anatolia\", \"Ancarion\", \"Ancelyn\", \"Anclaiar\", \"Ancla´ar\", \"Andara'an\", \"Andaraan\",\r\n    \"Andemon\", \"Andni\", \"Andolan\", \"Andre\", \"Andrei\", \"Andrew\", \"Andrus\", \"Aneurin\", \"Anfar\", \"Angelica\", \"Angelina\", \"Angharad\", \"Angheryn\",\r\n    \"Angmar\", \"Angus\", \"Anici\", \"Anigh\", \"Anika\", \"Anita\", \"Anitra\", \"Anlaf\", \"Anna\", \"Annion\", \"Annora\", \"Anouar\", \"Anseim\",\r\n    \"Ansel\", \"Anskar\", \"Anson\", \"Antal\", \"Antalya´ar\", \"Antares\", \"Antheirne\", \"Anton\", \"Antone\", \"Antony\", \"Antrim\", \"Anvar\", \"Anya\",\r\n    \"Anzie\", \"Apad\", \"April\", \"Apthorp\", \"Aquill\", \"Arabel\", \"Arabella\", \"Arabeth\", \"Aradan\", \"Aradh\", \"Aragon\", \"Aragorn\", \"Arakin\",\r\n    \"Aralik\", \"Aranel\", \"Arania\", \"Arathorn\", \"Aravis\", \"Arawn\", \"Arax\", \"Araz\", \"Archibald\", \"Arcarune\", \"Arctor\", \"Ardal\", \"Arden\",\r\n    \"Arder\", \"Ardesh\", \"Ardis\", \"Areagne\", \"Arell\", \"Areta\", \"Aretas\", \"Argethlam\", \"Argoeth\", \"Ari\", \"Aria\", \"Ariad\", \"Arian\",\r\n    \"Arianth\", \"Aribeth\", \"Aric\", \"Arid\", \"Ariel\", \"Aries\", \"Arilyn\", \"Arioch\", \"Arka\", \"Arkadia\", \"Arkron\", \"Arkwright\", \"Arlaith\",\r\n    \"Arlan\", \"Arlana\", \"Arlean\", \"Arleano\", \"Arlo\", \"Arlya\", \"Armand\", \"Armar\", \"Armin\", \"Armitage\", \"Armo\", \"Armod\", \"Arn\",\r\n    \"Arnbella\", \"Arnesen\", \"Arnfinn\", \"Arngrim\", \"Arni\", \"Arnlaug\", \"Arno\", \"Arnold\", \"Arnor\", \"Arnora\", \"Arnot\", \"Arnthora\", \"Arnuif\",\r\n    \"Arnulf\", \"Arnvid\", \"Aron\", \"Arrah\", \"Arronax\", \"Arshavir\", \"Arshel\", \"Artemis\", \"Artemus\", \"Arthol\", \"Arthryn\", \"Arthur\", \"Artnistead\",\r\n    \"Artreyu\", \"Artur\", \"Arun\", \"Arvid\", \"Arvida\", \"Arving\", \"Arvo\", \"Arwen\", \"Arwin\", \"Aryen\", \"Aryion\", \"Aryon\", \"Aryus\",\r\n    \"Arzamark\", \"Asa\", \"Asaf\", \"Aschar\", \"Asfrid\", \"Asgard\", \"Asger\", \"Asgerd\", \"Asgrim\", \"Ash\", \"Ashan\", \"Ashane\", \"Ashburton\",\r\n    \"Ashcar\", \"Ashdown\", \"Ashgaroth\", \"Ashley\", \"Ashlyn\", \"Ashne'e\", \"Ashnici\", \"Ashur\", \"Asiria\", \"Askew\", \"Askold\", \"Aslak\", \"Aslan\",\r\n    \"Asleif\", \"Aslior\", \"Asperon\", \"Asta\", \"Astar\", \"Astinus\", \"Astnid\", \"Astnild\", \"Astoiphe\", \"Astra\", \"Astraea\", \"Astran\", \"Astrid\",\r\n    \"Astrin\", \"Atazra\", \"Athabasca\", \"Athana\", \"Athol\", \"Atiaran\", \"Atli\", \"Atmeh\", \"Atreyu\", \"Atropos\", \"Atticus\", \"Attor\", \"Atul\",\r\n    \"Aturin\", \"Atyre\", \"Aubrey\", \"Aud\", \"Audrey\", \"Audrianna\", \"Audric\", \"August\", \"Augustus\", \"Aule\", \"Aulius\", \"Aun\", \"Aura\",\r\n    \"Aurian\", \"Auril\", \"Aurion\", \"Aurora\", \"Avall\", \"Avarath\", \"Avascaen\", \"Avedar\", \"Aveole\", \"Avery\", \"Avon\", \"Avril\", \"Axel\",\r\n    \"Aya\", \"Ayame\", \"Ayaron\", \"Ayarèn\", \"Ayin\", \"Ayir\", \"Aylin\", \"Aylmer\", \"Ayrie\", \"Azeal\", \"Azeezeh\", \"Azgoth\", \"Azhrarn\",\r\n    \"Aziz\", \"Azmodeus\", \"Azrean\", \"Azreck\", \"Azriaz\", \"Aztira\", \"Azure\", \"Azuth\", \"Baba\", \"Babacar\", \"Babrak\", \"Babrine\", \"Babylos\",\r\n    \"Baduk\", \"Baern\", \"Baeron\", \"Baervan\", \"Bag\", \"Bahamut\", \"Baird\", \"Bal\", \"Balain\", \"Baldor\", \"Baldrick\", \"Balduin\", \"Baldur\",\r\n    \"Baldwin\", \"Balendar\", \"Balfour\", \"Balin\", \"Baliol\", \"Ballard\", \"Balor\", \"Balthasard\", \"Balthazar\", \"Bandobras\", \"Bane\", \"Baraca\", \"Barahir\",\r\n    \"Barak\", \"Baralan\", \"Baravar\", \"Barbara\", \"Bardach\", \"Bardel\", \"Bardi\", \"Bardsley\", \"Bardwell\", \"Barend\", \"Barent\", \"Baring\", \"Barll\",\r\n    \"Barlo\", \"Barlow\", \"Barnabas\", \"Barnas\", \"Barnus\", \"Barr\", \"Barret\", \"Barron\", \"Barry\", \"Barstow\", \"Barthel\", \"Bartle\", \"Bartnel\",\r\n    \"Barton\", \"Baslayan\", \"Bayard\", \"Beams\", \"Beatrix\", \"Bechir\", \"Beck\", \"Bede\", \"Bedegran\", \"Begnus\", \"Beldaran\", \"Beldas\", \"Belerion\",\r\n    \"Belgarath\", \"Belgarion\", \"Belita\", \"Bella\", \"Belle\", \"Bellin\", \"Bellinus\", \"Belloc\", \"Belrene\", \"Beltane\", \"Belva\", \"Ben\", \"Benekander\",\r\n    \"Bengt\", \"Benita\", \"Benoist\", \"Beorn\", \"Beowulf\", \"Bera\", \"Bercan\", \"Berek\", \"Berem\", \"Beren\", \"Bergen\", \"Bergthor\", \"Berim\",\r\n    \"Bern\", \"Berna\", \"Bernhart\", \"Bernt\", \"Berronar\", \"Berryn\", \"Bersi\", \"Berta\", \"Bertil\", \"Bertilde\", \"Bertram\", \"Bertran\", \"Bertrem\",\r\n    \"Beryl\", \"Besma\", \"Bestagar\", \"Beth\", \"Bevil\", \"Beyash\", \"Beylard\", \"Bhimrao\", \"Bhoskar\", \"Bhupindar\", \"Bidwell\", \"Bilbo\", \"Bile\",\r\n    \"Bilmar\", \"Bindon\", \"Bion\", \"Bipin\", \"Birath\", \"Birbeck\", \"Birchard\", \"Birger\", \"Birgit\", \"Birket\", \"Bisuneh\", \"Bjarni\", \"Bjorn\",\r\n    \"Bjornstern\", \"Blackwood\", \"Blade\", \"Blaen\", \"Blair\", \"Blame\", \"Blasco\", \"Blaze\", \"Bledsoe\", \"Blenda\", \"Bleran\", \"Blount\", \"Blunyc\",\r\n    \"Bninna\", \"Bo\", \"Bodil\", \"Bodvar\", \"Bolthorn\", \"Boner\", \"Booker\", \"Boott\", \"Boris\", \"Bork\", \"Borlace\", \"Bormor\", \"Boromir\",\r\n    \"Bors\", \"Botho\", \"Botolf\", \"Bourke\", \"Bowie\", \"Boyd\", \"Bracca\", \"Brace\", \"Bracken\", \"Brand\", \"Brandec\", \"Brangwen\", \"Brann\",\r\n    \"Brannon\", \"Branwell\", \"Branwen\", \"Breanon\", \"Bremen\", \"Brenna\", \"Brenner\", \"Brent\", \"Bress\", \"Bretaine\", \"Breyugar\", \"Brianna\", \"Bridget\",\r\n    \"Brielle\", \"Brigantu\", \"Brighton\", \"Brinn\", \"Brion\", \"Bristan\", \"Brita\", \"Brithael\", \"Brock\", \"Brockden\", \"Brodhead\", \"Brodribb\", \"Brogan\",\r\n    \"Bron\", \"Brona\", \"Bronwyn\", \"Bror\", \"Broun\", \"Bruna\", \"Bruno\", \"Brunt\", \"Brynhild\", \"Brynit\", \"Bryoni\", \"Bunnvor\", \"Bupu\",\r\n    \"Burcan\", \"Buri\", \"Burkard\", \"Buzurg\", \"Byam\", \"Byblos\", \"Byre\", \"Byrna\", \"Byrne\", \"Bysshe\", \"Cabell\", \"Cabillo\", \"Caddor\",\r\n    \"Caden\", \"Cadfael\", \"Cadmar\", \"Cadrach\", \"Cadwallader\", \"Caecyn\", \"Cael\", \"Caelon\", \"Caer\", \"Cai\", \"Cail\", \"Cairn\", \"Caitlin\",\r\n    \"Caladon\", \"Calandria\", \"Calbraith\", \"Calder\", \"Cale\", \"Caleb\", \"Calera\", \"Caliban\", \"Callan\", \"Callcott\", \"Calmic\", \"Calrohir\", \"Calumn\",\r\n    \"Calvert\", \"Camber\", \"Cambree\", \"Camiya\", \"Canina\", \"Caprice\", \"Cardon\", \"Caramon\", \"Carelia\", \"Carey\", \"Caribou\", \"Caris\", \"Carl\",\r\n    \"Carless\", \"Carli\", \"Carlyle\", \"Caryne\", \"Caron\", \"Carsten\", \"Carvell\", \"Caryl\", \"Cashin\", \"Caspian\", \"Cassandra\", \"Cassaway\", \"Cathal\",\r\n    \"Catherine\", \"Cathla'in\", \"Cathlain\", \"Cathlin\", \"Cayl\", \"Caylin\", \"Cecilia\", \"Cecily\", \"Cedric\", \"Cedrick\", \"Cedrim\", \"Celadae\", \"Celebdil\",\r\n    \"Celeborn\", \"Celeren\", \"Celes\", \"Celeste\", \"Celestine\", \"Celia\", \"Celowen\", \"Cemark\", \"Ceomyr\", \"Ceowulf\", \"Cercyon\", \"Ceremon\", \"Cerimon\",\r\n    \"Cerindar\", \"Cermor\", \"Cernd\", \"Ceryx\", \"Cespar\", \"Cevir\", \"Ceylinn\", \"Chaka\", \"Chalfant\", \"Challen\", \"Chamon\", \"Chanti\", \"Chard\",\r\n    \"Charissa\", \"Charlene\", \"Charlotte\", \"Chauncey\", \"Chauntea\", \"Chavir\", \"Chaya\", \"Checotah\", \"Chevonne\", \"Chevran\", \"Chichester\", \"Chimaera\", \"Chiodwig\",\r\n    \"Chiron\", \"Chittenden\", \"Chloe\", \"Christopher\", \"Chronepsis\", \"Chronos\", \"Chrowder\", \"Chuz\", \"Cid\", \"Cilmar\", \"Cinerva\", \"Cirkin\", \"Civar\",\r\n    \"Claed\", \"Clafin\", \"Claire\", \"Clarinda\", \"Claudia\", \"Cleghorn\", \"Clerihew\", \"Clinch\", \"Clipster\", \"Clopton\", \"Cloud\", \"Clover\", \"Clovis\",\r\n    \"Cnud\", \"Cnut\", \"Coalter\", \"Cobryn\", \"Coddry\", \"Coel\", \"Coela\", \"Cohn\", \"Colden\", \"Colgan\", \"Colmen\", \"Colon\", \"Colwyn\",\r\n    \"Coma\", \"Conall\", \"Conan\", \"Congal\", \"Conlan\", \"Conn\", \"Connell\", \"Connidas\", \"Connon\", \"Connop\", \"Conor\", \"Conrad\", \"Constantius\",\r\n    \"Conwy\", \"Conyasal\", \"Coprates\", \"Cora\", \"Coral\", \"Corbin\", \"Corellon\", \"Coren\", \"Corin\", \"Corinne\", \"Corinth\", \"Cormac\", \"Cornelius\",\r\n    \"Corrowr\", \"Corry\", \"Corryn\", \"Corwin\", \"Cotton\", \"Cowan\", \"Cowden\", \"Cowper\", \"Coyan\", \"Craigh\", \"Cray\", \"Crewzel\", \"Creydah\",\r\n    \"Cronyn\", \"Croyble\", \"Crundall\", \"Crynal\", \"Crysania\", \"Cryshandylin\", \"Cryunnos\", \"Cuall\", \"Cuane\", \"Cuddry\", \"Cuhaid\", \"Culiross\", \"Culkin\",\r\n    \"Cullen\", \"Cullyn\", \"Cuthalion\", \"Cuthbert\", \"Cylarus\", \"Cylie\", \"Cylmar\", \"Cymbeline\", \"Cyndor\", \"Cynoril\", \"Cyria\", \"Cyriel\", \"Cyrilla\",\r\n    \"Cyrillus\", \"Cyrus\", \"Cyryl\", \"Cythnar\", \"Cyton\", \"Daburn\", \"Daen\", \"Dagar\", \"Dagda\", \"Dagmar\", \"Dagni\", \"Dagny\", \"Dagwyn\",\r\n    \"Dahil\", \"Daikkah\", \"Daila\", \"Daila'in\", \"Daimhin\", \"Daimon\", \"Daisy\", \"Dakamon\", \"Dakoda\", \"Dalamar\", \"Dall\", \"Dalla\", \"Dallandra\",\r\n    \"Dalziel\", \"Damar\", \"Damien\", \"Damon\", \"Dana\", \"Danforth\", \"Daniel\", \"Dannun\", \"Dannyn\", \"Danu\", \"Danuvius\", \"Daood\", \"Daphin\",\r\n    \"Dara\", \"Daragor\", \"Darandriel\", \"Darell\", \"Darien\", \"Dario\", \"Darius\", \"Darkash\", \"Darkboon\", \"Darkspur\", \"Darlis\", \"Daron\", \"Darrell\",\r\n    \"Darrin\", \"Darvin\", \"Daryan\", \"Dashiell\", \"Dashwood\", \"Dasyani\", \"Dathan\", \"Dathanja\", \"Daugas\", \"David\", \"Davnet\", \"Davros\", \"Dawn\",\r\n    \"Dayyan\", \"Dekteon\", \"Delevan\", \"Delita\", \"Dell\", \"Dellin\", \"Delmund\", \"Demarest\", \"Demi\", \"Deminar\", \"Demtris\", \"Denethor\", \"Denhain\",\r\n    \"Denor\", \"Denton\", \"Denzil\", \"Deogol\", \"Derfel\", \"Derian\", \"Dermaria\", \"Derran\", \"Derroll\", \"Derval\", \"Dervilia\", \"Desmona\", \"Devabriel\",\r\n    \"Devaron\", \"Deveron\", \"Devra\", \"Dexter\", \"Dhakos\", \"Dhan\", \"Dharijor\", \"Dholemtrix\", \"Dhur\", \"Diadra\", \"Diagur\", \"Dian\", \"Diarmud\",\r\n    \"Diderik\", \"Diehi\", \"Dighton\", \"Dillon\", \"Dimura\", \"Dinham\", \"Dinivan\", \"Dino\", \"Dionetta\", \"Diony\", \"Dirk\", \"Dirrach\", \"Divos\",\r\n    \"Djamal\", \"Dmitri\", \"Doak\", \"Dolman\", \"Dolyan\", \"Domnu\", \"Donagh\", \"Donal\", \"Donblas\", \"Dongal\", \"Doniol\", \"Donivesh\", \"Donovan\",\r\n    \"Doral\", \"Dorea\", \"Dorian\", \"Dorin\", \"Dorn\", \"Dornhnall\", \"Dorr\", \"Dorsan\", \"Dorvai\", \"Dotta\", \"Doud\", \"Dougal\", \"Doust\",\r\n    \"Draco\", \"Dragan\", \"Dragus\", \"Dragutin\", \"Draka\", \"Drake\", \"Drako\", \"Dran\", \"Draoi\", \"Draven\", \"Drax\", \"Drayko\", \"Dred\",\r\n    \"Dreed\", \"Drexel\", \"Drezael\", \"Drezaem\", \"Drin\", \"Drinda\", \"Drion\", \"Drusilla\", \"Drynn\", \"Dréagg\", \"Duain\", \"Duald\", \"Duana\",\r\n    \"Duer\", \"Dugal\", \"Dugald\", \"Dugdale\", \"Dulasiri\", \"Dumathoin\", \"Dunbar\", \"Dundas\", \"Dunglas\", \"Dunnabar\", \"Dunstan\", \"Dunwody\", \"Duny\",\r\n    \"Dunya\", \"Dur-Shuk\", \"Duran\", \"Durek\", \"Durin\", \"Durnik\", \"Durward\", \"Dwarkanath\", \"Dweomer\", \"Dwyer\", \"Dyce\", \"Dyer\", \"Dygardo\",\r\n    \"Dyke\", \"Dylan\", \"Dymphna\", \"Dynar\", \"Dyneley\", \"Dynera\", \"Dynie\", \"Dytan\", \"Dyvim\", \"E'thane\", \"Eadweard\", \"Eager\", \"Eamon\",\r\n    \"Eanger\", \"Eardley\", \"Earle\", \"Earnest\", \"Eastman\", \"Ebany\", \"Ebba\", \"Eberhard\", \"Ebony\", \"Echael\", \"Eckert\", \"Eckhard\", \"Ector\",\r\n    \"Edcyl\", \"Edda\", \"Edeva\", \"Edgar\", \"Edina\", \"Edla\", \"Edmond\", \"Edmondstone\", \"Edric\", \"Edrie\", \"Edson\", \"Eduard\", \"Edwin\",\r\n    \"Edwina\", \"Edwyn\", \"Eevin\", \"Efiath\", \"Efrem\", \"Egan\", \"Egbert\", \"Egerton\", \"Egil\", \"Egon\", \"Egron\", \"Ehlreth\", \"Ehrman\",\r\n    \"Eilhard\", \"Eilif\", \"Eilinud\", \"Einar\", \"Eindrini\", \"Eirech\", \"Eirik\", \"Eiron\", \"Eithne\", \"Eivind\", \"Ekaterina\", \"Elaine\", \"Elath\",\r\n    \"Elbert\", \"Eldath\", \"Eldavon\", \"Eldgrim\", \"Eldid\", \"Eldin\", \"Eldon\", \"Eldred\", \"Eldric\", \"Eldrin\", \"Eldron\", \"Eldìvèn\", \"Eleanor\",\r\n    \"Eleazar\", \"Electa\", \"Elelil\", \"Elena\", \"Elendil\", \"Eleno'in\", \"Elentari\", \"Elerion\", \"Elessar\", \"Elfnida\", \"Elfnide\", \"Elfnieda\", \"Elford\",\r\n    \"Elhanan\", \"Eliakini\", \"Eliard\", \"Elinor\", \"Elion\", \"Eliseth\", \"Elispeth\", \"Elisseer\", \"Elistan\", \"Eliwood\", \"Elizabeth\", \"Ella\", \"Ellanath\",\r\n    \"Ellen\", \"Ellin\", \"Ellingwood\", \"Ellydryr\", \"Ellynor\", \"Elmeric\", \"Elmira\", \"Eloisa\", \"Elora\", \"Elowen\", \"Elrad\", \"Elric\", \"Elrik\",\r\n    \"Elrodin\", \"Elron\", \"Elrond\", \"Elsa\", \"Elsbeth\", \"Elsdon\", \"Elspeth\", \"Elswyth\", \"Elton\", \"Elu\", \"Elva\", \"Elvalind\", \"Elvarion\",\r\n    \"Elvin\", \"Elvina\", \"Elvira\", \"Elvrit\", \"Elvérion\", \"Elwell\", \"Elwin\", \"Elwyn\", \"Elysia\", \"Emberyl\", \"Emerynn\", \"Emirah\", \"Emma\",\r\n    \"Emna\", \"Emory\", \"Endemian\", \"Endicott\", \"Endoray\", \"Endrede\", \"Endsor\", \"Engeihard\", \"Enigma\", \"Enn\", \"Ennorath\", \"Envi\", \"Enzoray\",\r\n    \"Eolair\", \"Eomer\", \"Eosin\", \"Eowyn\", \"Ephyre\", \"Erana\", \"Erard\", \"Ercan\", \"Erdmann\", \"Erebor\", \"Ergon\", \"Erian\", \"Eric\",\r\n    \"Erich\", \"Erie\", \"Erik\", \"Erika\", \"Erilyth\", \"Erland\", \"Erlend\", \"Erling\", \"Ernald\", \"Ernan\", \"Ernata\", \"Errine\", \"Ervin\",\r\n    \"Eryka\", \"Eryn\", \"Esghar\", \"Eslin\", \"Esmeralda\", \"Esmond\", \"Esnar\", \"Essa\", \"Esselin\", \"Estheria\", \"Estrella\", \"Etelka\", \"Ethelbearn\",\r\n    \"Ethelbert\", \"Ethelburga\", \"Ethelred\", \"Ethelreda\", \"Eudo\", \"Eugene\", \"Eulala\", \"Evadne\", \"Evaine\", \"Evald\", \"Evan\", \"Evarts\", \"Evelina\",\r\n    \"Evelyn\", \"Everard\", \"Evert\", \"Evind\", \"Evo\", \"Evolyn\", \"Evska\", \"Ewald\", \"Ewen\", \"Ewugan\", \"Eystein\", \"Eyulf\", \"Eyvind\",\r\n    \"Ezail\", \"Ezellohar\", \"Ezirith\", \"Ezme\", \"Ezrabar\", \"Ezri\", \"Faber\", \"Fabian\", \"Fael\", \"Faelyn\", \"Fahs\", \"Fairfax\", \"Fairtnan\",\r\n    \"Falathar\", \"Falcon\", \"Falgar\", \"Fali\", \"Falias\", \"Falkiner\", \"Falmalinnar\", \"Falyrias\", \"Fanchon\", \"Fangorn\", \"Fanshaw\", \"Faraday\", \"Farah\",\r\n    \"Farale\", \"Faramir\", \"Faran\", \"Farathar\", \"Farid\", \"Farith\", \"Farli\", \"Farnham\", \"Farouk\", \"Farquhar\", \"Farrin\", \"Farwehl\", \"Fatima\",\r\n    \"Fausto\", \"Fawn\", \"Faysal\", \"Fea\", \"Feargus\", \"Fedor\", \"Feike\", \"Felam\", \"Felladin\", \"Fellador\", \"Fellathor\", \"Fellow\", \"Fenella\",\r\n    \"Fenton\", \"Fenwick\", \"Fera\", \"Ferantay\", \"Ferazhin\", \"Ferdinand\", \"Fergus\", \"Fernand\", \"Feron\", \"Feustmann\", \"Fhinders\", \"Fhorgeir\", \"Fiana\",\r\n    \"Fiathna\", \"Fielding\", \"Fikir\", \"Filippe\", \"Finarfin\", \"Finbar\", \"Findegil\", \"Findley\", \"Finegan\", \"Fingal\", \"Fingalla\", \"Fingil\", \"Finias\",\r\n    \"Finn\", \"Finnbogi\", \"Finos\", \"Fiona\", \"Fiorag\", \"Fiori\", \"Firca\", \"Firin\", \"Firon\", \"Firozhan\", \"Fistandantilus\", \"Fistar\", \"Fistor\",\r\n    \"Fitzedward\", \"Fitzroy\", \"Fizban\", \"Fjolnir\", \"Flandrena\", \"Flare\", \"Flavius\", \"Flint\", \"Floki\", \"Florimund\", \"Flosi\", \"Flygare\", \"Flynn\",\r\n    \"Fnida\", \"Fomorii\", \"Forbus\", \"Forester\", \"Fornost\", \"Foronte\", \"Fothergill\", \"Francisco\", \"Frayja\", \"Freda\", \"Frederic\", \"Frederica\", \"Frederick\",\r\n    \"Fredrick\", \"Fredrik\", \"Freeborn\", \"Freeman\", \"Frey\", \"Freya\", \"Freydis\", \"Fridgeir\", \"Frodo\", \"Fryniwyd\", \"Fuad\", \"Fumorak\", \"Furnifold\",\r\n    \"Fury\", \"Fyodor\", \"Fyodr\", \"Fyza\", \"Gaarn\", \"Gabniela\", \"Gabriel\", \"Gadsby\", \"Gaea\", \"Gael\", \"Gaelinar\", \"Gaena\", \"Gaerdal\",\r\n    \"Gaillard\", \"Gairdner\", \"Galach\", \"Galadren\", \"Galan\", \"Galanna\", \"Galapas\", \"Galaphon\", \"Galar\", \"Galbard\", \"Galderon\", \"Galdor\", \"Gale\",\r\n    \"Galeia\", \"Galen\", \"Galfrey\", \"Galion\", \"Galrandar\", \"Galrion\", \"Gama\", \"Gandalf\", \"Ganduil\", \"Ganith\", \"Gannon\", \"Ganvan\", \"Gardi\",\r\n    \"Garet\", \"Gareth\", \"Garion\", \"Garith\", \"Garl\", \"Garland\", \"Garlenon\", \"Garn\", \"Garon\", \"Garrick\", \"Garrott\", \"Garth\", \"Gartnas\",\r\n    \"Garvin\", \"Garwood\", \"Gaston\", \"Gavendra\", \"Gavin\", \"Gavina\", \"Gawain\", \"Gealsgiath\", \"Gebhard\", \"Geir\", \"Geirmund\", \"Geirstein\", \"Gelonna\",\r\n    \"Genevieve\", \"Geoffrey\", \"Georgii\", \"Gerald\", \"Gerard\", \"Gerd\", \"Gerhard\", \"Gerhart\", \"Gerloc\", \"Gerrard\", \"Gerreint\", \"Gerrish\", \"Gertrude\",\r\n    \"Gervaise\", \"Gesin\", \"Gest\", \"Ghirra\", \"Ghislain\", \"Gholson\", \"Gia\", \"Gibbon\", \"Gilberta\", \"Gilda\", \"Gilden\", \"Gildersleeve\", \"Giles\",\r\n    \"Gilfanon\", \"Gilian\", \"Gilir\", \"Gilli\", \"Gillion\", \"Gillyn\", \"Gilm\", \"Gilraen\", \"Gilthanas\", \"Gimli\", \"Gird\", \"Girin\", \"Gisgin\",\r\n    \"Gizur\", \"Gladstone\", \"Glassford\", \"Glebur\", \"Gleda\", \"Gleocyn\", \"Gleridower\", \"Glida\", \"Glogan\", \"Gloisur\", \"Glorfindel\", \"Glugwyn\", \"Glum\",\r\n    \"Glyn\", \"Glynn\", \"Gnazia\", \"Godfred\", \"Godfrey\", \"Godwin\", \"Goibhniu\", \"Golding\", \"Goldwin\", \"Gollum\", \"Gongalo\", \"Goodhue\", \"Gorbash\",\r\n    \"Gordalius\", \"Gorias\", \"Gorion\", \"Gorm\", \"Gotthard\", \"Govier\", \"Govind\", \"Gowen\", \"Grace\", \"Graham\", \"Graine\", \"Gralon\", \"Grani\",\r\n    \"Grania\", \"Gravin\", \"Greegan\", \"Greenleaf\", \"Gregor\", \"Gregory\", \"Grendahl\", \"Greyfell\", \"Grian\", \"Gridley\", \"Griffid\", \"Griffin\", \"Griffith\",\r\n    \"Griggs\", \"Grim\", \"Grima\", \"Grimhilda\", \"Grimnir\", \"Grindan\", \"Griniing\", \"Grisha\", \"Griswold\", \"Groa\", \"Grover\", \"Grunak\", \"Grunnhild\",\r\n    \"Gruumsh\", \"Gualat\", \"Gudmund\", \"Gudmundur\", \"Gudrid\", \"Gudris\", \"Gudrun\", \"Guibert\", \"Guida\", \"Guido\", \"Gulian\", \"Gunila\", \"Gunnar\",\r\n    \"Gunning\", \"Gunther\", \"Gurnarok\", \"Gurney\", \"Gustav\", \"Guthorm\", \"Guthrie\", \"Guthum\", \"Gutzon\", \"Guy\", \"Gwacyn\", \"Gwaihir\", \"Gweddyn\",\r\n    \"Gwen\", \"Gwenca\", \"Gwenda\", \"Gwendolyn\", \"Gwenevere\", \"Gweniver\", \"Gwildor\", \"Gwoc\", \"Gwomyr\", \"Gwydion\", \"Gwyn\", \"Gwyneth\", \"Gwynfryd\",\r\n    \"Gwyran\", \"Gwythinn\", \"Gyda\", \"Gylian\", \"Gymir\", \"Haakon\", \"Habib\", \"Hablot\", \"Hack\", \"Haddon\", \"Hadrian\", \"Haestan\", \"Hafez\",\r\n    \"Hafgrim\", \"Hagar\", \"Haigh\", \"Hakatri\", \"Haki\", \"Hakon\", \"Halbert\", \"Halcyon\", \"Haldane\", \"Haldor\", \"Hale\", \"Halfdan\", \"Haliina\",\r\n    \"Hall\", \"Halldis\", \"Halldor\", \"Halley\", \"Hallfred\", \"Hallfrid\", \"Hallgerd\", \"Hallkel\", \"Hallock\", \"Halloweii\", \"Hallveig\", \"Halvord\", \"Hamlin\",\r\n    \"Hamnet\", \"Hanford\", \"Hani\", \"Haninah\", \"Hannibal\", \"Hanoran\", \"Hansine\", \"Hapweth\", \"Harald\", \"Harbaugh\", \"Harcourt\", \"Hardernan\", \"Hardon\",\r\n    \"Hardwicke\", \"Harek\", \"Harkness\", \"Harlan\", \"Harlo\", \"Harold\", \"Haroon\", \"Harpo\", \"Harren\", \"Harthan\", \"Harthran\", \"Hartpole\", \"Hartwig\",\r\n    \"Harwood\", \"Hasket\", \"Hassan\", \"Hastein\", \"Hatcher\", \"Hattrick\", \"Hauk\", \"Havard\", \"Havelock\", \"Hayvan\", \"Hazard\", \"Hazel\", \"Haziran\",\r\n    \"Hazrond\", \"Healdon\", \"Heardred\", \"Heaslip\", \"Heather\", \"Hector\", \"Hedda\", \"Hedin\", \"Hedwig\", \"Heimer\", \"Helena\", \"Helga\", \"Helgi\",\r\n    \"Helir\", \"Helix\", \"Helm\", \"Helma\", \"Helmi\", \"Heman\", \"Hemming\", \"Hendrik\", \"Hengist\", \"Henna\", \"Henrick\", \"Henry\", \"Geramon\",\r\n    \"Herdis\", \"Herekin\", \"Hereward\", \"Herijar\", \"Hermione\", \"Heron\", \"Hertha\", \"Heryom\", \"Herzog\", \"Heward\", \"Hhaba'id\", \"Hhabezur\", \"Hickling\",\r\n    \"Hidohebhi\", \"Hifryn\", \"Hild\", \"Hilda\", \"Hildebrand\", \"Hildegarde\", \"Hildric\", \"Himli\", \"Hisar\", \"Hislop\", \"Hjalmar\", \"Hjalti\", \"Hjeldin\",\r\n    \"Hjort\", \"Hjorth\", \"Hlif\", \"Hoadley\", \"Hoar\", \"Hobart\", \"Hodgdon\", \"Hogg\", \"Hogni\", \"Holbrook\", \"Holger\", \"Holgi\", \"Hollister\",\r\n    \"Holly\", \"Homli\", \"Hookham\", \"Horan\", \"Horatio\", \"Hord\", \"Horik\", \"Hormstein\", \"Horsa\", \"Hortensia\", \"Horton\", \"Hoskuld\", \"Hosni\",\r\n    \"Hossein\", \"Howarth\", \"Howland\", \"Hrafn\", \"Hrapp\", \"Hrefna\", \"Hrethel\", \"Hring\", \"Hroald\", \"Hrodyn\", \"Hrolf\", \"Hrothgar\", \"Hrugan\",\r\n    \"Hruggek\", \"Hruse\", \"Hrut\", \"Huffatn\", \"Hulbeart\", \"Hulda\", \"Hultz\", \"Humbert\", \"Hunter\", \"Hurd\", \"Hurgal\", \"Hurvin\", \"Hussain\",\r\n    \"Hustana\", \"Hyarantar\", \"Hyarante\", \"Hyder\", \"Hyfryn\", \"Hygelac\", \"Hylissa\", \"Hynman\", \"Hyrak\", \"Ian\", \"Iana\", \"Ibitz\", \"Ibrahim\",\r\n    \"Ibrandul\", \"Ica\", \"Icarus\", \"Icava\", \"Ick\", \"Ida\", \"Idarolan\", \"Iden\", \"Idris\", \"Iduna\", \"Iduné\", \"Ies'lorn\", \"Igjaru\",\r\n    \"Igor\", \"Ikarin\", \"Ilena\", \"Ilermath\", \"Ilia\", \"Iliriya\", \"Illentik\", \"Illuin\", \"Illyana\", \"Ilmare\", \"Ilniora\", \"Ilthoss\", \"Iluvatar\",\r\n    \"Ilya\", \"Ilyesha\", \"Imajin\", \"Imnar\", \"Imoen\", \"Imphela\", \"Imrador\", \"Imrahan\", \"Imrahim\", \"Imril\", \"Imryr\", \"Inahwen\", \"Indech\",\r\n    \"Indigo\", \"Indira\", \"Indreju\", \"Indria\", \"Ingald\", \"Ingeborg\", \"Ingen\", \"Ingi\", \"Ingirid\", \"Ingolf\", \"Ingram\", \"Ingrid\", \"Ingunn\",\r\n    \"Inifael\", \"Inigo\", \"Inisfa'il\", \"Iosaz\", \"Iosef\", \"Irgash\", \"Irial\", \"Irian\", \"Iris\", \"Irma\", \"Irphilin\", \"Irsai\", \"Irvin\",\r\n    \"Irwick\", \"Isael\", \"Isak\", \"Isambard\", \"Isbeorn\", \"Iscal\", \"Iselore\", \"Isengard\", \"Isengrim\", \"Iserion\", \"Isgrimnur\", \"Ishmael\", \"Isidora\",\r\n    \"Isiki\", \"Isildur\", \"Isilith\", \"Isleif\", \"Ismail\", \"Isolde\", \"Isorn\", \"Issak\", \"Ithaca\", \"Iuz\", \"Ivan\", \"Ivar\", \"Ivor\",\r\n    \"Ivy\", \"Iwanda\", \"Iyu'nigato\", \"Izard\", \"Izebel\", \"Izvire\", \"Jace\", \"Jacinth\", \"Jacoby\", \"Jacor\", \"Jade\", \"Jaden\", \"Jadzia\",\r\n    \"Jael\", \"Jaffar\", \"Jagadis\", \"Jaheira\", \"Jahrec\", \"Jahverbhai\", \"Jalasil\", \"Jalavier\", \"Jaligal\", \"Jamila\", \"Janda'nan\", \"Jandanan\", \"Janix\",\r\n    \"Janna\", \"Janus\", \"Janvel\", \"Jarak\", \"Jarazal\", \"Jared\", \"Jarek\", \"Jarnagua\", \"Jarriel\", \"Jarvin\", \"Jasara\", \"Jasek\", \"Jaseve\",\r\n    \"Jasha\", \"Jasmine\", \"Jason\", \"Javair\", \"Javon\", \"Jawaharial\", \"Jayce\", \"Jayden\", \"Jaylidan\", \"Jayna\", \"Jaysen\", \"Jazhara\", \"Jazrel\",\r\n    \"Jedd\", \"Jeffen\", \"Jehryn\", \"Jelyn\", \"Jenantar\", \"Jenkin\", \"Jennifer\", \"Jens\", \"Jensine\", \"Jephson\", \"Jerec\", \"Jeryth\", \"Jesiper\",\r\n    \"Jespar\", \"Jesslyn\", \"Jestyn\", \"Jethis\", \"Jevan\", \"Jevist\", \"Jezryanadar\", \"Jhael\", \"Jhaelen\", \"Jhany\", \"Jhardamòr\", \"Jharkor\", \"Jhary\",\r\n    \"Jihad\", \"Jillian\", \"Jingizu\", \"Jintah\", \"Jiriki\", \"Jirnost\", \"Jocelyn\", \"Jochan\", \"Johannes\", \"John\", \"Jolan\", \"Jomano\", \"Jonaya\",\r\n    \"Joran\", \"Jordan\", \"Joriel\", \"Jornadesh\", \"Jorunn\", \"Joscelyn\", \"Joseph\", \"Josephine\", \"Josette\", \"Joshua\", \"Jotham\", \"Jovena\", \"Jubini\",\r\n    \"Jullana\", \"Junius\", \"Juno\", \"Juntalin\", \"Jura\", \"Jurim\", \"Jusif\", \"Juss\", \"Jyresh\", \"K'aarna\", \"Kaarna\", \"Kael\", \"Kaelin\",\r\n    \"Kaffa\", \"Kai\", \"Kaia\", \"Kailyn\", \"Kaimana\", \"Kaitlinn\", \"Kaja\", \"Kalan\", \"Kalantir\", \"Kalar\", \"Kaldar\", \"Kaleen\", \"Kalen\",\r\n    \"Kalf\", \"Kalia\", \"Kalina\", \"Kalvan\", \"Kalvaro\", \"Kalyra\", \"Kalysha\", \"Kamril\", \"Kamshir\", \"Kanoa\", \"Kaori\", \"Kaprin\", \"Kara\",\r\n    \"Karali\", \"Karel\", \"Karelia\", \"Kari\", \"Karim\", \"Karinca\", \"Karine\", \"Karis\", \"Karitsa\", \"Karker\", \"Karl\", \"Karlsefni\", \"Karran\",\r\n    \"Karya\", \"Kaschak\", \"Kasia\", \"Kaspar\", \"Kasreyn\", \"Kathena\", \"Kathran\", \"Katishimo\", \"Katla\", \"Katnina\", \"Katrin\", \"Katrina\", \"Kavalam\",\r\n    \"Kavalnir\", \"Kaylianna\", \"Kaylin\", \"Kazairl\", \"Kazalim\", \"Kazir\", \"Keavy\", \"Keelan\", \"Kegan\", \"Keiko\", \"Keldorn\", \"Kelin\", \"Kellin\",\r\n    \"Kelma'in\", \"Kelson\", \"Kelth\", \"Kelvin\", \"Kemble\", \"Kendall\", \"Kendra\", \"Kendrick\", \"Kenesaw\", \"Kenin\", \"Kenny\", \"Kenobi\", \"Kenrick\",\r\n    \"Kerik\", \"Kerish\", \"Kermit\", \"Kerrigan\", \"Keshar\", \"Kesrick\", \"Kethios\", \"Ketial\", \"Ketil\", \"Kettali\", \"Kevan\", \"Keven\", \"Kevlin\",\r\n    \"Keyrnon\", \"Khader\", \"Khalia\", \"Khalid\", \"Khanzadian\", \"Kharas\", \"Khealynn\", \"Khelben\", \"Kheldor\", \"Khelen\", \"Khelin\", \"Khelyn\", \"Khendraja'aro\",\r\n    \"Khenel\", \"Khezeed\", \"Khindawe\", \"Khirsha\", \"Khlor\", \"Khris\", \"Khyved\", \"Ki'ushapo\", \"Kian\", \"Kiborno\", \"Kiera\", \"Kieran\", \"Kikkasut\",\r\n    \"Kilas\", \"Kilian\", \"Killion\", \"Kimmuriel\", \"Kimura\", \"Kinloch\", \"Kinson\", \"Kippler\", \"Kira\", \"Kiri\", \"Kirjava\", \"Kirk\", \"Kirren\",\r\n    \"Kirsopp\", \"Kirsten\", \"Kishin\", \"Kisin\", \"Kitiara\", \"Kjeldor\", \"Kjindar\", \"Klaus\", \"Klean\", \"Klerak\", \"Knud\", \"Knut\", \"Knute\",\r\n    \"Koabon\", \"Kolbein\", \"Kolchash\", \"Kolskegg\", \"Kolya\", \"Kona\", \"Konrad\", \"Konstantine\", \"Korban\", \"Kord\", \"Koreth\", \"Korgan\", \"Korm\",\r\n    \"Kormar\", \"Kornag\", \"Korska\", \"Kosh\", \"Kota\", \"Kovelir\", \"Krinn\", \"Krishnalai\", \"Kroh\", \"Krom\", \"Kronos\", \"Kuno\", \"Kurd\",\r\n    \"Kurn\", \"Kurt\", \"Kurin\", \"Kuros\", \"Kurtulmak\", \"Ky'ishi\", \"Ky'varan\", \"Kyle\", \"Kylindra\", \"Kypros\", \"Kyrie\", \"Kyriel\", \"La'ahl\",\r\n    \"Lachesis\", \"Lachian\", \"Ladia\", \"Ladoros\", \"Laeli\", \"Laelia\", \"Laerrui\", \"Lahar\", \"Lahsai\", \"Lalely\", \"Lamar\", \"Lambi\", \"Lan\",\r\n    \"Lana\", \"Lance\", \"Lancelot\", \"Landailyn\", \"Landoris\", \"Landrea\", \"Laneth\", \"Langhorne\", \"Langrian\", \"Langston\", \"Lanthal\", \"Lanthorn\", \"Larad\",\r\n    \"Lardner\", \"Larisa\", \"Larkin\", \"Larn\", \"Larnea\", \"Lars\", \"Larz\", \"Lashar\", \"Lateia\", \"Lathander\", \"Laurana\", \"Laurelin\", \"Laxton\",\r\n    \"Lazar\", \"Lazlo\", \"Lea\", \"Leareth\", \"Leathian\", \"Lec\", \"Ledyard\", \"Leela\", \"Legolas\", \"Legrand\", \"Leif\", \"Leighton\", \"Leika\",\r\n    \"Leila\", \"Leilah\", \"Leli\", \"Lembar\", \"Lenka\", \"Lenox\", \"Leo\", \"Leofric\", \"Leon\", \"Leonard\", \"Leonardo\", \"Leopond\", \"Lesesne\",\r\n    \"Lestyn\", \"Leta\", \"Letor\", \"Lev\", \"Lewellyri\", \"Lexan\", \"Lexx\", \"Lhuc\", \"Lia\", \"Liana\", \"Liena\", \"Lightfoot\", \"Liliane\",\r\n    \"Lilin\", \"Lina\", \"Lindar\", \"Linmer\", \"Linnea\", \"Lios\", \"Liphar\", \"Lippard\", \"Liptrot\", \"Lirith\", \"Lithar\", \"Littleton\", \"Livermore\",\r\n    \"Livia\", \"Ljot\", \"Ljotolf\", \"Lluth\", \"Llyn\", \"Llythin\", \"Lobelia\", \"Lobryn\", \"Lobur\", \"Locke\", \"Lockwood\", \"Loddlaen\", \"Lodica\",\r\n    \"Lodin\", \"Loella\", \"Logan\", \"Loibur\", \"Loili\", \"Lola\", \"Lonvan\", \"Lore\", \"Loric\", \"Lorin\", \"Lormyr\", \"Lothar\", \"Lothrop\",\r\n    \"Lott\", \"Lotta\", \"Loudon\", \"Louisa\", \"Lovegood\", \"Lovva\", \"Lovyan\", \"Luas\", \"Lucan\", \"Lucca\", \"Lucia\", \"Lucian\", \"Lucinda\",\r\n    \"Lucius\", \"Lucrecia\", \"Ludmila\", \"Luella\", \"Lufkin\", \"Lugh\", \"Luhsane\", \"Lum\", \"Lumbar\", \"Luna\", \"Lunar\", \"Lunetta\", \"Lupin\",\r\n    \"Lurican\", \"Lurue\", \"Luscan\", \"Luther\", \"Luthian\", \"Luvina\", \"Lycias\", \"Lydia\", \"Lylas\", \"Lyle\", \"Lymo\", \"Lyndall\", \"Lyndon\",\r\n    \"Lynette\", \"Lynis\", \"Lynn\", \"Lypilla\", \"Lyra\", \"Lyrian\", \"Lyrin\", \"Lyron\", \"Lysander\", \"Lyssa\", \"Lythia\", \"Lythian\", \"Lytler\",\r\n    \"Lyzandra\", \"Lyzette\", \"Lórien\", \"Mabon\", \"Macallan\", \"Macaulay\", \"Macer\", \"Mackim\", \"Macvey\", \"Maddern\", \"Maddock\", \"Madelon\", \"Madhao\",\r\n    \"Madora\", \"Maec\", \"Maegwin\", \"Mael\", \"Maerraent\", \"Mafka\", \"Magda\", \"Magh\", \"Magill\", \"Magna\", \"Magnus\", \"Magus\", \"Mahion\",\r\n    \"Mahmud\", \"Mahri\", \"Maia\", \"Maidah\", \"Maidak\", \"Maihar\", \"Makoma\", \"Malach\", \"Malachias\", \"Maladack\", \"Malador\", \"Malak\", \"Malar\",\r\n    \"Malcoff\", \"Malcolm\", \"Malfar\", \"Malia\", \"Maliforin\", \"Malkil\", \"Malto\", \"Malvin\", \"Malvtha\", \"Mama\", \"Mamba\", \"Mana\", \"Manala\",\r\n    \"Manaverr\", \"Manfred\", \"Mankey\", \"Mannin\", \"Manon\", \"Mansour\", \"Manton\", \"Manwe\", \"Maoll\", \"March\", \"Marcus\", \"Marena\", \"Margarita\",\r\n    \"Margery\", \"Mariandor\", \"Marid\", \"Marina\", \"Marion\", \"Marissa\", \"Marisse\", \"Mark\", \"Markham\", \"Maroof\", \"Marques\", \"Marsden\", \"Marshtnan\",\r\n    \"Marsineh\", \"Marta\", \"Martin\", \"Martus\", \"Mary\", \"Maryn\", \"Mathilda\", \"Mathilde\", \"Matilda\", \"Matthew\", \"Matthias\", \"Maudlin\", \"Maura\",\r\n    \"Mavis\", \"Maxander\", \"Maxfield\", \"Maximilian\", \"Maximus\", \"Maya\", \"Mayhew\", \"Mazrak\", \"Medar\", \"Medart\", \"Medea\", \"Meder\", \"Medrom\",\r\n    \"Megan\", \"Meghnad\", \"Mehmet\", \"Mekeesha\", \"Melba\", \"Melchior\", \"Meleri\", \"Meliadoul\", \"Melian\", \"Melisande\", \"Melkor\", \"Mellyora\", \"Melnyth\",\r\n    \"Melora\", \"Melva\", \"Melvaig\", \"Memor\", \"Men\", \"Menard\", \"Mendolin\", \"Menelvagor\", \"Mennefer\", \"Meoran\", \"Mephistopheles\", \"Merah\", \"Merasye\",\r\n    \"Meredith\", \"Meriadoc\", \"Merifa\", \"Merivan\", \"Merlin\", \"Merrilee\", \"Merryn\", \"Mervyn\", \"Merwold\", \"Merwolf\", \"Mes'ard\", \"Meta\", \"Methos\",\r\n    \"Methuen\", \"Michael\", \"Michel\", \"Mideya\", \"Midhat\", \"Midra\", \"Mignon\", \"Miguel\", \"Mikhail\", \"Mila\", \"Milada\", \"Milander\", \"Milandro\",\r\n    \"Mileaha\", \"Millard\", \"Milo\", \"Mimir\", \"Mina\", \"Minella\", \"Miner\", \"Minna\", \"Minx\", \"Mira\", \"Miragon\", \"Miranda\", \"Mirandros\",\r\n    \"Miriel\", \"Mirrash\", \"Mirromi\", \"Miryam\", \"Misha\", \"Mishanti\", \"Misin\", \"Mist\", \"Mithrandir\", \"Mithryl\", \"Mitre\", \"Miwa\", \"Mizra\",\r\n    \"Moda\", \"Modeus\", \"Moffett\", \"Mohammed\", \"Mohieddin\", \"Moina\", \"Moira\", \"Moiriane\", \"Moisur\", \"Molina\", \"Mona\", \"Monach\", \"Montfort\",\r\n    \"Mora\", \"Moradin\", \"Mord\", \"Moredlin\", \"Morgan\", \"Morgon\", \"Morgwin\", \"Moriana\", \"Morik\", \"Morin\", \"Morley\", \"Morna\", \"Morpheus\",\r\n    \"Morrigan\", \"Mortos\", \"Mortrock\", \"Morven\", \"Moya\", \"Muammar\", \"Mubur\", \"Muhammed\", \"Muhlwena\", \"Mujibur\", \"Muktar\", \"Munin\", \"Murdo\",\r\n    \"Murias\", \"Murina\", \"Murrough\", \"Mussa\", \"Mustadio\", \"Mustafa\", \"Mylin\", \"Mylé\", \"Myna\", \"Myra\", \"Myriam\", \"Myrick\", \"Myrmeen\",\r\n    \"Myrna\", \"Myron\", \"Myrrdyn\", \"Myrrha\", \"Myshella\", \"Mythil\", \"Myvor\", \"N'hadha\", \"Nada\", \"Nadezhda\", \"Nadia\", \"Nadir\", \"Nagai\",\r\n    \"Nagel\", \"Nagvar\", \"Nahar\", \"Naia\", \"Naidel\", \"Najib\", \"Nakea\", \"Nalia\", \"Nall\", \"Nanorion\", \"Naois\", \"Naomi\", \"Napollo\",\r\n    \"Narasen\", \"Narcista\", \"Narisa\", \"Narvi\", \"Nasir\", \"Nasser\", \"Natalia\", \"Natasha\", \"Nathalia\", \"Nathalie\", \"Natty\", \"Nazar\", \"Nebron\",\r\n    \"Nedda\", \"Nedstar\", \"Neelix\", \"Negley\", \"Nemm\", \"Nemuel\", \"Neral\", \"Neri\", \"Nerian\", \"Nerilka\", \"Nerissa\", \"Nerull\", \"Nesbit\",\r\n    \"Nesta\", \"Nethuan\", \"Neva\", \"Nevaeh\", \"Nevard\", \"Nevena\", \"Nevile\", \"Nevyn\", \"Newall\", \"Newbold\", \"Newman\", \"Neysa\", \"Neza\",\r\n    \"Nibbidard\", \"Nichol\", \"Nicor\", \"Nienna\", \"Night\", \"Nigil\", \"Nikolai\", \"Nikua\", \"Nila\", \"Nimir\", \"Nimrodel\", \"Nina\", \"Ninian\",\r\n    \"Niomir\", \"Nira'in\", \"Nirnir\", \"Nita\", \"Nivek\", \"Nivilian\", \"Nizam\", \"Nizar\", \"Nobanion\", \"Nodaran\", \"Noela\", \"Nolan\", \"Nona\",\r\n    \"Noora\", \"Nor\", \"Nordri\", \"Noreen\", \"Norine\", \"Norle\", \"Norna\", \"Norval\", \"Norvin\", \"Norwood\", \"Nova\", \"Novalis\", \"Novita\",\r\n    \"Novomira\", \"Nu'endo\", \"Nuada\", \"Nuadi\", \"Nuala\", \"Nuale\", \"Nuanni\", \"Nungo\", \"Nunila\", \"Nura\", \"Nurdoch\", \"Nurgan\", \"Nuri\",\r\n    \"Nushia\", \"Nyassa\", \"Nylan\", \"Nymara\", \"Nynaeve\", \"Nyra\", \"Nytasa\", \"Oakes\", \"Oalyn\", \"Obed\", \"Oberon\", \"Ocar\", \"Oda\",\r\n    \"Odar\", \"Odd\", \"Oden\", \"Odilia\", \"Odimus\", \"Odo\", \"Odona\", \"Ofeig\", \"Ogden\", \"Oghma\", \"Ogma\", \"Ogmund\", \"Ogrus\",\r\n    \"Okander\", \"Olac\", \"Olaf\", \"Oldac\", \"Oldham\", \"Olga\", \"Olissa\", \"Olof\", \"Olorin\", \"Oloru\", \"Olvir\", \"Olya\", \"Omandras\",\r\n    \"Omar\", \"Omassus\", \"Ombrum\", \"Omer\", \"Onslow\", \"Onufrio\", \"Onund\", \"Onyx\", \"Ooma\", \"Oona\", \"Oonai\", \"Opal\", \"Ophelia\",\r\n    \"Orah\", \"Orcrist\", \"Ordway\", \"Oriana\", \"Orin\", \"Orion\", \"Orius\", \"Orivaen\", \"Orlandu\", \"Orlata\", \"Orm\", \"Ormsby\", \"Orome\",\r\n    \"Oron\", \"Orren\", \"Orridge\", \"Orsola\", \"Orson\", \"Osa\", \"Osiris\", \"Oskavar\", \"Ospar\", \"Osric\", \"Oswin\", \"Othello\", \"Othilia\",\r\n    \"Otho\", \"Othran\", \"Otiluke\", \"Otkel\", \"Otrygg\", \"Ottar\", \"Ottilia\", \"Otto\", \"Overton\", \"Owain\", \"Owen\", \"Owyn\", \"Ozatras\",\r\n    \"Ozto\", \"Ozur\", \"Padraic\", \"Padrias\", \"Paget\", \"Pala\", \"Palma\", \"Pamar\", \"Pan\", \"Parbha\", \"Pargascor\", \"Parr\", \"Pasca\",\r\n    \"Paschal\", \"Passmore\", \"Patnas\", \"Pattabhai\", \"Pavel\", \"Pean\", \"Pearl\", \"Pearsall\", \"Peffer\", \"Peiham\", \"Peitar\", \"Peleg\", \"Pelipi\",\r\n    \"Pellin\", \"Pendleton\", \"Penfield\", \"Pengolod\", \"Penhallow\", \"Penniman\", \"Penrhyn\", \"Pepperell\", \"Pereban\", \"Peredon\", \"Peregrin\", \"Peregrine\", \"Perith\",\r\n    \"Peronn\", \"Perrin\", \"Persifor\", \"Pestivar\", \"Peter\", \"Pethros\", \"Petra\", \"Petrea\", \"Petronella\", \"Pflarr\", \"Phanuel\", \"Pharatnond\", \"Pharcellus\",\r\n    \"Phelim\", \"Philo\", \"Philpot\", \"Phimister\", \"Phoenix\", \"Phyrrus\", \"Pia\", \"Picar\", \"Pickman\", \"Pigot\", \"Pike\", \"Pine\", \"Pinkham\",\r\n    \"Pinkney\", \"Pinkstone\", \"Piotr\", \"Pittheus\", \"Plaisted\", \"Plunimer\", \"Plunkett\", \"Polassar\", \"Pollard\", \"Pollock\", \"Polonius\", \"Polycarp\", \"Pomeroy\",\r\n    \"Porthios\", \"Powell\", \"Prafulla\", \"Prendergast\", \"Preston\", \"Prichard\", \"Proctor\", \"Prospero\", \"Provida\", \"Psilofyr\", \"Puck\", \"Pue\", \"Pulisk\",\r\n    \"Pulteney\", \"Purdon\", \"Pyke\", \"Pyros\", \"Pysander\", \"Quaan\", \"Quagel\", \"Qualin\", \"Quan\", \"Quarles\", \"Quasar\", \"Quascar\", \"Quass\",\r\n    \"Quebba\", \"Quelfinas\", \"Quesan\", \"Queygo\", \"Quiddle\", \"Quinn\", \"Quiss\", \"Quixano\", \"Quora\", \"Quvar\", \"Quvean\", \"Raagon\", \"Raban\",\r\n    \"Rabind\", \"Rabur\", \"Rach\", \"Rachid\", \"Rackafel\", \"Rackhir\", \"Radagast\", \"Radija\", \"Rae\", \"Rael\", \"Raen\", \"Rafa\", \"Rafael\",\r\n    \"Rafur\", \"Ragen\", \"Ragna\", \"Ragnal\", \"Ragnar\", \"Ragnhild\", \"Rahaz\", \"Rai\", \"Raikes\", \"Rails\", \"Raimon\", \"Raina\", \"Raine\",\r\n    \"Raisa\", \"Raistlin\", \"Ralina\", \"Ralmanor\", \"Ralph\", \"Ramen\", \"Ramli\", \"Ramman\", \"Ramona\", \"Ramora\", \"Ramous\", \"Ramza\", \"Ranald\",\r\n    \"Ranath\", \"Rancor\", \"Rand\", \"Randar\", \"Randoer\", \"Randolf\", \"Randor\", \"Ranfurly\", \"Ranjan\", \"Rankin\", \"Rannuif\", \"Rannveig\", \"Raphael\",\r\n    \"Rary\", \"Rashiel\", \"Rasputin\", \"Rathack\", \"Rathanos\", \"Rathgar\", \"Rattray\", \"Rauros\", \"Ravenor\", \"Ravi\", \"Rayne\", \"Razamor\", \"Raziel\",\r\n    \"Razzan\", \"Rebecca\", \"Recoun\", \"Redcliffe\", \"Regalorn\", \"Regnar\", \"Reina\", \"Reis\", \"Relm\", \"Rem\", \"Remi\", \"Remnor\", \"Remus\",\r\n    \"Renar\", \"Renata\", \"Rendel\", \"Rengoll\", \"Reoc\", \"Resha\", \"Rethral\", \"Reva\", \"Rex\", \"Reyna\", \"Rezah\", \"Rhadry\", \"Rhaederle\",\r\n    \"Rhaeryn\", \"Rhea\", \"Rhiannon\", \"Rhiow\", \"Rhodhy\", \"Rhona\", \"Rhonda\", \"Rhora\", \"Rhorleif\", \"Rhorvald\", \"Rhundas\", \"Rhymer\", \"Rhynn\",\r\n    \"Rhys\", \"Riallus\", \"Riamon\", \"Rickard\", \"Ricyn\", \"Rigolio\", \"Rilir\", \"Rinaldus\", \"Ringgold\", \"Risaya\", \"Riss\", \"Rith\", \"Riven\",\r\n    \"Roach\", \"Roark\", \"Rockhill\", \"Rodefer\", \"Roderic\", \"Rodhan\", \"Rognvald\", \"Roignar\", \"Roland\", \"Rolf\", \"Rollo\", \"Roman\", \"Romelia\",\r\n    \"Romer\", \"Romney\", \"Ronan\", \"Root\", \"Rorik\", \"Rosalyn\", \"Rosamund\", \"Roscoe\", \"Rose\", \"Rosefyre\", \"Roseline\", \"Roshena\", \"Rosskeen\",\r\n    \"Roundell\", \"Rowena\", \"Ruadan\", \"Ruan\", \"Rubar\", \"Ruben\", \"Rubrick\", \"Ruby\", \"Rucker\", \"Rudyard\", \"Rufina\", \"Rufus\", \"Ruggles\",\r\n    \"Ruhollah\", \"Ruinar\", \"Rulian\", \"Rulinian\", \"Rumil\", \"Runa\", \"Runold\", \"Runolf\", \"Runus\", \"Rurik\", \"Rusgar\", \"Ruth\", \"Rutland\",\r\n    \"Ruwen\", \"Ryana\", \"Rycaro\", \"Rychanna\", \"Rygar\", \"Ryll\", \"Rylla\", \"Rynnyn\", \"Ryodan\", \"Ryoga\", \"Ryoka\", \"Saalem\", \"Sabal\",\r\n    \"Sabhel\", \"Sabriel\", \"Sabrok\", \"Sacheverall\", \"Sackville\", \"Saddam\", \"Sadler\", \"Sador\", \"Saedd\", \"Saermund\", \"Saeunn\", \"Safrin\", \"Saia\",\r\n    \"Said\", \"Saifai\", \"Saiwyn\", \"Salina\", \"Salmon\", \"Salter\", \"Sam\", \"Sambrea\", \"Samia\", \"Samira\", \"Sammel\", \"Samuel\", \"Sanfrid\",\r\n    \"Sano'rye\", \"Sanoreya\", \"Sanoria\", \"Sarcyn\", \"Sardior\", \"Sardul\", \"Sarel\", \"Sarevok\", \"Sargonus\", \"Saria\", \"Sarina\", \"Sarisin\", \"Sariya\",\r\n    \"Sarrask\", \"Saruman\", \"Sasha\", \"Saska\", \"Saturn\", \"Sauron\", \"Savah\", \"Savion\", \"Sawdon\", \"Sayan\", \"Scenesefa\", \"Scudamore\", \"Scythe\",\r\n    \"Sebastian\", \"Sebrinth\", \"Sechier\", \"Sedgely\", \"Seersha\", \"Segojan\", \"Sehanine\", \"Seitarin\", \"Selema\", \"Selena\", \"Selene\", \"Selig\", \"Selim\",\r\n    \"Selina\", \"Selis\", \"Selith\", \"Selune\", \"Selwyn\", \"Semuta\", \"Senith\", \"Senna\", \"Sephia\", \"Sephya\", \"Sepiroth\", \"Seramir\", \"Seraphina\",\r\n    \"Serena\", \"Serenyi\", \"Sergei\", \"Seriozha\", \"Seryan\", \"Seryl\", \"Seryth\", \"Seth\", \"Sethron\", \"Sevadia\", \"Severin\", \"Sevros\", \"Sevy\",\r\n    \"Sha'dar\", \"Sha'rell\", \"Shackerley\", \"Shadizad\", \"Shadrach\", \"Shadworth\", \"Shaera\", \"Shaivar\", \"Shaivir\", \"Shala\", \"Shalamar\", \"Shalandain\", \"Shalat\",\r\n    \"Shalhassan\", \"Shalindra\", \"Shalon\", \"Shalpan\", \"Shamane\", \"Shamir\", \"Shana\", \"Shandalar\", \"Shanell\", \"Shar\", \"Sharada\", \"Sharaq\", \"Shard\",\r\n    \"Sharif\", \"Sharilla\", \"Sharl\", \"Sharla\", \"Sharmaine\", \"Sharman\", \"Sharna\", \"Sharnira\", \"Sharra\", \"Sharteel\", \"Shaundra\", \"Sharyn\", \"Shayera\",\r\n    \"Shayla\", \"Shayll\", \"Shayonea\", \"Shea\", \"Sheegoth\", \"Sheeryl\", \"Sheherazad\", \"Shemsin\", \"Sheridan\", \"Sherif\", \"Sherry\", \"Shezael\", \"Shima'onari\",\r\n    \"Shintaro\", \"Shiza\", \"Shuinn\", \"Shuna\", \"Shurakai\", \"Shurik\", \"Shushila\", \"Shylock\", \"Siandar\", \"Sibert\", \"Sibyl\", \"Sidhe\", \"Siglinde\",\r\n    \"Sigmund\", \"Signe\", \"Sigred\", \"Sigrid\", \"Sigtrydd\", \"Sigurd\", \"Sigvaldi\", \"Silatasar\", \"Silius\", \"Silma\", \"Silmariel\", \"Silphane\", \"Silvain\",\r\n    \"Silvan\", \"Silvanus\", \"Silvera\", \"Silveron\", \"Silvia\", \"Silvyn\", \"Simir\", \"Simmu\", \"Sinbad\", \"Sindarin\", \"Sinir\", \"Sinjin\", \"Siranush\",\r\n    \"Sirisir\", \"Sirli'in\", \"Sirona\", \"Sirranon\", \"Sirwin\", \"Sisimar\", \"Siski\", \"Sivesh\", \"Siveth\", \"Siward\", \"Sjerdi\", \"Skamkel\", \"Skelmar\",\r\n    \"Skorian\", \"Slade\", \"Slania\", \"Slater\", \"Slava\", \"Sligh\", \"Slingsby\", \"Smedley\", \"Snargg\", \"Snorri\", \"Snyder\", \"Sodorn\", \"Soilir\",\r\n    \"Soisil\", \"Sokki\", \"Solaris\", \"Solera\", \"Solevig\", \"Solmund\", \"Solomon\", \"Solvi\", \"Sonnet\", \"Sooth\", \"Sora\", \"Sorass\", \"Sorcha\",\r\n    \"Sorin\", \"Sornovas\", \"Soth\", \"Southall\", \"Sovaz\", \"Soveh\", \"Soyadi\", \"Sparrow\", \"Sprigg\", \"Squall\", \"Srass\", \"Stabyl\", \"Stanwood\",\r\n    \"Starkad\", \"Starke\", \"Stedman\", \"Stefan\", \"Stehman\", \"Stein\", \"Steinkel\", \"Steinthor\", \"Stelectra\", \"Stenger\", \"Stenwulf\", \"Steponas\", \"Sterndale\",\r\n    \"Stetson\", \"Stetter\", \"Stiliman\", \"Stilingfleet\", \"Stopford\", \"Storm\", \"Stowna\", \"Strachan\", \"Straygoth\", \"Stroud\", \"Strudwick\", \"Strybyorn\", \"Strykar\",\r\n    \"Sturla\", \"Sturm\", \"Styx\", \"Sudeha\", \"Suleiman\", \"Sulimo\", \"Sulkas\", \"Sumarlidi\", \"Suras\", \"Surridge\", \"Susin\", \"Susur\", \"Sutan\",\r\n    \"Svala\", \"Svan\", \"Svante\", \"Svatopluk\", \"Sveata\", \"Sven\", \"Swain\", \"Swartwout\", \"Sydnor\", \"Syllva\", \"Sylvane\", \"Sylvia\", \"Sylvin\",\r\n    \"Sylvine\", \"Syndarra\", \"Synnyn\", \"Syranita\", \"Syrioll\", \"Tabar\", \"Tabitha\", \"Tabor\", \"Tabu\", \"Tacey\", \"Tachel\", \"Tadashi\", \"Tadeus\",\r\n    \"Tadia\", \"Tadisha\", \"Tadra\", \"Taennyn\", \"Taeynnyn\", \"Taggart\", \"Tahir\", \"Tailabar\", \"Taina\", \"Takhisis\", \"Taleen\", \"Talen\", \"Taleth\",\r\n    \"Talia\", \"Taliesin\", \"Talin\", \"Talmora\", \"Talobar\", \"Talona\", \"Taloxi\", \"Taltos\", \"Talus\", \"Tamar\", \"Tamara\", \"Tameryn\", \"Tamias\",\r\n    \"Tamlin\", \"Tamoreya\", \"Tanina\", \"Tanis\", \"Tanith\", \"Tanyc\", \"Tar\", \"Tara\", \"Taran\", \"Tarcia\", \"Taria\", \"Tarik\", \"Taromas\",\r\n    \"Taron\", \"Tarran\", \"Taryn\", \"Tas\", \"Tasharra\", \"Tasker\", \"Tatyana\", \"Taurus\", \"Taveli\", \"Taylian\", \"Taylin\", \"Tedra\", \"Tegan\",\r\n    \"Tekia\", \"Telena\", \"Tell\", \"Tench\", \"Tenna\", \"Tenser\", \"Teoddry\", \"Ter\", \"Teralyn\", \"Teressa\", \"Terix\", \"Teruah\", \"Tesin\",\r\n    \"Tesla\", \"Tessa\", \"Tevran\", \"Thaal\", \"Thacker\", \"Thaddeus\", \"Thaki\", \"Thal\", \"Thalen\", \"Thalessa\", \"Thalia\", \"Thalna\", \"Tham\",\r\n    \"Thana\", \"Thane\", \"Thanatos\", \"Thantos\", \"Thar\", \"Tharbad\", \"Tharkesh\", \"Tharn\", \"Thax\", \"Thecla\", \"Theda\", \"Theleb\", \"Theoden\",\r\n    \"Theodor\", \"Theodoric\", \"Theodosia\", \"Theodric\", \"Theoric\", \"Thera\", \"Therad\", \"Theresa\", \"Therios\", \"Theros\", \"Thesius\", \"Thieras\", \"Thieryn\",\r\n    \"Thingyr\", \"Thio\", \"Tholan\", \"Thomas\", \"Thomulor\", \"Thora\", \"Thoran\", \"Thorarin\", \"Thorburn\", \"Thord\", \"Thordarson\", \"Thordis\", \"Thorfel\",\r\n    \"Thorfinn\", \"Thorfinna\", \"Thorgeir\", \"Thorgerd\", \"Thorgest\", \"Thorgils\", \"Thorgrim\", \"Thorgunna\", \"Thorhall\", \"Thorhalla\", \"Thorhild\", \"Thorin\", \"Thorir\",\r\n    \"Thorkatla\", \"Thorkell\", \"Thorkild\", \"Thormod\", \"Thormodr\", \"Thormond\", \"Thorn\", \"Thorndike\", \"Thornwell\", \"Thorold\", \"Thorolf\", \"Thorsager\", \"Thorstein\",\r\n    \"Thorunn\", \"Thorvald\", \"Thorvaldur\", \"Thorvar\", \"Thorzyl\", \"Thoth\", \"Thrain\", \"Thrand\", \"Throck\", \"Thule\", \"Thurid\", \"Thylda\", \"Thyra\",\r\n    \"Thyri\", \"Thyrza\", \"Thyssa\", \"Tiana\", \"Tiffany\", \"Tihan\", \"Tika\", \"Tilford\", \"Tilica\", \"Tilir\", \"Tillinghast\", \"Tilloch\", \"Timon\",\r\n    \"Tioniel\", \"Tirion\", \"Tisha\", \"Tisheri\", \"Titania\", \"Titia\", \"Titiana\", \"Tivernee\", \"Tiyagar\", \"Tnin\", \"Tobias\", \"Tobis\", \"Todhunter\",\r\n    \"Tolbert\", \"Tolenka\", \"Topaz\", \"Topham\", \"Torc\", \"Tortbold\", \"Tosti\", \"Tosya\", \"Toulac\", \"Tovi\", \"Trafford\", \"Trebor\", \"Trelane\",\r\n    \"Trelawny\", \"Trella\", \"Trevel\", \"Trick\", \"Trigg\", \"Trill\", \"Triona\", \"Trir\", \"Tristam\", \"Tristan\", \"Trost\", \"Trotwood\", \"Trowbridge\",\r\n    \"Truesdell\", \"Tuane\", \"Tufnell\", \"Tugan\", \"Tuilleth\", \"Tulio\", \"Tulkas\", \"Tundine\", \"Tunstall\", \"Tuor\", \"Turan\", \"Turgoz\", \"Turhan\",\r\n    \"Turin\", \"Turpin\", \"Tuttle\", \"Tuula\", \"Twyla\", \"Tylden\", \"Tyldoran\", \"Tylen\", \"Tylien\", \"Tylynn\", \"Tymar\", \"Tymora\", \"Tymoriel\",\r\n    \"Tynnyn\", \"Tyr\", \"Tyra\", \"Tyranina\", \"Tyreen\", \"Tyrwhitt\", \"Uamian\", \"Ubriani\", \"Ucarsh\", \"Uda\", \"Uhier\", \"Uhlain\", \"Uhlume\",\r\n    \"Uholedil\", \"Uinen\", \"Ula\", \"Ulf\", \"Ulgor\", \"Ulis\", \"Uljas\", \"Ulji\", \"Ulmaerr\", \"Ulmo\", \"Ulosh\", \"Ulric\", \"Ulrich\",\r\n    \"Ultron\", \"Umaiar\", \"Umbar\", \"Umda\", \"Umgalad\", \"Una\", \"Uneitna\", \"Ungon\", \"Unius\", \"Unn\", \"Unrak\", \"Unwin\", \"Upal\",\r\n    \"Upton\", \"Urabi\", \"Urania\", \"Uranos\", \"Uranus\", \"Uriel\", \"Urish\", \"Urokoz\", \"Ursula\", \"Usher\", \"Uta\", \"Utumno\", \"Uusoae\",\r\n    \"Uvanimor\", \"Uziel\", \"Vabryn\", \"Vadarin\", \"Vadi\", \"Vaeddyn\", \"Vagn\", \"Vai\", \"Val\", \"Valadan\", \"Valandario\", \"Valandor\", \"Valarindi\",\r\n    \"Valborg\", \"Valda\", \"Valdain\", \"Valdemar\", \"Valen\", \"Valenka\", \"Valentia\", \"Valerand\", \"Valeria\", \"Valerian\", \"Valeska\", \"Valgar\", \"Valgard\",\r\n    \"Valgerd\", \"Valiah\", \"Valion\", \"Valisa\", \"Valiss\", \"Valistor\", \"Valkor\", \"Valla\", \"Vallo\", \"Valmar\", \"Valminder\", \"Valor\", \"Valsera\",\r\n    \"Valurian\", \"Valya\", \"Valynard\", \"Vandrad\", \"Vane\", \"Vanechka\", \"Vanidor\", \"Vanion\", \"Vannevar\", \"Vannyn\", \"Vanya\", \"Vanyar\", \"Vanyel\",\r\n    \"Varda\", \"Vardis\", \"Varina\", \"Varion\", \"Varken\", \"Varnum\", \"Vasava\", \"Vash\", \"Vasha\", \"Vasilii\", \"Vasin\", \"Vaydin\", \"Vaydir\",\r\n    \"Vayi\", \"Vecna\", \"Veda\", \"Veldahar\", \"Veldan\", \"Velex\", \"Velior\", \"Venable\", \"Vendor\", \"Veorcyn\", \"Vercyn\", \"Verdina\", \"Vereesa\",\r\n    \"Verline\", \"Vermund\", \"Verna\", \"Ves\", \"Vespar\", \"Vestein\", \"Veva\", \"Vevina\", \"Vexter\", \"Viasta\", \"Vicarr\", \"Vicat\", \"Vicentia\",\r\n    \"Viconia\", \"Victor\", \"Vida\", \"Vidkun\", \"Vidron\", \"Vieno\", \"Viera\", \"Vierna\", \"Vigdis\", \"Vigfus\", \"Vilhelm\", \"Vilka\", \"Vilrna\",\r\n    \"Vinatta\", \"Vincas\", \"Vincent\", \"Vintar\", \"Violet\", \"Vircyn\", \"Vishali\", \"Viveka\", \"Vladimir\", \"Vladislav\", \"Vlaric\", \"Vobur\", \"Voirath\",\r\n    \"Vokos\", \"Voldor\", \"Volkan\", \"Volney\", \"Volodya\", \"Volund\", \"Vonya\", \"Voranor\", \"Vrashin\", \"Vulpen\", \"Vurog\", \"Vusil\", \"Vyecheslav\",\r\n    \"Vyner\", \"Wadleigh\", \"Waenwryht\", \"Wager\", \"Waisham\", \"Waivan\", \"Wakeman\", \"Wakkar\", \"Walborg\", \"Walda\", \"Waldan\", \"Waldegrave\", \"Waldemar\",\r\n    \"Waleran\", \"Walford\", \"Walid\", \"Walker\", \"Wanhim\", \"Waring\", \"Wariv\", \"Wark\", \"Warne\", \"Warrender\", \"Warrigel\", \"Warwick\", \"Waryk\",\r\n    \"Watson\", \"Watt\", \"Waylan\", \"Wayland\", \"Waylon\", \"Wealin\", \"Wedlake\", \"Weilborn\", \"Weiryn\", \"Wel\", \"Wemick\", \"Wendolyn\", \"Wertha\",\r\n    \"Westcott\", \"Westen\", \"Weyrn\", \"Wharrom\", \"Whitwell\", \"Whyte\", \"Wicca\", \"Wideman\", \"Wightman\", \"Wildhair\", \"Wilfrid\", \"Wilhelm\", \"Wilhelmina\",\r\n    \"Wilibald\", \"Will\", \"Willa\", \"William\", \"Willock\", \"Willow\", \"Wilma\", \"Wilmar\", \"Wilner\", \"Wilven\", \"Windham\", \"Winfrey\", \"Winian\",\r\n    \"Winslow\", \"Winton\", \"Wisp\", \"Wisuth\", \"Wivianne\", \"Wizlow\", \"Woart\", \"Wodan\", \"Wolfgang\", \"Wolmar\", \"Womal\", \"Woodfin\", \"Woodruff\",\r\n    \"Wooligar\", \"Wortley\", \"Wotan\", \"Wulf\", \"Wulfgar\", \"Wulfric\", \"Wulgar\", \"Wychnor\", \"Wycliffe\", \"Wyllows\", \"Wyly\", \"Wynkyn\", \"Wynne\",\r\n    \"Wynston\", \"Wyvan\", \"Xaandria\", \"Xaath\", \"Xabian\", \"Xabiel\", \"Xabu\", \"Xain\", \"Xalthan\", \"Xan\", \"Xanaphel\", \"Xanathar\", \"Xander\",\r\n    \"Xandra\", \"Xandria\", \"Xanthon\", \"Xanthus\", \"Xarek\", \"Xarolith\", \"Xaver\", \"Xavier\", \"Xavin\", \"Xela\", \"Xelmonth\", \"Xena\", \"Xenia\",\r\n    \"Xenoba\", \"Xera\", \"Xercon\", \"Xerravin\", \"Xiombarg\", \"Xoncarg\", \"Xoran\", \"Xulan\", \"Xyas\", \"Xydra\", \"Xyko\", \"Xylah\", \"Xylia\",\r\n    \"Xymoya\", \"Xystus\", \"Xythrin\", \"Xytrin\", \"Yacima\", \"Yaheira\", \"Yahira\", \"Yaigin\", \"Yakov\", \"Yalan\", \"Yali\", \"Yalin\", \"Yalniz\",\r\n    \"Yamari\", \"Yana\", \"Yandell\", \"Yangin\", \"Yanira\", \"Yannul\", \"Yara\", \"Yaraia\", \"Yarali\", \"Yardim\", \"Yardley\", \"Yari\", \"Yarim\",\r\n    \"Yarin\", \"Yarir\", \"Yaritza\", \"Yartrina\", \"Yasimina\", \"Yasir\", \"Yasmina\", \"Yasser\", \"Yastar\", \"Yatay\", \"Yavana\", \"Yazihane\", \"Yelain\",\r\n    \"Yeni\", \"Yetne\", \"Yevgenii\", \"Yezade\", \"Ygerna\", \"Ygraine\", \"Yishana\", \"Ynryc\", \"Ynvar\", \"Yoda\", \"Yolanda\", \"Yondalla\", \"York\",\r\n    \"Yradry\", \"Yreoddyn\", \"Yrrkoon\", \"Yrsa\", \"Yrun\", \"Yryllyn\", \"Ysabel\", \"Ysgerryn\", \"Ysolde\", \"Yuri\", \"Yvain\", \"Yvette\", \"Yvonne\",\r\n    \"Yvyr\", \"Yénisar\", \"Yérusha\", \"Zabdiel\", \"Zacarias\", \"Zachary\", \"Zachris\", \"Zadock\", \"Zahara\", \"Zahra\", \"Zaidh\", \"Zalazar\", \"Zalbar\",\r\n    \"Zan\", \"Zandra\", \"Zanifa\", \"Zanthar\", \"Zara\", \"Zaranthe\", \"Zared\", \"Zarimarth\", \"Zarquan\", \"Zathras\", \"Zavel\", \"Zaviv\", \"Zay\",\r\n    \"Zazumel\", \"Zebalane\", \"Zebulon\", \"Zehir\", \"Zelda\", \"Zemenar\", \"Zenda\", \"Zendrac\", \"Zenith\", \"Zenobia\", \"Zenon\", \"Zepher\", \"Zephyr\",\r\n    \"Zerika\", \"Zerin\", \"Zeswick\", \"Zhalore\", \"Zhanna\", \"Zharvek\", \"Zhenya\", \"Zhirek\", \"Zhirem\", \"Zhoreb\", \"Zia\", \"Zigmal\", \"Zilar\",\r\n    \"Zinaida\", \"Zincir\", \"Zion\", \"Ziona\", \"Zircon\", \"Zirzihin\", \"Zita\", \"Zoe\", \"Zolabar\", \"Zoltan\", \"Zona\", \"Zora\", \"Zorashad\",\r\n    \"Zorayas\", \"Zorlan\", \"Zosia\", \"Zotar\", \"Zumurrud\", \"Zurrog\", \"Zykhiralamshad\"];\r\n  makeArrays();\r\n}",
                        "onModelContext": "const modifier = (text) => {\r\n  const lowered = text.toLowerCase();\r\n  let stop = false;\r\n\r\n  if (state.shouldStop) {\r\n    state.shouldStop = false;\r\n    stop = true;\r\n  }\r\n\r\n  // BEGIN Encounters\r\n  // for mashing with other context scripts, keep this codeblock before 'const contextMemory'\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    memoryLoop:\r\n    for (encounterMemory of state.encounterMemories) {\r\n      // take care to not overload memory, unless forced:\r\n      if (!encounterMemory.memoryGreed && (encounterMemory.memoryText.length + memory.length) > 1000) {\r\n        console.log(`Non-greedy encounterMemory too long, not inserting it!`)\r\n        continue memoryLoop\r\n      }\r\n      state.memory.context = memory\r\n      if (encounterMemory.memoryLocation == 'bottom') {\r\n        state.memory.context = `${state.memory.context}\\n${encounterMemory.memoryText}`\r\n      } else if (encounterMemory.memoryLocation == 'top') {\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      } else {\r\n        console.log(`No memoryLocation defined for '${encounterMemory.memoryText}', defaulting to 'top'.`)\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      }\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : ''\r\n  const context = info.memoryLength ? text.slice(info.memoryLength + 1) : text\r\n  const lines = context.split(\"\\n\")\r\n\r\n  // BEGIN Encounters\r\n  // for mashing with other context scripts, keep this between 'const lines' and 'const combinedLines'\r\n  if (typeof (state.currentEncounter) !== 'undefined') { // if there's an event...\r\n    lines.splice(-3, 0, state.encounterNote) // ...put it right below AN, so AI knows what's up\r\n  }\r\n  // END Encounters\r\n\r\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength));\r\n  const finalText = [contextMemory, combinedLines].join(\"\");\r\n  return { text: finalText, stop: stop };\r\n}\r\n\r\nmodifier(text);"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1620797",
                "publicId": "98aae120-8ec1-11eb-98c3-49d95a5f8011",
                "published": true,
                "title": "Custom prompt",
                "description": "This is a scenario that lets you create your own character and use a custom prompt. You may start wherever you want. Be mindful of World Info, and only start in major cities so they actually work. Use only second person to play this scenario, or else it will break.",
                "tags": [],
                "createdAt": "2021-03-27T05:59:30.611Z",
                "updatedAt": "2021-04-07T23:31:08.811Z",
                "memory": "",
                "authorsNote": "[Genre: fantasy] [Writing style: narrative, roleplaying, gothic]",
                "mode": "creative",
                "prompt": "Your name is [${character.name}], and you are a [${Enter your character's gender...}] [${Choose a race: Altmer (High Elf), Bosmer (Wood Elf), Dunmer (Dark Elf), Orsimer (Orc), Nord, Imperial, Breton, Khajiit, Argonian or Redguard}] [${Choose a class: Mage, Warrior, Ranger, Peasant, Thief, Assassin}] that has just arrived in the city of Whiterun. You are [${Enter your age...}] years old, and your personality traits are: [${Enter your personality traits separated by commas...}]. You eyes are [${Enter your eye color...}], and your hair is of the style [${Enter your hair style...}] and of color [${Enter your hair color...}]. You are [${Enter your height in centimeters...}] centimeters tall, and you weigh [${Enter your weight in kilos...}] kg. Your physical features are: [${Enter your physical features...}].\n\n---------------------------------------\n\n${Type a prompt to start the game. For example: \"You are a knight in the city of Whiterun, coming here for work....}",
                "quests": [],
                "worldInfo": [
                        {
                                "id": "0.745118808720757",
                                "keys": "Ungvid,Jarl of Winterhold,Ruler of Winterhold",
                                "entry": "[ Ungvid description:< name ≡ Ungvid / Jarl Ungvid>/< age  ≡ 62y>/< ♂>/<race ≡ Nord>. Ungvid appearance:< body ≡ 179cm_height/ 65kg_weight/ slim/ slender/ full beard/ long hair/ dark blonde hair>. Ungvid mental:< stubborn/ serious/ arrogant/ prepotent/ pretentious>. Ungvid moniker:< Ruler of Winterhold>. Ungvid traits:< arrogant/ pretentious/ stubborn>. Ungvid speech:< harsh& deep voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.47441051249600963",
                                "keys": "Yolanda,Jarl of Whiterun,Ruler of Whiterun",
                                "entry": "[ Yolanda description:< name ≡ Yolanda/ Jarl Yolanda>/< age ≡ 30y>/< ♀>/<race ≡ Nord>. Yolanda appearance:< body ≡ slim/ 178cm_height/ 50kg_weight/ blonde hair/ blue eyes/ small breasts>. Yolanda mental:< party animal& happy& likes the nightlife& likes having fun& fools around>. Yolanda moniker:< Ruler of Whiterun>. Yolanda traits:< naughty/ dirty/ manipulative>. Yolanda speech:<sweet voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.21837675048437033",
                                "keys": "Argo,Jarl of Riften,Jarl of the Rift,Ruler of Riften,Ruler of the Rift",
                                "entry": "[Argo description:< name ≡ Argo / Jarl Argo>/< age  ≡ 57y>/< ♂>/<race ≡ Nord>. Argo appearance:< body ≡ 180cm_height/ 90kg_weight/ slim/ shaved beard/ bald head>. Argo mental:< arrogant& pedantic& self-righteous& tightly wound>. Argo moniker:< Ruler of the Rift/ Ruler of Riften>. Argo traits:< arrogant& pedantic& self-righteous>. Argo speech:< harsh& deep voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.2826822841965928",
                                "keys": "Vrage,Vrage the Gifted,King of Skyrim,High King of Skyrim,Jarl of Haafingar,Jarl of Solitude,Ruler of Haafingar,Ruler of Solitude,Ruler of Skyrim",
                                "entry": "[ Vrage description:< name ≡ Vrage / High King Vrage/ King Vrage/ Jarl Vrage/ Vrage the Gifted>/< age ≡ 42y>/< ♂>/<race ≡ Nord>. Vrage appearance:< body ≡ 198cm_height/ 80kg_weight/ tall/ muscular/ fair skin/ brown hair/ full beard>. Vrage mental:< assertive/ strong/ good leader/ loyal>. Vrage moniker:< High King of Skyrim/ King of Skyrim>. Vrage traits:< good leader/ loyal>. Vrage speech:< deep voice& heavy nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.456758676983456345758",
                                "keys": "Uror,Ruler of Falkreath,Jarl of Falkreath",
                                "entry": "[    Uror description:< name ≡ Uror / Jarl Uror/< age ≡ 55y>/< ♂>/<race ≡ Nord>.   Uror appearance:< body ≡ 180cm_height/ 75kg_weight/ tall/ muscular body/ red beard and hair>.   Uror mental:< courageous/ brave/ good humored/ optimistic/ intelligent/ talkative/ stubborn>.    Uror moniker:< Ruler of Falkreath>.    Uror traits:< courageous/ brave/ good humored>.    Uror speech:< deep voice& thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.9765384539248597",
                                "keys": "Katariah,Empress of Cyrodill,Empress of Tamriel,the Empress,the Emperor,Emperor of Tamriel,the Emperor",
                                "entry": "[  Katariah description:< name ≡ Katariah / Empress Katariah/ Katariah Ra'athim>/< age ≡ 38y>/< ♀>/<race ≡ Dunmer>. Katariah appearance:< body ≡ 170cm_height/ 40kg_weight/ slim/ slender/ hair< long& black>/ red eyes/ dark grey skin>. Katariah mental:< just/ smart/ clever/ fair/ happy/ calm>.  Katariah moniker:< Empress& Emperor of Cyrodiil& Tamriel>.  Katariah traits:< just/ smart/ clever/ fair/ happy>.  Katariah speech:< harsh& sweet& calm voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.6754768658567867",
                                "keys": "Atmor,Ruler of Eastmarch,Jarl of Eastmarch,Ruler of Windhelm,Jarl of Windhelm",
                                "entry": "[  Atmor description:< name ≡ Atmor / Jarl Atmor/< age ≡ 48y>/< ♂>/<race ≡ Nord>.  Atmor appearance:< body ≡ 180cm_height/ 75kg_weight/ tall/ muscular/ fit/ short dark blond hair>.  Atmor mental:< grumpy,sarcastic,hopeful,curious>.  Atmor moniker:< Ruler of Eastmarch& Windhelm>.  Atmor traits:< grumpy/ sarcastic/ hopeful/ curious>.  Atmor speech:< thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.498746768876574541654654",
                                "keys": "Bolgeir,Ruler of Markarth,Jarl of Markarth,Ruler of the Reach,Jarl of the Reach",
                                "entry": "[ Bolgeir description:< name ≡ Bolgeir / Jarl Bolgeir/< age ≡ 73y>/< ♂>/<race ≡ Nord>.  Bolgeir appearance:< body ≡ 174cm_height/ 70kg_weight/ tall/ muscular/ reddish hair/ beard>.  Bolgeir mental:< very brave and bold, rather arrogant, a natural leader>.  Bolgeir moniker:< Ruler of the Reach& Markarth>.  Bolgeir traits:< natural leader& very brave and bold>.  Bolgeir speech:< thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.57632498934634",
                                "keys": "Dagny,Ruler of the Pale,Jarl of the Pale,Ruler of Dawnstar,Jarl of Dawnstar",
                                "entry": "[  Dagny description:< name ≡ Dagny / Jarl Dagny/< age ≡ 58y>/< ♀>/<race ≡ Nord>.  Dagny appearance:< body ≡ 159cm_height/ 40kg_weight/ tall/ muscular/ fit/ short dark blond hair>.  Dagny mental:< courageous/ fearless/ brave/ friendly/ optimistic/ determined>.  Dagny moniker:< Ruler of Dawnstar& the Pale>.  Dagny traits:< friendly& optimistic>.  Dagny speech:< thick nord accent>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.76858732657834643564357",
                                "keys": "Thora,Ruler of Hjaalmarch,Jarl of Hjaalmarch,Ruler of Morthal,Jarl of Morthal",
                                "entry": "[  Thora description:< name ≡ Thora / Jarl Thora/< age ≡ 58y>/< ♂>/<race ≡ Nord>.  Thora appearance:< body ≡ 185cm_height/ 62kg_weight/ tall/ muscular/ athletic body/ blonde hair/ blue>.  Thora mental:< brave/ courageous/ strong-willed/ fearless/ adventurous/ determined>.  Thora moniker:< Ruler of Morthal& Hjaalmarch>.  Thora traits:< courageous/ strong-willed>.  Thora speech:< sweet voice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.3364947531043463",
                                "keys": "skyrim, province of skyrim, land of the nords, home of the nords",
                                "entry": " Skyrim:[ CLIMATE< Skyrim>: snowy and freezing to the north/ temperate and warm to the south/ tundras to the west/ deep woods to the south/ grasslands in the center/ temperate to the east; GEOGRAPHY< Skyrim>: mountainous/ full of valleys/ rivers/ forests/ woods/ wildlife; DESC< Skyrim>: The current ruler& high king of skyrim is Vrage. Homeland of the nords/ province of the empire/ high king is the title of the ruler/ solitude is the capital city/ is divided into nine holds/ each hold is governed by a jarl/ jarl is the ruler of a hold.]",
                                "hidden": false
                        },
                        {
                                "id": "0.4958877490012459",
                                "keys": "Whiterun Hold",
                                "entry": " Whiterun Hold:[ CLIMATE< Whiterun Hold>: temperate/ warm; GEOGRAPHY< Whiterun Hold>: grassy tundras/ white river/ open fields; DESC< Whiterun Hold>: The current ruler& jarl of whiterun is Yolanda. Whiterun Hold is the centermost hold of Skyrim/ being located right in the middle of the province. It borders the Rift/ the Pale/ Falkreath and Hjaalmarch. It is home to the ancient town of Rorikstead/ as well as the small town of Riverwood. The city of Whiterun is the capital of the hold/and is known as the economic capital of Skyrim due to its proximity to the Cyrodiil border.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8858901310060372",
                                "keys": "Whiterun,Whiterun City,City of Whiterun",
                                "entry": " Whiterun:[ CLIMATE< Whiterun>: temperate/ warm; GEOGRAPHY< Whiterun>: on top of a hill/ big city; DESC< Whiterun>: The current ruler& jarl of whiterun is Yolanda. Whiterun is one of the richest cities in Skyrim/ and one of the oldest. It is located in the Whiterun Hold/ and is known for Jorrvaskr and the Skyforge/ both locations being known from ancient times/ in the Merethic Era when Ysgramor himself arrived in Tamriel. It is also known for Dragonsreach/ the city castle and Jarl's palace. Dragonsreach was built to trap dragons/ and there is the skull of a dragon on top the Jarl's throne. The city is divided into three districts: the Plains District/ where commerce is located/as well as the inn and the market square. The Winds District/ where houses and the temple are located/ as well as the entrance to Jorrvaskr and the Skyforge. The Cloud District/ where Dragonsreach is located.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5565239795951209",
                                "keys": "the rift,rift hold",
                                "entry": " The Rift:[ CLIMATE< The Rift>: temperate/ warm/ sunny; GEOGRAPHY< The Rift>: temperate woods/ grasslands/ mountainous; DESC< The Rift>: The current ruler& jarl of the Rift is Argo. The rift is a beautiful place/ a warm place/ mountainous/ home to lake honrich/ the capital of the rift is riften/ yellow and beautiful trees/ beautiful lake/ beautiful sights/ jerall mountains to the south/ velothi mountains to the east/ borders morrowind to the east/ borders cyrodiil to the south.]",
                                "hidden": false
                        },
                        {
                                "id": "0.29560338203552283",
                                "keys": "riften,city of riften",
                                "entry": " Riften:[ CLIMATE< Riften>: temperate/ warm/ sunny; GEOGRAPHY< Riften>: temperate woods/ grasslands/ mountainous/ fishing port at lake honrich; DESC< Riften>: The current ruler& jarl of Riften is Argo. Riften is a beautiful fishing city/ a big city/ capital of the rift/ capital of the rift hold/ the mad mammoth is the local inn/ the mad mammoth is the local tavern/ the city is dedicated to the goddess mara/ the temple of mara is located in riften.]",
                                "hidden": false
                        },
                        {
                                "id": "0.7557881723928688",
                                "keys": "winterhold, city of winterhold, winter hold",
                                "entry": " Winterhold:[ CLIMATE< Winterhold>: polar/ cold/ freezing/ snowy; GEOGRAPHY< Winterhold>: rocky/ mountainous/ frozen mountains/ coastal; DESC< Winterhold>: The current ruler& jarl of Winterhold is Ungvid. Winterhold is a cold place/ full of mountains/ home to the college of winterhold/ fronzen hearth is the local inn/ frozen hearth is the local tavern/ sea of ghosts to the north/ jarl is the title of the ruler.]",
                                "hidden": false
                        },
                        {
                                "id": "0.465198479866984165",
                                "keys": "Falkreath,Falkreath Hold",
                                "entry": " Falkreath:[  CLIMATE< Falkreath>: temperate/ sunny/ rainy/ rainforest climate;  GEOGRAPHY< Falkreath>: Falkreath lies in the southern forests of Skyrim, on a strategic crossroad in the middle of its respective hold and the provincial border towards Hammerfell's wilder country, the Dragon's Teeth Mountains, and with Cyrodiil through the Pale Pass in the Jerall Mountains. Home of Skyrim's famous Pine Forest, Falkreath Hold is covered in a fine mist that makes the land seem without season. It borders the Skyrim holds of Whiterun, the Reach and the Rift.; DESC< Falkreath>: Uror is the current Jarl of Falkreath. It is a city that is heavily reliant to the lumber industry, due to the abundance of resources around them.; ]",
                                "hidden": false
                        },
                        {
                                "id": "0.65374578856786794567456437",
                                "keys": "the reach",
                                "entry": " The Reach:[  CLIMATE< The Reach>: temperate/ sunny/ warm/ hot;  GEOGRAPHY< The Reach>: Near the southwestern corner, the capital Markarth, formerly a Dwemer stronghold, emerges from the living rock of the Druadach Mountains, which transition into the Jerall Mountains near the hold's southeast corner. The Karth River begins in the southern region and drains the mountains, running like a deep gouge through the middle of the hold called the Karth River Canyon. The peaks of the Druadach range lie to the west of it, and high bluffs typically rise on the east leading to grassland and tundra;  DESC< The Reach>: Bolgeir is the current Jarl of the Reach. The Reach is the westernmost hold of Skyrim, bordering the provinces of Cyrodiil, Hammerfell and High Rock. It is a vast tundra made of grasslands, and is famous because the Karth River begins here before passing through Haafingar and connecting to the See of Ghosts in the north. The native people of the Reach are known as Reachmen.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.48569468597795675",
                                "keys": "markarth,city of stone,markarth side",
                                "entry": " Markarth:[  CLIMATE< Markarth>: temperate/ sunny/ warm/ hot;  GEOGRAPHY< Markarth>: Nestled in the river valley of the Druadach Mountains. It is unique in that the city's layout is intricately built into the mountain of Karthmad, dividing the city into two districts. The northern end, Dryside has streets that ascend above each other with well-refined homes, below the main square and marketplace where the populace tend to congregate. The city's southern end is the Riverside, the basin populated by the lower-class and the bustling silver mines. These districts meet each other at either end of the city, at the main gates on the east side, while on the west side, they ascend high towards the top of the crag and at Understone Keep, which contains the Mournful Throne, the seat of power in the Reach.; DESC< Markarth>: Bolgeir is the current Jarl of Markarh. Markarth is one of the nine major cities in the province of Skyrim, found in the river valley of the Reach. Known colloquially as the Ci",
                                "hidden": false
                        },
                        {
                                "id": "0.984516878451",
                                "keys": "the pale",
                                "entry": "The Pale:[  CLIMATE< The Pale>: cold& snowy/ freezing;  GEOGRAPHY< The Pale>: It stretches from the center of Skyrim all the way to its Northern Coast. Dominated by ice fields and glacial deposits, especially along its northern shore, some scattered ragged peaks, snow-covered ground, and little sunshine means most of the Nords congregate at the city of Dawnstar, a popular port and mining town.The Pale lacks waterways, save for Lake Yorgrim, located in the southeastern corner of the Hold.;  DESC< The Pale>: Dagny is the current Jarl of the Pale. The Pale, named for the pallid Tundra and pigmentation of its Nord inhabitants, is one of the four oldest Holds in Skyrim. The harsh environment here makes life a chore rather than a joy, and the shape of the Hold has led some to refer to it as “the old boot.”;]",
                                "hidden": false
                        },
                        {
                                "id": "0.1654984165468746878945123546854745311234",
                                "keys": "dawnstar",
                                "entry": " Dawnstar:[  CLIMATE< Dawnstar>: cold& snowy/ freezing;  GEOGRAPHY< Dawnstar>: The city has two mines, Iron-Breaker Mine and Quicksilver Mine, which supply iron and quicksilver respectively. It is home to many fishermen and is an important port.;  DESC< Dawnstar>: Dagny is the current Jarl of Dawnstar. Dawnstar is a settlement on the northern coast of Skyrim, and the hold capital of the Pale. t was once a garrison town, which served as an exile post due to the cold harsh climate and notorious gales. The settlement seemingly got its name due to its reputation for greeting the sun as it begins its journey.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.465167984",
                                "keys": "Hjaalmarch",
                                "entry": " Hjaalmarch:[  CLIMATE< Hjaalmarch>: temperate/ warm/ hot;  GEOGRAPHY< Hjaalmarch>: Roughly half the hold consists of the Drajkmyr marsh, although some farms dot the tundra. The region is veined with waterways that empty into the Sea of Ghosts, and the Skyborn Range further isolates the area from the east and southern border. Hjaalmarch is home to the Karth delta where the mighty Karth River and the smaller River Hjaal empty into the Sea of Ghosts through a variety of intricate channels.  The Deathbell flower is known to be abundant throughout the swamps.;  DESC< Hjaalmarch>: Thora is the current Jarl of Hjaalmarch. Hjaalmarch, or Hjaalmarch Hold, is a lowland coastal hold in Skyrim. Morthal is the capital and the only settlement in the hold. Combined with the fog that surrounds the marshes and the creatures that stalk the land (Wispmothers purportedly originated here), Hjaalmarch is considered one of the more mysterious holds in Skyrim. Many ruins dot the hold, including the legendary",
                                "hidden": false
                        },
                        {
                                "id": "0.65849879/84541",
                                "keys": "morthal",
                                "entry": " Morthal:[  CLIMATE< Morthal>: temperate/ warm/ hot;  GEOGRAPHY< Morthal>: swamps, rivers, marsh;  DESC< Morthal>: Thora is the current Jarl of Morthal. Morthal, supposedly named after the great Nord hero Morihaus, is the capital of Hjaalmarch, although it is a fairly small, humble town of little economic or strategic importance besides its small lumber mill. The town's symbol is a green triskelion.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.97894615",
                                "keys": "eastmarch",
                                "entry": " Eastmarch:[  CLIMATE< Eastmarch>: freezing cold in the north/ temperate and warm in the south near the water springs;  GEOGRAPHY< Eastmarch>: Darkwater River winds north from Lake Geir into this treacherous hot spot, where it meets the White River which then drains into the Sea of Ghosts as it passes Windhelm. The Skyrim part of the Velothi mountains are in Eastmarch.  Windhelm is the only sizable city in the otherwise rural province due to the expansive hot springs which dominate the hold.;  DESC< Eastmarch>: Atmor is the current Jarl of Eastmarch. Eastmarch is the eastern hold of Skyrim, and one of the four known collectively as the Old Holds. As its name suggests, it lies against the province's eastern border, close to the Dunmeth Pass, the only passage to and from Morrowind in the area due to the high and rugged Velothi Mountains.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.587486516",
                                "keys": "windhelm",
                                "entry": " Windhelm:[  CLIMATE< Windhelm>: cold/ freezing/ snowy;  GEOGRAPHY< Windhelm>: city build from stone, its entrance bridge above the White River;  DESC< Windhelm>: Atmor is the current Jarl of Windhelm. Windhelm is a city in northeastern Skyrim, close to the border with Morrowind, and is the only substantial city in the Hold of Eastmarch. It is not only the oldest city in Skyrim, but is the oldest continuously inhabited human settlement in Tamriel.Windhelm was once the capital of the First Empire of the Nords and the old palace of the Ysgramor dynasty, the Palace of the Kings, still stands in the center of the city.;]",
                                "hidden": false
                        },
                        {
                                "id": "0.5297422967695256",
                                "keys": "Haafingar,haafingar hold",
                                "entry": "Haafingar:[CLIMATE<Haafingar>:temperate and warm and sunny to the south/cold to and frozen to the north;GEOGRAPHY<Haafingar>:mountainous/karth river cuts the hold and goes out in the sea of ghosts to the north/kilkreath mountain/druadach mountains;DESC<Haafingar>:haafingar is currently the imperial seat in skyrim/solitude is the capital city of haafingar/solitude is the capital of skyrim/dragon bridge is a settlement south of solitude/the kilkreath temple is a temple dedicated to the daedric prince meridia/kilkreath temple has a huge statue of meridia/kilkreath temple is south of solitude/haafingar borders high rock to the west.]",
                                "hidden": false
                        },
                        {
                                "id": "0.059520193664433174",
                                "keys": "solitude,city of solitude",
                                "entry": "Solitude:[CLIMATE<Solitude>:temperate and warm and sunny to the south/cold to and frozen to the north;GEOGRAPHY<Solitude>:mountainous/karth river cuts the hold and goes out in the sea of ghosts to the north/kilkreath mountain/druadach mountains;DESC<Solitude>:solitude is a big city/solitude is the capital of skyrim/solitude has a huge keep called castle dour/solitude has the biggest temple in skyrim that is dedicated to the nine divines/the seat of the king in solitude is the blue palace/solitude is located on top of a huge stone arch/solitude port is the most important port in skyrim and goes out to the sea of ghosts/the east empire company headquarters in skyrim is located in solitude.]",
                                "hidden": false
                        },
                        {
                                "id": "0.7072372796081579",
                                "keys": "gods, the gods, divines, nine divines",
                                "entry": "The Nine Divines:[TYPE<The Nine Divines>:religion;DESC<The Nine Divines>:the eight divines is the official pantheon of the empire. it worships the eight gods related to creation. these gods are  Akatosh/Arkay/Dibella/Julianos/Kynareth/Mara/Stendarr/Talos/and Zenithar..]",
                                "hidden": false
                        },
                        {
                                "id": "0.6041881392204211",
                                "keys": "akatosh,alkosh,auriel,auri-el",
                                "entry": "[ Akatosh description:< name ≡ Akatosh/ Alkosh/ Auri-El>/< age ≡ as old as time>/< gender ≡ genderless>.  Akatosh appearance:< body ≡ scaly/ big dragon>.  Akatosh mental:< benevolent& good& cryptic& mystic& insane>.  Akatosh occupation:< god of time/ chief god of the divines/ chief god of the imperial pantheon>.  Akatosh SUMM:< Akatosh is the dragon god of time, and the chief god in the Imperial Pantheon of the Divines. He is an Aedra. He is usually depicted as a dragon, and appears in all Tamrielic religions, though sometimes with different names>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.794449885354221",
                                "keys": "Arkay,Ark'ay,Lord of the Wheel of Life",
                                "entry": "Arkay:[TYPE<Arkay>:god;SPHERE<Arkay>:life and death/burials and funerals;DESC<Arkay>:Arkay is the god of burials and funeral rites/and is generally associated with cyclical occasions/such as the seasons and life and death. His priests are staunch opponents of necromancy and all forms of the undead/and are empowered to bestow Arkay's blessings which prevent the forceful misuse of a mortal soul. Thus/any body properly buried by a priest observing the proper rituals is protected by Arkay's Law from being raised as undead.Therefore/necromancers view Arkay as their ultimate enemy/and make covert efforts to undermine his worship throughout Tamriel. Because of this association with/and protection of/mortality/he is sometimes called the Mortals' God..]",
                                "hidden": false
                        },
                        {
                                "id": "0.8297917578640153",
                                "keys": "Dibella,Passion Dancer,Our Blessed Lady",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/love and affection;DESC<Dibella>:Dibella is the Goddess of Beauty/Love/and Affection. She is also acclaimed as the Lady of Love/Beauty/Art/and Music. Dibella is the Queen of Heaven/and is one of the Divines..]",
                                "hidden": false
                        },
                        {
                                "id": "0.06898112900599718",
                                "keys": "Julianos",
                                "entry": "Julianos:[TYPE<Julianos>:god;SPHERE<Julianos>:wisdom and logic;DESC<Julianos>:Julianos is one of the Divines/governing the realms of literature/law/history/and contradiction. He is usually associated with magic/and thus is often revered by wizards..]",
                                "hidden": false
                        },
                        {
                                "id": "0.8450550691624958",
                                "keys": "Kynareth ",
                                "entry": "Kynareth :[TYPE<Kynareth >:god;SPHERE<Kynareth >:heavens/the winds/the elements/and the unseen spirits of the air;DESC<Kynareth >:Kynareth is the goddess of the heavens/the winds/the elements/and the unseen spirits of the air. She is a member of the Divines and Patron of sailors and travelers. Kynareth is often invoked for auspicious stars at birth and for good fortune in daily life. In some legends/she is the first to agree to Lorkhan's divine plan to create the mortal plane/and provides the space in the void for its creation. Furthermore/she is associated with rain/a phenomenon that is said not to have occurred before the removal of Lorkhan's divine spark..]",
                                "hidden": false
                        },
                        {
                                "id": "0.11128933049439915",
                                "keys": "Mara,Mother Mara, Mother Mild",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love/fertility/compassion and agriculture;DESC<Mara>:Mara/also known as Mother Mara/Mother Mild/and the Divine Mother/is the Goddess of Love/Fertility/Agriculture/and Compassion. She is also acclaimed as the Mother-Goddess/and is one of the Divines..]",
                                "hidden": false
                        },
                        {
                                "id": "0.43928152447985225",
                                "keys": "Stendarr",
                                "entry": "Stendarr:[TYPE<Stendarr>:god;SPHERE<Stendarr>:mercy/charity/luck;DESC<Stendarr>:Stendarr/also known as Stendarr the Steadfast/is the God of Mercy/Charity/Well-Earned Luck/and Justice. He is also acclaimed as the God of Compassion/and Righteous Rule by Might and Merciful Forbearance. Stendarr is the Apologist of Men/patron of the Imperial Legion/magistrates/rulers/and knights errant/and one of the Divines..]",
                                "hidden": false
                        },
                        {
                                "id": "0.8211141194493385",
                                "keys": "Zenithar,Z'en,Provider of our Ease",
                                "entry": "Zenithar:[TYPE<Zenithar>:god;SPHERE<Zenithar>:Work and Commerce;DESC<Zenithar>:Zenithar/the God of Work and Commerce/the Provider of our Ease/is one of the Divines. The Trader God is frequently seen as the same deity as the Bosmeri god Z'en. In the Empire/however/Zenithar is considered a more cultivated god of merchants and middle nobility/being the deity of wealth/labor/commerce and communication..]",
                                "hidden": false
                        },
                        {
                                "id": "0.09888611188658047",
                                "keys": "Talos,Stormcrown,Ysmir,Dragon of the North",
                                "entry": "Talos:[TYPE<Talos>:god;SPHERE<Talos>:mankind/war/strength;DESC<Talos>:Talos is the most important hero-god of Mankind. In his mortal form/known as Tiber Septim/he conquered all of Tamriel and ushered in the Third Era (and the Third Empire). After death/his spirit ascended to the heavens to become the ninth and youngest divine/under the name given to him by the Nords: Talos. Also called Ysmir/'Dragon of the North'. One of the Nine Divines. Less prominent sects/such as the Talos Cult/have been inspired by his apotheosis..]",
                                "hidden": false
                        },
                        {
                                "id": "0.9530940012940066",
                                "keys": "nord religion,acient nord religion,traditional nord religion",
                                "entry": "Nord Religion:[TYPE<Nord Religion>:religion;DESC<Nord Religion>:The Ancient Nords worshiped Totems/that became gods with their own names after Ysgramor came back to Skyrim. Each of these Totems became a god of the nord pantheon. These animals were there the Snake/the Hawk/the Dragon/the Fox/the Whale/the Owl/the Bear/the Wolf and the Moth. Just by listening to which animals the nords worshiped/you might be able to guess which gods they represent..]",
                                "hidden": false
                        },
                        {
                                "id": "0.989329231849934",
                                "keys": "jhunal",
                                "entry": "Jhunal:[TYPE<Jhunal>:god;SPHERE<Jhunal>:knowledge/widsom/mathematics;DESC<Jhunal>:Jhunal is represented by the Owl. He is the Rune God/and represents language/mathematics/knowledge and wisdom. He became Julianos in the Imperial Pantheon/and orders dedicated to him became keepers of the Elder Scrolls..]",
                                "hidden": false
                        },
                        {
                                "id": "0.7248995633897974",
                                "keys": "kyne",
                                "entry": "Kyne:[TYPE<Kyne>:god;SPHERE<Kyne>:storms/mother god/wind;DESC<Kyne>:Kyne is the Hawk/and is out goddess of storms/the mother of all Nords. Kyne created the Nords atop the Snow Throat/and sent us to Altmora to fight against the elves. She is the wife of Shor/the nord Chief of Gods. With her aid/the Nords of old managed to learn to speak as dragons The Tongues and the Greybeards were created with her and because of her/to fight against the tyranny of Alduin. The Thu'um spoken by the dragons is roughly translated to Tamrielic as \"Storm Voice\"/in a reference to her. | Even the dragons acknowledge her/and call her Kaan. When Nords die/Kyne leads us to rest in Sovngarde..]",
                                "hidden": false
                        },
                        {
                                "id": "0.022990195127124524",
                                "keys": "orkey",
                                "entry": "Orkey:[TYPE<Orkey>:god;SPHERE<Orkey>:death;DESC<Orkey>:Orkey is the Snake/and is the God of Death. He is a Testing God. Nords used to live as long as elves in the times of old. Orkey summoned Alduin/and the lifespan of the nords was eaten down to six years old/or \"bound them to the count of winters\" as the saying goes. High King Ysmir Wulfharth/who was turned into a boy/pleaded to Shor for help. Shor fought Alduin in Sovngarde/just as he did before Time had begun/and won the battle. | Most of the curse was thrown onto the nearby Orcs who worshiped Orkey as their patron. It was during this battle that Ysmir learned to use the Thu'um. Unfortunately/this battle cost his life. | In the Imperial Pantheon/Orkey became Arkay/the God of Life..]",
                                "hidden": false
                        },
                        {
                                "id": "0.3151155897995812",
                                "keys": "shor",
                                "entry": "Shor:[TYPE<Shor>:god;SPHERE<Shor>:humankind/chief god;DESC<Shor>:Shor is the Fox/and is the Chief God of the nord pantheon. He's the husband of Kyne/and is the patron of mankind. The old Imperial religion knows him as Shezarr/while Bretons call him Sheor. He might also be known as Doom Drum/Sep/Lorkhan/Lorkh and Lorkhaj by other races. Shor/Stuhn and Tsun led the Nords against the elven armies of Auri-El and Trinimac in Atmora/in a war known as the War of Manifest Metaphors. After the war ended/the Nords settled there. This led to the death of Shor and Tsun. Trinimac tore out Shor's heart and hid it from the Nords/so the nords would never get their Chief God back..]",
                                "hidden": false
                        },
                        {
                                "id": "0.06384271959154919",
                                "keys": "mara",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love;DESC<Mara>:Mara is the Wolf. She's the goddess of love/and is the handmaiden of Kyne. When Alessia took the Nord Pantheon and modified it/she kept Mara as the goddess of love. But for the Empire/she is a matron goddess. The Nords know her as Kyne's handmaiden..]",
                                "hidden": false
                        },
                        {
                                "id": "0.03891031103246201",
                                "keys": "dibella",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/art/music;DESC<Dibella>:Dibella is the Moth/and she represents beauty/art and music. Some claim she was the mistress of Shor/but some believe that to be heresy. She is still worshiped in the Empire/but some places think her cult to be vulgar and inappropriate. That is also heresy to some..]",
                                "hidden": false
                        },
                        {
                                "id": "0.3226602575939199",
                                "keys": "tsun",
                                "entry": "Tsun:[TYPE<Tsun>:god;SPHERE<Tsun>:adversity;DESC<Tsun>:Tsun is the Bear/and is the God of Adversity. He died during the War of Manifest Metaphors while protecting Shor/and his death is remembered as the beginning of the current world. He guards the Whalebone Bridge in Sovngarde/and only lets those worthy to pass the bridge and go into the Hall of Valor. He had great respect for magic/and was a master of the Voice..]",
                                "hidden": false
                        },
                        {
                                "id": "0.08577198333505698",
                                "keys": "Stuhn",
                                "entry": "Stuhn:[TYPE<Stuhn>:god;SPHERE<Stuhn>:random/justice;DESC<Stuhn>:Stuhn is the Whale/and is the God of Ransom and Justice. He was the shield-thane of Shor/and brother of Tsun. He fought in the war against the ancient elves in Altmora/but lost his brother Tsun in the process. In the Imperial Pantheon/he became Stendarr..]",
                                "hidden": false
                        },
                        {
                                "id": "0.8639915656760206",
                                "keys": "karth river",
                                "entry": "Karth River:[TYPE<Karth River>:river;LOCATION<Karth River>:haafingar/the reach;DESC<Karth River>:the karth river is a big river that starts in the reach and empties in haafingar/into the sea of ghosts. The Karth is well-known for its violent rapids and the dangerous terrain/such as jutted sharp stones and the crashing torrents on the river valley. But despite this/the Karth River provides a wealth of resource and life to the local people..]",
                                "hidden": false
                        },
                        {
                                "id": "0.13894551310988978",
                                "keys": "white river",
                                "entry": "White River:[TYPE<White River>:river;LOCATION<White River>:whiterun hold/eastmarch/falkreath;DESC<White River>:The White River is the longest river in Skyrim/stretching from the south of the province to the northeast corner. Its source is Lake Ilinalta/north of Falkreath. It flows northeast to join the Sea of Ghosts past Windhelm. Along the way/it passes through Riverwood and near Whiterun..]",
                                "hidden": false
                        },
                        {
                                "id": "0.5164146546794",
                                "keys": "Lake Geir",
                                "entry": " Lake Geir: {  < Lake Geir is a lake in the western Rift. Ivarstead is built on its western shores>,  < The lake is fed by Treva River and is drained by Darkwater River>,  < It is named after Archmage Geirmund, a First Era wizard who died nearby in a duel with Sigdis Gauldurson, the son of Archmage Gauldur>,  < A tomb for the Archmage can still be found on the largest island in the lake> }",
                                "hidden": false
                        },
                        {
                                "id": "0.5645",
                                "keys": "Lake Ilinalta",
                                "entry": " Lake Ilinalta: {  < Lake Ilinalta is a lake in west-central Falkreath Hold, in the middle of Skyrim's pine forest>,  < It is the source of the White River, and a notable Skyrim landmark. The town of Helgen was less than a day's ride to the southeast,[2] and the Hold's capital of Falkreath is directly south>,  < The Imperial Legion used to have a fort along its shore, until the entire facility mysteriously sank into the water in a single day>,  < According to local legend, the place is cursed and travelers are known to go missing> }",
                                "hidden": false
                        },
                        {
                                "id": "0.65777",
                                "keys": "Lake Yorgrim",
                                "entry": " Lake Yorgrim: {  < Lake Yorgrim is a lake in the eastern the Pale, to the west of Windhelm. It is the source of River Yorgrim>,  < In or around the time of the Dragon War, the dragon Viinturuth was killed and then interred in a burial mound near the shores of the lake> }",
                                "hidden": false
                        },
                        {
                                "id": "0.55577757",
                                "keys": "Darkwater River",
                                "entry": " Darkwater River: {  < Darkwater River, or simply the Darkwater, is a river in eastern Skyrim connecting Lake Geir to the White River>,  < Lake Geir drains into it at the western end of the Rift. The river flows northeast into Eastmarch, cascading down the famous cliff which divides the two holds>,  < After this series of pools and waterfalls, the river bends northwest, and merges with the White River a few miles downstream, south-southwest of Windhelm and west of the famous fetid swamps of Eastmarch>,  < The fishing is said to be good. A large tributary flows separately from Lake Geir>,  < It passes north through Ivarstead, then curves northeast and creates its own series of waterfalls down the cliff, then connects with Darkwater River in Eastmarch, which then merges shortly after with the White River and terminates> }",
                                "hidden": false
                        },
                        {
                                "id": "0.257272472742752",
                                "keys": "River Hjaal",
                                "entry": " River Hjaal: {  < The River Hjaal is the main river that flows through the center of Hjaalmarch in Skyrim>,  < Its headwaters are located in northwestern Whiterun Hold, in the highlands south of Morthal. After dropping down a series of waterfalls and entering Hjaalmarch, the river passes northeast through Morthal>,  < Then spreads out and drains into the Karth delta, the marshy area where the River Hjaal and the larger Karth River empty into the icy Sea of Ghosts through a variety of intricate channels>,  < Fishermen can collect a wide range of fish from the river> }",
                                "hidden": false
                        },
                        {
                                "id": "0.2573272",
                                "keys": "River Yorgrim",
                                "entry": " River Yorgrim: {   < The River Yorgrim is a short tributary in Skyrim which connects Lake Yorgrim to the White River>,   < It flows east out of the eponymous lake in the Pale and enters Eastmarch, dropping through a series of waterfalls and rapids until it merges with the White River near the entrance to Windhelm> }",
                                "hidden": false
                        },
                        {
                                "id": "0.5775757",
                                "keys": "Treva River",
                                "entry": " Treva River: {  < The Treva River is a small river at the center of the Rift in southeastern Skyrim>,  < It flows northwest from Lake Honrich to Lake Geir>,  < It was perhaps named after the eponymous founder of Treva's Farm on its eastern bank> }",
                                "hidden": false
                        },
                        {
                                "id": "0.534634564356",
                                "keys": " Jerall Mountains,Jeralls",
                                "entry": " Jerall Mountains: {  < The Jerall Mountains, also called the Jeralls, are a mountain range on the border between Cyrodiil and Skyrim>,  < They meet the Velothi and Valus Mountains at the Morrowind border, and the Dragontail Mountains at the Hammerfell border>,  < The Jeralls are rugged, steep, and inhospitable, with only a few traversable passes>,  < Of particular note is the Pale Pass, which was the site of the abrupt end to the First Akaviri Invasion in 1E 2703, after which its location was lost> }",
                                "hidden": false
                        },
                        {
                                "id": "0.8867098",
                                "keys": "Valus Mountains",
                                "entry": " Valus Mountains: {  < The Valus Mountains are a mountain range on the border between Cyrodiil and Morrowind>,  < They meet the Jerall Mountains at the Skyrim border. They are sometimes considered an extension of the Velothi Mountains> }",
                                "hidden": false
                        },
                        {
                                "id": "0.8674553",
                                "keys": "Dragontail Mountains",
                                "entry": " Dragontail Mountains: {   < The Dragontail Mountains are a mountain range in western Skyrim>,   < They are the limit of Skyrim's territory, where it borders Hammerfell>,   < On the other side of the Dragontail Mountains is the region of Hammerfell called Craglorn> }",
                                "hidden": false
                        },
                        {
                                "id": "0.744132532",
                                "keys": "Dragon's Teeth Mountains",
                                "entry": " Dragon's Teeth Mountains: {   < The Dragon's Teeth Mountains is an expansive mountain range that spans a large portion of western Tamriel>,   < stretching from the frozen summits of High Rock all the way to the forests of Valenwood, passing through Cyrodiil, Skyrim, and Hammerfell>,   < The Dragon's Teeth Mountains are found near the Nordic town of Falkreath> }",
                                "hidden": false
                        },
                        {
                                "id": "0.9878675",
                                "keys": "Druadach Mountains",
                                "entry": " Druadach Mountains: {   < The Druadach Mountains are a mountain range which separate western Skyrim and eastern High Rock and Hammerfell>,   < The misty peaks tower over Markarth and Karthwasten in the Reach, though they gradually diminish closer to Haafingar and Solitude>,   < The range curves around the Karth River, and nearly stretches into Falkreath Hold>,   < The mountains border the High Rock regions of Wrothgar and Bangkorai to the east> }",
                                "hidden": false
                        },
                        {
                                "id": "0.977844114",
                                "keys": "Velothi Mountains",
                                "entry": " Velothi Mountains: {  < The Velothi Mountains are the mountain range separating Morrowind from Skyrim>,  < They are named after the Chimer prophet Veloth who led the Chimer to leave their ancestral homes and resettle in Morrowind>,  < The mountains form the eastern border of the Skyrim regions of Eastmarch and The Rift>,  < At the southern tip of the mountain range, where it meets the Jerall and Valus Mountains> }",
                                "hidden": false
                        },
                        {
                                "id": "0.844l89474",
                                "keys": "Throat of the World,Snow Throat",
                                "entry": " Throat of the World: {   < The Throat of the World, also called Snow Throat, is the highest peak in the province of Skyrim>,   < Seven thousand steps lead up the mountain to its summit, where the settlement of High Hrothgar is located, where the Greybeards live their lives of absolute silence>,   < The legends of the Nords state that mankind was formed on the mountain when the sky breathed onto the land>,   < Many pilgrims travel to the mountain and climb the seven thousand steps to its peak> }",
                                "hidden": false
                        },
                        {
                                "id": "0.7741966482043361",
                                "keys": "Jorrvaskr",
                                "entry": " Jorrvaskr: { <Jorrvask is the meadhall that is home to the Companions in the city of Whiterun>, <Jorrvaskr is made from the boat that brought Ysgramor from Atmora to Tamriel>, <Jorrvaskr is made of wood, since it is a ship upside down> }",
                                "hidden": false
                        },
                        {
                                "id": "0.13524379575253298",
                                "keys": "Skyforge",
                                "entry": " Skyforge: { <The Skyforge is an ancient forge located in Whiterun>, <Only the blacksmith of the Companions is allowed to use it>, <It is said that the Skyforge is magical and this is the reason equipment made there is so good>, <It is said that the Skyforge was blessed by Kyne herself>, <There is a huge hawk statue on top of the Skyforge> }",
                                "hidden": false
                        },
                        {
                                "id": "0.7920305945087891",
                                "keys": "Dragonsreach,palace of the jarl",
                                "entry": " Dragonsreach: { <Dragonsreach is the palace of the Jarl of Whiterun, a huge castle on top of the hill where the city of Whiterun is located>, <Dragonsreach was build to trap dragons before they became extinct>, <It is said that a dragon called Numinex was trapped in Dragonsreach by High King Olaf One-Eye in the First Era>, <The skull of Numinex lies on top of the Jarl's throne until today> }",
                                "hidden": false
                        },
                        {
                                "id": "0.6546465498798",
                                "keys": "understone keep",
                                "entry": " Understone Keep:{  <Understone Keep is the seat of power in the Reach, located in the city of Markarth>,  <In ancient times, it used to be part of the Dwemer city of Nchuand-Zel, one of the many cities built by the Dwemer inside mountains and underground>,  <Because of this fact, the old name Nchuand-Zel stopped being used in favor of the new name, Understone Keep>,  <The Jarl of the Reach resides in Understone Keep>}",
                                "hidden": false
                        },
                        {
                                "id": "0.63464396745487985476",
                                "keys": "palace of the kings,palace of kings",
                                "entry": " Palace of the Kings:{   <The Palace of the Kings, known historically as the Palace of Ysgramor, is a large castle at the far end of the Valunstrad district in Windhelm>,   <It is one of the last remaining structures from the days of the First Empire of the Nords and is home to the hold's Jarl>,   <Ysgramor built the palace so as to tower over the city, showing man's dominion over the very winds that had caused Yngol's death on the voyage from Atmora>,   <It is made of stone blocks, in a unique architecture found only in Windhelm> }",
                                "hidden": false
                        },
                        {
                                "id": "0.7877515302308626",
                                "keys": "hermaeus mora, hermorah, herma-mora",
                                "entry": "[ Hermaeus Mora description:< name ≡ Hermaeus Mora/ Herma-Mora/ Hermorah>/< age ≡ unknown>/< genderless>.  Hermaeus Mora summ:< Usually referred to as a male, his plane of Oblivion is Apocrypha>.  Hermaeus Mora appearance:< body ≡ tentacles/ many eyes/ floating monster/ wretched abyss/ dark purple vortex>.  Hermaeus Mora mental:< smart& intelligent& knows all& possessive& manipulative& arrogant& deceiver>. Hermaeus Mora occupation:< god of knowledge/ daedric prince of knowledge>. Hermaeus Mora traits:< arrogant/ prepotent/ manipulative>.  Hermaeus Mora speech:< telepathy>.  Hermaeus Mora abilities:< knowing all>/< manipulation>/< mind puppeteer>/< controlling people>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.798461458",
                                "keys": "sheogorath,daedric prince of madness,god of madness",
                                "entry": "[    Sheogorath description:< name ≡ Sheogorath>/ < age ≡ old as time>.   Sheogorath summ:< Usually referred to as a male, his plane of Oblivion is the Shivering Isles>.   Sheogorath appearance:< body ≡ 162cm_height/ 60kg_weight/ slim/ thin/ hair< greying& short>/ eyes< cat-like& light brown>/ full greying beard>.    Sheogorath mental:< crazy/ insane/ funny/ jokester/ sarcastic/ mad>.    Sheogorath moniker:< Daedric Prince of Madness/ God of Madness>.    Sheogorath traits:< sarcastic& crazy>.   Sheogorath speech:< thick accent>. ]",
                                "hidden": false
                        },
                        {
                                "id": "0.5441",
                                "keys": "boethiah,boethia,boethra",
                                "entry": "[ Boethiah description:< name ≡ Boethiah& Boethia& Boethra>/< age ≡ primeval>. Boethiah summary:< appears ≡ female>/< location ≡ Realm of Boethia>. Boethiah appearance:< any form she wants>. Boethiah mental:< arrogant& prepotent& bossy& pedantic& sarcastic>. Boethiah occupation:< Daedric Prince of Plots/ God of Plots>. Boethiah speech:< commanding>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.88748",
                                "keys": "clavicus vile,vile,clavicus",
                                "entry": "[ Clavicus Vile description:< name ≡ Clavicus Vile& Vile>/< age ≡ primeval>. Clavicus Vile summary:< appears ≡ male>/< location ≡ The Fields of Regret>/< almost always with his hound Barbas by his side>. Clavicus Vile appearance:< skin ≡ yellow>/< long black horns>/< eyes ≡ red>. Clavicus Vile mental:< jokester& sarcastic& trickster& manipulative>. Clavicus Vile occupation:< Daedric Prince of Trickery and Bargains/ God of Trickery and Bargains>. Clavicus Vile speech:< mocking tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.78511",
                                "keys": "barbas,hound of clavicus vile",
                                "entry": "[ Barbas description:< name ≡ Barbas>/< age ≡ primeval>. Barbas summary:< appears ≡ male>/< location ≡ The Fields of Regret>/< almost always with his owner Clavicus Vile>. Barbas appearance:< skin ≡ yellow>/< long black horns>/< eyes ≡ red>/< most times appears in the form of a dog>. Barbas mental:< jokester& sarcastic& trickster& manipulative>. Barbas occupation:< Hound of Clavicus Vile>. Barbas speech:< mocking tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.874111",
                                "keys": "meridia,merid-nunda",
                                "entry": "[ Meridia description:< name ≡ Meridia& Merid-Nunda>/< age ≡ primeval>. Meridia summary:< appears ≡ female>/< location ≡ The Colored Rooms>/< considers the undead and such aberrations>. Meridia appearance:< height ≡ 162cm>/< weight ≡ 60kg& slim& thin>/< skin ≡ pale>/< hair ≡ shoulder_length& dark brown>/< eyes ≡ dark brown>. Meridia mental:< arrogant& pedantic& bossy>. Meridia occupation:< Daedric Prince of Light and Life>. Meridia speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.9964572",
                                "keys": "mehrunes,dagon,merrunz",
                                "entry": "[ Mehrunes Dagon description:< name ≡ Mehrunes Dagon& Merrunz& Dagon& Mehrunes>/< age ≡ primeval>. Mehrunes Dagon summary:< appears ≡ male>/< location ≡ The Deadlands>. Mehrunes Dagon appearance:< skin ≡ red>/< hair ≡ shaved>/< eyes ≡ red>/< gigantic form with four arms and muscular figure>. Mehrunes Dagon mental:< arrogant& pedantic& violent>. Mehrunes Dagon occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Mehrunes Dagon speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.45454177",
                                "keys": "sanguine",
                                "entry": "[ Sanguine description:< name ≡ Sanguine>/< age ≡ primeval>. Sanguine summary:< appears ≡ male>/< location ≡ The Deadlands>. Sanguine appearance:< skin ≡ jet_black>/< hair ≡ black& long>/< eyes ≡ black>/< long black horns& pointed ears>. Sanguine mental:< nice& drunk& funny>. Sanguine occupation:< Daedric Prince of Revelry and Debauchery>. Sanguine speech:< drunk& nice>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5787786326537",
                                "keys": "molag bal,bal",
                                "entry": "[ Molag Bal description:< name ≡ Molag Bal& Bal>/< age ≡ primeval>. Molag Bal summary:< appears ≡ male>/< location ≡ Coldharbour>/< almost always wielding his mace>. Molag Bal appearance:< skin ≡ blue-grey>/< hair ≡ shaved>/< eyes ≡ neon blue>/< body ≡ extremely muscular>/< horns coming out of his ears>. Molag Bal mental:< arrogant& pedantic& violent& sadistic>. Molag Bal occupation:< Daedric Prince of Domination and Enslavement>. Molag Bal speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.57856537",
                                "keys": "mephala,mafala",
                                "entry": "[ Mephala description:< name ≡ Mephala& Mafala>/< age ≡ primeval>. Mephala summary:< appears ≡ female>/< location ≡ Spiral Skein>. Mephala appearance:< skin ≡ dark grey>/< hair ≡ long& black>/< eyes ≡ red>/< she may also take the form of a spider>. Mephala mental:< arrogant& pedantic& belittling>. Mephala occupation:< Daedric Prince of Duality, Sex and Murder, Truth and Falsehood>. Mephala speech:< commanding&belittling tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.578666537",
                                "keys": "Malacath,Malauch,Mauloch,Malak,Orkey,Orkha,Malooc",
                                "entry": "[ Malacath description:< name ≡ Malacath& Malauch& Mauloch& Malak& Orkey& Orkha& Malooc>/< age ≡ primeval>. Malacath summary:< appears ≡ male>/< location ≡ Ashpit>. Malacath appearance:< skin ≡ grayish-green>/< hair ≡ shaved>/< body ≡ extremely muscular/ looks like an orc>. Malacath mental:< stubborn& arrogant& violent>. Malacath occupation:< Daedric Prince of the Bloody Oath, Flesh and Bone>. Malacath speech:< commanding>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8687678",
                                "keys": "hircine",
                                "entry": "[ Hircine description:< name ≡ Hircine>/< age ≡ primeval>. Hircine summary:< appears ≡ male>/< location ≡ Hunting Grounds>. Hircine appearance:< skin ≡ pale>/< eyes ≡ red>/< has the head of a horned elk>. Hircine mental:< values hunters and bravery& >. Hircine occupation:< Daedric Prince of the Hunt>. Hircine speech:< commanding tone>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.578634537",
                                "keys": "nocturnal,noctra",
                                "entry": "[ Nocturnal description:< name ≡ Nocturnal& Noctra >/< age ≡ primeval>. Nocturnal summary:< appears ≡ female>/< location ≡ Evergloam>. Nocturnal appearance:< skin ≡ pale>/< hair ≡ long& black>. Nocturnal wearing:< long dark blue dress with cleavage and a hood>. Nocturnal mental:< arrogant& pedantic>. Nocturnal occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Nocturnal speech:< pretentious& arrogant>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5788766535437",
                                "keys": "peryite,taskmaster",
                                "entry": "[ Peryite description:< name ≡ Peryite& Taskmaster>/< age ≡ primeval>. Peryite summary:< appears ≡ male>/< location ≡ Realm of Peryite>. Peryite appearance:< usually takes the form of a four-legged dragon>. Peryite mental:< sadistic& pestilent>. Peryite occupation:< Daedric Prince of Pestilence>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5786537",
                                "keys": "jyggalag",
                                "entry": "[ Jyggalag description:< name ≡ Jyggalag>/< age ≡ primeval>. Jyggalag summary:< appears ≡ male>/< location ≡ Jyggalag's Realm>/< is the antithesis of Sheogorath>. Jyggalag appearance:< has the form of a humanoid made of shiny silver crystals>. Jyggalag mental:< arrogant& obsessive& pretentious>. Jyggalag occupation:< Daedric Prince of Order>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.5734576345345",
                                "keys": "bards college,college of bards",
                                "entry": " Bards College: { < The Bards College is an ancient institution dedicated to the formation of the arts>, < It is the most prestigious school of art in Tamriel, and the most ancient>, < It was founded some time in the First Era, during the reign of High King Olaf>, < Most of the best bards and painters in the history of Tamriel have studied here>, < It is a very prestigious academy of art located in the city of Solitude> }",
                                "hidden": false
                        },
                        {
                                "id": "0.547564756867876575467",
                                "keys": "antiquarians circle,antiquarian circle",
                                "entry": " Antiquarians Circle: { < The Antiquarians Circle is the name of the campus of the University of Gwyllim that is dedicated to the study of History, Archaelogy and Paleontology, and is located in the city of Solitude>, < It is one of the most prestigious institutions of education in Tamriel, and many of the most prestigious historians and archaelogists studied at the Antiquarians Circle>, < It is located in the city of Solitude, while the other campi of the Unviersity of Gwyllim are located in Cyrodiil> }",
                                "hidden": false
                        },
                        {
                                "id": "0.4936504478941153",
                                "keys": "college of winterhold",
                                "entry": "College of Winterhold:[TYPE<College of Winterhold>:guild/university/school/academy/college/guild of mages/college of mages/arcane school/university for learning magic/school of magic;LOCATION<College of Winterhold>:Winterhold;LEADER TITLE<College of Winterhold>:Arch-Mage;VICE LEADER TITLE<College of Winterhold>:Master Wizard;CITY<College of Winterhold>:Winterhold;REGION<College of Winterhold>:Winterhold;DESC<College of Winterhold>:the college of winterhold is a school of magic/the leader of the college has the title of arch-mage/the vice-leader has the title of master wizard/it is a big building in the city of winterhold/it is a big construction/it is a big castle/it is a beautiful construction/the college is thousands of years old/the college was founded by arch-mage shalidor/the college is a famous school of magic.]",
                                "hidden": false
                        },
                        {
                                "id": "0.3756130377106148",
                                "keys": "Companions",
                                "entry": "[ Companions description:< leader_title ≡ harbinger/ details ≡ The Companions are a group of fighters that date back to the Merethic Era, and were founded by Ysgramor. They're the oldest guild in Tamriel, and their headquarters is Jorrvaskr, in the city of Whiterun. They do contracts for those willing to pay, and also fight for the good and for the honor of Skyrim when need be>. Companions headquarters< Jorrvaskr>. Companions location< The Companions are in the city of Whiterun. Their headquarters is the ancient ship of Ysgramor, called Jorrvaskr>. ]",
                                "hidden": false
                        },
                        {
                                "id": "0.818803105546712",
                                "keys": "riften inn,riften tavern,mad mammoth",
                                "entry": "The Mad Mammoth:[TYPE<The Mad Mammoth>:inn/bar/pub/tavern;OWNER<The Mad Mammoth>:andkvar;INHABITANTS<The Mad Mammoth>:Andkvar/Narca/Bujela/Freyte/Torbndir;LOCATION<The Mad Mammoth>:Riften;CITY<The Mad Mammoth>:Riften;DESC<The Mad Mammoth>:the mad mammoth is the local inn and tavern in riften/it is owned by andkvar/has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/andkvar lives here/narca lives here/bujela lives here/freyte lives here/torbndir lives here/five people live here;EXIT<The Mad Mammoth>:one exit goes out to riften in the market square/one exit goes to riften in the entrance bridge.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8251141022498825",
                                "keys": "winterhold inn, frozen hearth, winterhold tavern",
                                "entry": "The Frozen Hearth:[TYPE<The Frozen Hearth>:inn/bar/pub/tavern;OWNER<The Frozen Hearth>:Bjormar;INHABITANTS<The Frozen Hearth>:Bjormar/Astrid/Aengvir/Balor;LOCATION<The Frozen Hearth>:Winterhold;CITY<The Frozen Hearth>:Winterhold;DESC<The Frozen Hearth>:the frozen hearth is the local inn and tavern in winterhold/it is owned by Bjormar/it has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/balor lives here/Bjormar owns the place/astrid lives here/aengvir lives here/there are four people here/balor lives here;EXIT<The Frozen Hearth>:exit that goes out to the city of winterhold.]",
                                "hidden": false
                        },
                        {
                                "id": "0.3548538694560268",
                                "keys": "bloated goat, whiterun inn, whiterun tavern",
                                "entry": "The Bloated Goat:[TYPE<The Bloated Goat>:inn/bar/pub/tavern;OWNER<The Bloated Goat>:Isekaid;INHABITANTS<The Bloated Goat>:Isekaid/Sigrid;LOCATION<The Bloated Goat>:whiterun/city of whiterun;CITY<The Bloated Goat>:whiterun/city of whiterun;DESC<The Bloated Goat>:The Bloated Goat is the inn and tavern in the city of Whiterun/owned by Isekaid and his wife Sigrid. They both live at the inn/in their private room in the ground floor. The inn is a two story building with 10 rooms for rent.;EXIT<The Bloated Goat>:One main exit goes out to the Whiterun market square/located in the Plains District..]",
                                "hidden": false
                        },
                        {
                                "id": "0.13879806616371204",
                                "keys": "temple of kyne",
                                "entry": "Temple of Kyne:[TYPE<Temple of Kyne>:temple/church/cathedral;INHABITANTS<Temple of Kyne>:Irene/Mauricius/Nonnata;LOCATION<Temple of Kyne>:whiterun/city of whiterun;CITY<Temple of Kyne>:whiterun/city of whiterun;DESC<Temple of Kyne>:Temple dedicated to Kyne/the goddess of wind and air. It's the main temple to Kyne in Skyrim/located in the Winds District.;EXIT<Temple of Kyne>:One main exit goes out to the Whiterun tree square/located in the Winds District.]",
                                "hidden": false
                        },
                        {
                                "id": "0.21949257720023918",
                                "keys": "sigrid",
                                "entry": " Sigrid:[      DESC: nord/ female/ 38y/ 169cm/ 45kg/ born in riften/ inkeeper of the bloated goat;      WORN: green dress;      MIND: good& good humored& solidary& fun;  ]",
                                "hidden": false
                        },
                        {
                                "id": "0.40410765739865107",
                                "keys": "isekaid,innkeeper of bloated goat",
                                "entry": " Isekaid:[      DESC: nord/ male/ 40y/ 175cm/ 80kg/ born in rorikstead/ inkeeper of the bloated goat;      WORN: brown leather jerkin/ green breeches;      MIND: good& good humored& solidary& fun;  ]",
                                "hidden": false
                        },
                        {
                                "id": "0.33787729259857935",
                                "keys": "toli",
                                "entry": "Toli:[DESC<Toli>:male/40y/180cm/80kg/small and weak for a nord/fair skin/hazel eyes/light brown hair/meek/timid/kind hearted/naive/innocence/wants to run the best inn in all of skyrim/born in solitude;WORN<Toli>:brown tunic/dark brown hose;RACE<Toli>:nord;SUMMARY<Toli>:male/40y/180cm/80kg/small and weak for a nord/fair skin/hazel eyes/light brown hair/meek/timid/kind hearted/naive/innocence/wants to run the best inn in all of skyrim/born in solitude;MIND<Toli>:meek/timid/kind hearted/naive/innocence.]",
                                "hidden": false
                        },
                        {
                                "id": "0.643240642392414",
                                "keys": "winterhold innkeeper, winterhold bartender",
                                "entry": "Bjormar:[DESC<Bjormar>:male/185cm/muscular body/big arms/big hands/47y/auburn hair/short hair/hardworking/heavy nord accent;WORN<Bjormar>:brown jerkin/tight pants/leather shoes;RACE<Bjormar>:nord;SUMMARY<Bjormar>:nord/male/47y/born in winterhold/owner of the frozen hearth/innkeeper by trade/185cm/100kg;MIND<Bjormar>:good humor/funny/nice/jokester/dislikes argonians/dislikes elves/short fused;RELATIONS<Bjormar>:wife<astrid>/friend<aengvir>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.4517321761638551",
                                "keys": "winterhold innkeeper, winterhold bartender",
                                "entry": " Astrid:[DESC<Astrid>:female/180cm/60kg/thin body/small hands/small feet/thin/long hair/blonde hair/38y/heavy nord accent/hardworking/working class;WORN<Astrid>:white jerkin/tight pants/leather apron;RACE<Astrid>:nord;SUMMARY<Astrid>:nord/female/38y/born in windhelm/wife of Bjormar/married to Bjormar/owner of the frozen hearth/innkeeper by trade/180cm/60kg;MIND<Astrid>:shy/funny/quiet/dislikes elves/dislikes argonians;RELATIONS<Astrid>:husband<Bjormar>/friend<aengvir>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.044367797985053636",
                                "keys": "balor",
                                "entry": " Balor:[DESC<Balor>:male/170cm/fat body/big hands/hardworking/heavy nord accent/26y/120kg/toupet hair/dark brown hair;WORN<Balor>:blue mage robes;RACE<Balor>:nord;SUMMARY<Balor>:nord/male/26y/170cm/120kg/born in whiterun/member of the college of winterhold/mage/wizard/middle class;MIND<Balor>:smart/intelligent/serious/funny/technical/nice/polite/educated.]",
                                "hidden": false
                        },
                        {
                                "id": "0.8083626610017034",
                                "keys": "mélanie,arch-mage,arch mage,archmage",
                                "entry": " Mélanie:[DESC:breton/female/60y/165cm/40kg/arch-mage of the college of winterhold;APPE:thin/delicate/stunning/blue eyes/light brown hair/long straight hair;WORN:blue master wizard robes/fur collar/fur hood/gold diamond necklace/leather gloves/leather boots;MIND:serious/smart/intelligent/strategic/technical/well read;SUMM:friend<ahmad/rostfa/ungvid>;]",
                                "hidden": false
                        },
                        {
                                "id": "0.6864424343697011",
                                "keys": "ahmad,master wizard of winterhold",
                                "entry": " Ahmad:[DESC:redguard/male/42y/172cm/80kg/master wizard of winterhold;APPE:strong/black eyes/dark brown hair/dreadlock hair:WORN:red master wizard robes/leather boots/gold emerald necklace/gold ruby ring;MIND:good humor/smart/intelligent/strategic/technical/funny/well read;SUMM:friend<rostfa/mélanie/ungvid>;]",
                                "hidden": false
                        },
                        {
                                "id": "0.649148444342674",
                                "keys": "aengvir",
                                "entry": " Aengvir:[DESC<Aengvir>:male/170cm/70kg/thin body/slender/weak body/drunkard/drunk/drinks a lot/55y/fisherman by trade/long hair/aurburn hair;WORN<Aengvir>:brown tunic/dark brown hose;RACE<Aengvir>:nord;SUMMARY<Aengvir>:nord/male/55y170cm/70kg/born in winterhold/fisherman by trade/peasant/drunk/drunkard/mead is favorite drink;MIND<Aengvir>:short fuse/irritated/bad mood/unpolite;RELATIONS<Aengvir>:friend<rostfa>/wife<snolfi>/daughter<britte>.]",
                                "hidden": false
                        },
                        {
                                "id": "0.13092095227421896",
                                "keys": "rostfa",
                                "entry": " Rostfa:[DESC<Rostfa>:female/170cm/fat body/big hands/hardworking/heavy nord accent/45y/100kg/long curly hair/dark brown hair;WORN<Rostfa>:blue mage robes;RACE<Rostfa>:nord;SUMMARY<Rostfa>:nord/male/45y/170cm/100kg/born in riften/member of the college of winterhold/mage/wizard/middle class/court mage of winterhold;MIND<Rostfa>:smart/intelligent/serious/funny/technical/nice/polite/educated;RELATIONS<Rostfa>:friend<ungvid/balor/ahmad kareem/méliane sindeaux>.]",
                                "hidden": false
                        }
                ],
                "gameCode": {
                        "onInput": "const modifier = (text) => {\r\n  let stop = false;\r\n  let modifiedText = nameReplace(text);\r\n  const lowered = modifiedText.toLowerCase();\r\n  const commandMatcher = modifiedText.match(/\\n? ?(?:> You |> You say \"|)\\/(.+?)[\"]?[.]?\\n?$/i);\r\n\r\n  if (!state.init && info.actionCount < 1) {\r\n    grabAllBrackets(modifiedText);\r\n    state.character = {\r\n      name: state.placeholders[0].trim(),\r\n      gender: state.placeholders[1].trim(),\r\n      race: state.placeholders[2].trim(),\r\n      class: state.placeholders[3].trim(),\r\n      age: state.placeholders[4].trim(),\r\n      personality: limitCharacterDetails(state.placeholders[5]),\r\n      eyes: {\r\n        eyeColor: state.placeholders[6].trim()\r\n      },\r\n      hair: {\r\n        hairStyle: state.placeholders[7].trim(),\r\n        hairColor: state.placeholders[8].trim(),\r\n      },\r\n      appearance: {\r\n        height: state.placeholders[9].replace(DIGIT_REGEX, ''),\r\n        weight: state.placeholders[10].replace(DIGIT_REGEX, ''),\r\n        features: limitCharacterDetails(state.placeholders[11])\r\n      }\r\n    };\r\n\r\n    playerWorldInfo = {\r\n      keys: `${state.character.name},you`,\r\n      hidden: false,\r\n      entry: 'you:['\r\n        + `NAME:${state.character.name}; `\r\n        + `SUMM:age<${state.character.age}y>/race<${state.character.race}>/${state.character.appearance.height}cm&${state.character.appearance.weight}kg; `\r\n        + `APPE<you>:${state.character.appearance.features}/eyes<${state.character.eyes.eyeColor}>/hair<${state.character.hair.hairStyle}&${state.character.hair.hairColor}>; `\r\n        + `MIND:${state.character.personality}; `\r\n        + `WORN<you>:nothing; `\r\n        + `INV<you>:nothing.`\r\n        + ']'\r\n    };\r\n\r\n    addWorldEntry(playerWorldInfo.keys, playerWorldInfo.entry, false);\r\n    state.character.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes(state.character.name));\r\n\r\n    getInventory();\r\n    parseRace(state.character);\r\n    parseClass(state.character);\r\n    state.init = true;\r\n    state.shouldStop = false;\r\n    modifiedText = modifiedText.replace(BRACKETS, '');\r\n    delete state.placeholders;\r\n  }\r\n\r\n  if (commandMatcher) {\r\n    console.log(`Command detected`);\r\n    console.log(commandMatcher);\r\n\r\n    stop = true;\r\n    modifiedText = '';\r\n\r\n    const cmd = commandMatcher[1].split(' ')[0];\r\n    const params = commandMatcher[1].replace(cmd, '') != null ? commandMatcher[1].replace(cmd, '').trim() : '';\r\n\r\n    if (cmd == 'invCheck') {\r\n      console.log(`Begin inventory check.`);\r\n      state.message = `${checkInventory()}`;\r\n      console.log(`End inventory check.`);\r\n    } else if (cmd == 'invAdd') {\r\n      console.log(`Begin inventory add.`);\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        state.message = `${addToInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        state.message = `You cannot add less than 1 unit of an item to your inventory.`;\r\n      }\r\n\r\n      console.log(`End inventory add.`);\r\n    } else if (cmd == 'invRemove') {\r\n      console.log(`Begin inventory remove.`);\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      const itemQuantity = Number.isNaN(parseInt(params.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(params.replace(DIGIT_REGEX, '').trim());\r\n\r\n      if (itemQuantity >= 1) {\r\n        state.message = `${removeFromInventory(itemName, itemQuantity)}`;\r\n      } else {\r\n        state.message = `You cannot remove less than 1 unit of an item from your inventory.`;\r\n      }\r\n\r\n      console.log(`End inventory remove.`);\r\n    } else if (cmd == 'invEquip') {\r\n      console.log(`Begin inventory equip.`);\r\n      const itemName = params.replace(LETTER_REGEX, '').trim();\r\n      state.message = `${equipItem(itemName)}`;\r\n      console.log(`End inventory equip.`);\r\n    } else if (cmd == 'invDebugWi') {\r\n      console.log(`Begin inventory debug.`);\r\n      debugInventory();\r\n      state.message = `Your inventory and player WI have been debugged.`;\r\n      console.log(`End inventory debug.`);\r\n    }\r\n  }\r\n\r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      if (encounterDB[encounter].inputLock) {\r\n        console.log(`Input checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      //for outputMod:\r\n      /*\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(`Output checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      */\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          // for outputs:\r\n          // modifiedText += ` ${curTextNote}`\r\n          modifiedText += `\\n${curTextNote}`\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      // if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n      if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      // modifiedText += ` ${curTextNote}`\r\n                      modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText, stop: stop };\r\n}\r\n\r\nmodifier(text);",
                        "onOutput": "const modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n\r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      /*\r\n      if (encounterDB[encounter].inputLock) {\r\n          console.log(\"Input checking disabled on this encounter.\")\r\n          continue globalLoop\r\n      }\r\n      */\r\n      //for outputMod:\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(\"Output checking disabled on this encounter.\")\r\n        continue globalLoop\r\n      }\r\n\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          // for outputs:\r\n          modifiedText += ` ${curTextNote}`\r\n          // modifiedText += `\\n${curTextNote}`\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n        // if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      modifiedText += ` ${curTextNote}`\r\n                      // modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n",
                        "sharedLibrary": "const BRACKETED = /\\[(.*?)\\]/g;\r\nconst BRACKETS = /\\[|\\]/g;\r\nconst DIGIT_REGEX = /\\D/g;\r\nconst LETTER_REGEX = /[0-9]/g;\r\nconst PUNCTUATION_REMOVE = /[^\\w\\s]/gi;\r\nconst WEAPON_REGEX = new RegExp(/(crossbow|bow)/i);\r\nconst WORN_REGEX = new RegExp(`(?<=WORN<you>:)(.*)(?=;)`);\r\nconst INVENTORY_REGEX = new RegExp(`(?<=INV<you>:)(.*)(?=.)`);\r\n\r\nconst WEAPONS = [\r\n  'sword', 'knife', 'spear', 'hammer', 'axe', 'battleaxe', 'sledgehammer', 'longsword', 'bow', 'pickaxe'\r\n];\r\n\r\nconst CLOTHING = [\r\n  'rags', 'armor', 'dress', 'kilt', 'skirt', 'jerkin', 'shirt', 'clothes', 'robes', 'leathers', 'hooded', 'cuirass', 'chainmail', 'gauntlets', 'vambraces', 'tights'\r\n];\r\n\r\n/**\r\n * Function that parses the character's race when they're created. This determines the innkeeper's behavior towards the player.\r\n * \r\n * @param {object} character\r\n */\r\nconst parseClass = (character) => {\r\n  let charClass = character.class.toLowerCase();\r\n  switch (charClass) {\r\n    case 'mage':\r\n      addToInventory('Apprentice Mage Robes', 1);\r\n      equipItem('Apprentice Mage Robes');\r\n      break;\r\n    case 'warrior':\r\n      addToInventory('Rusty Iron Sword', 1);\r\n      addToInventory('Rusty Iron Armor', 1);\r\n      equipItem('Rusty Iron Sword');\r\n      equipItem('Rusty Iron Armor');\r\n      break;\r\n    case 'ranger':\r\n      addToInventory('Wooden Bow', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Wooden Bow');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    case 'peasant':\r\n      addToInventory('White Jerkin', 1);\r\n      addToInventory('Brown Breeches', 1);\r\n      equipItem('White Jerkin');\r\n      equipItem('Brown Breeches');\r\n      break;\r\n    case 'thief':\r\n      addToInventory('Rusty Iron Dagger', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Rusty Iron Dagger');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    case 'assassin':\r\n      addToInventory('Rusty Iron Dagger', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Rusty Iron Dagger');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    default:\r\n      state.message = 'You have chosen a class that is not one of the options. You have no items.';\r\n      console.log('No valid class selected.');\r\n      break;\r\n  }\r\n}\r\n\r\n/**\r\n * Function that parses the character's race when they're created. This determines the innkeeper's behavior towards the player.\r\n * \r\n * @param {object} character\r\n */\r\nconst parseRace = (character) => {\r\n\r\n  let race = character.race.toLowerCase();\r\n  if (race.includes(\"orsimer\") || race.includes(\"orc\")) {\r\n    race = 'Orsimer/Orc';\r\n  } else if (race.includes(\"altmer\") || race.includes(\"high elf\")) {\r\n    race = 'Altmer/High Elf';\r\n  } else if (race.includes(\"dunmer\") || race.includes(\"dark elf\")) {\r\n    race = 'Dunmer/Dark Elf';\r\n  } else if (race.includes(\"bosmer\") || race.includes(\"wood elf\")) {\r\n    race = 'Bosmer/Wood Elf';\r\n  }\r\n}\r\n\r\n/**\r\n * Simple frunction to capitalize the first letter of a string\r\n * \r\n * @param {string} string \r\n */\r\nconst capitalize = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Limits player details provided in prompt to only three items\r\n * \r\n * @param {string} text \r\n */\r\nfunction limitCharacterDetails(text) {\r\n  console.log(`START limitCharacterDetails(): parsing character details: ${text}`);\r\n  return text.replace(/, /g, ',').split(',').slice(0, 3).join('/').trim();\r\n}\r\n\r\n/**\r\n * Finds an item in the player's inventory\r\n * @param {string} itemName \r\n */\r\nconst findItemInInventory = (itemName) => {\r\n  console.log(`START findItemInInventory(): Looking for item \"${itemName}\" in player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let itemFound = getInventory().find((item) => {\r\n    return item.name == loweredName;\r\n  });\r\n\r\n  if (typeof itemFound != 'undefined') {\r\n    console.log(`END findItemInInventory(): Item \"${itemName}\" found. Returning it.`);\r\n    return itemFound;\r\n  }\r\n\r\n  console.log(`END findItemInInventory(): Item \"${itemName}\" not found in inventory.`);\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Removes an item from player's inventory\r\n * \r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst removeFromInventory = (itemName, itemQuantity) => {\r\n  console.log(`START removeFromInventory(): Removing ${itemQuantity} instances of \"${itemName}\" from player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (!(item.quantity == itemQuantity) && (item.quantity > 1 && item.quantity >= itemQuantity)) {\r\n    console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n    item.quantity -= itemQuantity;\r\n    return `\\nYou have removed ${itemQuantity} ${loweredName} from your inventory.`;\r\n  }\r\n\r\n  let index = getInventory().indexOf(item);\r\n  getInventory().splice(index, 1);\r\n  updateInventory();\r\n  console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n  return `\\nYou have removed all ${loweredName} from your inventory.`;\r\n}\r\n\r\n/**\r\n * Checks player's inventory and returns what's inside\r\n */\r\nconst checkInventory = () => {\r\n\r\n  console.log(`START checkInventory(): Checking player's inventory.`);\r\n  if (getInventory().length > 0) {\r\n    let items = getInventory().map((item) => item.name).join(', ');\r\n    let itemsWorn = getInventory().filter((item) => item.status == 'worn').map((item) => item.name).join(', ');\r\n    console.log(`END checkInventory(): Player's inventory contains: ${items}.`);\r\n    return `\\nYour inventory contains: ${items}. Items equipped: ${itemsWorn}.`;\r\n  }\r\n\r\n  console.log(`END checkInventory(): Player's inventory is empty.`);\r\n  return `\\nYour inventory is empty.`;\r\n}\r\n\r\n/**\r\n * Returns player's inventory. If the array in undefined, define it\r\n */\r\nconst getInventory = () => {\r\n  console.log(`START getInventory(): verifying player's inventory.`);\r\n  if (typeof state.inventory == 'undefined') {\r\n    console.log(`INSIDE getInventory(): Inventory array is undefined. Declaring it with an empty array.`);\r\n    state.inventory = [];\r\n  }\r\n\r\n  console.log(`END getInventory(): player's inventory exists. Returning its contents.`);\r\n  return state.inventory;\r\n}\r\n\r\n/**\r\n * Adds item to player's inventory\r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst addToInventory = (itemName, itemQuantity) => {\r\n\r\n  console.log(`START addToInventory(): adding ${itemQuantity} instances of \"${itemName}\" to player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (typeof item == 'undefined') {\r\n    console.log(`INSIDE addToInventory(): Player has no other instances of this item in their inventory. Adding these.`);\r\n    item = {\r\n      name: loweredName,\r\n      quantity: itemQuantity,\r\n      status: 'in inventory',\r\n      type: getType(itemName)\r\n    };\r\n\r\n    state.inventory.push(item);\r\n  } else {\r\n    console.log(`INSIDE addToInventory(): Player already has other instances of this item in their inventory. Incrementing the quantity by ${itemQuantity}.`);\r\n    item.quantity = item.quantity + itemQuantity;\r\n  }\r\n\r\n  updateInventory();\r\n  console.log(`END addToInventory(): ${itemQuantity} instances of \"${itemName}\" added to player's inventory.`);\r\n  return `\\nYou have added ${itemQuantity} ${loweredName} to your inventory.`;\r\n}\r\n\r\n/**\r\n * Simple function to make the player equip something.\r\n * \r\n * @param {string} itemName \r\n */\r\nconst equipItem = (itemName) => {\r\n  console.log(`START equipItem(): equipping ${itemName}`);\r\n  const itemNameLowerCase = itemName.toLowerCase();\r\n  let itemToBeEquipped = findItemInInventory(itemNameLowerCase);\r\n  if (typeof itemToBeEquipped != 'undefined') {\r\n    const itemToBeEquippedIndex = state.inventory.findIndex(x => x.name == itemToBeEquipped.name);\r\n    console.log(`INSIDE equipItem(): ${itemName} exists in player's inventory`);\r\n    if (itemToBeEquipped.type != 'weapon' && itemToBeEquipped.type != 'clothing') {\r\n      console.log(`END equipItem(): item is not equippable.`);\r\n      return `\\n${capitalize(itemNameLowerCase)} is not an equippable item.`;\r\n    }\r\n\r\n    let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n    let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n    let oldItem = getInventory().find(oldItem => oldItem.status == 'worn' && oldItem.type == itemToBeEquipped.type);\r\n    if (typeof oldItem != 'undefined') {\r\n      const oldItemIndex = state.inventory.findIndex(x => x.name == oldItem.name);\r\n      console.log(`INSIDE equipItem(): Player has another item of the same type equipped. Unequipping old item.`);\r\n      itemsWorn.replace(oldItem.name.toLowerCase(), '');\r\n      console.log(`INSIDE equipItem(): Removing worn status from ${oldItem.name}.`);\r\n      oldItem.status = 'in inventory';\r\n      state.inventory[oldItemIndex] = oldItem;\r\n    }\r\n\r\n    itemToBeEquipped.status = 'worn';\r\n    state.inventory[itemToBeEquippedIndex] = itemToBeEquipped;\r\n    itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n      .map((k) => {\r\n        console.log(`INSIDE equipItem(): worn item found in inventory -> ${k.name}`);\r\n        return k.name;\r\n      }).join('/');\r\n\r\n    console.log(`INSIDE equipItem(): finished building new WORN string -> ${itemsWorn}`);\r\n    playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n\r\n    console.log(`END equipItem(): ${itemToBeEquipped.name} has been equipped.`);\r\n    return `\\nYou are now ${itemToBeEquipped.type == 'weapon' ? 'wielding' : 'wearing'} ${itemToBeEquipped.name}.`;\r\n  }\r\n\r\n  console.log(`END equipItem(): Player does not have \"${itemNameLowerCase}\" in their inventory.`);\r\n  return `\\nYou do not have \"${itemNameLowerCase}\" in your inventory.`;\r\n}\r\n\r\n/**\r\n * Debugs your inventory and corrects the player's WI in case it fails\r\n */\r\nconst debugInventory = () => {\r\n  console.log(`START debugInventory(): debugging player's inventory`);\r\n  state.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes('you'));\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n\r\n  let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n\r\n  itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n    .map((k) => {\r\n      console.log(`INSIDE debugInventory(): Updating player WI with worn items`);\r\n      return k.name;\r\n    }).join('/');\r\n\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE debugInventory(): Updating player WI with inventory items`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n\r\n  console.log(\"INSIDE debugInventory(): Fixed player WI with inventory's items.\");\r\n  console.log(`END debugInventory(): Player's WI saved at index ${state.worldInfoIndex}.`);\r\n}\r\n\r\n/**\r\n * Updates the player's inventory and corrects the WI\r\n */\r\nconst updateInventory = () => {\r\n  console.log(`START updateInventory(): updating player's inventory and WI with current items`);\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you'));\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE updateInventory(): Sorting inventory items and quantities into player WI`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n  console.log(`END updateInventory(): updated player's inventory and WI with current items`);\r\n}\r\n\r\n/**\r\n * Function to determine item type\r\n * \r\n * @param {string} itemType\r\n */\r\nconst getType = (itemName) => {\r\n  const checker = (input) => {\r\n    return WEAPONS.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'weapon' :\r\n      CLOTHING.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'clothing' : 'misc';\r\n  }\r\n\r\n  return checker(itemName);\r\n}\r\n\r\n/**************************************************************************\r\n***************************************************************************\r\n***************************************************************************\r\n*********************** FUNCTIONS MADE BY OTHER DEVS **********************\r\n***************************************************************************\r\n***************************************************************************\r\n**************************************************************************/\r\n\r\n/**\r\n * Bracket handler by Gnurro.\r\n * \r\n * Removes backets from input text to handle them as placeholders\r\n * \r\n * @param {string} text\r\n */\r\nconst grabAllBrackets = (text) => {\r\n  for (entry of text.match(BRACKETED)) {\r\n    entry = entry.replace(BRACKETS, '');\r\n    if (!state.placeholders) {\r\n      state.placeholders = new Array();\r\n    }\r\n\r\n    state.placeholders.push(entry);\r\n  }\r\n\r\n  console.log(state.placeholders);\r\n}\r\n\r\n/**\r\n * Encounters by Gnurro.\r\n * \r\n * Makes random encounters possible in-game\r\n */\r\nencounterDB = {\r\n  /** Fight encounters */\r\n  wolfAttack: {\r\n    encounterID: 'wolfAttack',\r\n    triggers: [\"(spot|see|find).*wol(f|ves).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 80,\r\n    duration: 5,\r\n    messageString: `Wolf attack!`,\r\n    contextNotes: ['You are being attacked by a wolf!', 'A wolf is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*(wol(f|ves))\"],\r\n    textNotes: [\r\n      `You hear howling, not far from where you are. The howling gets closer, and you start to feel uneasy. You look around, trying to find where it's coming from, and when you turn around. It's a wolf!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packWolfAttack',\r\n        branchChance: 50,\r\n        branchTextNotes: [\r\n          `You hear howling, not far from where you are. The howling gets closer, and now it sounds like more than one. You look around, trying to find where it's coming from, and then you see it. It's a pack of wolves!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  bearAttack: {\r\n    encounterID: 'bearAttack',\r\n    triggers: [\"(spot|see|find).*bear(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Bear attack',\r\n    contextNotes: ['You are being attacked by a bear!', 'A bear is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*bear(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling. It's definetely a bear. You hear it getting close, and you start to feel uneasy. When you look to your right, you see it. It's a bear!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packBearAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [\r\n          `You hear some growling. It's definetely a bear. But it doesn't sound like just one. It's uncommon for bears to attack in groups, but you seem to haven been chosen. It's a sleuth of bears!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  sabreCatAttack: {\r\n    encounterID: 'sabreCatAttack',\r\n    triggers: [\"(spot|see|find).*sabre cat(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Sabre cat attack!',\r\n    contextNotes: ['You are being attacked by a sabre cat!', 'A sabre cat is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*sabre cat(|s)\"],\r\n    textNotes: [\r\n      `You hear some roaring, but you can't tell what animal it is. But it sounds angry... and hungry. You hear it getting close, and you start to feel uneasy. When you turn around... it's a sabre cat!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packSabreCatAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [`You hear some roaring... and it sounds like there's more than one animal tracking. You start to feel uneasy, as you're sure you're about to be attacked. When you turn arround... it's a pack of sabre cats!`],\r\n      }\r\n    ]\r\n  },\r\n  trollAttack: {\r\n    encounterID: 'trollAttack',\r\n    triggers: [\"(spot|see|find).*troll(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 20,\r\n    duration: 5,\r\n    messageString: 'Troll attack!',\r\n    contextNotes: ['You are being attacked by a troll!', 'A troll is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*troll(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling and roaring. You can't tell what kind of creature is making this horrendous sound, but it's close. And getting closer. It's approaches you, and you turn to look at it. It's a troll!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packTrollAttack',\r\n        branchChance: 5,\r\n        branchTextNotes: [\r\n          `You hear some growling and roaring. It sounds like more than one creature, and they're getting closer... when you think of looking around, they show themselves. Two trolls are attacking you!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n\r\n  /** Weather */\r\n  weather: {\r\n    inputLock: true,\r\n    encounterID: 'weather',\r\n    chance: 50,\r\n    memoryAdd: {\r\n      memoryText: 'The weather has changed!',\r\n      memoryLocation: 'top',\r\n      memoryLingerDuration: 5\r\n    },\r\n    cooldown: 10,\r\n    duration: 0,\r\n    branches: [\r\n      {\r\n        branchTriggers: [\r\n          '.*(snow(|ing)|road|out(doors|side)|freezing|cold).*'\r\n        ],\r\n        branchID: 'weatherSnowStorm',\r\n        branchChance: 5,\r\n        branchChained: ['snowStorm']\r\n      },\r\n      {\r\n        branchTriggers: [\r\n          '.*(road|out(doors|side)|night).*'\r\n        ],\r\n        branchID: 'weatherBeautifulNight',\r\n        branchChance: 15,\r\n        branchChained: ['beautifulNight']\r\n      }\r\n    ]\r\n  },\r\n  snowStorm: {\r\n    inputLock: true,\r\n    encounterID: 'snowStorm',\r\n    messageString: 'A snow storm! Be careful! It will last for 10 actions!',\r\n    contextNotes: [\r\n      'A snow storm is here! Protect yourself or you\\'ll freeze to death!'\r\n    ],\r\n    textNotes: [\r\n      `The air starts to feel cold all of a sudden, and a freezing breeze touches you. You start shaking from the cold, and the wind gets faster. You can't see anything, as it's all white. You're caught in a snow storm!`\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50\r\n  },\r\n  beautifulNight: {\r\n    inputLock: true,\r\n    encounterID: 'beautifulNight',\r\n    messageString: 'It\\'s a beautiful night!',\r\n    contextNotes: [\r\n      'It\\'s a beautiful night!'\r\n    ],\r\n    textNotes: [\r\n      `You look up. The night sky is amazing! You can see the stars bright in the distance, and the aurora is shimmering in the sky like an ethereal snake. The night is bright because of the beautiful lights in the sky, and you just can't stop looking at them. It's too beautiful.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50,\r\n  },\r\n\r\n  /** Random events */\r\n  rebellion: {\r\n    outputLock: true,\r\n    encounterID: 'rebellion',\r\n    chance: 1,\r\n    messageString: `A rebellion is happening!`,\r\n    memoryAdd: {\r\n      memoryText: `A rebellion is happening!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    cooldown: 20,\r\n    duration: 0,\r\n    chained: ['whiterunRebellion', 'riftenRebellion',]\r\n  },\r\n  whiterunRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'whiterunRebellion',\r\n    messageString: `The citizens of Whiterun are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Whiterun are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Whiterun. The citizens of the city are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  riftenRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'riftenRebellion',\r\n    messageString: `The citizens of Riften are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Riften are revolting against Jarl Erikur for his negligence towards people's safaty! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Riften. The citizens are revolting against Jarl Erikur for his negligence towards people's safety! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  tavernBrawl: {\r\n    encounterID: 'tavernBrawl',\r\n    triggers: [\r\n      '.*(bar|pub|tavern|inn|brawl(|ing|er(|s))).*'\r\n    ],\r\n    chance: 10,\r\n    cooldown: 10,\r\n    duration: 5,\r\n    branches: [\r\n      {\r\n        branchID: 'brawlWithYouBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithYou']\r\n      },\r\n      {\r\n        branchID: 'brawlWithBrawlersBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithBrawlers']\r\n      }\r\n    ]\r\n  },\r\n  brawlWithYouBranch: {\r\n    encounterID: 'brawlWithYouBranch',\r\n    messageString: 'Someone challanged you to a brawl!',\r\n    contextNotes: [\r\n      `You're brawling with someone!`\r\n    ],\r\n    textNotes: [\r\n      `A random drunk man starts screaming at you for some reason. He's so drunk you can't really understand what he says. He charges at you, and punches you in the face.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  },\r\n  brawlWithBrawlers: {\r\n    encounterID: 'brawlWithBrawlers',\r\n    messageString: 'There are people brawling at the tavern!',\r\n    contextNotes: [\r\n      'People are brawling at the tavern!'\r\n    ],\r\n    textNotes: [\r\n      `Two guys are yelling at each other, they seem angry. One of them gets up from his chair and just punches the other one in the face. The man who got punched screams something unintelligible and charges at the other one. They're in a serious brawl.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  }\r\n}\r\n\r\n// word list stuff like gauntlet script:\r\nencounterWordLists = {\r\n  /* Remove this line (and the one below) to enable the example word lists\r\n  charClass:[\"mage\",\"fighter\",\"valkyrie\"],\r\n  pattern:[\"sprinkles\", \"dots\", \"lines\"],\r\n  color:[\"red\",\"blue\",\"green\",\"yellow\",\"orange\"],\r\n  amount:[\"many\",\"few\",\"all of them\"]\r\n   */ // Remove this line (and the one above) to enable the example word lists\r\n}\r\n\r\n// WI data imports:\r\nfor (WIentry of worldInfo) {\r\n  // encounters from WI:\r\n  // these will be lower priority then the hardcoded ones above!\r\n  if (WIentry.keys.includes('!encounterDef')) {\r\n    encounterDefFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterDef for '${encounterDefFromWI.encounterID}', adding it to the DB!`)\r\n    encounterDB[encounterDefFromWI.encounterID] = encounterDefFromWI\r\n  }\r\n  // word lists from WI:\r\n  if (WIentry.keys.includes('!encounterWordListsFull')) {\r\n    encounterWordListsFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found full WI encounterWordLists entry, adding them to the DB!`)\r\n    for (encounterSingleWordList in encounterWordListsFromWI) {\r\n      encounterWordLists[encounterSingleWordList] = Object.values(encounterWordListsFromWI[encounterSingleWordList])\r\n    }\r\n  }\r\n  if (WIentry.keys.includes('!encounterWordListSingle')) {\r\n    encounterWordListSingleFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterWordList, adding it to the DB!`)\r\n    encounterWordLists[Object.keys(encounterWordListSingleFromWI)[0]] = Object.values(encounterWordListSingleFromWI)\r\n  }\r\n}\r\n\r\n\r\n// encounter functions: (DON'T MESS WITH THESE!)\r\nfunction updateCurrentEncounter(encounterUpcoming) { // sets or clears currentEncounter; if argument empty, clears current encounter\r\n  // limiting encounter recurrence:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.recurrenceLimit) {\r\n      if (!state.limitedEncounters) {\r\n        state.limitedEncounters = []\r\n        state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n      } else {\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == state.currentEncounter.encounterID) {\r\n            console.log(`'${state.currentEncounter.encounterID}' recurrence already has a limit.`)\r\n            if (limiter[1] > 0) {\r\n              limiter[1] = limiter[1] - 1\r\n            }\r\n          } else {\r\n            state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (state.currentEncounter.cooldown) {\r\n      if (!state.cooldownEncounters) {\r\n        state.cooldownEncounters = []\r\n      }\r\n      state.cooldownEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.cooldown])\r\n    }\r\n  }\r\n  if (encounterUpcoming) {\r\n    console.log(`Setting current encounter to '${encounterUpcoming}'.`)\r\n    state.currentEncounter = encounterDB[encounterUpcoming]\r\n    // random initial values handling:\r\n    randomizables = ['duration', 'activationDelay', 'cooldown']\r\n    for (encounterValue of randomizables) {\r\n      if (typeof (state.currentEncounter[encounterValue]) !== 'undefined') {\r\n        if (typeof (state.currentEncounter[encounterValue]) !== 'number' && state.currentEncounter[encounterValue].length == 2) {\r\n          console.log(`${encounterUpcoming} has random ${encounterValue}: ${state.currentEncounter[encounterValue]}`)\r\n          state.currentEncounter[encounterValue] = getRndInteger(state.currentEncounter[encounterValue][0], state.currentEncounter[encounterValue][1])\r\n          console.log(`${encounterUpcoming} random ${encounterValue} set to ${state.currentEncounter[encounterValue]}`)\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    console.log(\"Clearing current encounter.\")\r\n    delete state.currentEncounter\r\n  }\r\n}\r\n\r\nfunction updateCurrentEffects() { // 'activates' currentEncounter; or clears encounter effects if there is no active encounter\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.messageString) {\r\n      state.message = state.currentEncounter.messageString\r\n    }\r\n    if (state.currentEncounter.contextNotes) {\r\n      state.encounterNote = getRndFromList(state.currentEncounter.contextNotes)\r\n    }\r\n    if (state.currentEncounter.displayStatNotes) {\r\n      displayStatsUpdate(getRndFromList(state.currentEncounter.displayStatNotes))\r\n    }\r\n  } else {\r\n    delete state.message\r\n    delete state.encounterNote\r\n  }\r\n}\r\n\r\nfunction fillPlaceholders(placeHolderString) {\r\n  curPlaceholderMatches = placeHolderString.match(/\\{(.*?)\\}/g)\r\n  if (curPlaceholderMatches) {\r\n    console.log(`Matched placeholders: ${curPlaceholderMatches}`)\r\n    for (placeholder of curPlaceholderMatches) {\r\n      console.log(`Current placeholder: ${placeholder}`)\r\n      if (placeholder[1] == '*') {\r\n        console.log(`Current placeholder ${placeholder} contains a *, checking temporary word lists...`)\r\n        placeholder = placeholder.replace(/(\\*|{|})/gi, '')\r\n        if (typeof (tempWordLists) == 'undefined') {\r\n          tempWordLists = {}\r\n        }\r\n        if (!tempWordLists[placeholder] || tempWordLists[placeholder].length == 0) {\r\n          console.log(`${placeholder} temporary wordlist is either non-existant or empty! Getting a new one.`)\r\n          tempWordLists[placeholder] = JSON.parse(JSON.stringify(encounterWordLists[placeholder]))\r\n        }\r\n        console.log(`Current temporary word lists:${tempWordLists}`)\r\n        for (insertTag in tempWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag in temporary list: ${insertTag}`)\r\n            pickedInsert = getRndFromList(tempWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert from temporary list: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{\\\\*${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n            tempWordLists[placeholder].splice(tempWordLists[placeholder].indexOf(pickedInsert), 1)\r\n          }\r\n        }\r\n      } else {\r\n        for (insertTag in encounterWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag: ${insertTag}`)\r\n            pickedInsert = getRndFromList(encounterWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    delete tempWordLists\r\n  }\r\n  return (placeHolderString)\r\n}\r\n\r\n// misc helper functions:\r\n// get random\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n\r\n// list-picker, dynamically handles weighted lists\r\nfunction getRndFromList(list) {\r\n  if (list[0].length == 2) {\r\n    console.log(`${list} looks like a weighted list, doing that!`)\r\n    return (getRndFromListWeighted(list))\r\n  } else {\r\n    console.log(`${list} looks like a plain list, simply picking from it!`)\r\n    return (list[getRndInteger(0, list.length)])\r\n  }\r\n}\r\n\r\n// list picker for lists with weighted items:\r\n// currently works kinda like oldschool D&D encounter lists\r\nfunction getRndFromListWeighted(weightedList) {\r\n  cutOff = getRndInteger(1, 100)\r\n  console.log(`Picking from weighted list, cutoff: ${cutOff}`)\r\n  for (item of weightedList) {\r\n    console.log(`'${item[0]}' threshold: ${item[1]}.`)\r\n    if (cutOff <= item[1]) {\r\n      console.log(`'${item[0]}' cutoff below threshold, picking it!`)\r\n      return item[0]\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\n// displayStats handling:\r\nfunction displayStatsUpdate([inKey, inValue, inColor]) {\r\n  // if key already exists, update; else push new entry; if no value given, removes displayStat entry matching key, if it exists\r\n  if (!state.displayStats) {\r\n    state.displayStats = []\r\n  }\r\n  let displayStatUpdated = false\r\n  for (displayStat of state.displayStats) {\r\n    console.log(`Checking ${displayStat.key} displayStats entry...`)\r\n    let curDisplayStatIndex = state.displayStats.indexOf(displayStat)\r\n    if (displayStat.key == inKey) {\r\n      console.log(`Found ${inKey} displayStats entry: ${state.displayStats[curDisplayStatIndex].key}, ${state.displayStats[curDisplayStatIndex].value}, ${state.displayStats[curDisplayStatIndex].color}, updating!`)\r\n      if (inValue) {\r\n        if (typeof (inValue) == 'string') {\r\n          inValue = fillPlaceholders(inValue)\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        } else {\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        }\r\n      } else {\r\n        console.log(`No value to update displayStat inputted, removing entry.`)\r\n        state.displayStats.splice(curDisplayStatIndex, 1)\r\n        displayStatUpdated = true\r\n        break\r\n      }\r\n      if (inColor) {\r\n        state.displayStats[curDisplayStatIndex].color = fillPlaceholders(inColor)\r\n      }\r\n      displayStatUpdated = true\r\n      break\r\n    }\r\n  }\r\n  if (!displayStatUpdated) {\r\n    console.log(`No ${inKey} displayStats entry found, adding it!`)\r\n    state.displayStats.push({ 'key': inKey, 'value': inValue, 'color': inColor })\r\n  }\r\n}\r\n\r\n/**\r\n * Name synthesizer by Zaltys\r\n * \r\n * Removed unwanted names and replaces them with better ones\r\n * \r\n */\r\n// List the names you wish to replace with random ones in this const.\r\nconst BADNAMES = ['Ackerson', 'Alison', 'Annah', 'Anu', 'Arat', 'Arrorn', 'Ashton', 'Azajaja', 'Big Red',\r\n  'Brot', 'Brother Gray', 'Bucklesberg', 'Captain Dario', 'Captain Eckard', 'Captain Hayes', 'Captain Ian', 'Captain Illam', 'Carn',\r\n  'Castus', 'Cloudpeak', 'Count Gray', 'Count Grey', 'Dark Order', 'David', 'Delantium', 'Delerg', 'Dendrin', 'Derg',\r\n  'Dert', 'Dessel', 'Dorna', 'Dr. Kessel', 'Dr. Kovas', 'Drake', 'Draven', 'Durge', 'Ebony Claw', 'Elam',\r\n  'Eldolith', 'Eliza', 'Eternals', 'Father Féval', 'Father Tomas', 'Felkan', 'Flog', 'Garrick', 'Grolik', \"Gro'tesk\", 'Haygarth',\r\n  'Hessla', 'Holgard', 'Isabella', \"J'Arel\", 'Jacob', 'Jicol', 'Karth', 'Kelso',\r\n  'Klemto', 'Klyton', 'Kralmer', 'Kyros', 'Lenay', 'Lord Rostov', 'Ludmilla', 'Magos Cern', 'Meliodas',\r\n  'Merk', 'Mihrab', 'Mr. Demar', 'Mr. Gaange', 'Mr. Reynolds', 'Nalin', 'Nolazir', 'Null', 'Nuro', 'Oalkwardner',\r\n  'Olive', 'Olivia', 'Oren', 'Quala', 'Ragnor', 'Ral', 'Rask', 'Retlad', 'Roldan', 'Rolomag', 'Sheriff Buckly',\r\n  'Sir Ignate', 'Sodran', 'Svelk', 'Talia', 'Teckleville', 'The Craxil', 'The Ghoul King', 'The Great Lich Lord',\r\n  'The Nightmare Tyrant', 'Theo', 'Trelik', 'Tulan', 'Ulivik', 'Vaughn', 'Velzix', 'Wessel', 'Zalan', 'Zalmora', 'Zuzu'];\r\n\r\n// This shuffles the arrays.\r\nconst shuffle = array =>\r\n  [...Array(array.length)]\r\n    .map((...args) => Math.floor(Math.random() * (args[1] + 1)))\r\n    .reduce((a, rv, i) => ([a[i], a[rv]] = [a[rv], a[i]]) && a, array);\r\n\r\n// Generates and saves arrays; ran only once.\r\nfunction makeArrays() {\r\n  state.mid = [];\r\n  state.end = [];\r\n  list = state.names.map(x => x.substring(1)); // Trim beginning.\r\n  list.forEach(addMid);\r\n}\r\n\r\nfunction addMid(seg) { // Generate array of possible mid-segments.\r\n  while (seg.length > 3) {\r\n    if (state.mid.indexOf(seg.substring(0, 4)) === -1) { state.mid.push(seg.substring(0, 4)) };\r\n    seg = seg.substring(1);\r\n  }\r\n  state.end.push(seg);\r\n}\r\n\r\nfunction synthName() {\r\n  var name_length = state.names[Math.floor(Math.random() * state.names.length)].length - 1;\r\n  var base = state.names[Math.floor(Math.random() * state.names.length)];\r\n  if (base.length < 3) { return Base; }\r\n  else {\r\n    var nomen = base.substring(0, 3);\r\n    while (nomen.length < name_length) {\r\n      mid = shuffle(state.mid).find(x => nomen.substring(nomen.length - 2, nomen.length) == x.substring(0, 2))\r\n      if (mid) { nomen += mid.substring(2); }\r\n      else { name_length = 0; } // No valid segments found, just skip ahead.\r\n    }\r\n    var end = shuffle(state.end).find(x => nomen.substring(nomen.length - 1, nomen.length) == x.substring(0, 1));\r\n    if (end) { nomen += end.substring(1); }\r\n    return nomen;\r\n  }\r\n}\r\n\r\nfunction nameReplace(text) {\r\n  if (!state.names_setup) { setupNamelist(); }\r\n  for (name of BADNAMES) {\r\n    if (text.includes(name)) { text = text.replace(name, synthName()); }\r\n  }\r\n  return text;\r\n}\r\n\r\n// This giant list is the list of names that this generator uses as examples to synthesize new names.\r\n// You can replace it with a more specific list, such as names from certain culture.\r\n// To work well, you need at least 100 names on the list.\r\nfunction setupNamelist() {\r\n  state.names_setup = true;\r\n  state.names = [\"Aby\", \"Aage\", \"Aakesh\", \"Aanon\", \"Aarlen\", \"Aaron\", \"Aart\", \"Aasta\", \"Abarden\", \"Abbathor\", \"Abbathorn\", \"Abraham\", \"Abryn\",\r\n    \"Abu\", \"Acadia\", \"Achard\", \"Acheron\", \"Achim\", \"Achlarg\", \"Ada\", \"Adair\", \"Adalbert\", \"Adanac\", \"Adario\", \"Adeisteen\", \"Adelaide\",\r\n    \"Adelin\", \"Adelot\", \"Adeen\", \"Aden\", \"Adena\", \"Aderyn\", \"Adeva\", \"Adger\", \"Adia\", \"Adin\", \"Adina\", \"Aditu\", \"Adlay\",\r\n    \"Adolf\", \"Adolmus\", \"Adoniram\", \"Adraeran\", \"Adriaan\", \"Adriel\", \"Adrienne\", \"Aedha\", \"Aeiran\", \"Ael\", \"Aelgifu\", \"Aelis\", \"Aerdrie\",\r\n    \"Aeriel\", \"Aerin\", \"Aeris\", \"Aeriss\", \"Aeron\", \"Aeru'in\", \"Aeruin\", \"Aethelweard\", \"Aethon\", \"Aethyr\", \"Afra\", \"Agate\", \"Agatha\",\r\n    \"Agathon\", \"Agathos\", \"Agenor\", \"Agidius\", \"Agnar\", \"Agora\", \"Agrias\", \"Aguidran\", \"Aguilla\", \"Ahanna\", \"Ahmre\", \"Aicha\", \"Aidan\",\r\n    \"Aidaron\", \"Aiden\", \"Aidred\", \"Aidro\", \"Aidwin\", \"Aifreda\", \"Aifrida\", \"Aiker\", \"Aikikia\", \"Aikman\", \"Ailcaer\", \"Aileen\", \"Ailric\",\r\n    \"Ailvar\", \"Aimee\", \"Aimo\", \"Aino\", \"Ainu\", \"Aipheus\", \"Airalyn\", \"Aircristir\", \"Airen\", \"Airis\", \"Airmid\", \"Aisha\", \"Aislinn\",\r\n    \"Aithne\", \"Aitken\", \"Akebia\", \"Aki\", \"Akira\", \"Aksel\", \"Al\", \"Aladan\", \"Aladar\", \"Aladdin\", \"Alain\", \"Alaine\", \"Alais\",\r\n    \"Alan\", \"Alana\", \"Alanson\", \"Alardan\", \"Alaric\", \"Alarion\", \"Alaris\", \"Alaron\", \"Alastair\", \"Alastrina\", \"Alastyr\", \"Albaral\", \"Alberich\",\r\n    \"Alberik\", \"Alberon\", \"Albert\", \"Alberta\", \"Albin\", \"Albion\", \"Albrecht\", \"Albright\", \"Alcan\", \"Alcina\", \"Alda\", \"Aldaren\", \"Aldegond\",\r\n    \"Alden\", \"Aldert\", \"Aldhelm\", \"Aldis\", \"Aldrich\", \"Aldridge\", \"Aldus\", \"Aldwerth\", \"Aldwin\", \"Aldwulf\", \"Alea\", \"Alec\", \"Alena\",\r\n    \"Alers\", \"Ales\", \"Alessandra\", \"Alexander\", \"Alexei\", \"Alf\", \"Alfdis\", \"Alfgeir\", \"Alfhid\", \"Alfons\", \"Alford\", \"Alfred\", \"Algernon\",\r\n    \"Algus\", \"Alhana\", \"Ali\", \"Alia\", \"Alicia\", \"Aliendre\", \"Alienor\", \"Alin\", \"Aline\", \"Alineric\", \"Alisbone\", \"Alison\", \"Alistair\",\r\n    \"Alister\", \"Allaire\", \"Allard\", \"Allart\", \"Allene\", \"Alliston\", \"Almas\", \"Almer\", \"Almira\", \"Almroth\", \"Almu\", \"Aloise\", \"Alor\",\r\n    \"Alora\", \"Alorosaz\", \"Aloysius\", \"Alphons\", \"Alrik\", \"Alsop\", \"Althalus\", \"Altin\", \"Alton\", \"Alured\", \"Alvan\", \"Alvey\", \"Alvina\",\r\n    \"Alvord\", \"Alvred\", \"Alwen\", \"Alwyn\", \"Alya\", \"Alyanna\", \"Alyce\", \"Alyssa\", \"Alyvia\", \"Ama\", \"Amadis\", \"Amain\", \"Amalina\",\r\n    \"Aman\", \"Amanfea\", \"Amar\", \"Amarah\", \"Amber\", \"Ambros\", \"Amelia\", \"Ames\", \"Amethyst\", \"Amilion\", \"Amin\", \"Amina\", \"Amineh\",\r\n    \"Ammdar\", \"Amschel\", \"Amundi\", \"Anandra\", \"Anastasia\", \"Anatol\", \"Anatolia\", \"Ancarion\", \"Ancelyn\", \"Anclaiar\", \"Ancla´ar\", \"Andara'an\", \"Andaraan\",\r\n    \"Andemon\", \"Andni\", \"Andolan\", \"Andre\", \"Andrei\", \"Andrew\", \"Andrus\", \"Aneurin\", \"Anfar\", \"Angelica\", \"Angelina\", \"Angharad\", \"Angheryn\",\r\n    \"Angmar\", \"Angus\", \"Anici\", \"Anigh\", \"Anika\", \"Anita\", \"Anitra\", \"Anlaf\", \"Anna\", \"Annion\", \"Annora\", \"Anouar\", \"Anseim\",\r\n    \"Ansel\", \"Anskar\", \"Anson\", \"Antal\", \"Antalya´ar\", \"Antares\", \"Antheirne\", \"Anton\", \"Antone\", \"Antony\", \"Antrim\", \"Anvar\", \"Anya\",\r\n    \"Anzie\", \"Apad\", \"April\", \"Apthorp\", \"Aquill\", \"Arabel\", \"Arabella\", \"Arabeth\", \"Aradan\", \"Aradh\", \"Aragon\", \"Aragorn\", \"Arakin\",\r\n    \"Aralik\", \"Aranel\", \"Arania\", \"Arathorn\", \"Aravis\", \"Arawn\", \"Arax\", \"Araz\", \"Archibald\", \"Arcarune\", \"Arctor\", \"Ardal\", \"Arden\",\r\n    \"Arder\", \"Ardesh\", \"Ardis\", \"Areagne\", \"Arell\", \"Areta\", \"Aretas\", \"Argethlam\", \"Argoeth\", \"Ari\", \"Aria\", \"Ariad\", \"Arian\",\r\n    \"Arianth\", \"Aribeth\", \"Aric\", \"Arid\", \"Ariel\", \"Aries\", \"Arilyn\", \"Arioch\", \"Arka\", \"Arkadia\", \"Arkron\", \"Arkwright\", \"Arlaith\",\r\n    \"Arlan\", \"Arlana\", \"Arlean\", \"Arleano\", \"Arlo\", \"Arlya\", \"Armand\", \"Armar\", \"Armin\", \"Armitage\", \"Armo\", \"Armod\", \"Arn\",\r\n    \"Arnbella\", \"Arnesen\", \"Arnfinn\", \"Arngrim\", \"Arni\", \"Arnlaug\", \"Arno\", \"Arnold\", \"Arnor\", \"Arnora\", \"Arnot\", \"Arnthora\", \"Arnuif\",\r\n    \"Arnulf\", \"Arnvid\", \"Aron\", \"Arrah\", \"Arronax\", \"Arshavir\", \"Arshel\", \"Artemis\", \"Artemus\", \"Arthol\", \"Arthryn\", \"Arthur\", \"Artnistead\",\r\n    \"Artreyu\", \"Artur\", \"Arun\", \"Arvid\", \"Arvida\", \"Arving\", \"Arvo\", \"Arwen\", \"Arwin\", \"Aryen\", \"Aryion\", \"Aryon\", \"Aryus\",\r\n    \"Arzamark\", \"Asa\", \"Asaf\", \"Aschar\", \"Asfrid\", \"Asgard\", \"Asger\", \"Asgerd\", \"Asgrim\", \"Ash\", \"Ashan\", \"Ashane\", \"Ashburton\",\r\n    \"Ashcar\", \"Ashdown\", \"Ashgaroth\", \"Ashley\", \"Ashlyn\", \"Ashne'e\", \"Ashnici\", \"Ashur\", \"Asiria\", \"Askew\", \"Askold\", \"Aslak\", \"Aslan\",\r\n    \"Asleif\", \"Aslior\", \"Asperon\", \"Asta\", \"Astar\", \"Astinus\", \"Astnid\", \"Astnild\", \"Astoiphe\", \"Astra\", \"Astraea\", \"Astran\", \"Astrid\",\r\n    \"Astrin\", \"Atazra\", \"Athabasca\", \"Athana\", \"Athol\", \"Atiaran\", \"Atli\", \"Atmeh\", \"Atreyu\", \"Atropos\", \"Atticus\", \"Attor\", \"Atul\",\r\n    \"Aturin\", \"Atyre\", \"Aubrey\", \"Aud\", \"Audrey\", \"Audrianna\", \"Audric\", \"August\", \"Augustus\", \"Aule\", \"Aulius\", \"Aun\", \"Aura\",\r\n    \"Aurian\", \"Auril\", \"Aurion\", \"Aurora\", \"Avall\", \"Avarath\", \"Avascaen\", \"Avedar\", \"Aveole\", \"Avery\", \"Avon\", \"Avril\", \"Axel\",\r\n    \"Aya\", \"Ayame\", \"Ayaron\", \"Ayarèn\", \"Ayin\", \"Ayir\", \"Aylin\", \"Aylmer\", \"Ayrie\", \"Azeal\", \"Azeezeh\", \"Azgoth\", \"Azhrarn\",\r\n    \"Aziz\", \"Azmodeus\", \"Azrean\", \"Azreck\", \"Azriaz\", \"Aztira\", \"Azure\", \"Azuth\", \"Baba\", \"Babacar\", \"Babrak\", \"Babrine\", \"Babylos\",\r\n    \"Baduk\", \"Baern\", \"Baeron\", \"Baervan\", \"Bag\", \"Bahamut\", \"Baird\", \"Bal\", \"Balain\", \"Baldor\", \"Baldrick\", \"Balduin\", \"Baldur\",\r\n    \"Baldwin\", \"Balendar\", \"Balfour\", \"Balin\", \"Baliol\", \"Ballard\", \"Balor\", \"Balthasard\", \"Balthazar\", \"Bandobras\", \"Bane\", \"Baraca\", \"Barahir\",\r\n    \"Barak\", \"Baralan\", \"Baravar\", \"Barbara\", \"Bardach\", \"Bardel\", \"Bardi\", \"Bardsley\", \"Bardwell\", \"Barend\", \"Barent\", \"Baring\", \"Barll\",\r\n    \"Barlo\", \"Barlow\", \"Barnabas\", \"Barnas\", \"Barnus\", \"Barr\", \"Barret\", \"Barron\", \"Barry\", \"Barstow\", \"Barthel\", \"Bartle\", \"Bartnel\",\r\n    \"Barton\", \"Baslayan\", \"Bayard\", \"Beams\", \"Beatrix\", \"Bechir\", \"Beck\", \"Bede\", \"Bedegran\", \"Begnus\", \"Beldaran\", \"Beldas\", \"Belerion\",\r\n    \"Belgarath\", \"Belgarion\", \"Belita\", \"Bella\", \"Belle\", \"Bellin\", \"Bellinus\", \"Belloc\", \"Belrene\", \"Beltane\", \"Belva\", \"Ben\", \"Benekander\",\r\n    \"Bengt\", \"Benita\", \"Benoist\", \"Beorn\", \"Beowulf\", \"Bera\", \"Bercan\", \"Berek\", \"Berem\", \"Beren\", \"Bergen\", \"Bergthor\", \"Berim\",\r\n    \"Bern\", \"Berna\", \"Bernhart\", \"Bernt\", \"Berronar\", \"Berryn\", \"Bersi\", \"Berta\", \"Bertil\", \"Bertilde\", \"Bertram\", \"Bertran\", \"Bertrem\",\r\n    \"Beryl\", \"Besma\", \"Bestagar\", \"Beth\", \"Bevil\", \"Beyash\", \"Beylard\", \"Bhimrao\", \"Bhoskar\", \"Bhupindar\", \"Bidwell\", \"Bilbo\", \"Bile\",\r\n    \"Bilmar\", \"Bindon\", \"Bion\", \"Bipin\", \"Birath\", \"Birbeck\", \"Birchard\", \"Birger\", \"Birgit\", \"Birket\", \"Bisuneh\", \"Bjarni\", \"Bjorn\",\r\n    \"Bjornstern\", \"Blackwood\", \"Blade\", \"Blaen\", \"Blair\", \"Blame\", \"Blasco\", \"Blaze\", \"Bledsoe\", \"Blenda\", \"Bleran\", \"Blount\", \"Blunyc\",\r\n    \"Bninna\", \"Bo\", \"Bodil\", \"Bodvar\", \"Bolthorn\", \"Boner\", \"Booker\", \"Boott\", \"Boris\", \"Bork\", \"Borlace\", \"Bormor\", \"Boromir\",\r\n    \"Bors\", \"Botho\", \"Botolf\", \"Bourke\", \"Bowie\", \"Boyd\", \"Bracca\", \"Brace\", \"Bracken\", \"Brand\", \"Brandec\", \"Brangwen\", \"Brann\",\r\n    \"Brannon\", \"Branwell\", \"Branwen\", \"Breanon\", \"Bremen\", \"Brenna\", \"Brenner\", \"Brent\", \"Bress\", \"Bretaine\", \"Breyugar\", \"Brianna\", \"Bridget\",\r\n    \"Brielle\", \"Brigantu\", \"Brighton\", \"Brinn\", \"Brion\", \"Bristan\", \"Brita\", \"Brithael\", \"Brock\", \"Brockden\", \"Brodhead\", \"Brodribb\", \"Brogan\",\r\n    \"Bron\", \"Brona\", \"Bronwyn\", \"Bror\", \"Broun\", \"Bruna\", \"Bruno\", \"Brunt\", \"Brynhild\", \"Brynit\", \"Bryoni\", \"Bunnvor\", \"Bupu\",\r\n    \"Burcan\", \"Buri\", \"Burkard\", \"Buzurg\", \"Byam\", \"Byblos\", \"Byre\", \"Byrna\", \"Byrne\", \"Bysshe\", \"Cabell\", \"Cabillo\", \"Caddor\",\r\n    \"Caden\", \"Cadfael\", \"Cadmar\", \"Cadrach\", \"Cadwallader\", \"Caecyn\", \"Cael\", \"Caelon\", \"Caer\", \"Cai\", \"Cail\", \"Cairn\", \"Caitlin\",\r\n    \"Caladon\", \"Calandria\", \"Calbraith\", \"Calder\", \"Cale\", \"Caleb\", \"Calera\", \"Caliban\", \"Callan\", \"Callcott\", \"Calmic\", \"Calrohir\", \"Calumn\",\r\n    \"Calvert\", \"Camber\", \"Cambree\", \"Camiya\", \"Canina\", \"Caprice\", \"Cardon\", \"Caramon\", \"Carelia\", \"Carey\", \"Caribou\", \"Caris\", \"Carl\",\r\n    \"Carless\", \"Carli\", \"Carlyle\", \"Caryne\", \"Caron\", \"Carsten\", \"Carvell\", \"Caryl\", \"Cashin\", \"Caspian\", \"Cassandra\", \"Cassaway\", \"Cathal\",\r\n    \"Catherine\", \"Cathla'in\", \"Cathlain\", \"Cathlin\", \"Cayl\", \"Caylin\", \"Cecilia\", \"Cecily\", \"Cedric\", \"Cedrick\", \"Cedrim\", \"Celadae\", \"Celebdil\",\r\n    \"Celeborn\", \"Celeren\", \"Celes\", \"Celeste\", \"Celestine\", \"Celia\", \"Celowen\", \"Cemark\", \"Ceomyr\", \"Ceowulf\", \"Cercyon\", \"Ceremon\", \"Cerimon\",\r\n    \"Cerindar\", \"Cermor\", \"Cernd\", \"Ceryx\", \"Cespar\", \"Cevir\", \"Ceylinn\", \"Chaka\", \"Chalfant\", \"Challen\", \"Chamon\", \"Chanti\", \"Chard\",\r\n    \"Charissa\", \"Charlene\", \"Charlotte\", \"Chauncey\", \"Chauntea\", \"Chavir\", \"Chaya\", \"Checotah\", \"Chevonne\", \"Chevran\", \"Chichester\", \"Chimaera\", \"Chiodwig\",\r\n    \"Chiron\", \"Chittenden\", \"Chloe\", \"Christopher\", \"Chronepsis\", \"Chronos\", \"Chrowder\", \"Chuz\", \"Cid\", \"Cilmar\", \"Cinerva\", \"Cirkin\", \"Civar\",\r\n    \"Claed\", \"Clafin\", \"Claire\", \"Clarinda\", \"Claudia\", \"Cleghorn\", \"Clerihew\", \"Clinch\", \"Clipster\", \"Clopton\", \"Cloud\", \"Clover\", \"Clovis\",\r\n    \"Cnud\", \"Cnut\", \"Coalter\", \"Cobryn\", \"Coddry\", \"Coel\", \"Coela\", \"Cohn\", \"Colden\", \"Colgan\", \"Colmen\", \"Colon\", \"Colwyn\",\r\n    \"Coma\", \"Conall\", \"Conan\", \"Congal\", \"Conlan\", \"Conn\", \"Connell\", \"Connidas\", \"Connon\", \"Connop\", \"Conor\", \"Conrad\", \"Constantius\",\r\n    \"Conwy\", \"Conyasal\", \"Coprates\", \"Cora\", \"Coral\", \"Corbin\", \"Corellon\", \"Coren\", \"Corin\", \"Corinne\", \"Corinth\", \"Cormac\", \"Cornelius\",\r\n    \"Corrowr\", \"Corry\", \"Corryn\", \"Corwin\", \"Cotton\", \"Cowan\", \"Cowden\", \"Cowper\", \"Coyan\", \"Craigh\", \"Cray\", \"Crewzel\", \"Creydah\",\r\n    \"Cronyn\", \"Croyble\", \"Crundall\", \"Crynal\", \"Crysania\", \"Cryshandylin\", \"Cryunnos\", \"Cuall\", \"Cuane\", \"Cuddry\", \"Cuhaid\", \"Culiross\", \"Culkin\",\r\n    \"Cullen\", \"Cullyn\", \"Cuthalion\", \"Cuthbert\", \"Cylarus\", \"Cylie\", \"Cylmar\", \"Cymbeline\", \"Cyndor\", \"Cynoril\", \"Cyria\", \"Cyriel\", \"Cyrilla\",\r\n    \"Cyrillus\", \"Cyrus\", \"Cyryl\", \"Cythnar\", \"Cyton\", \"Daburn\", \"Daen\", \"Dagar\", \"Dagda\", \"Dagmar\", \"Dagni\", \"Dagny\", \"Dagwyn\",\r\n    \"Dahil\", \"Daikkah\", \"Daila\", \"Daila'in\", \"Daimhin\", \"Daimon\", \"Daisy\", \"Dakamon\", \"Dakoda\", \"Dalamar\", \"Dall\", \"Dalla\", \"Dallandra\",\r\n    \"Dalziel\", \"Damar\", \"Damien\", \"Damon\", \"Dana\", \"Danforth\", \"Daniel\", \"Dannun\", \"Dannyn\", \"Danu\", \"Danuvius\", \"Daood\", \"Daphin\",\r\n    \"Dara\", \"Daragor\", \"Darandriel\", \"Darell\", \"Darien\", \"Dario\", \"Darius\", \"Darkash\", \"Darkboon\", \"Darkspur\", \"Darlis\", \"Daron\", \"Darrell\",\r\n    \"Darrin\", \"Darvin\", \"Daryan\", \"Dashiell\", \"Dashwood\", \"Dasyani\", \"Dathan\", \"Dathanja\", \"Daugas\", \"David\", \"Davnet\", \"Davros\", \"Dawn\",\r\n    \"Dayyan\", \"Dekteon\", \"Delevan\", \"Delita\", \"Dell\", \"Dellin\", \"Delmund\", \"Demarest\", \"Demi\", \"Deminar\", \"Demtris\", \"Denethor\", \"Denhain\",\r\n    \"Denor\", \"Denton\", \"Denzil\", \"Deogol\", \"Derfel\", \"Derian\", \"Dermaria\", \"Derran\", \"Derroll\", \"Derval\", \"Dervilia\", \"Desmona\", \"Devabriel\",\r\n    \"Devaron\", \"Deveron\", \"Devra\", \"Dexter\", \"Dhakos\", \"Dhan\", \"Dharijor\", \"Dholemtrix\", \"Dhur\", \"Diadra\", \"Diagur\", \"Dian\", \"Diarmud\",\r\n    \"Diderik\", \"Diehi\", \"Dighton\", \"Dillon\", \"Dimura\", \"Dinham\", \"Dinivan\", \"Dino\", \"Dionetta\", \"Diony\", \"Dirk\", \"Dirrach\", \"Divos\",\r\n    \"Djamal\", \"Dmitri\", \"Doak\", \"Dolman\", \"Dolyan\", \"Domnu\", \"Donagh\", \"Donal\", \"Donblas\", \"Dongal\", \"Doniol\", \"Donivesh\", \"Donovan\",\r\n    \"Doral\", \"Dorea\", \"Dorian\", \"Dorin\", \"Dorn\", \"Dornhnall\", \"Dorr\", \"Dorsan\", \"Dorvai\", \"Dotta\", \"Doud\", \"Dougal\", \"Doust\",\r\n    \"Draco\", \"Dragan\", \"Dragus\", \"Dragutin\", \"Draka\", \"Drake\", \"Drako\", \"Dran\", \"Draoi\", \"Draven\", \"Drax\", \"Drayko\", \"Dred\",\r\n    \"Dreed\", \"Drexel\", \"Drezael\", \"Drezaem\", \"Drin\", \"Drinda\", \"Drion\", \"Drusilla\", \"Drynn\", \"Dréagg\", \"Duain\", \"Duald\", \"Duana\",\r\n    \"Duer\", \"Dugal\", \"Dugald\", \"Dugdale\", \"Dulasiri\", \"Dumathoin\", \"Dunbar\", \"Dundas\", \"Dunglas\", \"Dunnabar\", \"Dunstan\", \"Dunwody\", \"Duny\",\r\n    \"Dunya\", \"Dur-Shuk\", \"Duran\", \"Durek\", \"Durin\", \"Durnik\", \"Durward\", \"Dwarkanath\", \"Dweomer\", \"Dwyer\", \"Dyce\", \"Dyer\", \"Dygardo\",\r\n    \"Dyke\", \"Dylan\", \"Dymphna\", \"Dynar\", \"Dyneley\", \"Dynera\", \"Dynie\", \"Dytan\", \"Dyvim\", \"E'thane\", \"Eadweard\", \"Eager\", \"Eamon\",\r\n    \"Eanger\", \"Eardley\", \"Earle\", \"Earnest\", \"Eastman\", \"Ebany\", \"Ebba\", \"Eberhard\", \"Ebony\", \"Echael\", \"Eckert\", \"Eckhard\", \"Ector\",\r\n    \"Edcyl\", \"Edda\", \"Edeva\", \"Edgar\", \"Edina\", \"Edla\", \"Edmond\", \"Edmondstone\", \"Edric\", \"Edrie\", \"Edson\", \"Eduard\", \"Edwin\",\r\n    \"Edwina\", \"Edwyn\", \"Eevin\", \"Efiath\", \"Efrem\", \"Egan\", \"Egbert\", \"Egerton\", \"Egil\", \"Egon\", \"Egron\", \"Ehlreth\", \"Ehrman\",\r\n    \"Eilhard\", \"Eilif\", \"Eilinud\", \"Einar\", \"Eindrini\", \"Eirech\", \"Eirik\", \"Eiron\", \"Eithne\", \"Eivind\", \"Ekaterina\", \"Elaine\", \"Elath\",\r\n    \"Elbert\", \"Eldath\", \"Eldavon\", \"Eldgrim\", \"Eldid\", \"Eldin\", \"Eldon\", \"Eldred\", \"Eldric\", \"Eldrin\", \"Eldron\", \"Eldìvèn\", \"Eleanor\",\r\n    \"Eleazar\", \"Electa\", \"Elelil\", \"Elena\", \"Elendil\", \"Eleno'in\", \"Elentari\", \"Elerion\", \"Elessar\", \"Elfnida\", \"Elfnide\", \"Elfnieda\", \"Elford\",\r\n    \"Elhanan\", \"Eliakini\", \"Eliard\", \"Elinor\", \"Elion\", \"Eliseth\", \"Elispeth\", \"Elisseer\", \"Elistan\", \"Eliwood\", \"Elizabeth\", \"Ella\", \"Ellanath\",\r\n    \"Ellen\", \"Ellin\", \"Ellingwood\", \"Ellydryr\", \"Ellynor\", \"Elmeric\", \"Elmira\", \"Eloisa\", \"Elora\", \"Elowen\", \"Elrad\", \"Elric\", \"Elrik\",\r\n    \"Elrodin\", \"Elron\", \"Elrond\", \"Elsa\", \"Elsbeth\", \"Elsdon\", \"Elspeth\", \"Elswyth\", \"Elton\", \"Elu\", \"Elva\", \"Elvalind\", \"Elvarion\",\r\n    \"Elvin\", \"Elvina\", \"Elvira\", \"Elvrit\", \"Elvérion\", \"Elwell\", \"Elwin\", \"Elwyn\", \"Elysia\", \"Emberyl\", \"Emerynn\", \"Emirah\", \"Emma\",\r\n    \"Emna\", \"Emory\", \"Endemian\", \"Endicott\", \"Endoray\", \"Endrede\", \"Endsor\", \"Engeihard\", \"Enigma\", \"Enn\", \"Ennorath\", \"Envi\", \"Enzoray\",\r\n    \"Eolair\", \"Eomer\", \"Eosin\", \"Eowyn\", \"Ephyre\", \"Erana\", \"Erard\", \"Ercan\", \"Erdmann\", \"Erebor\", \"Ergon\", \"Erian\", \"Eric\",\r\n    \"Erich\", \"Erie\", \"Erik\", \"Erika\", \"Erilyth\", \"Erland\", \"Erlend\", \"Erling\", \"Ernald\", \"Ernan\", \"Ernata\", \"Errine\", \"Ervin\",\r\n    \"Eryka\", \"Eryn\", \"Esghar\", \"Eslin\", \"Esmeralda\", \"Esmond\", \"Esnar\", \"Essa\", \"Esselin\", \"Estheria\", \"Estrella\", \"Etelka\", \"Ethelbearn\",\r\n    \"Ethelbert\", \"Ethelburga\", \"Ethelred\", \"Ethelreda\", \"Eudo\", \"Eugene\", \"Eulala\", \"Evadne\", \"Evaine\", \"Evald\", \"Evan\", \"Evarts\", \"Evelina\",\r\n    \"Evelyn\", \"Everard\", \"Evert\", \"Evind\", \"Evo\", \"Evolyn\", \"Evska\", \"Ewald\", \"Ewen\", \"Ewugan\", \"Eystein\", \"Eyulf\", \"Eyvind\",\r\n    \"Ezail\", \"Ezellohar\", \"Ezirith\", \"Ezme\", \"Ezrabar\", \"Ezri\", \"Faber\", \"Fabian\", \"Fael\", \"Faelyn\", \"Fahs\", \"Fairfax\", \"Fairtnan\",\r\n    \"Falathar\", \"Falcon\", \"Falgar\", \"Fali\", \"Falias\", \"Falkiner\", \"Falmalinnar\", \"Falyrias\", \"Fanchon\", \"Fangorn\", \"Fanshaw\", \"Faraday\", \"Farah\",\r\n    \"Farale\", \"Faramir\", \"Faran\", \"Farathar\", \"Farid\", \"Farith\", \"Farli\", \"Farnham\", \"Farouk\", \"Farquhar\", \"Farrin\", \"Farwehl\", \"Fatima\",\r\n    \"Fausto\", \"Fawn\", \"Faysal\", \"Fea\", \"Feargus\", \"Fedor\", \"Feike\", \"Felam\", \"Felladin\", \"Fellador\", \"Fellathor\", \"Fellow\", \"Fenella\",\r\n    \"Fenton\", \"Fenwick\", \"Fera\", \"Ferantay\", \"Ferazhin\", \"Ferdinand\", \"Fergus\", \"Fernand\", \"Feron\", \"Feustmann\", \"Fhinders\", \"Fhorgeir\", \"Fiana\",\r\n    \"Fiathna\", \"Fielding\", \"Fikir\", \"Filippe\", \"Finarfin\", \"Finbar\", \"Findegil\", \"Findley\", \"Finegan\", \"Fingal\", \"Fingalla\", \"Fingil\", \"Finias\",\r\n    \"Finn\", \"Finnbogi\", \"Finos\", \"Fiona\", \"Fiorag\", \"Fiori\", \"Firca\", \"Firin\", \"Firon\", \"Firozhan\", \"Fistandantilus\", \"Fistar\", \"Fistor\",\r\n    \"Fitzedward\", \"Fitzroy\", \"Fizban\", \"Fjolnir\", \"Flandrena\", \"Flare\", \"Flavius\", \"Flint\", \"Floki\", \"Florimund\", \"Flosi\", \"Flygare\", \"Flynn\",\r\n    \"Fnida\", \"Fomorii\", \"Forbus\", \"Forester\", \"Fornost\", \"Foronte\", \"Fothergill\", \"Francisco\", \"Frayja\", \"Freda\", \"Frederic\", \"Frederica\", \"Frederick\",\r\n    \"Fredrick\", \"Fredrik\", \"Freeborn\", \"Freeman\", \"Frey\", \"Freya\", \"Freydis\", \"Fridgeir\", \"Frodo\", \"Fryniwyd\", \"Fuad\", \"Fumorak\", \"Furnifold\",\r\n    \"Fury\", \"Fyodor\", \"Fyodr\", \"Fyza\", \"Gaarn\", \"Gabniela\", \"Gabriel\", \"Gadsby\", \"Gaea\", \"Gael\", \"Gaelinar\", \"Gaena\", \"Gaerdal\",\r\n    \"Gaillard\", \"Gairdner\", \"Galach\", \"Galadren\", \"Galan\", \"Galanna\", \"Galapas\", \"Galaphon\", \"Galar\", \"Galbard\", \"Galderon\", \"Galdor\", \"Gale\",\r\n    \"Galeia\", \"Galen\", \"Galfrey\", \"Galion\", \"Galrandar\", \"Galrion\", \"Gama\", \"Gandalf\", \"Ganduil\", \"Ganith\", \"Gannon\", \"Ganvan\", \"Gardi\",\r\n    \"Garet\", \"Gareth\", \"Garion\", \"Garith\", \"Garl\", \"Garland\", \"Garlenon\", \"Garn\", \"Garon\", \"Garrick\", \"Garrott\", \"Garth\", \"Gartnas\",\r\n    \"Garvin\", \"Garwood\", \"Gaston\", \"Gavendra\", \"Gavin\", \"Gavina\", \"Gawain\", \"Gealsgiath\", \"Gebhard\", \"Geir\", \"Geirmund\", \"Geirstein\", \"Gelonna\",\r\n    \"Genevieve\", \"Geoffrey\", \"Georgii\", \"Gerald\", \"Gerard\", \"Gerd\", \"Gerhard\", \"Gerhart\", \"Gerloc\", \"Gerrard\", \"Gerreint\", \"Gerrish\", \"Gertrude\",\r\n    \"Gervaise\", \"Gesin\", \"Gest\", \"Ghirra\", \"Ghislain\", \"Gholson\", \"Gia\", \"Gibbon\", \"Gilberta\", \"Gilda\", \"Gilden\", \"Gildersleeve\", \"Giles\",\r\n    \"Gilfanon\", \"Gilian\", \"Gilir\", \"Gilli\", \"Gillion\", \"Gillyn\", \"Gilm\", \"Gilraen\", \"Gilthanas\", \"Gimli\", \"Gird\", \"Girin\", \"Gisgin\",\r\n    \"Gizur\", \"Gladstone\", \"Glassford\", \"Glebur\", \"Gleda\", \"Gleocyn\", \"Gleridower\", \"Glida\", \"Glogan\", \"Gloisur\", \"Glorfindel\", \"Glugwyn\", \"Glum\",\r\n    \"Glyn\", \"Glynn\", \"Gnazia\", \"Godfred\", \"Godfrey\", \"Godwin\", \"Goibhniu\", \"Golding\", \"Goldwin\", \"Gollum\", \"Gongalo\", \"Goodhue\", \"Gorbash\",\r\n    \"Gordalius\", \"Gorias\", \"Gorion\", \"Gorm\", \"Gotthard\", \"Govier\", \"Govind\", \"Gowen\", \"Grace\", \"Graham\", \"Graine\", \"Gralon\", \"Grani\",\r\n    \"Grania\", \"Gravin\", \"Greegan\", \"Greenleaf\", \"Gregor\", \"Gregory\", \"Grendahl\", \"Greyfell\", \"Grian\", \"Gridley\", \"Griffid\", \"Griffin\", \"Griffith\",\r\n    \"Griggs\", \"Grim\", \"Grima\", \"Grimhilda\", \"Grimnir\", \"Grindan\", \"Griniing\", \"Grisha\", \"Griswold\", \"Groa\", \"Grover\", \"Grunak\", \"Grunnhild\",\r\n    \"Gruumsh\", \"Gualat\", \"Gudmund\", \"Gudmundur\", \"Gudrid\", \"Gudris\", \"Gudrun\", \"Guibert\", \"Guida\", \"Guido\", \"Gulian\", \"Gunila\", \"Gunnar\",\r\n    \"Gunning\", \"Gunther\", \"Gurnarok\", \"Gurney\", \"Gustav\", \"Guthorm\", \"Guthrie\", \"Guthum\", \"Gutzon\", \"Guy\", \"Gwacyn\", \"Gwaihir\", \"Gweddyn\",\r\n    \"Gwen\", \"Gwenca\", \"Gwenda\", \"Gwendolyn\", \"Gwenevere\", \"Gweniver\", \"Gwildor\", \"Gwoc\", \"Gwomyr\", \"Gwydion\", \"Gwyn\", \"Gwyneth\", \"Gwynfryd\",\r\n    \"Gwyran\", \"Gwythinn\", \"Gyda\", \"Gylian\", \"Gymir\", \"Haakon\", \"Habib\", \"Hablot\", \"Hack\", \"Haddon\", \"Hadrian\", \"Haestan\", \"Hafez\",\r\n    \"Hafgrim\", \"Hagar\", \"Haigh\", \"Hakatri\", \"Haki\", \"Hakon\", \"Halbert\", \"Halcyon\", \"Haldane\", \"Haldor\", \"Hale\", \"Halfdan\", \"Haliina\",\r\n    \"Hall\", \"Halldis\", \"Halldor\", \"Halley\", \"Hallfred\", \"Hallfrid\", \"Hallgerd\", \"Hallkel\", \"Hallock\", \"Halloweii\", \"Hallveig\", \"Halvord\", \"Hamlin\",\r\n    \"Hamnet\", \"Hanford\", \"Hani\", \"Haninah\", \"Hannibal\", \"Hanoran\", \"Hansine\", \"Hapweth\", \"Harald\", \"Harbaugh\", \"Harcourt\", \"Hardernan\", \"Hardon\",\r\n    \"Hardwicke\", \"Harek\", \"Harkness\", \"Harlan\", \"Harlo\", \"Harold\", \"Haroon\", \"Harpo\", \"Harren\", \"Harthan\", \"Harthran\", \"Hartpole\", \"Hartwig\",\r\n    \"Harwood\", \"Hasket\", \"Hassan\", \"Hastein\", \"Hatcher\", \"Hattrick\", \"Hauk\", \"Havard\", \"Havelock\", \"Hayvan\", \"Hazard\", \"Hazel\", \"Haziran\",\r\n    \"Hazrond\", \"Healdon\", \"Heardred\", \"Heaslip\", \"Heather\", \"Hector\", \"Hedda\", \"Hedin\", \"Hedwig\", \"Heimer\", \"Helena\", \"Helga\", \"Helgi\",\r\n    \"Helir\", \"Helix\", \"Helm\", \"Helma\", \"Helmi\", \"Heman\", \"Hemming\", \"Hendrik\", \"Hengist\", \"Henna\", \"Henrick\", \"Henry\", \"Geramon\",\r\n    \"Herdis\", \"Herekin\", \"Hereward\", \"Herijar\", \"Hermione\", \"Heron\", \"Hertha\", \"Heryom\", \"Herzog\", \"Heward\", \"Hhaba'id\", \"Hhabezur\", \"Hickling\",\r\n    \"Hidohebhi\", \"Hifryn\", \"Hild\", \"Hilda\", \"Hildebrand\", \"Hildegarde\", \"Hildric\", \"Himli\", \"Hisar\", \"Hislop\", \"Hjalmar\", \"Hjalti\", \"Hjeldin\",\r\n    \"Hjort\", \"Hjorth\", \"Hlif\", \"Hoadley\", \"Hoar\", \"Hobart\", \"Hodgdon\", \"Hogg\", \"Hogni\", \"Holbrook\", \"Holger\", \"Holgi\", \"Hollister\",\r\n    \"Holly\", \"Homli\", \"Hookham\", \"Horan\", \"Horatio\", \"Hord\", \"Horik\", \"Hormstein\", \"Horsa\", \"Hortensia\", \"Horton\", \"Hoskuld\", \"Hosni\",\r\n    \"Hossein\", \"Howarth\", \"Howland\", \"Hrafn\", \"Hrapp\", \"Hrefna\", \"Hrethel\", \"Hring\", \"Hroald\", \"Hrodyn\", \"Hrolf\", \"Hrothgar\", \"Hrugan\",\r\n    \"Hruggek\", \"Hruse\", \"Hrut\", \"Huffatn\", \"Hulbeart\", \"Hulda\", \"Hultz\", \"Humbert\", \"Hunter\", \"Hurd\", \"Hurgal\", \"Hurvin\", \"Hussain\",\r\n    \"Hustana\", \"Hyarantar\", \"Hyarante\", \"Hyder\", \"Hyfryn\", \"Hygelac\", \"Hylissa\", \"Hynman\", \"Hyrak\", \"Ian\", \"Iana\", \"Ibitz\", \"Ibrahim\",\r\n    \"Ibrandul\", \"Ica\", \"Icarus\", \"Icava\", \"Ick\", \"Ida\", \"Idarolan\", \"Iden\", \"Idris\", \"Iduna\", \"Iduné\", \"Ies'lorn\", \"Igjaru\",\r\n    \"Igor\", \"Ikarin\", \"Ilena\", \"Ilermath\", \"Ilia\", \"Iliriya\", \"Illentik\", \"Illuin\", \"Illyana\", \"Ilmare\", \"Ilniora\", \"Ilthoss\", \"Iluvatar\",\r\n    \"Ilya\", \"Ilyesha\", \"Imajin\", \"Imnar\", \"Imoen\", \"Imphela\", \"Imrador\", \"Imrahan\", \"Imrahim\", \"Imril\", \"Imryr\", \"Inahwen\", \"Indech\",\r\n    \"Indigo\", \"Indira\", \"Indreju\", \"Indria\", \"Ingald\", \"Ingeborg\", \"Ingen\", \"Ingi\", \"Ingirid\", \"Ingolf\", \"Ingram\", \"Ingrid\", \"Ingunn\",\r\n    \"Inifael\", \"Inigo\", \"Inisfa'il\", \"Iosaz\", \"Iosef\", \"Irgash\", \"Irial\", \"Irian\", \"Iris\", \"Irma\", \"Irphilin\", \"Irsai\", \"Irvin\",\r\n    \"Irwick\", \"Isael\", \"Isak\", \"Isambard\", \"Isbeorn\", \"Iscal\", \"Iselore\", \"Isengard\", \"Isengrim\", \"Iserion\", \"Isgrimnur\", \"Ishmael\", \"Isidora\",\r\n    \"Isiki\", \"Isildur\", \"Isilith\", \"Isleif\", \"Ismail\", \"Isolde\", \"Isorn\", \"Issak\", \"Ithaca\", \"Iuz\", \"Ivan\", \"Ivar\", \"Ivor\",\r\n    \"Ivy\", \"Iwanda\", \"Iyu'nigato\", \"Izard\", \"Izebel\", \"Izvire\", \"Jace\", \"Jacinth\", \"Jacoby\", \"Jacor\", \"Jade\", \"Jaden\", \"Jadzia\",\r\n    \"Jael\", \"Jaffar\", \"Jagadis\", \"Jaheira\", \"Jahrec\", \"Jahverbhai\", \"Jalasil\", \"Jalavier\", \"Jaligal\", \"Jamila\", \"Janda'nan\", \"Jandanan\", \"Janix\",\r\n    \"Janna\", \"Janus\", \"Janvel\", \"Jarak\", \"Jarazal\", \"Jared\", \"Jarek\", \"Jarnagua\", \"Jarriel\", \"Jarvin\", \"Jasara\", \"Jasek\", \"Jaseve\",\r\n    \"Jasha\", \"Jasmine\", \"Jason\", \"Javair\", \"Javon\", \"Jawaharial\", \"Jayce\", \"Jayden\", \"Jaylidan\", \"Jayna\", \"Jaysen\", \"Jazhara\", \"Jazrel\",\r\n    \"Jedd\", \"Jeffen\", \"Jehryn\", \"Jelyn\", \"Jenantar\", \"Jenkin\", \"Jennifer\", \"Jens\", \"Jensine\", \"Jephson\", \"Jerec\", \"Jeryth\", \"Jesiper\",\r\n    \"Jespar\", \"Jesslyn\", \"Jestyn\", \"Jethis\", \"Jevan\", \"Jevist\", \"Jezryanadar\", \"Jhael\", \"Jhaelen\", \"Jhany\", \"Jhardamòr\", \"Jharkor\", \"Jhary\",\r\n    \"Jihad\", \"Jillian\", \"Jingizu\", \"Jintah\", \"Jiriki\", \"Jirnost\", \"Jocelyn\", \"Jochan\", \"Johannes\", \"John\", \"Jolan\", \"Jomano\", \"Jonaya\",\r\n    \"Joran\", \"Jordan\", \"Joriel\", \"Jornadesh\", \"Jorunn\", \"Joscelyn\", \"Joseph\", \"Josephine\", \"Josette\", \"Joshua\", \"Jotham\", \"Jovena\", \"Jubini\",\r\n    \"Jullana\", \"Junius\", \"Juno\", \"Juntalin\", \"Jura\", \"Jurim\", \"Jusif\", \"Juss\", \"Jyresh\", \"K'aarna\", \"Kaarna\", \"Kael\", \"Kaelin\",\r\n    \"Kaffa\", \"Kai\", \"Kaia\", \"Kailyn\", \"Kaimana\", \"Kaitlinn\", \"Kaja\", \"Kalan\", \"Kalantir\", \"Kalar\", \"Kaldar\", \"Kaleen\", \"Kalen\",\r\n    \"Kalf\", \"Kalia\", \"Kalina\", \"Kalvan\", \"Kalvaro\", \"Kalyra\", \"Kalysha\", \"Kamril\", \"Kamshir\", \"Kanoa\", \"Kaori\", \"Kaprin\", \"Kara\",\r\n    \"Karali\", \"Karel\", \"Karelia\", \"Kari\", \"Karim\", \"Karinca\", \"Karine\", \"Karis\", \"Karitsa\", \"Karker\", \"Karl\", \"Karlsefni\", \"Karran\",\r\n    \"Karya\", \"Kaschak\", \"Kasia\", \"Kaspar\", \"Kasreyn\", \"Kathena\", \"Kathran\", \"Katishimo\", \"Katla\", \"Katnina\", \"Katrin\", \"Katrina\", \"Kavalam\",\r\n    \"Kavalnir\", \"Kaylianna\", \"Kaylin\", \"Kazairl\", \"Kazalim\", \"Kazir\", \"Keavy\", \"Keelan\", \"Kegan\", \"Keiko\", \"Keldorn\", \"Kelin\", \"Kellin\",\r\n    \"Kelma'in\", \"Kelson\", \"Kelth\", \"Kelvin\", \"Kemble\", \"Kendall\", \"Kendra\", \"Kendrick\", \"Kenesaw\", \"Kenin\", \"Kenny\", \"Kenobi\", \"Kenrick\",\r\n    \"Kerik\", \"Kerish\", \"Kermit\", \"Kerrigan\", \"Keshar\", \"Kesrick\", \"Kethios\", \"Ketial\", \"Ketil\", \"Kettali\", \"Kevan\", \"Keven\", \"Kevlin\",\r\n    \"Keyrnon\", \"Khader\", \"Khalia\", \"Khalid\", \"Khanzadian\", \"Kharas\", \"Khealynn\", \"Khelben\", \"Kheldor\", \"Khelen\", \"Khelin\", \"Khelyn\", \"Khendraja'aro\",\r\n    \"Khenel\", \"Khezeed\", \"Khindawe\", \"Khirsha\", \"Khlor\", \"Khris\", \"Khyved\", \"Ki'ushapo\", \"Kian\", \"Kiborno\", \"Kiera\", \"Kieran\", \"Kikkasut\",\r\n    \"Kilas\", \"Kilian\", \"Killion\", \"Kimmuriel\", \"Kimura\", \"Kinloch\", \"Kinson\", \"Kippler\", \"Kira\", \"Kiri\", \"Kirjava\", \"Kirk\", \"Kirren\",\r\n    \"Kirsopp\", \"Kirsten\", \"Kishin\", \"Kisin\", \"Kitiara\", \"Kjeldor\", \"Kjindar\", \"Klaus\", \"Klean\", \"Klerak\", \"Knud\", \"Knut\", \"Knute\",\r\n    \"Koabon\", \"Kolbein\", \"Kolchash\", \"Kolskegg\", \"Kolya\", \"Kona\", \"Konrad\", \"Konstantine\", \"Korban\", \"Kord\", \"Koreth\", \"Korgan\", \"Korm\",\r\n    \"Kormar\", \"Kornag\", \"Korska\", \"Kosh\", \"Kota\", \"Kovelir\", \"Krinn\", \"Krishnalai\", \"Kroh\", \"Krom\", \"Kronos\", \"Kuno\", \"Kurd\",\r\n    \"Kurn\", \"Kurt\", \"Kurin\", \"Kuros\", \"Kurtulmak\", \"Ky'ishi\", \"Ky'varan\", \"Kyle\", \"Kylindra\", \"Kypros\", \"Kyrie\", \"Kyriel\", \"La'ahl\",\r\n    \"Lachesis\", \"Lachian\", \"Ladia\", \"Ladoros\", \"Laeli\", \"Laelia\", \"Laerrui\", \"Lahar\", \"Lahsai\", \"Lalely\", \"Lamar\", \"Lambi\", \"Lan\",\r\n    \"Lana\", \"Lance\", \"Lancelot\", \"Landailyn\", \"Landoris\", \"Landrea\", \"Laneth\", \"Langhorne\", \"Langrian\", \"Langston\", \"Lanthal\", \"Lanthorn\", \"Larad\",\r\n    \"Lardner\", \"Larisa\", \"Larkin\", \"Larn\", \"Larnea\", \"Lars\", \"Larz\", \"Lashar\", \"Lateia\", \"Lathander\", \"Laurana\", \"Laurelin\", \"Laxton\",\r\n    \"Lazar\", \"Lazlo\", \"Lea\", \"Leareth\", \"Leathian\", \"Lec\", \"Ledyard\", \"Leela\", \"Legolas\", \"Legrand\", \"Leif\", \"Leighton\", \"Leika\",\r\n    \"Leila\", \"Leilah\", \"Leli\", \"Lembar\", \"Lenka\", \"Lenox\", \"Leo\", \"Leofric\", \"Leon\", \"Leonard\", \"Leonardo\", \"Leopond\", \"Lesesne\",\r\n    \"Lestyn\", \"Leta\", \"Letor\", \"Lev\", \"Lewellyri\", \"Lexan\", \"Lexx\", \"Lhuc\", \"Lia\", \"Liana\", \"Liena\", \"Lightfoot\", \"Liliane\",\r\n    \"Lilin\", \"Lina\", \"Lindar\", \"Linmer\", \"Linnea\", \"Lios\", \"Liphar\", \"Lippard\", \"Liptrot\", \"Lirith\", \"Lithar\", \"Littleton\", \"Livermore\",\r\n    \"Livia\", \"Ljot\", \"Ljotolf\", \"Lluth\", \"Llyn\", \"Llythin\", \"Lobelia\", \"Lobryn\", \"Lobur\", \"Locke\", \"Lockwood\", \"Loddlaen\", \"Lodica\",\r\n    \"Lodin\", \"Loella\", \"Logan\", \"Loibur\", \"Loili\", \"Lola\", \"Lonvan\", \"Lore\", \"Loric\", \"Lorin\", \"Lormyr\", \"Lothar\", \"Lothrop\",\r\n    \"Lott\", \"Lotta\", \"Loudon\", \"Louisa\", \"Lovegood\", \"Lovva\", \"Lovyan\", \"Luas\", \"Lucan\", \"Lucca\", \"Lucia\", \"Lucian\", \"Lucinda\",\r\n    \"Lucius\", \"Lucrecia\", \"Ludmila\", \"Luella\", \"Lufkin\", \"Lugh\", \"Luhsane\", \"Lum\", \"Lumbar\", \"Luna\", \"Lunar\", \"Lunetta\", \"Lupin\",\r\n    \"Lurican\", \"Lurue\", \"Luscan\", \"Luther\", \"Luthian\", \"Luvina\", \"Lycias\", \"Lydia\", \"Lylas\", \"Lyle\", \"Lymo\", \"Lyndall\", \"Lyndon\",\r\n    \"Lynette\", \"Lynis\", \"Lynn\", \"Lypilla\", \"Lyra\", \"Lyrian\", \"Lyrin\", \"Lyron\", \"Lysander\", \"Lyssa\", \"Lythia\", \"Lythian\", \"Lytler\",\r\n    \"Lyzandra\", \"Lyzette\", \"Lórien\", \"Mabon\", \"Macallan\", \"Macaulay\", \"Macer\", \"Mackim\", \"Macvey\", \"Maddern\", \"Maddock\", \"Madelon\", \"Madhao\",\r\n    \"Madora\", \"Maec\", \"Maegwin\", \"Mael\", \"Maerraent\", \"Mafka\", \"Magda\", \"Magh\", \"Magill\", \"Magna\", \"Magnus\", \"Magus\", \"Mahion\",\r\n    \"Mahmud\", \"Mahri\", \"Maia\", \"Maidah\", \"Maidak\", \"Maihar\", \"Makoma\", \"Malach\", \"Malachias\", \"Maladack\", \"Malador\", \"Malak\", \"Malar\",\r\n    \"Malcoff\", \"Malcolm\", \"Malfar\", \"Malia\", \"Maliforin\", \"Malkil\", \"Malto\", \"Malvin\", \"Malvtha\", \"Mama\", \"Mamba\", \"Mana\", \"Manala\",\r\n    \"Manaverr\", \"Manfred\", \"Mankey\", \"Mannin\", \"Manon\", \"Mansour\", \"Manton\", \"Manwe\", \"Maoll\", \"March\", \"Marcus\", \"Marena\", \"Margarita\",\r\n    \"Margery\", \"Mariandor\", \"Marid\", \"Marina\", \"Marion\", \"Marissa\", \"Marisse\", \"Mark\", \"Markham\", \"Maroof\", \"Marques\", \"Marsden\", \"Marshtnan\",\r\n    \"Marsineh\", \"Marta\", \"Martin\", \"Martus\", \"Mary\", \"Maryn\", \"Mathilda\", \"Mathilde\", \"Matilda\", \"Matthew\", \"Matthias\", \"Maudlin\", \"Maura\",\r\n    \"Mavis\", \"Maxander\", \"Maxfield\", \"Maximilian\", \"Maximus\", \"Maya\", \"Mayhew\", \"Mazrak\", \"Medar\", \"Medart\", \"Medea\", \"Meder\", \"Medrom\",\r\n    \"Megan\", \"Meghnad\", \"Mehmet\", \"Mekeesha\", \"Melba\", \"Melchior\", \"Meleri\", \"Meliadoul\", \"Melian\", \"Melisande\", \"Melkor\", \"Mellyora\", \"Melnyth\",\r\n    \"Melora\", \"Melva\", \"Melvaig\", \"Memor\", \"Men\", \"Menard\", \"Mendolin\", \"Menelvagor\", \"Mennefer\", \"Meoran\", \"Mephistopheles\", \"Merah\", \"Merasye\",\r\n    \"Meredith\", \"Meriadoc\", \"Merifa\", \"Merivan\", \"Merlin\", \"Merrilee\", \"Merryn\", \"Mervyn\", \"Merwold\", \"Merwolf\", \"Mes'ard\", \"Meta\", \"Methos\",\r\n    \"Methuen\", \"Michael\", \"Michel\", \"Mideya\", \"Midhat\", \"Midra\", \"Mignon\", \"Miguel\", \"Mikhail\", \"Mila\", \"Milada\", \"Milander\", \"Milandro\",\r\n    \"Mileaha\", \"Millard\", \"Milo\", \"Mimir\", \"Mina\", \"Minella\", \"Miner\", \"Minna\", \"Minx\", \"Mira\", \"Miragon\", \"Miranda\", \"Mirandros\",\r\n    \"Miriel\", \"Mirrash\", \"Mirromi\", \"Miryam\", \"Misha\", \"Mishanti\", \"Misin\", \"Mist\", \"Mithrandir\", \"Mithryl\", \"Mitre\", \"Miwa\", \"Mizra\",\r\n    \"Moda\", \"Modeus\", \"Moffett\", \"Mohammed\", \"Mohieddin\", \"Moina\", \"Moira\", \"Moiriane\", \"Moisur\", \"Molina\", \"Mona\", \"Monach\", \"Montfort\",\r\n    \"Mora\", \"Moradin\", \"Mord\", \"Moredlin\", \"Morgan\", \"Morgon\", \"Morgwin\", \"Moriana\", \"Morik\", \"Morin\", \"Morley\", \"Morna\", \"Morpheus\",\r\n    \"Morrigan\", \"Mortos\", \"Mortrock\", \"Morven\", \"Moya\", \"Muammar\", \"Mubur\", \"Muhammed\", \"Muhlwena\", \"Mujibur\", \"Muktar\", \"Munin\", \"Murdo\",\r\n    \"Murias\", \"Murina\", \"Murrough\", \"Mussa\", \"Mustadio\", \"Mustafa\", \"Mylin\", \"Mylé\", \"Myna\", \"Myra\", \"Myriam\", \"Myrick\", \"Myrmeen\",\r\n    \"Myrna\", \"Myron\", \"Myrrdyn\", \"Myrrha\", \"Myshella\", \"Mythil\", \"Myvor\", \"N'hadha\", \"Nada\", \"Nadezhda\", \"Nadia\", \"Nadir\", \"Nagai\",\r\n    \"Nagel\", \"Nagvar\", \"Nahar\", \"Naia\", \"Naidel\", \"Najib\", \"Nakea\", \"Nalia\", \"Nall\", \"Nanorion\", \"Naois\", \"Naomi\", \"Napollo\",\r\n    \"Narasen\", \"Narcista\", \"Narisa\", \"Narvi\", \"Nasir\", \"Nasser\", \"Natalia\", \"Natasha\", \"Nathalia\", \"Nathalie\", \"Natty\", \"Nazar\", \"Nebron\",\r\n    \"Nedda\", \"Nedstar\", \"Neelix\", \"Negley\", \"Nemm\", \"Nemuel\", \"Neral\", \"Neri\", \"Nerian\", \"Nerilka\", \"Nerissa\", \"Nerull\", \"Nesbit\",\r\n    \"Nesta\", \"Nethuan\", \"Neva\", \"Nevaeh\", \"Nevard\", \"Nevena\", \"Nevile\", \"Nevyn\", \"Newall\", \"Newbold\", \"Newman\", \"Neysa\", \"Neza\",\r\n    \"Nibbidard\", \"Nichol\", \"Nicor\", \"Nienna\", \"Night\", \"Nigil\", \"Nikolai\", \"Nikua\", \"Nila\", \"Nimir\", \"Nimrodel\", \"Nina\", \"Ninian\",\r\n    \"Niomir\", \"Nira'in\", \"Nirnir\", \"Nita\", \"Nivek\", \"Nivilian\", \"Nizam\", \"Nizar\", \"Nobanion\", \"Nodaran\", \"Noela\", \"Nolan\", \"Nona\",\r\n    \"Noora\", \"Nor\", \"Nordri\", \"Noreen\", \"Norine\", \"Norle\", \"Norna\", \"Norval\", \"Norvin\", \"Norwood\", \"Nova\", \"Novalis\", \"Novita\",\r\n    \"Novomira\", \"Nu'endo\", \"Nuada\", \"Nuadi\", \"Nuala\", \"Nuale\", \"Nuanni\", \"Nungo\", \"Nunila\", \"Nura\", \"Nurdoch\", \"Nurgan\", \"Nuri\",\r\n    \"Nushia\", \"Nyassa\", \"Nylan\", \"Nymara\", \"Nynaeve\", \"Nyra\", \"Nytasa\", \"Oakes\", \"Oalyn\", \"Obed\", \"Oberon\", \"Ocar\", \"Oda\",\r\n    \"Odar\", \"Odd\", \"Oden\", \"Odilia\", \"Odimus\", \"Odo\", \"Odona\", \"Ofeig\", \"Ogden\", \"Oghma\", \"Ogma\", \"Ogmund\", \"Ogrus\",\r\n    \"Okander\", \"Olac\", \"Olaf\", \"Oldac\", \"Oldham\", \"Olga\", \"Olissa\", \"Olof\", \"Olorin\", \"Oloru\", \"Olvir\", \"Olya\", \"Omandras\",\r\n    \"Omar\", \"Omassus\", \"Ombrum\", \"Omer\", \"Onslow\", \"Onufrio\", \"Onund\", \"Onyx\", \"Ooma\", \"Oona\", \"Oonai\", \"Opal\", \"Ophelia\",\r\n    \"Orah\", \"Orcrist\", \"Ordway\", \"Oriana\", \"Orin\", \"Orion\", \"Orius\", \"Orivaen\", \"Orlandu\", \"Orlata\", \"Orm\", \"Ormsby\", \"Orome\",\r\n    \"Oron\", \"Orren\", \"Orridge\", \"Orsola\", \"Orson\", \"Osa\", \"Osiris\", \"Oskavar\", \"Ospar\", \"Osric\", \"Oswin\", \"Othello\", \"Othilia\",\r\n    \"Otho\", \"Othran\", \"Otiluke\", \"Otkel\", \"Otrygg\", \"Ottar\", \"Ottilia\", \"Otto\", \"Overton\", \"Owain\", \"Owen\", \"Owyn\", \"Ozatras\",\r\n    \"Ozto\", \"Ozur\", \"Padraic\", \"Padrias\", \"Paget\", \"Pala\", \"Palma\", \"Pamar\", \"Pan\", \"Parbha\", \"Pargascor\", \"Parr\", \"Pasca\",\r\n    \"Paschal\", \"Passmore\", \"Patnas\", \"Pattabhai\", \"Pavel\", \"Pean\", \"Pearl\", \"Pearsall\", \"Peffer\", \"Peiham\", \"Peitar\", \"Peleg\", \"Pelipi\",\r\n    \"Pellin\", \"Pendleton\", \"Penfield\", \"Pengolod\", \"Penhallow\", \"Penniman\", \"Penrhyn\", \"Pepperell\", \"Pereban\", \"Peredon\", \"Peregrin\", \"Peregrine\", \"Perith\",\r\n    \"Peronn\", \"Perrin\", \"Persifor\", \"Pestivar\", \"Peter\", \"Pethros\", \"Petra\", \"Petrea\", \"Petronella\", \"Pflarr\", \"Phanuel\", \"Pharatnond\", \"Pharcellus\",\r\n    \"Phelim\", \"Philo\", \"Philpot\", \"Phimister\", \"Phoenix\", \"Phyrrus\", \"Pia\", \"Picar\", \"Pickman\", \"Pigot\", \"Pike\", \"Pine\", \"Pinkham\",\r\n    \"Pinkney\", \"Pinkstone\", \"Piotr\", \"Pittheus\", \"Plaisted\", \"Plunimer\", \"Plunkett\", \"Polassar\", \"Pollard\", \"Pollock\", \"Polonius\", \"Polycarp\", \"Pomeroy\",\r\n    \"Porthios\", \"Powell\", \"Prafulla\", \"Prendergast\", \"Preston\", \"Prichard\", \"Proctor\", \"Prospero\", \"Provida\", \"Psilofyr\", \"Puck\", \"Pue\", \"Pulisk\",\r\n    \"Pulteney\", \"Purdon\", \"Pyke\", \"Pyros\", \"Pysander\", \"Quaan\", \"Quagel\", \"Qualin\", \"Quan\", \"Quarles\", \"Quasar\", \"Quascar\", \"Quass\",\r\n    \"Quebba\", \"Quelfinas\", \"Quesan\", \"Queygo\", \"Quiddle\", \"Quinn\", \"Quiss\", \"Quixano\", \"Quora\", \"Quvar\", \"Quvean\", \"Raagon\", \"Raban\",\r\n    \"Rabind\", \"Rabur\", \"Rach\", \"Rachid\", \"Rackafel\", \"Rackhir\", \"Radagast\", \"Radija\", \"Rae\", \"Rael\", \"Raen\", \"Rafa\", \"Rafael\",\r\n    \"Rafur\", \"Ragen\", \"Ragna\", \"Ragnal\", \"Ragnar\", \"Ragnhild\", \"Rahaz\", \"Rai\", \"Raikes\", \"Rails\", \"Raimon\", \"Raina\", \"Raine\",\r\n    \"Raisa\", \"Raistlin\", \"Ralina\", \"Ralmanor\", \"Ralph\", \"Ramen\", \"Ramli\", \"Ramman\", \"Ramona\", \"Ramora\", \"Ramous\", \"Ramza\", \"Ranald\",\r\n    \"Ranath\", \"Rancor\", \"Rand\", \"Randar\", \"Randoer\", \"Randolf\", \"Randor\", \"Ranfurly\", \"Ranjan\", \"Rankin\", \"Rannuif\", \"Rannveig\", \"Raphael\",\r\n    \"Rary\", \"Rashiel\", \"Rasputin\", \"Rathack\", \"Rathanos\", \"Rathgar\", \"Rattray\", \"Rauros\", \"Ravenor\", \"Ravi\", \"Rayne\", \"Razamor\", \"Raziel\",\r\n    \"Razzan\", \"Rebecca\", \"Recoun\", \"Redcliffe\", \"Regalorn\", \"Regnar\", \"Reina\", \"Reis\", \"Relm\", \"Rem\", \"Remi\", \"Remnor\", \"Remus\",\r\n    \"Renar\", \"Renata\", \"Rendel\", \"Rengoll\", \"Reoc\", \"Resha\", \"Rethral\", \"Reva\", \"Rex\", \"Reyna\", \"Rezah\", \"Rhadry\", \"Rhaederle\",\r\n    \"Rhaeryn\", \"Rhea\", \"Rhiannon\", \"Rhiow\", \"Rhodhy\", \"Rhona\", \"Rhonda\", \"Rhora\", \"Rhorleif\", \"Rhorvald\", \"Rhundas\", \"Rhymer\", \"Rhynn\",\r\n    \"Rhys\", \"Riallus\", \"Riamon\", \"Rickard\", \"Ricyn\", \"Rigolio\", \"Rilir\", \"Rinaldus\", \"Ringgold\", \"Risaya\", \"Riss\", \"Rith\", \"Riven\",\r\n    \"Roach\", \"Roark\", \"Rockhill\", \"Rodefer\", \"Roderic\", \"Rodhan\", \"Rognvald\", \"Roignar\", \"Roland\", \"Rolf\", \"Rollo\", \"Roman\", \"Romelia\",\r\n    \"Romer\", \"Romney\", \"Ronan\", \"Root\", \"Rorik\", \"Rosalyn\", \"Rosamund\", \"Roscoe\", \"Rose\", \"Rosefyre\", \"Roseline\", \"Roshena\", \"Rosskeen\",\r\n    \"Roundell\", \"Rowena\", \"Ruadan\", \"Ruan\", \"Rubar\", \"Ruben\", \"Rubrick\", \"Ruby\", \"Rucker\", \"Rudyard\", \"Rufina\", \"Rufus\", \"Ruggles\",\r\n    \"Ruhollah\", \"Ruinar\", \"Rulian\", \"Rulinian\", \"Rumil\", \"Runa\", \"Runold\", \"Runolf\", \"Runus\", \"Rurik\", \"Rusgar\", \"Ruth\", \"Rutland\",\r\n    \"Ruwen\", \"Ryana\", \"Rycaro\", \"Rychanna\", \"Rygar\", \"Ryll\", \"Rylla\", \"Rynnyn\", \"Ryodan\", \"Ryoga\", \"Ryoka\", \"Saalem\", \"Sabal\",\r\n    \"Sabhel\", \"Sabriel\", \"Sabrok\", \"Sacheverall\", \"Sackville\", \"Saddam\", \"Sadler\", \"Sador\", \"Saedd\", \"Saermund\", \"Saeunn\", \"Safrin\", \"Saia\",\r\n    \"Said\", \"Saifai\", \"Saiwyn\", \"Salina\", \"Salmon\", \"Salter\", \"Sam\", \"Sambrea\", \"Samia\", \"Samira\", \"Sammel\", \"Samuel\", \"Sanfrid\",\r\n    \"Sano'rye\", \"Sanoreya\", \"Sanoria\", \"Sarcyn\", \"Sardior\", \"Sardul\", \"Sarel\", \"Sarevok\", \"Sargonus\", \"Saria\", \"Sarina\", \"Sarisin\", \"Sariya\",\r\n    \"Sarrask\", \"Saruman\", \"Sasha\", \"Saska\", \"Saturn\", \"Sauron\", \"Savah\", \"Savion\", \"Sawdon\", \"Sayan\", \"Scenesefa\", \"Scudamore\", \"Scythe\",\r\n    \"Sebastian\", \"Sebrinth\", \"Sechier\", \"Sedgely\", \"Seersha\", \"Segojan\", \"Sehanine\", \"Seitarin\", \"Selema\", \"Selena\", \"Selene\", \"Selig\", \"Selim\",\r\n    \"Selina\", \"Selis\", \"Selith\", \"Selune\", \"Selwyn\", \"Semuta\", \"Senith\", \"Senna\", \"Sephia\", \"Sephya\", \"Sepiroth\", \"Seramir\", \"Seraphina\",\r\n    \"Serena\", \"Serenyi\", \"Sergei\", \"Seriozha\", \"Seryan\", \"Seryl\", \"Seryth\", \"Seth\", \"Sethron\", \"Sevadia\", \"Severin\", \"Sevros\", \"Sevy\",\r\n    \"Sha'dar\", \"Sha'rell\", \"Shackerley\", \"Shadizad\", \"Shadrach\", \"Shadworth\", \"Shaera\", \"Shaivar\", \"Shaivir\", \"Shala\", \"Shalamar\", \"Shalandain\", \"Shalat\",\r\n    \"Shalhassan\", \"Shalindra\", \"Shalon\", \"Shalpan\", \"Shamane\", \"Shamir\", \"Shana\", \"Shandalar\", \"Shanell\", \"Shar\", \"Sharada\", \"Sharaq\", \"Shard\",\r\n    \"Sharif\", \"Sharilla\", \"Sharl\", \"Sharla\", \"Sharmaine\", \"Sharman\", \"Sharna\", \"Sharnira\", \"Sharra\", \"Sharteel\", \"Shaundra\", \"Sharyn\", \"Shayera\",\r\n    \"Shayla\", \"Shayll\", \"Shayonea\", \"Shea\", \"Sheegoth\", \"Sheeryl\", \"Sheherazad\", \"Shemsin\", \"Sheridan\", \"Sherif\", \"Sherry\", \"Shezael\", \"Shima'onari\",\r\n    \"Shintaro\", \"Shiza\", \"Shuinn\", \"Shuna\", \"Shurakai\", \"Shurik\", \"Shushila\", \"Shylock\", \"Siandar\", \"Sibert\", \"Sibyl\", \"Sidhe\", \"Siglinde\",\r\n    \"Sigmund\", \"Signe\", \"Sigred\", \"Sigrid\", \"Sigtrydd\", \"Sigurd\", \"Sigvaldi\", \"Silatasar\", \"Silius\", \"Silma\", \"Silmariel\", \"Silphane\", \"Silvain\",\r\n    \"Silvan\", \"Silvanus\", \"Silvera\", \"Silveron\", \"Silvia\", \"Silvyn\", \"Simir\", \"Simmu\", \"Sinbad\", \"Sindarin\", \"Sinir\", \"Sinjin\", \"Siranush\",\r\n    \"Sirisir\", \"Sirli'in\", \"Sirona\", \"Sirranon\", \"Sirwin\", \"Sisimar\", \"Siski\", \"Sivesh\", \"Siveth\", \"Siward\", \"Sjerdi\", \"Skamkel\", \"Skelmar\",\r\n    \"Skorian\", \"Slade\", \"Slania\", \"Slater\", \"Slava\", \"Sligh\", \"Slingsby\", \"Smedley\", \"Snargg\", \"Snorri\", \"Snyder\", \"Sodorn\", \"Soilir\",\r\n    \"Soisil\", \"Sokki\", \"Solaris\", \"Solera\", \"Solevig\", \"Solmund\", \"Solomon\", \"Solvi\", \"Sonnet\", \"Sooth\", \"Sora\", \"Sorass\", \"Sorcha\",\r\n    \"Sorin\", \"Sornovas\", \"Soth\", \"Southall\", \"Sovaz\", \"Soveh\", \"Soyadi\", \"Sparrow\", \"Sprigg\", \"Squall\", \"Srass\", \"Stabyl\", \"Stanwood\",\r\n    \"Starkad\", \"Starke\", \"Stedman\", \"Stefan\", \"Stehman\", \"Stein\", \"Steinkel\", \"Steinthor\", \"Stelectra\", \"Stenger\", \"Stenwulf\", \"Steponas\", \"Sterndale\",\r\n    \"Stetson\", \"Stetter\", \"Stiliman\", \"Stilingfleet\", \"Stopford\", \"Storm\", \"Stowna\", \"Strachan\", \"Straygoth\", \"Stroud\", \"Strudwick\", \"Strybyorn\", \"Strykar\",\r\n    \"Sturla\", \"Sturm\", \"Styx\", \"Sudeha\", \"Suleiman\", \"Sulimo\", \"Sulkas\", \"Sumarlidi\", \"Suras\", \"Surridge\", \"Susin\", \"Susur\", \"Sutan\",\r\n    \"Svala\", \"Svan\", \"Svante\", \"Svatopluk\", \"Sveata\", \"Sven\", \"Swain\", \"Swartwout\", \"Sydnor\", \"Syllva\", \"Sylvane\", \"Sylvia\", \"Sylvin\",\r\n    \"Sylvine\", \"Syndarra\", \"Synnyn\", \"Syranita\", \"Syrioll\", \"Tabar\", \"Tabitha\", \"Tabor\", \"Tabu\", \"Tacey\", \"Tachel\", \"Tadashi\", \"Tadeus\",\r\n    \"Tadia\", \"Tadisha\", \"Tadra\", \"Taennyn\", \"Taeynnyn\", \"Taggart\", \"Tahir\", \"Tailabar\", \"Taina\", \"Takhisis\", \"Taleen\", \"Talen\", \"Taleth\",\r\n    \"Talia\", \"Taliesin\", \"Talin\", \"Talmora\", \"Talobar\", \"Talona\", \"Taloxi\", \"Taltos\", \"Talus\", \"Tamar\", \"Tamara\", \"Tameryn\", \"Tamias\",\r\n    \"Tamlin\", \"Tamoreya\", \"Tanina\", \"Tanis\", \"Tanith\", \"Tanyc\", \"Tar\", \"Tara\", \"Taran\", \"Tarcia\", \"Taria\", \"Tarik\", \"Taromas\",\r\n    \"Taron\", \"Tarran\", \"Taryn\", \"Tas\", \"Tasharra\", \"Tasker\", \"Tatyana\", \"Taurus\", \"Taveli\", \"Taylian\", \"Taylin\", \"Tedra\", \"Tegan\",\r\n    \"Tekia\", \"Telena\", \"Tell\", \"Tench\", \"Tenna\", \"Tenser\", \"Teoddry\", \"Ter\", \"Teralyn\", \"Teressa\", \"Terix\", \"Teruah\", \"Tesin\",\r\n    \"Tesla\", \"Tessa\", \"Tevran\", \"Thaal\", \"Thacker\", \"Thaddeus\", \"Thaki\", \"Thal\", \"Thalen\", \"Thalessa\", \"Thalia\", \"Thalna\", \"Tham\",\r\n    \"Thana\", \"Thane\", \"Thanatos\", \"Thantos\", \"Thar\", \"Tharbad\", \"Tharkesh\", \"Tharn\", \"Thax\", \"Thecla\", \"Theda\", \"Theleb\", \"Theoden\",\r\n    \"Theodor\", \"Theodoric\", \"Theodosia\", \"Theodric\", \"Theoric\", \"Thera\", \"Therad\", \"Theresa\", \"Therios\", \"Theros\", \"Thesius\", \"Thieras\", \"Thieryn\",\r\n    \"Thingyr\", \"Thio\", \"Tholan\", \"Thomas\", \"Thomulor\", \"Thora\", \"Thoran\", \"Thorarin\", \"Thorburn\", \"Thord\", \"Thordarson\", \"Thordis\", \"Thorfel\",\r\n    \"Thorfinn\", \"Thorfinna\", \"Thorgeir\", \"Thorgerd\", \"Thorgest\", \"Thorgils\", \"Thorgrim\", \"Thorgunna\", \"Thorhall\", \"Thorhalla\", \"Thorhild\", \"Thorin\", \"Thorir\",\r\n    \"Thorkatla\", \"Thorkell\", \"Thorkild\", \"Thormod\", \"Thormodr\", \"Thormond\", \"Thorn\", \"Thorndike\", \"Thornwell\", \"Thorold\", \"Thorolf\", \"Thorsager\", \"Thorstein\",\r\n    \"Thorunn\", \"Thorvald\", \"Thorvaldur\", \"Thorvar\", \"Thorzyl\", \"Thoth\", \"Thrain\", \"Thrand\", \"Throck\", \"Thule\", \"Thurid\", \"Thylda\", \"Thyra\",\r\n    \"Thyri\", \"Thyrza\", \"Thyssa\", \"Tiana\", \"Tiffany\", \"Tihan\", \"Tika\", \"Tilford\", \"Tilica\", \"Tilir\", \"Tillinghast\", \"Tilloch\", \"Timon\",\r\n    \"Tioniel\", \"Tirion\", \"Tisha\", \"Tisheri\", \"Titania\", \"Titia\", \"Titiana\", \"Tivernee\", \"Tiyagar\", \"Tnin\", \"Tobias\", \"Tobis\", \"Todhunter\",\r\n    \"Tolbert\", \"Tolenka\", \"Topaz\", \"Topham\", \"Torc\", \"Tortbold\", \"Tosti\", \"Tosya\", \"Toulac\", \"Tovi\", \"Trafford\", \"Trebor\", \"Trelane\",\r\n    \"Trelawny\", \"Trella\", \"Trevel\", \"Trick\", \"Trigg\", \"Trill\", \"Triona\", \"Trir\", \"Tristam\", \"Tristan\", \"Trost\", \"Trotwood\", \"Trowbridge\",\r\n    \"Truesdell\", \"Tuane\", \"Tufnell\", \"Tugan\", \"Tuilleth\", \"Tulio\", \"Tulkas\", \"Tundine\", \"Tunstall\", \"Tuor\", \"Turan\", \"Turgoz\", \"Turhan\",\r\n    \"Turin\", \"Turpin\", \"Tuttle\", \"Tuula\", \"Twyla\", \"Tylden\", \"Tyldoran\", \"Tylen\", \"Tylien\", \"Tylynn\", \"Tymar\", \"Tymora\", \"Tymoriel\",\r\n    \"Tynnyn\", \"Tyr\", \"Tyra\", \"Tyranina\", \"Tyreen\", \"Tyrwhitt\", \"Uamian\", \"Ubriani\", \"Ucarsh\", \"Uda\", \"Uhier\", \"Uhlain\", \"Uhlume\",\r\n    \"Uholedil\", \"Uinen\", \"Ula\", \"Ulf\", \"Ulgor\", \"Ulis\", \"Uljas\", \"Ulji\", \"Ulmaerr\", \"Ulmo\", \"Ulosh\", \"Ulric\", \"Ulrich\",\r\n    \"Ultron\", \"Umaiar\", \"Umbar\", \"Umda\", \"Umgalad\", \"Una\", \"Uneitna\", \"Ungon\", \"Unius\", \"Unn\", \"Unrak\", \"Unwin\", \"Upal\",\r\n    \"Upton\", \"Urabi\", \"Urania\", \"Uranos\", \"Uranus\", \"Uriel\", \"Urish\", \"Urokoz\", \"Ursula\", \"Usher\", \"Uta\", \"Utumno\", \"Uusoae\",\r\n    \"Uvanimor\", \"Uziel\", \"Vabryn\", \"Vadarin\", \"Vadi\", \"Vaeddyn\", \"Vagn\", \"Vai\", \"Val\", \"Valadan\", \"Valandario\", \"Valandor\", \"Valarindi\",\r\n    \"Valborg\", \"Valda\", \"Valdain\", \"Valdemar\", \"Valen\", \"Valenka\", \"Valentia\", \"Valerand\", \"Valeria\", \"Valerian\", \"Valeska\", \"Valgar\", \"Valgard\",\r\n    \"Valgerd\", \"Valiah\", \"Valion\", \"Valisa\", \"Valiss\", \"Valistor\", \"Valkor\", \"Valla\", \"Vallo\", \"Valmar\", \"Valminder\", \"Valor\", \"Valsera\",\r\n    \"Valurian\", \"Valya\", \"Valynard\", \"Vandrad\", \"Vane\", \"Vanechka\", \"Vanidor\", \"Vanion\", \"Vannevar\", \"Vannyn\", \"Vanya\", \"Vanyar\", \"Vanyel\",\r\n    \"Varda\", \"Vardis\", \"Varina\", \"Varion\", \"Varken\", \"Varnum\", \"Vasava\", \"Vash\", \"Vasha\", \"Vasilii\", \"Vasin\", \"Vaydin\", \"Vaydir\",\r\n    \"Vayi\", \"Vecna\", \"Veda\", \"Veldahar\", \"Veldan\", \"Velex\", \"Velior\", \"Venable\", \"Vendor\", \"Veorcyn\", \"Vercyn\", \"Verdina\", \"Vereesa\",\r\n    \"Verline\", \"Vermund\", \"Verna\", \"Ves\", \"Vespar\", \"Vestein\", \"Veva\", \"Vevina\", \"Vexter\", \"Viasta\", \"Vicarr\", \"Vicat\", \"Vicentia\",\r\n    \"Viconia\", \"Victor\", \"Vida\", \"Vidkun\", \"Vidron\", \"Vieno\", \"Viera\", \"Vierna\", \"Vigdis\", \"Vigfus\", \"Vilhelm\", \"Vilka\", \"Vilrna\",\r\n    \"Vinatta\", \"Vincas\", \"Vincent\", \"Vintar\", \"Violet\", \"Vircyn\", \"Vishali\", \"Viveka\", \"Vladimir\", \"Vladislav\", \"Vlaric\", \"Vobur\", \"Voirath\",\r\n    \"Vokos\", \"Voldor\", \"Volkan\", \"Volney\", \"Volodya\", \"Volund\", \"Vonya\", \"Voranor\", \"Vrashin\", \"Vulpen\", \"Vurog\", \"Vusil\", \"Vyecheslav\",\r\n    \"Vyner\", \"Wadleigh\", \"Waenwryht\", \"Wager\", \"Waisham\", \"Waivan\", \"Wakeman\", \"Wakkar\", \"Walborg\", \"Walda\", \"Waldan\", \"Waldegrave\", \"Waldemar\",\r\n    \"Waleran\", \"Walford\", \"Walid\", \"Walker\", \"Wanhim\", \"Waring\", \"Wariv\", \"Wark\", \"Warne\", \"Warrender\", \"Warrigel\", \"Warwick\", \"Waryk\",\r\n    \"Watson\", \"Watt\", \"Waylan\", \"Wayland\", \"Waylon\", \"Wealin\", \"Wedlake\", \"Weilborn\", \"Weiryn\", \"Wel\", \"Wemick\", \"Wendolyn\", \"Wertha\",\r\n    \"Westcott\", \"Westen\", \"Weyrn\", \"Wharrom\", \"Whitwell\", \"Whyte\", \"Wicca\", \"Wideman\", \"Wightman\", \"Wildhair\", \"Wilfrid\", \"Wilhelm\", \"Wilhelmina\",\r\n    \"Wilibald\", \"Will\", \"Willa\", \"William\", \"Willock\", \"Willow\", \"Wilma\", \"Wilmar\", \"Wilner\", \"Wilven\", \"Windham\", \"Winfrey\", \"Winian\",\r\n    \"Winslow\", \"Winton\", \"Wisp\", \"Wisuth\", \"Wivianne\", \"Wizlow\", \"Woart\", \"Wodan\", \"Wolfgang\", \"Wolmar\", \"Womal\", \"Woodfin\", \"Woodruff\",\r\n    \"Wooligar\", \"Wortley\", \"Wotan\", \"Wulf\", \"Wulfgar\", \"Wulfric\", \"Wulgar\", \"Wychnor\", \"Wycliffe\", \"Wyllows\", \"Wyly\", \"Wynkyn\", \"Wynne\",\r\n    \"Wynston\", \"Wyvan\", \"Xaandria\", \"Xaath\", \"Xabian\", \"Xabiel\", \"Xabu\", \"Xain\", \"Xalthan\", \"Xan\", \"Xanaphel\", \"Xanathar\", \"Xander\",\r\n    \"Xandra\", \"Xandria\", \"Xanthon\", \"Xanthus\", \"Xarek\", \"Xarolith\", \"Xaver\", \"Xavier\", \"Xavin\", \"Xela\", \"Xelmonth\", \"Xena\", \"Xenia\",\r\n    \"Xenoba\", \"Xera\", \"Xercon\", \"Xerravin\", \"Xiombarg\", \"Xoncarg\", \"Xoran\", \"Xulan\", \"Xyas\", \"Xydra\", \"Xyko\", \"Xylah\", \"Xylia\",\r\n    \"Xymoya\", \"Xystus\", \"Xythrin\", \"Xytrin\", \"Yacima\", \"Yaheira\", \"Yahira\", \"Yaigin\", \"Yakov\", \"Yalan\", \"Yali\", \"Yalin\", \"Yalniz\",\r\n    \"Yamari\", \"Yana\", \"Yandell\", \"Yangin\", \"Yanira\", \"Yannul\", \"Yara\", \"Yaraia\", \"Yarali\", \"Yardim\", \"Yardley\", \"Yari\", \"Yarim\",\r\n    \"Yarin\", \"Yarir\", \"Yaritza\", \"Yartrina\", \"Yasimina\", \"Yasir\", \"Yasmina\", \"Yasser\", \"Yastar\", \"Yatay\", \"Yavana\", \"Yazihane\", \"Yelain\",\r\n    \"Yeni\", \"Yetne\", \"Yevgenii\", \"Yezade\", \"Ygerna\", \"Ygraine\", \"Yishana\", \"Ynryc\", \"Ynvar\", \"Yoda\", \"Yolanda\", \"Yondalla\", \"York\",\r\n    \"Yradry\", \"Yreoddyn\", \"Yrrkoon\", \"Yrsa\", \"Yrun\", \"Yryllyn\", \"Ysabel\", \"Ysgerryn\", \"Ysolde\", \"Yuri\", \"Yvain\", \"Yvette\", \"Yvonne\",\r\n    \"Yvyr\", \"Yénisar\", \"Yérusha\", \"Zabdiel\", \"Zacarias\", \"Zachary\", \"Zachris\", \"Zadock\", \"Zahara\", \"Zahra\", \"Zaidh\", \"Zalazar\", \"Zalbar\",\r\n    \"Zan\", \"Zandra\", \"Zanifa\", \"Zanthar\", \"Zara\", \"Zaranthe\", \"Zared\", \"Zarimarth\", \"Zarquan\", \"Zathras\", \"Zavel\", \"Zaviv\", \"Zay\",\r\n    \"Zazumel\", \"Zebalane\", \"Zebulon\", \"Zehir\", \"Zelda\", \"Zemenar\", \"Zenda\", \"Zendrac\", \"Zenith\", \"Zenobia\", \"Zenon\", \"Zepher\", \"Zephyr\",\r\n    \"Zerika\", \"Zerin\", \"Zeswick\", \"Zhalore\", \"Zhanna\", \"Zharvek\", \"Zhenya\", \"Zhirek\", \"Zhirem\", \"Zhoreb\", \"Zia\", \"Zigmal\", \"Zilar\",\r\n    \"Zinaida\", \"Zincir\", \"Zion\", \"Ziona\", \"Zircon\", \"Zirzihin\", \"Zita\", \"Zoe\", \"Zolabar\", \"Zoltan\", \"Zona\", \"Zora\", \"Zorashad\",\r\n    \"Zorayas\", \"Zorlan\", \"Zosia\", \"Zotar\", \"Zumurrud\", \"Zurrog\", \"Zykhiralamshad\"];\r\n  makeArrays();\r\n}",
                        "onModelContext": "const modifier = (text) => {\r\n  const lowered = text.toLowerCase();\r\n  let stop = false;\r\n\r\n  if (state.shouldStop) {\r\n    state.shouldStop = false;\r\n    stop = true;\r\n  }\r\n\r\n  // BEGIN Encounters\r\n  // for mashing with other context scripts, keep this codeblock before 'const contextMemory'\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    memoryLoop:\r\n    for (encounterMemory of state.encounterMemories) {\r\n      // take care to not overload memory, unless forced:\r\n      if (!encounterMemory.memoryGreed && (encounterMemory.memoryText.length + memory.length) > 1000) {\r\n        console.log(`Non-greedy encounterMemory too long, not inserting it!`)\r\n        continue memoryLoop\r\n      }\r\n      state.memory.context = memory\r\n      if (encounterMemory.memoryLocation == 'bottom') {\r\n        state.memory.context = `${state.memory.context}\\n${encounterMemory.memoryText}`\r\n      } else if (encounterMemory.memoryLocation == 'top') {\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      } else {\r\n        console.log(`No memoryLocation defined for '${encounterMemory.memoryText}', defaulting to 'top'.`)\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      }\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  const contextMemory = info.memoryLength ? text.slice(0, info.memoryLength) : ''\r\n  const context = info.memoryLength ? text.slice(info.memoryLength + 1) : text\r\n  const lines = context.split(\"\\n\")\r\n\r\n  // BEGIN Encounters\r\n  // for mashing with other context scripts, keep this between 'const lines' and 'const combinedLines'\r\n  if (typeof (state.currentEncounter) !== 'undefined') { // if there's an event...\r\n    lines.splice(-3, 0, state.encounterNote) // ...put it right below AN, so AI knows what's up\r\n  }\r\n  // END Encounters\r\n\r\n  const combinedLines = lines.join(\"\\n\").slice(-(info.maxChars - info.memoryLength));\r\n  const finalText = [contextMemory, combinedLines].join(\"\");\r\n  return { text: finalText, stop: stop };\r\n}\r\n\r\nmodifier(text);"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1720300",
                "publicId": "92b9a810-a0a9-11eb-bf24-139d1565e768",
                "published": false,
                "title": "Create character",
                "description": "This is a scenario that lets you create your own character. You will start in Whiterun and your adventure will continue from there.",
                "tags": [],
                "createdAt": "2021-04-19T00:52:53.649Z",
                "updatedAt": "2021-04-19T22:57:42.376Z",
                "memory": "",
                "authorsNote": "[Genre: fantasy] [Writing style: narrative, roleplaying, gothic]",
                "mode": "creative",
                "prompt": "Your name is [${character.name}], and you are a [${Enter your character's gender...}] [${Choose a race: Altmer (High Elf), Bosmer (Wood Elf), Dunmer (Dark Elf), Orsimer (Orc), Nord, Imperial, Breton, Khajiit, Argonian or Redguard}] [${Choose a class: Mage, Warrior, Ranger, Peasant, Thief, Assassin}] that has just arrived in the city of Whiterun. You are [${Enter your age...}] years old, and your personality traits are: [${Enter your personality traits separated by commas...}]. You eyes are [${Enter your eye color...}], and your hair is of the style [${Enter your hair style...}] and of color [${Enter your hair color...}]. You are [${Enter your height in centimeters...}] centimeters tall, and you weigh [${Enter your weight in kilos...}] kg. Your physical features are: [${Enter your physical features...}].\n\nYou have just arrived in the city of Whiterun. The city is lively and filled with people of all kinds. There's the guards, walking around keeping order. There's the bards, singing lovely songs that make you want to dance and be happy. There are children running around in the streets, playing games and having fun.\nThe market is bustling with people selling things, from food to weapons to cloth. There's a group of men over there fixing up a broken wagon, and there's a blacksmith over there, working away at the forge. You can already see the tall shape of the tavern in front of you, where you intend to go. The sun is setting over the city, making it look like it's on fire. The sky is turning a marvelous shade of orange, and the clouds are turning an astonishing red at their centres. It's truly beautiful.\nYou see the two moons, Masser and Secunda, raising high in the sky as the sun sets. They're almost full, and so very bright. The larger one, Masser, is a hazy circle, while the smaller, Secunda, is a sharp crescent. You stand and watch the sun set for a little while, the colours shifting through the spectrum until it finally sets, and darkness shrouds the city. ",
                "quests": [],
                "worldInfo": [
                        {
                                "id": "1.1",
                                "keys": "Katariah|(|the )emp(ress|eror)#[t=5l=5f=2S=2]",
                                "entry": "The Dunmer are the dark elves of Morrowind. They value magic and honor, and follow the gods of the Tribunal.\n<< Katariah ♀ dunmer age 40y 170cm height 45kg slim slender>>>>\n<< Katariah dark grey skin, red eyes, long black hair>>>>\n<< Katariah just smart clever fair, empress of tamriel>>>>",
                                "hidden": false,
                                "worldInfoId": "224040849"
                        },
                        {
                                "id": "1.2",
                                "keys": "Katariah|(|the )emp(ress|eror)#[t=6l=5f=2S=2]",
                                "entry": "<< Katariah coarse calm voice, sweet talking>>>>\n<< Katariah wear linen dress gold earrings gold rings jewlery>>>>",
                                "hidden": false,
                                "worldInfoId": "224040847"
                        },
                        {
                                "id": "1.3",
                                "keys": "Vrage(|the Gifted)|(|High )King of Skyrim|(Ruler|Jarl) of (Solitude|Haafingar|Skyrim)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Vrage ♂ nord 42y 170cm 45kg fair brown hair muscular skin dark brown eyes deepvoice thick nord accent>>>>\n<< Vrage high king of skyrim, good leader, loyal, full beard>>>>\n<< Vrage wear fur coat jewelery linen shirt leather boots>>>>",
                                "hidden": false,
                                "worldInfoId": "224040848"
                        },
                        {
                                "id": "1.4",
                                "keys": "Ungvid|(Ruler|Jarl) of Winterhold#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Ungvid nord ♂ 62yearsold 179cm height 65kg, jarl of winterhold>>>>\n<< Ungvid harsh deep voice, arrogant pretentious stubborn serious>>>>\n<< Ungvid slim slender full beard long dark blonde hair>>>>\n<< Ungvid wear fur clothing leather boots steel sword>>>>",
                                "hidden": false,
                                "worldInfoId": "224040850"
                        },
                        {
                                "id": "1.5",
                                "keys": "Yolanda|(Ruler|Jarl) of Whiterun#[t=5l=5f=2S=2]",
                                "entry": "<< Yolanda ♀ nord 30y age 178cm height 50kg slim tall fair skin blue eyes long blonde hair>>>>\n<< Yolanda jarl of whiterun, sweet voice naughty dirty manipulative, fools around loves nightlife party animal>>>>",
                                "hidden": false,
                                "worldInfoId": "224040851"
                        },
                        {
                                "id": "1.6",
                                "keys": "Yolanda|(Ruler|Jarl) of Whiterun#[t=6l=5f=2S=2]",
                                "entry": "<< Yolanda wear jewlery noble clothes ring earring>>>>\n<< Yolanda pink lips small breasts round butt gorgeous>>>>",
                                "hidden": false,
                                "worldInfoId": "224040852"
                        },
                        {
                                "id": "1.7",
                                "keys": "Argo|(Ruler|Jarl) of (|the) Rift(|en)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Argo ♂ nord 57y age 180cm height 90kg slim shaved head& beard, jarl of the rift>>>>\n<< Argo arrogant pedantic self-righteous uptight>>>>",
                                "hidden": false,
                                "worldInfoId": "224040853"
                        },
                        {
                                "id": "1.8",
                                "keys": "Argo|(Ruler|Jarl) of (|the) Rift(|en)#[t=6l=5f=2S=2]",
                                "entry": "<< Argo harsh deep voice wear noble clothes leather boots>>>>\n<< Argo dislike thief hate thieves guild love drinking mead>>>> ",
                                "hidden": false,
                                "worldInfoId": "224040854"
                        },
                        {
                                "id": "1.9",
                                "keys": "Uror|(Ruler|Jarl) of Falkreath#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Uror ♂ nord 55y age 180cm height 75kg muscular, jarl of falkreath>>>>\n<< Uror red hair full beard, optimistic intelligent talkative stubborn good humored brave>>>>",
                                "hidden": false,
                                "worldInfoId": "224040855"
                        },
                        {
                                "id": "1.10",
                                "keys": "Uror|(Ruler|Jarl) of Falkreath#[t=6l=5f=2S=2]",
                                "entry": "<< Uror wear fur clothes long bow, is hunter knows the woods>>>>\n<< Uror thick colovian accent deep voice menacing tone>>>>",
                                "hidden": false,
                                "worldInfoId": "224040856"
                        },
                        {
                                "id": "1.11",
                                "keys": "Atmor|(Ruler|Jarl) of (Windhelm|Eastmarch)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Atmor ♂ nord 48y age 180cm height 75kg muscular fit short dark blond hair>>>>\n<< Atmor full beard grumpy sarcastic hopeful, jarl of eastmarch>>>>",
                                "hidden": false,
                                "worldInfoId": "224040857"
                        },
                        {
                                "id": "1.12",
                                "keys": "Atmor|(Ruler|Jarl) of (Windhelm|Eastmarch)#[t=6l=5f=2S=2]",
                                "entry": "<< Atmor wear noble fur clothes jewelery steel greatsword>>>>\n<< Atmor thich nord accent harsh command voice tone>>>>\n<< Atmor scar left eye>>>>",
                                "hidden": false,
                                "worldInfoId": "224040858"
                        },
                        {
                                "id": "1.13",
                                "keys": "Bolgeir|Ruler of Markarth|Jarl of Markarth|Ruler of the Reach|Jarl of the Reach#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Bolgeir ♂ nord 174cm height 70kg muscular reddish hair beard, jarl of the reach>>>>\n<< Bolgeir very brave and bold arrogant natural leader>>>>",
                                "hidden": false,
                                "worldInfoId": "224040859"
                        },
                        {
                                "id": "1.14",
                                "keys": "Bolgeir|Ruler of Markarth|Jarl of Markarth|Ruler of the Reach|Jarl of the Reach#[t=6l=5f=2S=2]",
                                "entry": "<< Bolgeir wear noble linen clothes jewelery, thick nord accent deep voice>>>>\n<< Bolgeir worship nord pantheon shor kyne dislikes imperial divines>>>>",
                                "hidden": false,
                                "worldInfoId": "224040860"
                        },
                        {
                                "id": "1.15",
                                "keys": "Dagny|(Ruler|Jarl) of the (Dawnstar|Pale)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Dagny ♀ nord 58y age 159cm height 40kg tall thin fit short dark blonde hair>>>>",
                                "hidden": false,
                                "worldInfoId": "224040861"
                        },
                        {
                                "id": "1.16",
                                "keys": "Dagny|(Ruler|Jarl) of the (Dawnstar|Pale)#[t=6l=5f=2S=2]",
                                "entry": "<< Dagny corageous fearless friendly determined optimistic, jarl of the pale>>>>\n<< Dagny thick northern accent wear noble clothes steel dagger>>>>",
                                "hidden": false,
                                "worldInfoId": "224040862"
                        },
                        {
                                "id": "1.17",
                                "keys": "Thora|(Ruler|Jarl) of (Morthal|Hjaalmarch)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Thora ♂ nord 58y age 185cm height 62kg muscular tall athletic blonde hair>>>>\n<< Thora jarl of hjaalmarch, courageous brave strong-willed fearless determined>>>>",
                                "hidden": false,
                                "worldInfoId": "224040863"
                        },
                        {
                                "id": "1.18",
                                "keys": "Thora|(Ruler|Jarl) of (Morthal|Hjaalmarch)#[t=6l=5f=2S=2]",
                                "entry": "<< Thora sweet voice thick accent love warm weather love hunting>>>>\n<< Thora wear noble clothes fur scarf steel sword>>>>",
                                "hidden": false,
                                "worldInfoId": "224040864"
                        },
                        {
                                "id": "2.1",
                                "keys": "(white( |)run)#[t=5l=5f=2S=2]",
                                "entry": "[ Whiterun description:< city state in central Skyrim>/< hold≡ Whiterun>/< kingdom≡ Western Skyrim>. Whiterun climate:< warm& breeze>. Whiterun culture:< economical power& hunting& smithing>. Whiterun ruler:< jarl≡ Yolanda>/< palace≡ Dragonsreach>. Whiterun features:< built on top of hill& dragonsreach& jorrvaskr& temple of kynareth& capital city of Whiterun>.]",
                                "hidden": false,
                                "worldInfoId": "224040865"
                        },
                        {
                                "id": "2.2",
                                "keys": "riften#[t=5l=5f=2S=2]",
                                "entry": "[ Riften description:< city state in southeastern Skyrim>/< hold≡ Haafingar>/< kingdom≡ Eastern Skyrim>/<rival city≡ Windhelm>. Riften climate:< warm& breeze>. Riften culture:< hunting& fishing& corruption& capital city>. Riften ruler:< king≡ Argo>/ <palace≡ Mistveil Keep>. Riften features:< built next to honrich lake& capital city of the rift>.]",
                                "hidden": false,
                                "worldInfoId": "224040866"
                        },
                        {
                                "id": "2.3",
                                "keys": "(winter( |)hold)#[t=5l=5f=2S=2]",
                                "entry": "[ Winterhold description:< city state in northeastern Skyrim>/< hold≡ Winterhold>/< kingdom≡ Eastern Skyrim>/<rival city≡ Windhelm>. Winterhold climate:< snowy&freezing>. Winterhold culture:< nord& magic& fishing& sea trading>. Winterhold ruler:< jarl≡ Ungvid>. Winterhold features:< college of winterhold& port city& capital city of winterhold>.]",
                                "hidden": false,
                                "worldInfoId": "224040867"
                        },
                        {
                                "id": "2.4",
                                "keys": "Falkreath#[t=5l=5f=2S=2]",
                                "entry": "[ Falkreath description:< city state in southern Skyrim>/< hold≡ Falkreath>/< kingdom≡ Western Skyrim>. Falkreath climate:< warm& breeze>. Falkreath culture:< fishing& hunting& leatherwork& pelts>. Falkreath ruler:< jarl≡ Uror>. Falkreath features:< city in the middle of the woods& border with Cyrodiil& capital city of Falkreath Hold>.]",
                                "hidden": false,
                                "worldInfoId": "224040868"
                        },
                        {
                                "id": "2.5",
                                "keys": "markarth|city of stone#[t=5l=5f=2S=2]",
                                "entry": "[ Markarth description:< city state in western Skyrim>/< hold≡ The Reach>/< kingdom≡ The Reach>. Markarth climate:< warm& hot& breeze>. Markarth culture:< reachmen culture& ruled by an Ard& capital city>. Markarth ruler:< Ard≡ Dorach>/ <palace≡ Understone Keep>. Markarth features:< built inside of a mountain& dwemer stone and brass architecture& capital city of the reach>.]",
                                "hidden": false,
                                "worldInfoId": "224040869"
                        },
                        {
                                "id": "2.6",
                                "keys": "markarth|city of stone#[t=6l=5f=2S=2]",
                                "entry": "[ Markarth culture:< silver mining& fishing& hunting>. Markarth features:< temple of hircine& silver mine& smithing]",
                                "hidden": false,
                                "worldInfoId": "224040870"
                        },
                        {
                                "id": "2.7",
                                "keys": "dawnstar#[t=5l=5f=2S=2]",
                                "entry": "[ Dawnstar description:< city state in northern Skyrim>/< hold≡ The Pale>/< kingdom≡ Western Skyrim>/<rival city≡ Whiterun& Winterhold>. Dawnstar climate:< snowy&freezing>. Dawnstar culture:< fishing& hunting& capital city>. Dawnstar ruler:< queen≡ Dagny>. Dawnstar features:< wooden houses& port city& sea trading& capital city of the pale>.]",
                                "hidden": false,
                                "worldInfoId": "224040871"
                        },
                        {
                                "id": "2.8",
                                "keys": "morthal#[t=5l=5f=2S=2]",
                                "entry": "[ Morthal description:< city state in northwestern Skyrim>/< hold≡ Hjaalmarch>/< kingdom≡ Western Skyrim>/<rival city≡ Dawnstar>. Morthal climate:< warm& hot>. Morthal geography:< swamp& marsh>. Morthal culture:< nord& capital city>. Morthal ruler:< king≡ Thora>. Morthal features:< capital city of Hjaalmarch& swamps>.]",
                                "hidden": false,
                                "worldInfoId": "224040872"
                        },
                        {
                                "id": "2.9",
                                "keys": "windhelm#[t=5l=5f=2S=2]",
                                "entry": "[ Windhelm description:< city state in eastern Skyrim>/< hold≡ Eastmarch>/< kingdom≡ Eastern Skyrim>/< rival city≡ Riften& Winterhold>. Windhelm climate:< north≡ snowy& freezing>/< south≡ temperate& warm>. Windhelm culture:< nord& wooden constructions& sea trading& capital city>. Windhelm ruler:< king≡ Atmor>/< palace≡ Palace of Kings>. Windhelm features:< palace made of stone& hardwood houses& capital city of eastern skyrim>.]",
                                "hidden": false,
                                "worldInfoId": "224040873"
                        },
                        {
                                "id": "2.10",
                                "keys": "windhelm#[t=6l=5f=2S=2]",
                                "entry": "[ Windhelm features:< big inn made of stone& temple of talos& fighting arena>. Windhelm culture:< port city& smithing& fishing>.]",
                                "hidden": false,
                                "worldInfoId": "224040874"
                        },
                        {
                                "id": "2.11",
                                "keys": "solitude#[t=5l=5f=2S=2]",
                                "entry": "[ Solitude description:< city state in western Skyrim>/< hold≡ Haafingar>/< kingdom≡ Western Skyrim>/<rival city≡ Snowhawk>. Solitude climate:< north≡ snowy&freezing>/< south≡ warm>. Solitide culture:< economical power&capital city>. Solitude ruler:< king≡ Vrage>/ < palace≡ Blue Palace>. Solitude features:< built on top of stone arch& capital city of western skyrim>.]",
                                "hidden": false,
                                "worldInfoId": "224040875"
                        },
                        {
                                "id": "2.12",
                                "keys": "solitude#[t=6l=5f=2S=2]",
                                "entry": "[ Solitude features:< bards college& antiquarian circle& east empire company& rich city& castle dour& blue palace>. Solitude culture:< nord& brick constructions>/< fishing&sea trading& port city& arts>.]",
                                "hidden": false,
                                "worldInfoId": "224040877"
                        },
                        {
                                "id": "2.13",
                                "keys": "(snow( |)hawk)#[t=5l=5f=2S=2]",
                                "entry": "[ Snowhawk description:< city state in northwestern Skyrim>/< hold≡ Hjaalmarch>/< kingdom≡ Snowhawk>/<rival city≡ Solitude>. Snowhawk climate:< warm& hot>. Snowhawk geography:< swamp& marsh>. Snowhawk ruler:< king≡ Arnbjorn>. Snowhawk features:< capital city of Snowhawk& rivals with Solitude>.]",
                                "hidden": false,
                                "worldInfoId": "224040876"
                        },
                        {
                                "id": "3.1",
                                "keys": "Whiterun Hold#[t=5l=3f=2S=2]",
                                "entry": "[ Whiterun Hold description:< hold in central Skyrim>/< capital city≡ Whiterun>/< kingdom≡ Western Skyrim>.  Whiterun Hold climate:< warm& breeze>. Whiterun Hold geography:< farmland& fertile& grasslands& open fields& white river>. Whiterun Hold ruler:< jarl≡ Yolanda>.]",
                                "hidden": false,
                                "worldInfoId": "224040878"
                        },
                        {
                                "id": "3.2",
                                "keys": "Whiterun Hold#[t=6l=3f=2S=2]",
                                "entry": "[ Whiterun Hold culture:< nord& wooden houses& farms>. Whiterun Hold features:< white river& giants& mammoths>. Whiterun Hold towns:< Riverwood& Honeywood>.]",
                                "hidden": false,
                                "worldInfoId": "224040879"
                        },
                        {
                                "id": "3.3",
                                "keys": "(|the) rift#[t=5l=3f=2S=2]",
                                "entry": "[ The Rift description:< hold in southeastern Skyrim>/< capital city≡ Riften>/< kingdom≡ Eastern Skyrim>. The Rift climate:< warm& breeze>. The Rift geography:< farmland& Lake Honrich& fishing& fertile& mountainous& Snow Throat>. The Rift ruler:< jarl≡ Argo>.]",
                                "hidden": false,
                                "worldInfoId": "224040880"
                        },
                        {
                                "id": "3.4",
                                "keys": "(|the) rift#[t=6l=3f=2S=2]",
                                "entry": "[ The Rift culture:< nord& farm& fishing& hunting& mills>. The Rift features:< Lake Honrich& bears& wolves& deer>. The Rift towns:< Shor's Stone& Vernim& Ivarstead>.]",
                                "hidden": false,
                                "worldInfoId": "224040881"
                        },
                        {
                                "id": "3.5",
                                "keys": "(winter( |)hold hold)#[t=5l=3f=2S=2]",
                                "entry": "[ Winterhold Hold description:< hold in northeastern Skyrim>/< capital city≡ Winterhold>/< kingdom≡ Eastern Skyrim>. Winterhold Hold climate:< cold& snowy& freezing>. Winterhold Hold geography:< mountainous& snowy hills& cliffs>. Winterhold Hold ruler:< jarl≡ Ungvid>.]",
                                "hidden": false,
                                "worldInfoId": "224040882"
                        },
                        {
                                "id": "3.6",
                                "keys": "(winter( |)hold hold)#[t=6l=3f=2S=2]",
                                "entry": "[ Winterhold Hold culture:< nord& wooden houses& magic>. Winterhold Hold features:< college of winterhold& horker& ice wolf& polar bear>.]",
                                "hidden": false,
                                "worldInfoId": "224040883"
                        },
                        {
                                "id": "3.7",
                                "keys": "(falkreath)#[t=5l=3f=2S=2]",
                                "entry": "[ Falkreath Hold description:< hold in southern Skyrim>/< capital city≡ Falkreath>/< kingdom≡ Falkreath>. Falkreath Hold climate:< warm& breeze>. Falkreath Hold geography:< rainforest& Lake Ilinalta& White River& mountainous& lush woods>. Falkreath Hold ruler:< king≡ Uror>.]",
                                "hidden": false,
                                "worldInfoId": "224040884"
                        },
                        {
                                "id": "3.8",
                                "keys": "(falkreath)#[t=6l=3f=2S=2]",
                                "entry": "[ Falkreath Hold culture:< nord& fishing& hunting& lumber& leatherwork& pelts>. Falkreath Hold features:< fishing& lumber& Lake Ilinalta& White River& wolves& bears& sabre cat>. Falkreath Hold towns:< Helgen>.]",
                                "hidden": false,
                                "worldInfoId": "224040885"
                        },
                        {
                                "id": "3.9",
                                "keys": "the reach#[t=5l=3f=2S=2]",
                                "entry": "[ The Reach description:< reachmen culture& hold in western Skyrim& ruled by an Ard>/< capital city≡ Markarth>/< kingdom≡ The Reach>. The Reach climate:< warm& hot& breeze>. The Reach geography:< mountainous& grasslands& Karth River>. The Reach ruler:< Ard≡ Dorach>/ <palace≡ Understone Keep>.]",
                                "hidden": false,
                                "worldInfoId": "224040886"
                        },
                        {
                                "id": "3.10",
                                "keys": "the reach#[t=6l=3f=2S=2]",
                                "entry": "[ The Reach culture:< ruled by an Ard& reachmen& wooden houses& mining>. The Reach features:< Karth River& Sky Haven Temple& silver mines& fishing>. The Reach towns:< Karthwasten& Hroldan>.]",
                                "hidden": false,
                                "worldInfoId": "224040887"
                        },
                        {
                                "id": "3.11",
                                "keys": "the pale#[t=5l=3f=2S=2]",
                                "entry": "[ The Pale description:< hold in northern Skyrim& part of the kingdom of Eastern Skyrim>/< capital city≡ Dawnstar>/< kingdom≡ Eastern Skyrim>. The Pale climate:< cold& snowy>. The Pale geography:< grasslands& waterfall& mountainous>. The Pale ruler:< jarl≡ Dagny>.]",
                                "hidden": false,
                                "worldInfoId": "224040888"
                        },
                        {
                                "id": "3.12",
                                "keys": "the pale#[t=6l=3f=2S=2]",
                                "entry": "[ The Pale culture:<nord& wooden constructions& fishing& port city>. The Pale features:< iron mining& quicksilver mining>. The Pale towns:< Heljarchen>.]",
                                "hidden": false,
                                "worldInfoId": "224040889"
                        },
                        {
                                "id": "3.13",
                                "keys": "Hjaalmarch#[t=5l=3f=2S=2]",
                                "entry": "[ Hjaalmarch description:< hold in northwestern Skyrim& part of the Kingdom of Western Skyrim>/< capital city≡ Morthal>/< kingdom≡ Western Skyrim>. Hjaalmarch climate:< warm& hot>. Hjaalmarch geography:< marsh& swamp& Hjaal River& Karth River>. Hjaalmarch ruler:< jarl≡ Thora>.]",
                                "hidden": false,
                                "worldInfoId": "224040892"
                        },
                        {
                                "id": "3.14",
                                "keys": "Hjaalmarch#[t=6l=3f=2S=2]",
                                "entry": "[ Hjaalmarch culture:< nord& wooden constructions& mining& hunting>. Hjaalmarch features:< mining& hunting& swamp& Hjaal River& Karth River>. Hjaalmarch towns:< Stonehills>.]",
                                "hidden": false,
                                "worldInfoId": "224040890"
                        },
                        {
                                "id": "3.15",
                                "keys": "eastmarch#[t=5l=3f=2S=2]",
                                "entry": "[ Eastmarch description:< hold in Eastern Skyrim>/< capital city≡ Windhelm>/< kingdom≡ Eastern Skyrim>. Eastmarch climate:< north≡ snowy& freezing>/< south≡ temperate& warm>. Eastmarch geography:< White River>/< north≡ cliff& mountain& windy& snowy>/< south≡ hot water springs>. Eastmarch ruler:< king≡ Atmor>/< palace≡ Palace of Kings>.]",
                                "hidden": false,
                                "worldInfoId": "224040891"
                        },
                        {
                                "id": "3.16",
                                "keys": "eastmarch#[t=6l=3f=2S=2]",
                                "entry": "[ Eastmarch culture:< nord& fishing& port city& smithing>. Eastmarch features:< frozen water& hot water springs& White River>. Eastmarch towns:< Pargran& Kynesgrove>.]",
                                "hidden": false,
                                "worldInfoId": "224040893"
                        },
                        {
                                "id": "3.17",
                                "keys": "Haafingar#[t=5l=3f=2S=2]",
                                "entry": "[ Haafingar description:< hold in Western Skyrim>/< capital city≡ Solitude>/< kingdom≡ Western Skyrim>. Haafingar climate:< north≡ snowy& freezing>/< south≡ warm>. Haafingar geography:< Karth River& Sea of Ghosts& mountain& farmland& fertile& mills>. Haafingar ruler:< king≡ Vrage>.]",
                                "hidden": false,
                                "worldInfoId": "224040894"
                        },
                        {
                                "id": "3.18",
                                "keys": "Haafingar#[t=6l=3f=2S=2]",
                                "entry": "[ Haafingar culture:< nord& fishing& sea trading& port& arts>. Haafingar features:< Karth River& Kilkreath Temple& wolves& trolls& bears>. Haafingar towns:< Dragon Bridge>.]",
                                "hidden": false,
                                "worldInfoId": "224040895"
                        },
                        {
                                "id": "4.1",
                                "keys": "Honeywood#[t=5l=5f=2S=2]",
                                "entry": "[ Honeywood description:< Honeywood small village& few people>/< hold≡ Whiterun>/< kingdom≡ Western Skyrim>. Honeywood climate:< warm& breeze>. Honeywood culture:< nord& small village& ancient nord pantheon>. Honeywood features:< small lake in center& small houses wooden hay>/< people are not self-aware>.]",
                                "hidden": false,
                                "worldInfoId": "224040896"
                        },
                        {
                                "id": "4.2",
                                "keys": "Dragon Bridge#[t=5l=5f=2S=2]",
                                "entry": "[ Dragon Bridge description:< has this name because of the bridge with a statue of a dragon in each end>/< hold≡ Haafingar>/< kingdom≡ Western Skyrim>. Dragon Bridge summary:< small town& few people& part of Haafingar hold& part of Kingdom of Western Skyrim& border with The Reach& town in the banks of Karth River>. Dragon Bridge climate:< warm& breeze>. Dragon Bridge culture:< nord& fishing& hunting>. Dragon Bridge features:< bridge with a statue of a dragon in each end>/< small wooden houses& tavern& blacksmith>/< is in the border of Haafingar and The Reach>.]",
                                "hidden": false,
                                "worldInfoId": "224040897"
                        },
                        {
                                "id": "4.3",
                                "keys": "(Ivar(| )stead)#[t=5l=5f=2S=2]",
                                "entry": "[ Ivarstead description:< small town in the eastern base of the Snow Throat mountain>/< hold≡ The Rift>/< kingdom≡ Eastern Skyrim>. Ivarstead summary:< few people& farming& fertile& fishing& hunting& milling>. Ivarstead climate:< warm& breeze>. Ivarstead culture:< nord& farming& hunting& sheep>. Ivarstead features:< the famous 7000 steps of the Snow Throat mountain begin here& well visit town& inn& tavern>.]",
                                "hidden": false,
                                "worldInfoId": "224040898"
                        },
                        {
                                "id": "4.4",
                                "keys": "(Rorik(| )stead)#[t=5l=5f=2S=2]",
                                "entry": "[ Rorikstead description:< small town& western plains of Whiterun Hold>/< hold≡ Whiterun>/< kingdom≡ Western Skyrim>. Rorikstead summary:< farmland& fertile& hunting& sheep& goat& cattle>/< part of the Kingdom of Western Skyrim>. Rorikstead climate:< warm& breeze& hot>. Rorikstead culture:< nord& farming& ancient nord pantheon>. Rorikstead features:< inn& tavern& friendly giants live near the town>.]",
                                "hidden": false,
                                "worldInfoId": "224040901"
                        },
                        {
                                "id": "4.5",
                                "keys": "(Hel(j|)archen)#[t=5l=5f=2S=2]",
                                "entry": "[ Heljarchen description:< name≡ Heljarchen& Helarchen>/< small town& border of The Pale and Whiterun Hold& just north of the City of Whiterun>/< hold≡ The Pale>/< kingdom≡ Eastern Skyrim>. Heljarchen summary:< hunting& goats& sheep& between the warm and the cold parts of Skyrim>. Heljarchen climate:< cold& breeze>. Heljarchen culture:< nord& imperial divines religion& herding>. Heljarchen features:< small town& few people& inn& tavern>.]",
                                "hidden": false,
                                "worldInfoId": "224040899"
                        },
                        {
                                "id": "4.6",
                                "keys": "Kyne(s|'s )grove#[t=5l=5f=2S=2]",
                                "entry": "[ Kynesgrove description:< name≡ Kynesgrove& Kyne's Grove>/< small town& just south of Windhelm>/< hold≡ Eastmarch>/< kingdom≡ Eastern Skyrim>. Kynesgrove summary:< hunting& goats& sheep& fishing>. Kynesgrove climate:< cold& snowy& breeze>. Kynesgrove culture:< nord& ancient nord religion& wooden houses>. Kynesgrove features:< mill& cattle& White River& inn& tavern>.]",
                                "hidden": false,
                                "worldInfoId": "224040900"
                        },
                        {
                                "id": "4.7",
                                "keys": "Shor's Stone#[t=5l=5f=2S=2]",
                                "entry": "Shor's Stone:[DESC:Shor's Stone is a small town in the Rift named after ancient Nordic god Shor, the leader of the Nord Pantheon;Shor's Stone.SUMM:named after god Shor/relies on hunting, milling, blacksmith;EXIT:<S⇒Riften>,<N⇒Kynesgrove>;Shor's Stone.CULTURE:nord/ancient nord religion;FEATURES:wooden houses/few people/blacksmith/mill/cattle;]",
                                "hidden": false,
                                "worldInfoId": "224040902"
                        },
                        {
                                "id": "4.8",
                                "keys": "(River(| )wood)#[t=5l=5f=2S=2]",
                                "entry": "[ Riverwood description:< name≡ Riverwood>/< small town& border of Whiterun Hold and Falkreath Hold>/< hold≡ Whiterun Hold>/< kingdom≡ Western Skyrim>. Riverwood summary:< hunting& goats& sheep& fishing& smithing& milling>. Riverwood climate:< warm& breeze>. Riverwood culture:< nord& imperial religion& wooden houses>. Riverwood features:< shores of White River& east of Bleak Falls Barrow& west of the Throat of the World>.]",
                                "hidden": false,
                                "worldInfoId": "224040903"
                        },
                        {
                                "id": "4.9",
                                "keys": "Helgen#[t=5l=5f=2S=2]",
                                "entry": "[ Helgen description:< name≡ Helgen>/< small town& border of Falkreath Hold and Whiterun Hold>/< hold≡ Falkreath Hold>/< kingdom≡ Western Skyrim>. Helgen summary:< hunting& goats& sheep& smithing& imperial keep>. Helgen climate:< warm& breeze>. Helgen culture:< nord& imperial religion& wooden houses>. Helgen features:< close to the border with Cyrodiil& >.]",
                                "hidden": false,
                                "worldInfoId": "224040904"
                        },
                        {
                                "id": "4.11",
                                "keys": "Karthwasten#[t=5l=5f=2S=2]",
                                "entry": "[ Karthwasten description:< name≡ Karthwasten>/< small town in the Reach>/< hold≡ The Reach>. Karthwasten summary:< hunting& fishing& mining>. Karthwasten climate:< warm& breeze>. Karthwasten culture:< reachmen& wooden houses>/< religion≡ Hircine& Namira& Paryite>. Karthwasten features:< near the banks of the Karth River>.]",
                                "hidden": false,
                                "worldInfoId": "224040905"
                        },
                        {
                                "id": "4.12",
                                "keys": "Stone( H|h)ills#[t=5l=5f=2S=2]",
                                "entry": "[ Stonehills description:< name≡ Stonehills>/< small community in Hjaalmarch>/< hold≡ Hjaalmarch>/< kingdom≡ Western Skyrim>. Stonehills summary:< hunting& iron mining>. Stonehills climate:< snowy& cold>. Stonehills culture:< nord& wooden houses>/< religion≡ Ancient Nordic Pantheon>. Stonehills features:< iron mine& wolves& sabre cat>.]",
                                "hidden": false,
                                "worldInfoId": "224040906"
                        },
                        {
                                "id": "4.13",
                                "keys": "Vernim#[t=5l=5f=2S=2]",
                                "entry": "[ Vernim description:< name≡ Vernim>/< small town in the Rift>/< hold≡ The Rift>/< kingdom≡ Eastern Skyrim>. Vernim summary:< hunting& fishing>. Vernim climate:< warm& breeze>. Vernim culture:< nord& small wooden houses>/< religion≡ Ancient Nordic Pantheon>. Vernim features:< bears& wolves& sabre cat>.]",
                                "hidden": false,
                                "worldInfoId": "224040907"
                        },
                        {
                                "id": "4.14",
                                "keys": "Nimalten#[t=5l=5f=2S=2]",
                                "entry": "[ Nimalten description:< name≡ Nimalten>/< small town>/< hold≡ The Rift>/< kingdom≡ Eastern Skyrim>. Nimalten summary:< ruler≡ Thane Armjor>/< hunting& fishing& smithing>. Nimalten climate:< warm& breeze>. Nimalten culture:< nord& small wooden houses>/< religion≡ Ancient Nordic Pantheon>. Nimalten features:< bears& wolves& sabre cat& deer& close to Treva River& big mansion where Thane Armjor lives>.]",
                                "hidden": false,
                                "worldInfoId": "224040908"
                        },
                        {
                                "id": "4.17",
                                "keys": "Pargran#[t=5l=5f=2S=2]",
                                "entry": "[ Pargran description:< name≡ Pargran>/< small town>/< hold≡ Eastmarch>/< kingdom≡ Western Skyrim>. Pargran summary:< hunting& fishing& silver mining>. Pargran climate:< snowy& cold>. Pargran culture:< nord& small wooden houses>/< religion≡ Ancient Nordic Pantheon>. Pargran features:< inn& small houses& simple folk>.]",
                                "hidden": false,
                                "worldInfoId": "224040909"
                        },
                        {
                                "id": "5.1",
                                "keys": "skyrim#[t=5l=2f=2]",
                                "entry": "<< Skyrim home the nords, northern province of the empire, vrage current king>>>>\n<< Skyrim harsh cold snowy north, temperate warm south, grasslands west, deep lush woods south>>>>\n<< Skyrim mountainous many valleys forests wildlife rivers woods lakes>>>>\n<< Skyrim divided nine holds, each hold ruled by jarl>>>>",
                                "hidden": false,
                                "worldInfoId": "224040910"
                        },
                        {
                                "id": "5.2",
                                "keys": "(cyrodi(|i)l)#[t=5l=2f=2]",
                                "entry": "<< Cyrodiil capital empire center continent known as Heartlands land of the Imperials>>>>\n<< Cyrodiil north snowy freezing, south east west lush forests green grasslands>>>>",
                                "hidden": false,
                                "worldInfoId": "224040911"
                        },
                        {
                                "id": "5.3",
                                "keys": "(cyrodi(|i)l)#[t=6l=1f=2]",
                                "entry": "<< Cyrodiil White-Gold tower Imperial City capital of Cyrodiil>>>>\n<< Cyrodiil west called Colovia, east called Nibenay>>>>",
                                "hidden": false,
                                "worldInfoId": "224040912"
                        },
                        {
                                "id": "5.4",
                                "keys": "(argonia|black marsh)#[t=5l=2f=2]",
                                "entry": "<< Argonia dense swampland land of the argonians also called Black Marsh>>>>\n<< Argonia natives do not like the name Black Marsh, located southeast Tamriel>>>>\n<< Argonia poisonous lands to non-argonians>>>>",
                                "hidden": false,
                                "worldInfoId": "224040913"
                        },
                        {
                                "id": "5.5",
                                "keys": "high rock#[t=5l=2f=2]",
                                "entry": "<< High Rock northwestern province empire, land of the bretons>>>>\n<< High Rock feudal kingdoms city-states, good trade, rich art music classy people>>>>\n<< High Rock monarchy kings counts dukes, bretons worship the nine divines>>>>",
                                "hidden": false,
                                "worldInfoId": "224040914"
                        },
                        {
                                "id": "5.6",
                                "keys": "high rock#[t=6l=1f=2]",
                                "entry": "<< High Rock regions illiac bay& glenumbra& stormhaven& wrothgar& rivenspire& bangkorai>>>>\n<< High rock wrothgar freezing cold, bangkorai glenumbra illiac bay warm hot weather nice beaches>>>>\n<< High Rock rivenspire moors dead trees dry land, stormhaven lush green forests Direnni Tower green trees>>>>",
                                "hidden": false,
                                "worldInfoId": "224040915"
                        },
                        {
                                "id": "5.7",
                                "keys": "hammerfell#[t=5l=2f=2]",
                                "entry": "<< Hammerfell west Tamriel, home of the redguards, vast deserts warm hot weather>>>>\n<< Hammerfell great ports big trade cities illiac bay many pirates sea life important ports>>>>\n<< Hammerfell six regions alik'r desert bangkorai craglorn sunforge hew's bane khefrem>>>>\n<< Hammerfell two islands stros m'kai and the chain>>>>",
                                "hidden": false,
                                "worldInfoId": "224040916"
                        },
                        {
                                "id": "5.8",
                                "keys": "(summerset( isle(s|)|))#[t=5l=2f=2]",
                                "entry": "<< Summerset province southwest Tamriel, home of the altmer>>>>\n<< Summerset beautiful place good weather colorfour lush forests>>>>\n<< Summerset magic strong Crystal Tower, Alinor capital great city>>>>\n<< Summerset two islands called summerset and auridon>>>>",
                                "hidden": false,
                                "worldInfoId": "224040918"
                        },
                        {
                                "id": "5.9",
                                "keys": "valenwood#[t=5l=2f=2]",
                                "entry": "<< Valenwood southwest Tamriel dense lush forest the green pact, home of the bosmer>>>>\n<< Valenwood migratory live trees, varied fauna many animals>>>>\n<< Valenwood four regions grahtwood& malabal tor& reaper's march& greenshade>>>>",
                                "hidden": false,
                                "worldInfoId": "224040917"
                        },
                        {
                                "id": "5.10",
                                "keys": "(morrowind|resdayn)#[t=5l=2f=2]",
                                "entry": "<< Morrowind eastern province empire, land of the dunmer>>>>\n<< Morrowind large island Vvardenfell in middle, large mainland, borders skyrim& cyrodiil& argonia>>>>\n<< Morrowind ashen lands volcanoes molten lava near vvardenfell, lush green forests south and west>>>>",
                                "hidden": false,
                                "worldInfoId": "224040919"
                        },
                        {
                                "id": "5.11",
                                "keys": "(morrowind|resdayn)#[t=6l=1f=2]",
                                "entry": "<< Morrowind divided regions bal foyen& deshaan& vvardenfell& stonefalls& soltheim>>>>\n<< Morrowind worship the tribunal, tribunal also called almsivi or triune>>>>\n<< Morrowind tribunal consist vivec& almalexia& sotha sil, three living gods>>>>",
                                "hidden": false,
                                "worldInfoId": "224040920"
                        },
                        {
                                "id": "5.12",
                                "keys": "((confederation of |)elsweyr)#[t=5l=3f=2S=2]",
                                "entry": "<< Elsweyr south province, home of the khajiit>>>>\n<< Elsweyr two regions anequina in north& pellitine in south>>>>\n<< Elsweyr kingdom capital rimmen, mane spiritual leader city of torval>>>>",
                                "hidden": false,
                                "worldInfoId": "224040921"
                        },
                        {
                                "id": "5.13",
                                "keys": "((confederation of |)elsweyr)#[t=5l=3f=2S=2]",
                                "entry": "<< Elsweyr anequina lush forests& sandy canyons, capital rimmen>>>>\n<< Elsweyr pellitine jungles rainforests, capital torval, torval seat of mane>>>>",
                                "hidden": false,
                                "worldInfoId": "224040922"
                        },
                        {
                                "id": "6.1#[t=5l=3f=1S=2]",
                                "keys": "(riften (inn|tavern)|mad mammoth)",
                                "entry": "The Mad Mammoth:[TYPE<The Mad Mammoth>:inn/bar/pub/tavern;OWNER<The Mad Mammoth>:andkvar;INHABITANTS<The Mad Mammoth>:Andkvar/Narca/Bujela/Freyte/Torbndir;LOCATION<The Mad Mammoth>:Riften;CITY<The Mad Mammoth>:Riften;DESC<The Mad Mammoth>:the mad mammoth is the local inn and tavern in riften/it is owned by andkvar/has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/andkvar lives here/narca lives here/bujela lives here/freyte lives here/torbndir lives here/five people live here;EXIT<The Mad Mammoth>:one exit goes out to riften in the market square/one exit goes to riften in the entrance bridge.]",
                                "hidden": false,
                                "worldInfoId": "224040923"
                        },
                        {
                                "id": "6.2#[t=5l=3f=1S=2]",
                                "keys": "(winterhold (inn|tavern)|frozen hearth)",
                                "entry": "The Frozen Hearth:[TYPE<The Frozen Hearth>:inn/bar/pub/tavern;OWNER<The Frozen Hearth>:Bjormar;INHABITANTS<The Frozen Hearth>:Bjormar/Astrid/Aengvir/Balor;LOCATION<The Frozen Hearth>:Winterhold;CITY<The Frozen Hearth>:Winterhold;DESC<The Frozen Hearth>:the frozen hearth is the local inn and tavern in winterhold/it is owned by Bjormar/it has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/balor lives here/Bjormar owns the place/astrid lives here/aengvir lives here/there are four people here/balor lives here;EXIT<The Frozen Hearth>:exit that goes out to the city of winterhold.]",
                                "hidden": false,
                                "worldInfoId": "224040924"
                        },
                        {
                                "id": "6.3#[t=5l=3f=1S=2]",
                                "keys": "(whiterun (inn|tavern)|bloated goat)",
                                "entry": "The Bloated Goat:[TYPE<The Bloated Goat>:inn/bar/pub/tavern;OWNER<The Bloated Goat>:Isekaid;INHABITANTS<The Bloated Goat>:Isekaid/Sigrid;LOCATION<The Bloated Goat>:whiterun/city of whiterun;CITY<The Bloated Goat>:whiterun/city of whiterun;DESC<The Bloated Goat>:The Bloated Goat is the inn and tavern in the city of Whiterun/owned by Isekaid and his wife Sigrid. They both live at the inn/in their private room in the ground floor. The inn is a two story building with 10 rooms for rent.;EXIT<The Bloated Goat>:One main exit goes out to the Whiterun market square/located in the Plains District..]",
                                "hidden": false,
                                "worldInfoId": "224040925"
                        },
                        {
                                "id": "6.4#[t=5l=3f=1S=2]",
                                "keys": "temple of kyne",
                                "entry": "Temple of Kyne:[TYPE<Temple of Kyne>:temple/church/cathedral;INHABITANTS<Temple of Kyne>:Irene/Mauricius/Nonnata;LOCATION<Temple of Kyne>:whiterun/city of whiterun;CITY<Temple of Kyne>:whiterun/city of whiterun;DESC<Temple of Kyne>:Temple dedicated to Kyne/the goddess of wind and air. It's the main temple to Kyne in Skyrim/located in the Winds District.;EXIT<Temple of Kyne>:One main exit goes out to the Whiterun tree square/located in the Winds District.]",
                                "hidden": false,
                                "worldInfoId": "224040926"
                        },
                        {
                                "id": "7.1",
                                "keys": "Karth River#[t=5l=5f=2S=2]",
                                "entry": "<< Karth River begins in The Reach ends in Haafingar, big river, empties into the Sea of Ghosts>>>> << Karth River known violent rapids, dangerous terrains, sharp stones>>>> << Karth River important fishing life support people in The Reach>>>>",
                                "hidden": false,
                                "worldInfoId": "224040927"
                        },
                        {
                                "id": "7.2",
                                "keys": "White River#[t=5l=5f=2S=2]",
                                "entry": "<< White River begins in Lake Illinalta in Falkreath Hold, passes by Whiterun Hold and Eastmarch>>>> << White River ends in Sea of Ghosts northeastern Skyrim near Windhelm>>>> << White River fishing villages, life support, dangerous currents>>>>",
                                "hidden": false,
                                "worldInfoId": "224040928"
                        },
                        {
                                "id": "7.3",
                                "keys": "Lake Geir#[t=5l=5f=2S=2]",
                                "entry": "<< Lake Geir lake western Rift, town Ivarstead built its western shores>>>> << Lake Geir fed by Treva River, drained by Darkwater River>>>> << Lake Geir named after Archmage Geirmund, Geirmund's tomb on largest island in middle lake>>>>",
                                "hidden": false,
                                "worldInfoId": "224040929"
                        },
                        {
                                "id": "7.4",
                                "keys": "Lake Ilinalta#[t=5l=5f=2S=2]",
                                "entry": "<< Lake Ilinalta source of White River, located central Falkreath Hold, middle Skyrim's pine forest>>>> << Lake Ilinalta notable Skyrim landmark, life support Falkreath city, important fishing hunting>>>>",
                                "hidden": false,
                                "worldInfoId": "224040930"
                        },
                        {
                                "id": "7.5",
                                "keys": "Lake Yorgrim#[t=5l=5f=2S=2]",
                                "entry": "<< Lake Yogrim source of river with same name, located in eastern Pale, just west of Windhelm>>>> << Lake Yogrim fishing The Pale and Eastmarch beautiful>>>> << Lake Yogrim burial site of dragon Viinturuth, Viinturuth died in the Merethic Era durin Dragon War>>>>",
                                "hidden": false,
                                "worldInfoId": "224040931"
                        },
                        {
                                "id": "7.6",
                                "keys": "Darkwater River#[t=5l=5f=2S=2]",
                                "entry": "<< Darkwater River eastern skyrim, connects Lake Geir to White River>>>> << Ends between The Rift and Eastmarch marks the border between the holds>>>> << good fishing important river Eastern Skyrim>>>>",
                                "hidden": false,
                                "worldInfoId": "224040932"
                        },
                        {
                                "id": "7.7",
                                "keys": "River Hjaal#[t=5l=5f=2S=2]",
                                "entry": "<< River Hjaal northwestern Skyrim, located in Hjaalmarch>>>> << River Hjaal located in Hjaalmarch, near border with Whiterun, near city of Mortal>>>> << River Hjaal drains into Karth River, ends in Sea of Ghosts, wide range fish>>>>",
                                "hidden": false,
                                "worldInfoId": "224040933"
                        },
                        {
                                "id": "7.8",
                                "keys": "River Yorgrim#[t=5l=5f=2S=2]",
                                "entry": "<< River Yogrim is short tributary, connects Lake Yogrim to White River>>>> << River Yogrim starts in eponymous lake in The Pale, ends in Eastmarch into White River>>>> << River Yogrim many waterfalls, many fish>>>>",
                                "hidden": false,
                                "worldInfoId": "224040934"
                        },
                        {
                                "id": "7.9",
                                "keys": "Treva River#[t=5l=5f=2S=2]",
                                "entry": "<< Treva River small river center of The Rift>>>> << Treva River starts in Lake Honrich ends in Lake Geir>>>> << Treva River many fish important river The Rift>>>>",
                                "hidden": false,
                                "worldInfoId": "224040936"
                        },
                        {
                                "id": "7.10",
                                "keys": "(Jerall(s| Mountains))#[t=5l=5f=2S=2]",
                                "entry": "<< Jerall Mountains also known Jeralls, mountain range southern Skyrim border with Cyrodiil>>>> << Jerall Mountains rugged steep inhospitable, location of Pale Pass in southern Skyrim>>>>",
                                "hidden": false,
                                "worldInfoId": "224040935"
                        },
                        {
                                "id": "7.11",
                                "keys": "Valus Mountains#[t=5l=5f=2S=2]",
                                "entry": "<< Valus Mountains mountain range southeastern Skyrim, border Morrowind and Cyrodiil>>>> << Valus Mountains southeastern Rift border Morrowind>>>>",
                                "hidden": false,
                                "worldInfoId": "224040937"
                        },
                        {
                                "id": "7.12",
                                "keys": "Dragon('s |)tail Mountains#[t=2l=5f=2S=2]",
                                "entry": "<< Dragon's Tail Mountains mountain range western Skyrim, border Hammerfell>>>>",
                                "hidden": false,
                                "worldInfoId": "224040938"
                        },
                        {
                                "id": "7.13",
                                "keys": "Dragon's Teeth Mountains#[t=5l=5f=2S=2]",
                                "entry": "<< Dragon's Teeth Mountains expansive mountain range western Skyrim, High Rock border>>>> << Dragon's Teeth Mountains provinces Cyrodiil High Rock Hammerfell Skyrim>>>>",
                                "hidden": false,
                                "worldInfoId": "224040939"
                        },
                        {
                                "id": "7.14",
                                "keys": "Druadach Mountains#[t=3l=5f=2S=2]",
                                "entry": "<< Druadach Mountains mountain range border Skyrim with High Rock, border Skyrim with Hammerfell>>>> << Druadach Mountains is Markarth, near Karth River, end in Solitude>>>>",
                                "hidden": false,
                                "worldInfoId": "224040940"
                        },
                        {
                                "id": "7.15",
                                "keys": "Druadach Mountains#[t=4l=5f=2S=2]",
                                "entry": "<< Druadach Mountains regions of Wrothgar Bangkorai in High Rock>>>>",
                                "hidden": false,
                                "worldInfoId": "224040941"
                        },
                        {
                                "id": "7.16",
                                "keys": "Velothi Mountains#[t=5l=5f=2S=2]",
                                "entry": "<< Velothi Mountains eastern Skyrim, border with Morrowind>>>> << Velothi Mountains named after prophet Veloth patron saint of Morrowind>>>>",
                                "hidden": false,
                                "worldInfoId": "224040942"
                        },
                        {
                                "id": "7.17",
                                "keys": "(Throat of the World|Snow Throat)#[t=4l=5f=2S=2]",
                                "entry": "<< Snow Throat also known Throat of the World, highest peak in Skyrim>>>> << Snow Throat located central Skyrim between Whiterun Hold and The Rift>>>>",
                                "hidden": false,
                                "worldInfoId": "224040943"
                        },
                        {
                                "id": "7.18",
                                "keys": "(Throat of the World|Snow Throat)#[t=5l=5f=2S=2]",
                                "entry": "<< Snow Throat climb seven thousand steps starting in Ivarstead, High Hrothgar on top of mountain>>>> << Snow Throat home of the monastic order Greybeards>>>>",
                                "hidden": false,
                                "worldInfoId": "224040944"
                        },
                        {
                                "id": "7.19",
                                "keys": "Jorrvaskr#[t=3l=5f=2S=2]",
                                "entry": "<< Jorrvaskr meadhall in Whiterun, home of the Companions>>>> << Jorrvaskr ancient meadhall made from boat of Ysgramor>>>> << Jorrvaskr one of oldest places in Skyrim>>>> << Jorrvaskr is a ship turned into a manor>>>>",
                                "hidden": false,
                                "worldInfoId": "224040945"
                        },
                        {
                                "id": "7.20",
                                "keys": "Skyforge#[t=4l=5f=2S=2]",
                                "entry": "[ Skyforge description:< ancient forge in Whiterun& located in Jorrvaskr backyard>/< believed to be blessed by Kyne herself>. Skyforge summary:< huge iron hawk statue on top>/< only the Companions blacksmith is allowed to use>.]",
                                "hidden": false,
                                "worldInfoId": "224040946"
                        },
                        {
                                "id": "7.21",
                                "keys": "(Dragonsreach)#[t=4l=5f=2S=2]",
                                "entry": "<< Dragonsreach is palace of Jarl of Whiterun, huge castle top of hill in city of Whiterun>>>> << Dragonsreach built to trap dragons during dragon war in Merethic Era>>>> << Dragonsreach Numinex was trapped there by High King Olaf One-Eye in First Era>>>> << Dragonsreach skull of Numinex above Jarl's throne>>>>",
                                "hidden": false,
                                "worldInfoId": "224040947"
                        },
                        {
                                "id": "7.22",
                                "keys": "Understone Keep#[t=5l=5f=2S=2]",
                                "entry": "<< Understone Keep seat of power The Reach, located city Markarth>>> << Understone Keep throne of the Ard of The Reach, Ard is title of ruler of The Reach>>>> << Understone Keep built inside mountain, used to be called Nchuand-Zel>>>>",
                                "hidden": false,
                                "worldInfoId": "224040948"
                        },
                        {
                                "id": "7.23",
                                "keys": "(Palace of (the |)Kings)#[t=5l=5f=2S=2]",
                                "entry": "<< Palace of Kings oldest building in Tamriel, built by ancient Nords>>>> << Palace of Kings seat of power of the Kingdom of Eastern Skyrim>>>> << Palace of Kings made of stone, located in city of Windhelm>>>> << Palace of Kings also known Palace of Ysgramor>>>>",
                                "hidden": false,
                                "worldInfoId": "224040949"
                        },
                        {
                                "id": "7.24",
                                "keys": "Blue Palace#[t=5l=5f=2S=2]",
                                "entry": "<< Blue Palace seat of power kingdom Western Skyrim& located in city Solitude>>>> << Blue Palace dark blue roof, stone walls, big courtyard with garden>>>>",
                                "hidden": false,
                                "worldInfoId": "224040950"
                        },
                        {
                                "id": "7.25",
                                "keys": "Kilkreath Temple#[t=5l=5f=2S=2]",
                                "entry": "<< Kilkreath Temple dedicated to Meridia, huge Meridia statue in the courtyard>>>> << Kilkreath Temple inner temple subterrain, door behind the statue>>>>",
                                "hidden": false,
                                "worldInfoId": "224040951"
                        },
                        {
                                "id": "7.26",
                                "keys": "(Winds District|Statue of Talos|Talos Statue)#[t=5l=5f=2S=2]",
                                "entry": "<< Statue of Talos image of Tiber Septim, altar shrine pray, stone statue Winds District of Whiterun>>>> << Statue of Talos looking heroic, stepping on big snake, sword in hand>>>>",
                                "hidden": false,
                                "worldInfoId": "224040952"
                        },
                        {
                                "id": "7.27",
                                "keys": "Deep Folk Crossing#[t=5l=5f=2S=2]",
                                "entry": "<< Deep Folk Crossing ancient Dwemer bridge in northern Reach>>>><< Deep Folk Crossing landmark, made of gray smooth stone with Dwemer brass metal roof>>>><< Deep Folk Crossing made in Dwemer style architecture>>>>",
                                "hidden": false,
                                "worldInfoId": "224040954"
                        },
                        {
                                "id": "7.28",
                                "keys": "(Azura Statue|Statue of Azura)#[t=5l=5f=2S=2]",
                                "entry": "<< Statue of Azura top of mountain in Winterhold region>>>><< Statue of Azura can be seen from kilometers away>>>><< Statue of Azura shrine altar, hundred feet tall, holds her hands high, holds moon right hand, holds sun left hand>>>>",
                                "hidden": false,
                                "worldInfoId": "224040953"
                        },
                        {
                                "id": "7.29",
                                "keys": "Gjukar's Monument#[t=5l=5f=2S=2]",
                                "entry": "<< Gjukar's Monument ancient stone monument south of Rorikstead>>>> << Gjukar's Monument commemorates an ancient battle that happened here>>> << Gjukar's Monument monument is the head of a hawk>>>>",
                                "hidden": false,
                                "worldInfoId": "224040955"
                        },
                        {
                                "id": "7.30",
                                "keys": "Sundered Towers#[t=5l=5f=2S=2]",
                                "entry": "<< Sundered Towers entire construction extremly good condition, beautiful sight>>>> << Sundered Towers big staircases to ancient Nord ruin leading to the towers>>>> << Sundered Towers two Nordic style ancient towers surrounded by tall pillars with hawk heads>>>>",
                                "hidden": false,
                                "worldInfoId": "224040956"
                        },
                        {
                                "id": "7.31",
                                "keys": "Reachwind Eyrie#[t=5l=5f=2S=2]",
                                "entry": "<<●Reachwind Eyrie ancient small Dwemer tower The Reach, built in Dwemer style architecture>>>> <<●Reachwind Eyrie made of smooth dark gray stone, brass roof>>>>",
                                "hidden": false,
                                "worldInfoId": "224040957"
                        },
                        {
                                "id": "8.1",
                                "keys": "(nord(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Nord native to skyrim, tall, blonde, strong>>>>\n<< Nord used to harsh environments, used to cold>>>>\n<< Nord go to sovngarde after death, value strength and courage>>>>",
                                "hidden": false,
                                "worldInfoId": "224040958"
                        },
                        {
                                "id": "8.2",
                                "keys": "(nord(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Nord call people they don't like \"milk-drinker\" and \"coward\">>>>\n<< Nord short-tempered hot-headed stubborn dislike magic>>>>",
                                "hidden": false,
                                "worldInfoId": "224040959"
                        },
                        {
                                "id": "8.3",
                                "keys": "khajiit#[t=4l=3f=2S=2]",
                                "entry": "[ Khajiit description:< speak in third person&& refer to themselves \"this one\">/< natives of Elsweyr>/< seen as thieves by the other races>. Khajiit appearance:< catlike-humanoids>/< furry body& tail& claws& cat ears>. Khajiit speech:< speak in third person&& refer to themselves \"this one\">.]",
                                "hidden": false,
                                "worldInfoId": "224040960"
                        },
                        {
                                "id": "8.4",
                                "keys": "khajiit#[t=5l=3f=2S=2]",
                                "entry": "[ Khajiit speech:< use \"wafiit\" and \"oviit\" as slur terms& use \"trevan\" as a friendly term>.]",
                                "hidden": false,
                                "worldInfoId": "224040961"
                        },
                        {
                                "id": "8.5",
                                "keys": "(dunmer|dark el(f|ves))#[t=4l=3f=2S=2]",
                                "entry": "<< Dunmer moniker dark elf native to morrowind>>>>\n<< Dunmer call people who are not dunmer \"n'wah\" if they don't like them, use \"s'wit\" and \"fetcher\" as slur terms>>>>",
                                "hidden": false,
                                "worldInfoId": "224040962"
                        },
                        {
                                "id": "8.6",
                                "keys": "(dunmer|dark el(f|ves))#[t=5l=3f=2S=2]",
                                "entry": "<< Dunmer call people \"sera\" and \"muthsera\" when they like or respect the people they're talking to>>>>\n<< Dunmer hot-headed dark grey skin red eyes pointy ears>>>>\n<< Dunmer affinity with magic very powerful strong-willed>>>>",
                                "hidden": false,
                                "worldInfoId": "224040963"
                        },
                        {
                                "id": "8.7",
                                "keys": "(altmer|high el(f|ves))#[t=4l=3f=2S=2]",
                                "entry": "<< Altmer moniker high elf native to summerset isles>>>>\n<< Altmer tall thin golden skin clear eyes brownish hair>>>>\n<< Altmer arrogant pedantic prepotent self-righteous perfectionist>>>>",
                                "hidden": false,
                                "worldInfoId": "224040964"
                        },
                        {
                                "id": "8.8",
                                "keys": "(altmer|high el(f|ves))#[t=5l=3f=2S=2]",
                                "entry": "<< Altmer call people \"ceruval\" and \"cerum\" when they like or respect the people they're talking to>>>>\n<< Altmer affinity with magic very powerful strong-willed>>>>\n<< Altmer call people who are not dunmer \"ephem\" if they don't like them, use \"ephem\" and \"de'nt\" as slur terms>>>>",
                                "hidden": false,
                                "worldInfoId": "224040965"
                        },
                        {
                                "id": "8.9",
                                "keys": "(or(c|cs|simer))#[t=4l=3f=2S=2]",
                                "entry": "<< Orsimer moniker orc, have tusks pointy ears brownish-green skin>>>>\n<< Orsimer muscular build violent short-tempered worship malacath>>>>\n<< Orsimer strong stubborn fight-lover tribal primitive>>>>",
                                "hidden": false,
                                "worldInfoId": "224040966"
                        },
                        {
                                "id": "8.10",
                                "keys": "(bosmer|wood el(f|ves))#[t=4l=3f=2S=2]",
                                "entry": "<< Bosmer moniker wood elf native to valenwood>>>>\n<< Bosmer short pointy ears light-brown or tan skin big eyes sometimes horns>>>>\n<< Bosmer live trees cannot kill trees and vegetation because of green pact can only eat meat>>>>",
                                "hidden": false,
                                "worldInfoId": "224040967"
                        },
                        {
                                "id": "8.11",
                                "keys": "(bosmer|wood el(f|ves))#[t=5l=3f=2S=2]",
                                "entry": "<< Bosmer in war eat the flesh of enemies ruthless enemies in war>>>>\n<< Bosmer green pact worship y'ffre friend of the woods love animals love vegetation care about environment>>>>",
                                "hidden": false,
                                "worldInfoId": "224040968"
                        },
                        {
                                "id": "8.12",
                                "keys": "(argonian(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Argonian native to black marsh lizard-like race scaly>>>>\n<< Argonian worship sithis worship hist hate dunmer enslaved by dunmer>>>>\n<< Argonian other races do not like argonians>>>>",
                                "hidden": false,
                                "worldInfoId": "224040969"
                        },
                        {
                                "id": "8.13",
                                "keys": "(imperial(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Imperial native to cyrodiil human race cosmopolitan cultured fair skin>>>>\n<< Imperial human medium height sturdy strong diplomatic>>>>\n<< Imperial main race in empire good with commerce and trade>>>>",
                                "hidden": false,
                                "worldInfoId": "224040970"
                        },
                        {
                                "id": "8.14",
                                "keys": "(redguard(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Redguard human native to hammerfell dark brown skin sturdy strong>>>>\n<< Redguard diplomatic but strong in war courageous fearless>>>>\n<< Redguard many pirates illiac bay strong trade with high-rock>>>>",
                                "hidden": false,
                                "worldInfoId": "224040971"
                        },
                        {
                                "id": "8.15",
                                "keys": "(breton(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Breton human native to high rock fair skin short stature slightly pointy ears>>>>\n<< Breton mix of human and elf, good with magic good with trade>>>>\n<< Breton highly cultured arts trade many pirates illiac bay>>>>",
                                "hidden": false,
                                "worldInfoId": "224040972"
                        },
                        {
                                "id": "8.16",
                                "keys": "khajiit#[t=1l=3f=2S=2]",
                                "entry": "Khajiit talk in third person, call themselves \"this one\".",
                                "hidden": false,
                                "worldInfoId": "224040973"
                        },
                        {
                                "id": "9.1",
                                "keys": "(sigrid)#[t=5l=5f=2S=2]",
                                "entry": "<< Sigrid nord ♀ 38y age, 45kg eight, 169cm height>>>> << Sigrid fine skin blue eyes beautiful, long blonde hair>>>> << Sigrid innkeeper of the Bloated Goat, good humored solidary funny polite>>>>",
                                "hidden": false,
                                "worldInfoId": "224040974"
                        },
                        {
                                "id": "9.2",
                                "keys": "(isekaid|(innkeeper of the |)bloated goat( innkeeper|))#[t=5l=5f=2S=2]",
                                "entry": "<< Isekaid nord ♂ 40y age, 80kg weight, 175cm height>>>> << Isekaid full beard long blonde hair blue eyes>>>> << Isekaid innkeeper of the Bloated Goat, good humored solidary funny>>>>",
                                "hidden": false,
                                "worldInfoId": "224040975"
                        },
                        {
                                "id": "9.3",
                                "keys": "(m(é|e)lanie( sindeaux|)|arch(-| |)mage)#[t=5l=5f=2S=2]",
                                "entry": "Mélanie:[ Mélanie description:< born in Daggerfall& ♀& 60y>/< race≡ Breton>/< weight≡ 40kg>/< height≡ 165cm>. Mélanie appearance:< fine smooth skin& stunningly beautiful& looks younger than actually is>. Mélanie mental:< serious&intelligent& strategic& technical>. Mélanie wearing:< noble fine clothes& jewlery>. Mélanie occupation:< Archmage of the College of Winterhold>.]",
                                "hidden": false,
                                "worldInfoId": "224040976"
                        },
                        {
                                "id": "9.4",
                                "keys": "((dean |)desir(é|e)e( beauclair|))#[t=5l=5f=2S=2]",
                                "entry": "Desirée:[ Desirée description:< born in Camlorn& ♀& 39y>/< race≡ Breton>/< weight≡ 50kg>/< height≡ 172cm>. Desirée appearance:< thin& slender& green eyes>/< hair≡ dark brown& straight& short>. Desirée mental:< funny& intelligent& knowledgeable>. Desirée wearing:< noble fine clothes>. Desirée occupation:< Dean of the Antiquarian Circle>.]",
                                "hidden": false,
                                "worldInfoId": "224040977"
                        },
                        {
                                "id": "9.5",
                                "keys": "(grand( |-|)master |)armilion#[t=5l=5f=2S=2]",
                                "entry": "Armilion:[ Armilion description:< born in Vulkhel Guard& ♂& 95y>/< race≡ Altmer>/< weight≡ 90kg>/< height≡ 200cm>. Armilion appearance:< thin& slender& yellow eyes>/< hair≡ golden& straight& long>. Armilion mental:< pedantic& intelligent& good singer& good writer>. Armilion wearing:< noble fine clothes>. Armilion occupation:< Grandmaster of the Bards College>.]",
                                "hidden": false,
                                "worldInfoId": "224040978"
                        },
                        {
                                "id": "9.6",
                                "keys": "(gray fox|)#[t=5l=5f=2S=2]",
                                "entry": "<< Gray Fox mysteryous, no one knows who he is, no one knows his name, wears the Gray Cowl of Nocturnal, is the leader of the Thieves Guild, face hidden by the cowl>>>>",
                                "hidden": false,
                                "worldInfoId": "224040979"
                        },
                        {
                                "id": "10.1",
                                "keys": "((college of |)bards( college|))#[t=5l=5f=2S=2]",
                                "entry": "<< Bards College ancient school of the bardic arts, one of most prestigious in all of Tamriel>>>> << Bards College founded some time in the First Era, bard school art school>>>>",
                                "hidden": false,
                                "worldInfoId": "224040980"
                        },
                        {
                                "id": "10.2",
                                "keys": "((college of |)bards( college|))#[t=6l=5f=2S=2]",
                                "entry": "<< Bards College current leader Grandmaster Armilion>>>> << Bards College most of the best bards in Tamriel graduated here>>>> << Bards College located in the city of Solitude>>>>",
                                "hidden": false,
                                "worldInfoId": "224040981"
                        },
                        {
                                "id": "10.3",
                                "keys": "(antiquarian(s|) circle)#[t=5l=5f=2S=2]",
                                "entry": "<< Antiquarian Circle school of archaeology paleontology history, located in city of Solitude>>>> << Antiquarian Circle is a branch of Gwyllim University>> << Antiquarian Circle current leader breton she Dean Desirée Beauclair>>>>",
                                "hidden": false,
                                "worldInfoId": "224040982"
                        },
                        {
                                "id": "10.4",
                                "keys": "(antiquarian(s|) circle)#[t=6l=5f=2S=2]",
                                "entry": "<< Antiquarian Circle many of the best historians and archaeologists have graduated here>>>> << Antiquarian Circle founded some time in the First Era>>>>",
                                "hidden": false,
                                "worldInfoId": "224040983"
                        },
                        {
                                "id": "10.5",
                                "keys": "college of winterhold#[t=5l=5f=2S=2]",
                                "entry": "<< College of Winterhold school of magic, located in city of Winterhold>>>> << College of Winterhold current leader she breton Arch-Mage Mélanie Sindeaux>>>>",
                                "hidden": false,
                                "worldInfoId": "224040984"
                        },
                        {
                                "id": "10.6",
                                "keys": "college of winterhold#[t=6l=5f=2S=2]",
                                "entry": "<< College of Winterhold founded in First Era by Shalidor>>>> << College of Winterhold many powerful mages graduated here>>>>",
                                "hidden": false,
                                "worldInfoId": "224040985"
                        },
                        {
                                "id": "10.7",
                                "keys": "Companions#[t=5l=5f=2S=2]",
                                "entry": "<< Companions ancient group of fighters, headquarter in meadhall called Jorrvaskr, do jobs for money>>>> << Companions protect citizens, current leader Harbinger Isenor Argonsson>>>>",
                                "hidden": false,
                                "worldInfoId": "224040986"
                        },
                        {
                                "id": "10.8",
                                "keys": "Thieves Guild#[t=5l=5f=2S=2]",
                                "entry": "<< Thieves Guild organization in favor of thieves, worship Nocturnal, leader is the Gray Fox>>>> << Thieves Guild located The Ratways in Riften, steals from rich gives to poor, helps beggars>>>>",
                                "hidden": false,
                                "worldInfoId": "224040987"
                        },
                        {
                                "id": "11.1",
                                "keys": "((the |)gods|(nine |eight |)divines)gods#[t=5l=3f=1S=2]",
                                "entry": "The Nine Divines:[TYPE<The Nine Divines>:religion;DESC<The Nine Divines>:the eight divines is the official pantheon of the empire. it worships the eight gods related to creation. these gods are  Akatosh/Arkay/Dibella/Julianos/Kynareth/Mara/Stendarr/Talos/and Zenithar..]",
                                "hidden": false,
                                "worldInfoId": "224040988"
                        },
                        {
                                "id": "11.2",
                                "keys": "(a(kat|lk)osh|auri(-|)el)#[t=5l=3f=1S=2]",
                                "entry": "[ Akatosh description:< name ≡ Akatosh/ Alkosh/ Auri-El>/< age ≡ as old as time>/< gender ≡ genderless>.  Akatosh appearance:< body ≡ scaly/ big dragon>.  Akatosh mental:< benevolent& good& cryptic& mystic& insane>.  Akatosh occupation:< god of time/ chief god of the divines/ chief god of the imperial pantheon>.  Akatosh SUMM:< Akatosh is the dragon god of time, and the chief god in the Imperial Pantheon of the Divines. He is an Aedra. He is usually depicted as a dragon, and appears in all Tamrielic religions, though sometimes with different names>.]",
                                "hidden": false,
                                "worldInfoId": "224040989"
                        },
                        {
                                "id": "11.3",
                                "keys": "(Ark('|)ay)#[t=5l=3f=1S=2]",
                                "entry": "Arkay:[TYPE<Arkay>:god;SPHERE<Arkay>:life and death/burials and funerals;DESC<Arkay>:Arkay is the god of burials and funeral rites/and is generally associated with cyclical occasions/such as the seasons and life and death. His priests are staunch opponents of necromancy and all forms of the undead/and are empowered to bestow Arkay's blessings which prevent the forceful misuse of a mortal soul. Thus/any body properly buried by a priest observing the proper rituals is protected by Arkay's Law from being raised as undead.Therefore/necromancers view Arkay as their ultimate enemy/and make covert efforts to undermine his worship throughout Tamriel. Because of this association with/and protection of/mortality/he is sometimes called the Mortals' God..]",
                                "hidden": false,
                                "worldInfoId": "224040990"
                        },
                        {
                                "id": "11.4",
                                "keys": "Dibella|Our Blessed Lady#[t=5l=3f=1S=2]",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/love and affection;DESC<Dibella>:Dibella is the Goddess of Beauty/Love/and Affection. She is also acclaimed as the Lady of Love/Beauty/Art/and Music. Dibella is the Queen of Heaven/and is one of the Divines..]",
                                "hidden": false,
                                "worldInfoId": "224040991"
                        },
                        {
                                "id": "11.5",
                                "keys": "Julianos#[t=5l=3f=1S=2]",
                                "entry": "Julianos:[TYPE<Julianos>:god;SPHERE<Julianos>:wisdom and logic;DESC<Julianos>:Julianos is one of the Divines/governing the realms of literature/law/history/and contradiction. He is usually associated with magic/and thus is often revered by wizards..]",
                                "hidden": false,
                                "worldInfoId": "224040992"
                        },
                        {
                                "id": "11.6",
                                "keys": "Kynareth#[t=5l=3f=1S=2]",
                                "entry": "Kynareth :[TYPE<Kynareth >:god;SPHERE<Kynareth >:heavens/the winds/the elements/and the unseen spirits of the air;DESC<Kynareth >:Kynareth is the goddess of the heavens/the winds/the elements/and the unseen spirits of the air. She is a member of the Divines and Patron of sailors and travelers. Kynareth is often invoked for auspicious stars at birth and for good fortune in daily life. In some legends/she is the first to agree to Lorkhan's divine plan to create the mortal plane/and provides the space in the void for its creation. Furthermore/she is associated with rain/a phenomenon that is said not to have occurred before the removal of Lorkhan's divine spark..]",
                                "hidden": false,
                                "worldInfoId": "224040993"
                        },
                        {
                                "id": "11.7",
                                "keys": "Mara#[t=5l=3f=1S=2]",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love/fertility/compassion and agriculture;DESC<Mara>:Mara/also known as Mother Mara/Mother Mild/and the Divine Mother/is the Goddess of Love/Fertility/Agriculture/and Compassion. She is also acclaimed as the Mother-Goddess/and is one of the Divines..]",
                                "hidden": false,
                                "worldInfoId": "224040994"
                        },
                        {
                                "id": "11.8",
                                "keys": "S(t|('|)r)endarr#[t=5l=3f=1S=2]",
                                "entry": "Stendarr:[TYPE<Stendarr>:god;SPHERE<Stendarr>:mercy/charity/luck;DESC<Stendarr>:Stendarr/also known as Stendarr the Steadfast/is the God of Mercy/Charity/Well-Earned Luck/and Justice. He is also acclaimed as the God of Compassion/and Righteous Rule by Might and Merciful Forbearance. Stendarr is the Apologist of Men/patron of the Imperial Legion/magistrates/rulers/and knights errant/and one of the Divines..]",
                                "hidden": false,
                                "worldInfoId": "224040995"
                        },
                        {
                                "id": "11.9",
                                "keys": "(Zenithar|Z'en)#[t=5l=3f=1S=2]",
                                "entry": "Zenithar:[TYPE<Zenithar>:god;SPHERE<Zenithar>:Work and Commerce;DESC<Zenithar>:Zenithar/the God of Work and Commerce/the Provider of our Ease/is one of the Divines. The Trader God is frequently seen as the same deity as the Bosmeri god Z'en. In the Empire/however/Zenithar is considered a more cultivated god of merchants and middle nobility/being the deity of wealth/labor/commerce and communication..]",
                                "hidden": false,
                                "worldInfoId": "224040996"
                        },
                        {
                                "id": "11.10",
                                "keys": "(Talos|Stormcrown|Ysmir|Dragon of the North)#[t=5l=3f=1S=2]",
                                "entry": "Talos:[TYPE<Talos>:god;SPHERE<Talos>:mankind/war/strength;DESC<Talos>:Talos is the most important hero-god of Mankind. In his mortal form/known as Tiber Septim/he conquered all of Tamriel and ushered in the Third Era (and the Third Empire). After death/his spirit ascended to the heavens to become the ninth and youngest divine/under the name given to him by the Nords: Talos. Also called Ysmir/'Dragon of the North'. One of the Nine Divines. Less prominent sects/such as the Talos Cult/have been inspired by his apotheosis..]",
                                "hidden": false,
                                "worldInfoId": "224040997"
                        },
                        {
                                "id": "12.1",
                                "keys": "(herma(eus|)( |-)mora|hermorah)#[t=5l=3f=1S=2]",
                                "entry": "[ Hermaeus Mora description:< name≡ Hermaeus Mora/ Herma-Mora/ Hermorah>/< age≡ unknown>/< genderless>. Hermaeus Mora summ:< Usually referred to as a male, his plane of Oblivion is Apocrypha>. Hermaeus Mora appearance:< body≡ tentacles/ many eyes/ floating monster/ wretched abyss/ dark purple vortex>. Hermaeus Mora mental:< smart& intelligent& knows all& possessive& manipulative& arrogant& deceiver>. Hermaeus Mora occupation:< god of knowledge/ daedric prince of knowledge>. Hermaeus Mora traits:< arrogant/ prepotent/ manipulative>. Hermaeus Mora speech:< telepathy>. Hermaeus Mora abilities:< knowing all>/< manipulation>/< mind puppeteer>/< controlling people>.]",
                                "hidden": false,
                                "worldInfoId": "224040998"
                        },
                        {
                                "id": "12.2",
                                "keys": "(sheogorath|(daedric|god) prince of madness|mad( |)god)#[t=5l=3f=1S=2]",
                                "entry": "[ Sheogorath description:< name≡ Sheogorath>/ < age≡ old as time>. Sheogorath summ:< Usually referred to as a male, his plane of Oblivion is the Shivering Isles>. Sheogorath appearance:< body≡ 162cm_height/ 60kg_weight/ slim/ thin/ hair< greying& short>/ eyes< cat-like& light brown>/ full greying beard>. Sheogorath mental:< crazy/ insane/ funny/ jokester/ sarcastic/ mad>. Sheogorath moniker:< Daedric Prince of Madness/ God of Madness>. Sheogorath traits:< sarcastic& crazy>. Sheogorath speech:< thick accent>.]",
                                "hidden": false,
                                "worldInfoId": "224040999"
                        },
                        {
                                "id": "12.3",
                                "keys": "(azura(h|))#[t=5l=3f=1S=2]",
                                "entry": "[ Azura description:< name≡ Azura& Azurah& Moonshadow>/< age≡ primeval>. Azura summary:< appears≡ female>/< location≡ Moonshadow>. Azura appearance:< height≡ 159cm>/< weight≡ 40kg& slim& thin>/< hair≡ long& black>/< eyes≡ red>/< skin≡ dark grey>. Azura wearing:< long, light blue dress>. Azura mental:< benevolent& self-love& love her followers>. Azura occupation:< Daedric Prince of Dusk and Dawn, Fate and Prophecy/ God of Dusk and Dawn, Fate and Prophecy>. Azura speech:< sweet>.]",
                                "hidden": false,
                                "worldInfoId": "224041000"
                        },
                        {
                                "id": "12.4",
                                "keys": "(boethia(h|)|boethra)#[t=5l=3f=1S=2]",
                                "entry": "[ Boethiah description:< name≡ Boethiah& Boethia& Boethra>/< age≡ primeval>. Boethiah summary:< appears≡ female>/< location≡ Realm of Boethia>. Boethiah appearance:< any form she wants>. Boethiah mental:< arrogant& prepotent& bossy& pedantic& sarcastic>. Boethiah occupation:< Daedric Prince of Plots/ God of Plots>. Boethiah speech:< commanding>.]",
                                "hidden": false,
                                "worldInfoId": "224041001"
                        },
                        {
                                "id": "12.5",
                                "keys": "clavicus vile#[t=5l=3f=1S=2]",
                                "entry": "[ Clavicus Vile description:< name≡ Clavicus Vile& Vile>/< age≡ primeval>. Clavicus Vile summary:< appears≡ male>/< location≡ The Fields of Regret>/< almost always with his hound Barbas by his side>. Clavicus Vile appearance:< skin≡ yellow>/< long black horns>/< eyes≡ red>. Clavicus Vile mental:< jokester& sarcastic& trickster& manipulative>. Clavicus Vile occupation:< Daedric Prince of Trickery and Bargains/ God of Trickery and Bargains>. Clavicus Vile speech:< mocking tone>.]",
                                "hidden": false,
                                "worldInfoId": "224041002"
                        },
                        {
                                "id": "12.6",
                                "keys": "barbas|hound of clavicus vile#[t=5l=3f=1S=2]",
                                "entry": "[ Barbas description:< name≡ Barbas>/< age≡ primeval>. Barbas summary:< appears≡ male>/< location≡ The Fields of Regret>/< almost always with his owner Clavicus Vile>. Barbas appearance:< skin≡ yellow>/< long black horns>/< eyes≡ red>/< most times appears in the form of a dog>. Barbas mental:< jokester& sarcastic& trickster& manipulative>. Barbas occupation:< Hound of Clavicus Vile>. Barbas speech:< mocking tone>.]",
                                "hidden": false,
                                "worldInfoId": "224041003"
                        },
                        {
                                "id": "12.7",
                                "keys": "meridia|merid-nunda#[t=5l=3f=1S=2]",
                                "entry": "[ Meridia description:< name≡ Meridia& Merid-Nunda>/< age≡ primeval>. Meridia summary:< appears≡ female>/< location≡ The Colored Rooms>/< considers the undead and such aberrations>. Meridia appearance:< height≡ 162cm>/< weight≡ 60kg& slim& thin>/< skin≡ pale>/< hair≡ shoulder_length& dark brown>/< eyes≡ dark brown>. Meridia mental:< arrogant& pedantic& bossy>. Meridia occupation:< Daedric Prince of Light and Life>. Meridia speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224041004"
                        },
                        {
                                "id": "12.8",
                                "keys": "mehrunes|dagon|merrunz#[t=5l=3f=1S=2]",
                                "entry": "[ Mehrunes Dagon description:< name≡ Mehrunes Dagon& Merrunz& Dagon& Mehrunes>/< age≡ primeval>. Mehrunes Dagon summary:< appears≡ male>/< location≡ The Deadlands>. Mehrunes Dagon appearance:< skin≡ red>/< hair≡ shaved>/< eyes≡ red>/< gigantic form with four arms and muscular figure>. Mehrunes Dagon mental:< arrogant& pedantic& violent>. Mehrunes Dagon occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Mehrunes Dagon speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224041005"
                        },
                        {
                                "id": "12.9",
                                "keys": "sanguine#[t=5l=3f=1S=2]",
                                "entry": "[ Sanguine description:< name≡ Sanguine>/< age≡ primeval>. Sanguine summary:< appears≡ male>/< location≡ The Deadlands>. Sanguine appearance:< skin≡ jet_black>/< hair≡ black& long>/< eyes≡ black>/< long black horns& pointed ears>. Sanguine mental:< nice& drunk& funny>. Sanguine occupation:< Daedric Prince of Revelry and Debauchery>. Sanguine speech:< drunk& nice>.]",
                                "hidden": false,
                                "worldInfoId": "224041006"
                        },
                        {
                                "id": "12.10",
                                "keys": "molag bal#[t=5l=3f=1S=2]",
                                "entry": "[ Molag Bal description:< name≡ Molag Bal& Bal>/< age≡ primeval>. Molag Bal summary:< appears≡ male>/< location≡ Coldharbour>/< almost always wielding his mace>. Molag Bal appearance:< skin≡ blue-grey>/< hair≡ shaved>/< eyes≡ neon blue>/< body≡ extremely muscular>/< horns coming out of his ears>. Molag Bal mental:< arrogant& pedantic& violent& sadistic>. Molag Bal occupation:< Daedric Prince of Domination and Enslavement>. Molag Bal speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224041007"
                        },
                        {
                                "id": "12.11",
                                "keys": "mephala|mafala#[t=5l=3f=1S=2]",
                                "entry": "[ Mephala description:< name≡ Mephala& Mafala>/< age≡ primeval>. Mephala summary:< appears≡ female>/< location≡ Spiral Skein>. Mephala appearance:< skin≡ dark grey>/< hair≡ long& black>/< eyes≡ red>/< she may also take the form of a spider>. Mephala mental:< arrogant& pedantic& belittling>. Mephala occupation:< Daedric Prince of Duality, Sex and Murder, Truth and Falsehood>. Mephala speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224041008"
                        },
                        {
                                "id": "12.12",
                                "keys": "Malacath|Malauch|Mauloch|Malak|Orkey|Orkha|Malooc#[t=5l=3f=1S=2]",
                                "entry": "[ Malacath description:< name≡ Malacath& Malauch& Mauloch& Malak& Orkey& Orkha& Malooc>/< age≡ primeval>. Malacath summary:< appears≡ male>/< location≡ Ashpit>. Malacath appearance:< skin≡ grayish-green>/< hair≡ shaved>/< body≡ extremely muscular/ looks like an orc>. Malacath mental:< stubborn& arrogant& violent>. Malacath occupation:< Daedric Prince of the Bloody Oath, Flesh and Bone>. Malacath speech:< commanding>.]",
                                "hidden": false,
                                "worldInfoId": "224041009"
                        },
                        {
                                "id": "12.13",
                                "keys": "hircine#[t=5l=3f=1S=2]",
                                "entry": "[ Hircine description:< name≡ Hircine>/< age≡ primeval>. Hircine summary:< appears≡ male>/< location≡ Hunting Grounds>. Hircine appearance:< skin≡ pale>/< eyes≡ red>/< has the head of a horned elk>. Hircine mental:< values hunters and bravery& >. Hircine occupation:< Daedric Prince of the Hunt>. Hircine speech:< commanding tone>.]",
                                "hidden": false,
                                "worldInfoId": "224041010"
                        },
                        {
                                "id": "12.14",
                                "keys": "na(e|)mi(i|)ra#[t=5l=3f=1S=2]",
                                "entry": "[ Namira description:< name≡ Namira& Naemira& Namiira& The Void>/< age≡ primeval>. Namira summary:< appears≡ female>/< location≡ Scuttling Void>. Namira appearance:< she has the form of a woman, but she's black as void and has no body features>. Namira mental:< arrogant>. Namira occupation:< Daedric Prince of Decay and Ancient Darkness>. Namira speech:< commandin tone>.]",
                                "hidden": false,
                                "worldInfoId": "224041011"
                        },
                        {
                                "id": "12.15",
                                "keys": "nocturnal|noctra#[t=5l=3f=1S=2]",
                                "entry": "[ Nocturnal description:< name≡ Nocturnal& Noctra >/< age≡ primeval>. Nocturnal summary:< appears≡ female>/< location≡ Evergloam>. Nocturnal appearance:< skin≡ pale>/< hair≡ long& black>. Nocturnal wearing:< long dark blue dress with cleavage and a hood>. Nocturnal mental:< arrogant& pedantic>. Nocturnal occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Nocturnal speech:< pretentious& arrogant>.]",
                                "hidden": false,
                                "worldInfoId": "224041012"
                        },
                        {
                                "id": "12.16",
                                "keys": "peryite#[t=5l=3f=1S=2]",
                                "entry": "[ Peryite description:< name≡ Peryite& Taskmaster>/< age≡ primeval>. Peryite summary:< appears≡ male>/< location≡ Realm of Peryite>. Peryite appearance:< usually takes the form of a four-legged dragon>. Peryite mental:< sadistic& pestilent>. Peryite occupation:< Daedric Prince of Pestilence>.]",
                                "hidden": false,
                                "worldInfoId": "224041013"
                        },
                        {
                                "id": "12.17",
                                "keys": "jyggalag#[t=5l=3f=1S=2]",
                                "entry": "[ Jyggalag description:< name≡ Jyggalag>/< age≡ primeval>. Jyggalag summary:< appears≡ male>/< location≡ Jyggalag's Realm>/< is the antithesis of Sheogorath>. Jyggalag appearance:< has the form of a humanoid made of shiny silver crystals>. Jyggalag mental:< arrogant& obsessive& pretentious>. Jyggalag occupation:< Daedric Prince of Order>.]",
                                "hidden": false,
                                "worldInfoId": "224041014"
                        },
                        {
                                "id": "13.1",
                                "keys": "((ancient |)nord|) religion#[t=5l=3f=1S=2]",
                                "entry": "Nord Religion:[TYPE<Nord Religion>:religion;DESC<Nord Religion>:The Ancient Nords worshiped Totems/that became gods with their own names after Ysgramor came back to Skyrim. Each of these Totems became a god of the nord pantheon. These animals were there the Snake/the Hawk/the Dragon/the Fox/the Whale/the Owl/the Bear/the Wolf and the Moth. Just by listening to which animals the nords worshiped/you might be able to guess which gods they represent..]",
                                "hidden": false,
                                "worldInfoId": "224043347"
                        },
                        {
                                "id": "13.2",
                                "keys": "jhunal#[t=5l=3f=1S=2]",
                                "entry": "Jhunal:[TYPE<Jhunal>:god;SPHERE<Jhunal>:knowledge/widsom/mathematics;DESC<Jhunal>:Jhunal is represented by the Owl. He is the Rune God/and represents language/mathematics/knowledge and wisdom. He became Julianos in the Imperial Pantheon/and orders dedicated to him became keepers of the Elder Scrolls..]",
                                "hidden": false,
                                "worldInfoId": "224043348"
                        },
                        {
                                "id": "13.3",
                                "keys": "kyne#[t=5l=3f=1S=2]",
                                "entry": "Kyne:[TYPE<Kyne>:god;SPHERE<Kyne>:storms/mother god/wind;DESC<Kyne>:Kyne is the Hawk/and is out goddess of storms/the mother of all Nords. Kyne created the Nords atop the Snow Throat/and sent us to Altmora to fight against the elves. She is the wife of Shor/the nord Chief of Gods. With her aid/the Nords of old managed to learn to speak as dragons The Tongues and the Greybeards were created with her and because of her/to fight against the tyranny of Alduin. The Thu'um spoken by the dragons is roughly translated to Tamrielic as \"Storm Voice\"/in a reference to her. | Even the dragons acknowledge her/and call her Kaan. When Nords die/Kyne leads us to rest in Sovngarde..]",
                                "hidden": false,
                                "worldInfoId": "224043349"
                        },
                        {
                                "id": "13.4",
                                "keys": "orkey#[t=5l=3f=1S=2]",
                                "entry": "Orkey:[TYPE<Orkey>:god;SPHERE<Orkey>:death;DESC<Orkey>:Orkey is the Snake/and is the God of Death. He is a Testing God. Nords used to live as long as elves in the times of old. Orkey summoned Alduin/and the lifespan of the nords was eaten down to six years old/or \"bound them to the count of winters\" as the saying goes. High King Ysmir Wulfharth/who was turned into a boy/pleaded to Shor for help. Shor fought Alduin in Sovngarde/just as he did before Time had begun/and won the battle. | Most of the curse was thrown onto the nearby Orcs who worshiped Orkey as their patron. It was during this battle that Ysmir learned to use the Thu'um. Unfortunately/this battle cost his life. | In the Imperial Pantheon/Orkey became Arkay/the God of Life..]",
                                "hidden": false,
                                "worldInfoId": "224043350"
                        },
                        {
                                "id": "13.5",
                                "keys": "shor#[t=5l=3f=1S=2]",
                                "entry": "Shor:[TYPE<Shor>:god;SPHERE<Shor>:humankind/chief god;DESC<Shor>:Shor is the Fox/and is the Chief God of the nord pantheon. He's the husband of Kyne/and is the patron of mankind. The old Imperial religion knows him as Shezarr/while Bretons call him Sheor. He might also be known as Doom Drum/Sep/Lorkhan/Lorkh and Lorkhaj by other races. Shor/Stuhn and Tsun led the Nords against the elven armies of Auri-El and Trinimac in Atmora/in a war known as the War of Manifest Metaphors. After the war ended/the Nords settled there. This led to the death of Shor and Tsun. Trinimac tore out Shor's heart and hid it from the Nords/so the nords would never get their Chief God back..]",
                                "hidden": false,
                                "worldInfoId": "224043351"
                        },
                        {
                                "id": "13.6",
                                "keys": "mara#[t=5l=3f=1S=2]",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love;DESC<Mara>:Mara is the Wolf. She's the goddess of love/and is the handmaiden of Kyne. When Alessia took the Nord Pantheon and modified it/she kept Mara as the goddess of love. But for the Empire/she is a matron goddess. The Nords know her as Kyne's handmaiden..]",
                                "hidden": false,
                                "worldInfoId": "224043352"
                        },
                        {
                                "id": "13.7",
                                "keys": "dibella#[t=5l=3f=1S=2]",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/art/music;DESC<Dibella>:Dibella is the Moth/and she represents beauty/art and music. Some claim she was the mistress of Shor/but some believe that to be heresy. She is still worshiped in the Empire/but some places think her cult to be vulgar and inappropriate. That is also heresy to some..]",
                                "hidden": false,
                                "worldInfoId": "224043353"
                        },
                        {
                                "id": "13.8",
                                "keys": "tsun#[t=5l=3f=1S=2]",
                                "entry": "Tsun:[TYPE<Tsun>:god;SPHERE<Tsun>:adversity;DESC<Tsun>:Tsun is the Bear/and is the God of Adversity. He died during the War of Manifest Metaphors while protecting Shor/and his death is remembered as the beginning of the current world. He guards the Whalebone Bridge in Sovngarde/and only lets those worthy to pass the bridge and go into the Hall of Valor. He had great respect for magic/and was a master of the Voice..]",
                                "hidden": false,
                                "worldInfoId": "224043354"
                        },
                        {
                                "id": "13.9",
                                "keys": "Stuhn#[t=5l=3f=1S=2]",
                                "entry": "Stuhn:[TYPE<Stuhn>:god;SPHERE<Stuhn>:random/justice;DESC<Stuhn>:Stuhn is the Whale/and is the God of Ransom and Justice. He was the shield-thane of Shor/and brother of Tsun. He fought in the war against the ancient elves in Altmora/but lost his brother Tsun in the process. In the Imperial Pantheon/he became Stendarr..]",
                                "hidden": false,
                                "worldInfoId": "224043355"
                        },
                        {
                                "id": "14.1",
                                "keys": "(you).*(look|examine|inspect||appearance|stare).*#[t=0f=3l=3]",
                                "entry": "<< As you look, you focus on appearance noticing prominent features and details>>>>",
                                "hidden": false,
                                "worldInfoId": "224043356"
                        },
                        {
                                "id": "14.2",
                                "keys": "(You).*(loot|burgle|raid|despoil|divvy|ransack|pillage|steal).*[t=0l=3f=3]",
                                "entry": "<< Following detailed elaborate description, objects acquired>>>> << Item quality and type usual for circumstance>>>>",
                                "hidden": false,
                                "worldInfoId": "224043357"
                        }
                ],
                "gameCode": {
                        "onInput": "const { commandList } = state;\r\nconst { prefix, prefixSymbol } = state.config;\r\nconst modifier = (text) => {\r\n  let stop = false;\r\n  let modifiedText = nameReplace(text);\r\n  const lowered = modifiedText.toLowerCase();\r\n  delete state.message\r\n\r\n  if (!state.init && info.actionCount < 1) {\r\n    parseAsRoot(modifiedText, 'you');\r\n    grabAllBrackets(modifiedText);\r\n    state.character = {\r\n      name: state.placeholders[0].trim(),\r\n      gender: state.placeholders[1].trim(),\r\n      race: state.placeholders[2].trim(),\r\n      class: state.placeholders[3].trim(),\r\n      age: state.placeholders[4].trim(),\r\n      personality: limitCharacterDetails(state.placeholders[5]),\r\n      eyes: {\r\n        eyeColor: state.placeholders[6].trim()\r\n      },\r\n      hair: {\r\n        hairStyle: state.placeholders[7].trim(),\r\n        hairColor: state.placeholders[8].trim(),\r\n      },\r\n      appearance: {\r\n        height: state.placeholders[9].replace(DIGIT_REGEX, ''),\r\n        weight: state.placeholders[10].replace(DIGIT_REGEX, ''),\r\n        features: limitCharacterDetails(state.placeholders[11])\r\n      }\r\n    };\r\n\r\n    playerSheetWorldInfo = {\r\n      keys: `(${state.character.name}|you)#[t=0l=2f=2S=1]`,\r\n      hidden: true,\r\n      entry: 'you:['\r\n        + `NAME:${state.character.name}; `\r\n        + `SUMM:age<${state.character.age}y>/race<${state.character.race}>/${state.character.appearance.height}cm&${state.character.appearance.weight}kg; `\r\n        + `APPE<you>:${state.character.appearance.features}/eyes<${state.character.eyes.eyeColor}>/hair<${state.character.hair.hairStyle}&${state.character.hair.hairColor}>; `\r\n        + `MIND:${state.character.personality}.`\r\n        + ']'\r\n    };\r\n\r\n    playerInventoryWorldInfo = {\r\n      keys: `(${state.character.name}|you)#[t=1l=2f=2S=1]`,\r\n      hidden: true,\r\n      entry: 'you:['\r\n        + `WORN<you>:nothing; `\r\n        + `INV<you>:nothing.`\r\n        + ']'\r\n    };\r\n\r\n    addWorldEntry(playerInventoryWorldInfo.keys, playerInventoryWorldInfo.entry, false);\r\n    addWorldEntry(playerSheetWorldInfo.keys, playerSheetWorldInfo.entry, false);\r\n\r\n    getInventory();\r\n    parseRace(state.character);\r\n    parseClass(state.character);\r\n\r\n    state.enableInventory = true;\r\n    state.init = true;\r\n    modifiedText = modifiedText.replace(BRACKETS, '').replace(/You are.*\\n\\n/g, '')\r\n      + `You stand and watch the sun set for a little while, the colours shifting through the spectrum until it finally sets, and darkness shrouds the city. The stars shine brightly above you, a million lights glittering like diamond dust on an endless black canvas.\\nYou smile.\\n\\nA guard approaches you and stops by your side, also looking at the sky.\\n\"The Gods did a good job with this world, didn't they?\", he asks.\\nYou smile again. Looking at the stars makes you wonder what else is out there. You turn to the guard and nod at him, smiling.\\nYou then continue into the Bloated Goat. The tavern is the typical sort of place you'd find in any city. A bunch of Nords drinking together, a couple of fights, and a whole lot of smoke from pipes and cigarettes. The scent of sweat and booze is thick in the air as you enter, and you're immediately greeted by the owner, a tall, bearded man with a stained apron and a rowdy attitude. His name is Isekaid.\\nHe looks at you and says `\r\n      + generatePrompt();\r\n    delete state.placeholders;\r\n  }\r\n\r\n  const commandMatcher = modifiedText.match(prefix);\r\n  if (commandMatcher) {\r\n    console.log(`Command detected`);\r\n    console.log(commandMatcher);\r\n\r\n    stop = true;\r\n    modifiedText = '';\r\n\r\n    const commandName = commandMatcher[1].split(' ')[0];\r\n    const args = commandMatcher[1].replace(commandName, '') != null ? commandMatcher[1].replace(commandName, '').trim() : '';\r\n    if (!(commandName in commandList)) {\r\n      state.message = `Invalid command! Type ${prefixSymbol}scenarioHelp for a list of commands and ${prefixSymbol}scenarioHelp <command> for instructions on a specific command.`;\r\n      return { text: modifiedText, stop: stop };\r\n    }\r\n\r\n    const command = commandList[commandName];\r\n    if (command.args && !args.length) {\r\n      let reply = `You didn't provide any arguments!\\n`;\r\n      if (command.usage) {\r\n        reply += `Example: ${prefixSymbol}${command.name} ${command.usage}\\n`;\r\n      }\r\n\r\n      if (command.description) {\r\n        reply += `${command.description}`;\r\n      }\r\n\r\n      state.message = reply;\r\n      return { text: modifiedText, stop: stop };\r\n    }\r\n\r\n    try {\r\n      command.execute(args);\r\n      return { text: modifiedText, stop: stop };\r\n    } catch (error) {\r\n      state.message = `There was an error. Stacktrace:\\n${error}`;\r\n      console.log(`There was an error. Stacktrace:${error}`);\r\n    }\r\n  }\r\n\r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      if (encounterDB[encounter].inputLock) {\r\n        console.log(`Input checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      //for outputMod:\r\n      /*\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(`Output checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      */\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          // for outputs:\r\n          // modifiedText += ` ${curTextNote}`\r\n          modifiedText += `\\n${curTextNote}`\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      // if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n      if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      // modifiedText += ` ${curTextNote}`\r\n                      modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText, stop: stop };\r\n}\r\n\r\nmodifier(text);",
                        "onOutput": "const modifier = (text) => {\r\n  let modifiedText = text;\r\n  const lowered = text.toLowerCase();\r\n\r\n  // BEGIN EWIJSON\r\n  if (state.generate.process) { parseGen(text); return {text: ''}; }\r\n  // END EWIJSON\r\n\r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      /*\r\n      if (encounterDB[encounter].inputLock) {\r\n          console.log(\"Input checking disabled on this encounter.\")\r\n          continue globalLoop\r\n      }\r\n      */\r\n      //for outputMod:\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(\"Output checking disabled on this encounter.\")\r\n        continue globalLoop\r\n      }\r\n\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          // for outputs:\r\n          modifiedText += ` ${curTextNote}`\r\n          // modifiedText += `\\n${curTextNote}`\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n        // if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      modifiedText += ` ${curTextNote}`\r\n                      // modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n",
                        "sharedLibrary": "const BRACKETED = /\\[(.*?)\\]/g;\r\nconst BRACKETS = /\\[|\\]/g;\r\nconst DIGIT_REGEX = /\\D/g;\r\nconst LETTER_REGEX = /[0-9]/g;\r\nconst PUNCTUATION_REMOVE = /[^\\w\\s]/gi;\r\nconst WEAPON_REGEX = new RegExp(/(crossbow|bow)/i);\r\nconst WORN_REGEX = new RegExp(`(?<=WORN<you>:)(.*)(?=;)`);\r\nconst INVENTORY_REGEX = new RegExp(`(?<=INV<you>:)(.*)(?=.)`);\r\n\r\nconst WEAPONS = [\r\n  \"dagger\", \"knife\", \"shuriken\", \"chakhram\", \"sword\", \"claymore\", \"zweihander\", \"rapier\",\r\n  \"epee\", \"kukri\", \"trident\", \"katana\", \"cutlass\", \"scimitar\", \"nodachi\", \"tanto\", \"naginata\",\r\n  \"spear\", \"pike\", \"axe\", \"halberd\", \"mace\", \"flail\", \"hammer\", \"pickaxe\", \"stiletto\", \"bow\"\r\n];\r\n\r\nconst CLOTHING = [\r\n  \"tunic\", \"breeches\", \"loincloth\", \"doublet\", \"cloak\", \"robe\", \"surcoat\", \"tabard\",\r\n  \"trousers\", \"skirt\", \"dress\", \"gown\", \"socks\", \"gloves\", \"top hat\", \"waistcoat\", \"kilt\",\r\n  \"cummerbund\", \"bowtie\", \"necktie\", \"tuxedo\", \"kimono\", \"karate gi\", \"toe socks\", \"sarong\",\r\n  \"scarf\", \"legwarmers\", \"trenchcoat\", \"jacket\", \"shorts\", \"leggings\", \"blouse\", \"sweater\",\r\n  \"cardigan\", \"wizard's hat\", \"feathered hat\", \"tutu\", \"rags\", \"armor\", \"jerkin\", \"shirt\",\r\n  \"clothes\", \"leathers\", \"hood\", \"cuirass\", \"chainmail\", \"gauntlets\", \"vambraces\", \"bracers\", \"tights\"\r\n];\r\n\r\nlet possibleLines = [\r\n  '\"Welcome to the Bloated Goat! If you need anything, talk to me or to my wife Sigrid. We have warm beds and quality mead!\". Isekaid smiles.\\n',\r\n  '\"Need a room? We have warm beds and nice mead!\". Isekaid smiles.\\n',\r\n  `\"Need a room? Talk to me or my wife Sigrid, and we'll set you up!\"\\n`,\r\n];\r\n\r\n/**\r\n * Function that generates the initial prompt for the adventure\r\n */\r\nconst generatePrompt = () => {\r\n  return possibleLines[Math.floor(Math.random() * possibleLines.length)];\r\n}\r\n\r\n/**\r\n * Function that parses the character's race when they're created. This determines the innkeeper's behavior towards the player.\r\n * \r\n * @param {object} character\r\n */\r\nconst parseClass = (character) => {\r\n  let charClass = character.class.toLowerCase();\r\n  switch (charClass) {\r\n    case 'mage':\r\n      addToInventory('Apprentice Mage Robes', 1);\r\n      equipItem('Apprentice Mage Robes');\r\n      possibleLines.push(\r\n        `\"Oh, a mage? That's an impressive craft, friend. Have a mug of mead on the house!\". Isekaid smiles.\\n`,\r\n        `\"Oh, a mage? I'm impressed your types haven't blown up all of the world yet. No magic allowed in my inn!\". Isekaid seems annoyed by the fact that you're a mage.\\n\"`\r\n      );\r\n      break;\r\n    case 'warrior':\r\n      addToInventory('Rusty Iron Sword', 1);\r\n      addToInventory('Rusty Iron Armor', 1);\r\n      equipItem('Rusty Iron Sword');\r\n      equipItem('Rusty Iron Armor');\r\n      possibleLines.push(\r\n        `\"You look strong, friend. Here to join the Companions? Go up to Jorrvaskr. They need folk like you.\". Isekaid smiles.\\n`,\r\n        `\"A fellow warrior? ${character.race.toLowerCase().includes('nord') ? `A true Nord. Here's a mug od mead. And that's on me, friend! May you be worthy of Sovngarde!`\r\n          : `I respect warriors. Here's a mug of mead on the house!`}\". Isekaid smiles.\\n`\r\n      );\r\n      break;\r\n    case 'ranger':\r\n      addToInventory('Wooden Bow', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Wooden Bow');\r\n      equipItem('Leather Tights');\r\n      possibleLines.push(\r\n        `\"Oh, you fancy the bow? Smart techniques. Bet you never run out of good meat to eat, huh?\". Isekaid laughs.\\n`,\r\n        `\"A hunter! Hunters and farmers alike are the ones who provide us with food. May your hunt be fruitful, friend!\". Isekaid smiles.\\n`\r\n      );\r\n      break;\r\n    case 'peasant':\r\n      addToInventory('White Jerkin', 1);\r\n      addToInventory('Brown Breeches', 1);\r\n      equipItem('White Jerkin');\r\n      equipItem('Brown Breeches');\r\n      break;\r\n    case 'thief':\r\n      addToInventory('Rusty Iron Dagger', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Rusty Iron Dagger');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    case 'assassin':\r\n      addToInventory('Rusty Iron Dagger', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Rusty Iron Dagger');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    default:\r\n      state.message = 'You have chosen a class that is not one of the options. You have no items.';\r\n      console.log('No valid class selected.');\r\n      break;\r\n  }\r\n}\r\n\r\n/**\r\n * Function that parses the character's race when they're created. This determines the innkeeper's behavior towards the player.\r\n * \r\n * @param {object} character\r\n */\r\nconst parseRace = (character) => {\r\n\r\n  let race = character.race.toLowerCase();\r\n  if (race.includes(\"orsimer\") || race.includes(\"orc\")) {\r\n    race = 'Orsimer/Orc';\r\n    possibleLines.push(\r\n      `\"Oh, great. An Orc. Don't bash into my stuff, freak.\". You notice disdain in his voice.\\n`,\r\n      `\"An Orc? Damn brutes. If you so much break a cup, I'll have the guards kick you from the city.\". You notice disdain in his voice.\\n`\r\n    );\r\n  } else if (race.includes(\"altmer\") || race.includes(\"high elf\")) {\r\n    race = 'Altmer/High Elf';\r\n    possibleLines.push(\r\n      '\"What do you want here, elf?\"\\n',\r\n      '\"Another elf? Your kind is not welcome here.\"\\n',\r\n      `\"You may stay, but I'm watching you, damn elf. One false movement and I'll have you thrown in the White River!\"\\n`,\r\n      `\"Good, an Altmer. Now I'm happy.\". He speech seems sarcastic.\\n`\r\n    );\r\n  } else if (race.includes(\"dunmer\") || race.includes(\"dark elf\")) {\r\n    race = 'Dunmer/Dark Elf';\r\n    possibleLines.push(\r\n      '\"What do you want here, elf?\"\\n',\r\n      '\"Another elf? Your kind is not welcome here.\"\\n',\r\n      `\"You may stay, but I'm watching you, damn elf. One false movement and I'll have you thrown in the White River!\"\\n`,\r\n      `\"What do you want here? Is your kind trying to take over Skyrim? Now a damn Dunmer is Empress!\". You notice disdain in his voice.\\n`\r\n    );\r\n  } else if (race.includes(\"bosmer\") || race.includes(\"wood elf\")) {\r\n    race = 'Bosmer/Wood Elf';\r\n    possibleLines.push(\r\n      '\"What do you want here, elf?\"\\n',\r\n      '\"Another elf? Your kind is not welcome here.\"\\n',\r\n      `\"You may stay, but I'm watching you, damn elf. One false movement and I'll have you thrown in the White River!\"\\n`,\r\n      `\"Are you... a Bosmer? I've never seen one in real life. You ain't gonna eat me, right?\". He seems frightened.\\n`,\r\n      `\"You're a Bosmer? Is it true that you eat people's flesh?\". He seems frightened.\\n`\r\n    );\r\n  } else if (race == 'nord') {\r\n    possibleLines.push(\r\n      `\"Welcome, friend! How can I help a ${character.gender == 'male' ? 'brother' : 'sister'} Nord?\"\\n`,\r\n      `\"You must be cold, friend. Here, have a mug of mead on the house.\". He hands you a mug of mead.\\n`\r\n    );\r\n  } else if (race == 'breton') {\r\n    possibleLines.push(\r\n      `\"Oh, a midget. How can I help you, friend?\", Isekaid laughs.\\n`,\r\n      `\"A Breton in these parts? Are you lost, friend?\"\\n`\r\n    );\r\n  } else if (race == 'imperial') {\r\n    possibleLines.push(\r\n      `\"An Imperial in these parts? Are you lost, friend?\"\\n`,\r\n      `\"An Imperial? It's a long way from Cyrodiil, friend. Need a bed to rest?\"\\n`\r\n    );\r\n  } else if (race == 'khajiit') {\r\n    possibleLines.push(\r\n      `\"Here, kitty kitty kitty.\". He laughs out loud. \"I'm just joking, friend. What do you need?\"\\n`,\r\n      `\"Oh, a cat on two legs. Don't leave fur in our stuff. We're a hygienic bunch.\"\\n`\r\n    );\r\n  } else if (race == 'argonian') {\r\n    possibleLines.push(\r\n      `\"Good day, lizard. How may I help you?\"\\n`,\r\n      `\"A lizard? Nasty.\". He seems disgusted at you.\\n`\r\n    );\r\n  } else if (race == 'redguard') {\r\n    possibleLines.push(\r\n      `\"Good day, friend. Keeping well? It's a long way from Hammerfell. Enjoy your stay in Whiterun.\"\\n`,\r\n      `\"A Redguard? You're good people. Strong and foolhardy like us Nords, not a bunrch of milk-drinkers like these damned elves.\"\\n`\r\n    );\r\n  } else {\r\n    possibleLines.push(\r\n      `\"Oh, you're a weird one, aren't you?\". He laughs. \"What race are you, ${character.gender == 'male' ? 'lad' : 'lass'}?\"`,\r\n      `\"Oh, you're a weird one. What race are you? Doesn't matter, my family and I don't judge. What do you need, friend?\". Isekaid smiles.\\n`,\r\n      `\"Oh... hello...\". Isekaid looks at you and raises his eyebrow. He's clearly confused because you don't look like any known race. \"Do... you... need something?\"\\n`,\r\n      `\"Oh... you're on of those... people.\". Isekaid looks at you and raises his eyebrow. He's clearly confused because you don't look like any known race. \"Do you... need something?\"\\n`\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Simple frunction to capitalize the first letter of a string\r\n * \r\n * @param {string} string \r\n */\r\nconst capitalize = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Limits player details provided in prompt to only three items\r\n * \r\n * @param {string} text \r\n */\r\nfunction limitCharacterDetails(text) {\r\n  console.log(`START limitCharacterDetails(): parsing character details: ${text}`);\r\n  return text.replace(/, /g, ',').split(',').slice(0, 3).join('/').trim();\r\n}\r\n\r\n/**\r\n * Finds an item in the player's inventory\r\n * @param {string} itemName \r\n */\r\nconst findItemInInventory = (itemName) => {\r\n  console.log(`START findItemInInventory(): Looking for item \"${itemName}\" in player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let itemFound = getInventory().find((item) => {\r\n    return item.name == loweredName;\r\n  });\r\n\r\n  if (typeof itemFound != 'undefined') {\r\n    console.log(`END findItemInInventory(): Item \"${itemName}\" found. Returning it.`);\r\n    return itemFound;\r\n  }\r\n\r\n  console.log(`END findItemInInventory(): Item \"${itemName}\" not found in inventory.`);\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Removes an item from player's inventory\r\n * \r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst removeFromInventory = (itemName, itemQuantity) => {\r\n  console.log(`START removeFromInventory(): Removing ${itemQuantity} instances of \"${itemName}\" from player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (!(item.quantity == itemQuantity) && (item.quantity > 1 && item.quantity >= itemQuantity)) {\r\n    console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n    item.quantity -= itemQuantity;\r\n    return `\\nYou have removed ${itemQuantity} ${loweredName} from your inventory.`;\r\n  }\r\n\r\n  let index = getInventory().indexOf(item);\r\n  getInventory().splice(index, 1);\r\n  updateInventory();\r\n  console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n  return `\\nYou have removed all ${loweredName} from your inventory.`;\r\n}\r\n\r\n/**\r\n * Checks player's inventory and returns what's inside\r\n */\r\nconst checkInventory = () => {\r\n\r\n  console.log(`START checkInventory(): Checking player's inventory.`);\r\n  if (getInventory().length > 0) {\r\n    let items = getInventory().map((item) => item.name).join(', ');\r\n    let itemsWorn = getInventory().filter((item) => item.status == 'worn').map((item) => item.name).join(', ');\r\n    console.log(`END checkInventory(): Player's inventory contains: ${items}.`);\r\n    return `\\nYour inventory contains: ${items}. Items equipped: ${itemsWorn}.`;\r\n  }\r\n\r\n  console.log(`END checkInventory(): Player's inventory is empty.`);\r\n  return `\\nYour inventory is empty.`;\r\n}\r\n\r\n/**\r\n * Returns player's inventory. If the array in undefined, define it\r\n */\r\nconst getInventory = () => {\r\n  console.log(`START getInventory(): verifying player's inventory.`);\r\n  if (typeof state.inventory == 'undefined') {\r\n    console.log(`INSIDE getInventory(): Inventory array is undefined. Declaring it with an empty array.`);\r\n    state.inventory = [];\r\n  }\r\n\r\n  console.log(`END getInventory(): player's inventory exists. Returning its contents.`);\r\n  return state.inventory;\r\n}\r\n\r\n/**\r\n * Adds item to player's inventory\r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst addToInventory = (itemName, itemQuantity) => {\r\n\r\n  console.log(`START addToInventory(): adding ${itemQuantity} instances of \"${itemName}\" to player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (typeof item == 'undefined') {\r\n    console.log(`INSIDE addToInventory(): Player has no other instances of this item in their inventory. Adding these.`);\r\n    item = {\r\n      name: loweredName,\r\n      quantity: itemQuantity,\r\n      status: 'in inventory',\r\n      type: getType(itemName)\r\n    };\r\n\r\n    state.inventory.push(item);\r\n  } else {\r\n    console.log(`INSIDE addToInventory(): Player already has other instances of this item in their inventory. Incrementing the quantity by ${itemQuantity}.`);\r\n    item.quantity = item.quantity + itemQuantity;\r\n  }\r\n\r\n  updateInventory();\r\n  console.log(`END addToInventory(): ${itemQuantity} instances of \"${itemName}\" added to player's inventory.`);\r\n  return `\\nYou have added ${itemQuantity} ${loweredName} to your inventory.`;\r\n}\r\n\r\n/**\r\n * Simple function to make the player equip something.\r\n * \r\n * @param {string} itemName \r\n */\r\nconst equipItem = (itemName) => {\r\n  console.log(`START equipItem(): equipping ${itemName}`);\r\n  const itemNameLowerCase = itemName.toLowerCase();\r\n  let itemToBeEquipped = findItemInInventory(itemNameLowerCase);\r\n  if (typeof itemToBeEquipped != 'undefined') {\r\n    const itemToBeEquippedIndex = state.inventory.findIndex(x => x.name == itemToBeEquipped.name);\r\n    console.log(`INSIDE equipItem(): ${itemName} exists in player's inventory`);\r\n    if (itemToBeEquipped.type != 'weapon' && itemToBeEquipped.type != 'clothing') {\r\n      console.log(`END equipItem(): item is not equippable.`);\r\n      return `\\n${capitalize(itemNameLowerCase)} is not an equippable item.`;\r\n    }\r\n\r\n    let playerWorldInfo = worldEntries.find(x => x.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n    let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n    let oldItem = getInventory().find(oldItem => oldItem.status == 'worn' && oldItem.type == itemToBeEquipped.type);\r\n    if (typeof oldItem != 'undefined') {\r\n      const oldItemIndex = state.inventory.findIndex(x => x.name == oldItem.name);\r\n      console.log(`INSIDE equipItem(): Player has another item of the same type equipped. Unequipping old item.`);\r\n      itemsWorn.replace(oldItem.name.toLowerCase(), '');\r\n      console.log(`INSIDE equipItem(): Removing worn status from ${oldItem.name}.`);\r\n      oldItem.status = 'in inventory';\r\n      state.inventory[oldItemIndex] = oldItem;\r\n    }\r\n\r\n    itemToBeEquipped.status = 'worn';\r\n    state.inventory[itemToBeEquippedIndex] = itemToBeEquipped;\r\n    itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n      .map((k) => {\r\n        console.log(`INSIDE equipItem(): worn item found in inventory -> ${k.name}`);\r\n        return k.name;\r\n      }).join('/');\r\n\r\n    console.log(`INSIDE equipItem(): finished building new WORN string -> ${itemsWorn}`);\r\n    playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n\r\n    console.log(`END equipItem(): ${itemToBeEquipped.name} has been equipped.`);\r\n    return `\\nYou are now ${itemToBeEquipped.type == 'weapon' ? 'wielding' : 'wearing'} ${itemToBeEquipped.name}.`;\r\n  }\r\n\r\n  console.log(`END equipItem(): Player does not have \"${itemNameLowerCase}\" in their inventory.`);\r\n  return `\\nYou do not have \"${itemNameLowerCase}\" in your inventory.`;\r\n}\r\n\r\n/**\r\n * Debugs your inventory and corrects the player's WI in case it fails\r\n */\r\nconst debugInventory = () => {\r\n  console.log(`START debugInventory(): debugging player's inventory`);\r\n  state.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n\r\n  let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n\r\n  itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n    .map((k) => {\r\n      console.log(`INSIDE debugInventory(): Updating player WI with worn items`);\r\n      return k.name;\r\n    }).join('/');\r\n\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE debugInventory(): Updating player WI with inventory items`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n\r\n  console.log(\"INSIDE debugInventory(): Fixed player WI with inventory's items.\");\r\n  console.log(`END debugInventory(): Player's WI saved at index ${state.worldInfoIndex}.`);\r\n}\r\n\r\n/**\r\n * Updates the player's inventory and corrects the WI\r\n */\r\nconst updateInventory = () => {\r\n  console.log(`START updateInventory(): updating player's inventory and WI with current items`);\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE updateInventory(): Sorting inventory items and quantities into player WI`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n  console.log(`END updateInventory(): updated player's inventory and WI with current items`);\r\n}\r\n\r\n/**\r\n * Function to determine item type\r\n * \r\n * @param {string} itemType\r\n */\r\nconst getType = (itemName) => {\r\n  const checker = (input) => {\r\n    return WEAPONS.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'weapon' :\r\n      CLOTHING.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'clothing' : 'misc';\r\n  }\r\n\r\n  return checker(itemName);\r\n}\r\n\r\n/**************************************************************************\r\n***************************************************************************\r\n***************************************************************************\r\n*********************** FUNCTIONS MADE BY OTHER DEVS **********************\r\n***************************************************************************\r\n***************************************************************************\r\n**************************************************************************/\r\n\r\n/**\r\n * Bracket handler by Gnurro.\r\n * \r\n * Removes backets from input text to handle them as placeholders\r\n * \r\n * @param {string} text\r\n */\r\nconst grabAllBrackets = (text) => {\r\n  for (entry of text.match(BRACKETED)) {\r\n    entry = entry.replace(BRACKETS, '');\r\n    if (!state.placeholders) {\r\n      state.placeholders = new Array();\r\n    }\r\n\r\n    state.placeholders.push(entry);\r\n  }\r\n\r\n  console.log(state.placeholders);\r\n}\r\n\r\n/**\r\n * Encounters by Gnurro.\r\n * \r\n * Makes random encounters possible in-game\r\n */\r\nencounterDB = {\r\n  /** Fight encounters */\r\n  wolfAttack: {\r\n    encounterID: 'wolfAttack',\r\n    triggers: [\"(spot|see|find).*wol(f|ves).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 80,\r\n    duration: 5,\r\n    messageString: `Wolf attack!`,\r\n    contextNotes: ['You are being attacked by a wolf!', 'A wolf is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*(wol(f|ves))\"],\r\n    textNotes: [\r\n      `You hear howling, not far from where you are. The howling gets closer, and you start to feel uneasy. You look around, trying to find where it's coming from, and when you turn around. It's a wolf!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packWolfAttack',\r\n        branchChance: 50,\r\n        branchTextNotes: [\r\n          `You hear howling, not far from where you are. The howling gets closer, and now it sounds like more than one. You look around, trying to find where it's coming from, and then you see it. It's a pack of wolves!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  bearAttack: {\r\n    encounterID: 'bearAttack',\r\n    triggers: [\"(spot|see|find).*bear(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Bear attack',\r\n    contextNotes: ['You are being attacked by a bear!', 'A bear is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*bear(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling. It's definetely a bear. You hear it getting close, and you start to feel uneasy. When you look to your right, you see it. It's a bear!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packBearAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [\r\n          `You hear some growling. It's definetely a bear. But it doesn't sound like just one. It's uncommon for bears to attack in groups, but you seem to haven been chosen. It's a sleuth of bears!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  sabreCatAttack: {\r\n    encounterID: 'sabreCatAttack',\r\n    triggers: [\"(spot|see|find).*sabre cat(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Sabre cat attack!',\r\n    contextNotes: ['You are being attacked by a sabre cat!', 'A sabre cat is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*sabre cat(|s)\"],\r\n    textNotes: [\r\n      `You hear some roaring, but you can't tell what animal it is. But it sounds angry... and hungry. You hear it getting close, and you start to feel uneasy. When you turn around... it's a sabre cat!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packSabreCatAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [`You hear some roaring... and it sounds like there's more than one animal tracking. You start to feel uneasy, as you're sure you're about to be attacked. When you turn arround... it's a pack of sabre cats!`],\r\n      }\r\n    ]\r\n  },\r\n  trollAttack: {\r\n    encounterID: 'trollAttack',\r\n    triggers: [\"(spot|see|find).*troll(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 20,\r\n    duration: 5,\r\n    messageString: 'Troll attack!',\r\n    contextNotes: ['You are being attacked by a troll!', 'A troll is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*troll(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling and roaring. You can't tell what kind of creature is making this horrendous sound, but it's close. And getting closer. It's approaches you, and you turn to look at it. It's a troll!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packTrollAttack',\r\n        branchChance: 5,\r\n        branchTextNotes: [\r\n          `You hear some growling and roaring. It sounds like more than one creature, and they're getting closer... when you think of looking around, they show themselves. Two trolls are attacking you!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n\r\n  /** Weather */\r\n  weather: {\r\n    inputLock: true,\r\n    encounterID: 'weather',\r\n    chance: 50,\r\n    memoryAdd: {\r\n      memoryText: 'The weather has changed!',\r\n      memoryLocation: 'top',\r\n      memoryLingerDuration: 5\r\n    },\r\n    cooldown: 10,\r\n    duration: 0,\r\n    branches: [\r\n      {\r\n        branchTriggers: [\r\n          '.*(snow(|ing)|road|out(doors|side)|freezing|cold).*'\r\n        ],\r\n        branchID: 'weatherSnowStorm',\r\n        branchChance: 5,\r\n        branchChained: ['snowStorm']\r\n      },\r\n      {\r\n        branchTriggers: [\r\n          '.*(road|out(doors|side)|night).*'\r\n        ],\r\n        branchID: 'weatherBeautifulNight',\r\n        branchChance: 15,\r\n        branchChained: ['beautifulNight']\r\n      }\r\n    ]\r\n  },\r\n  snowStorm: {\r\n    inputLock: true,\r\n    encounterID: 'snowStorm',\r\n    messageString: 'A snow storm! Be careful! It will last for 10 actions!',\r\n    contextNotes: [\r\n      'A snow storm is here! Protect yourself or you\\'ll freeze to death!'\r\n    ],\r\n    textNotes: [\r\n      `The air starts to feel cold all of a sudden, and a freezing breeze touches you. You start shaking from the cold, and the wind gets faster. You can't see anything, as it's all white. You're caught in a snow storm!`\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50\r\n  },\r\n  beautifulNight: {\r\n    inputLock: true,\r\n    encounterID: 'beautifulNight',\r\n    messageString: 'It\\'s a beautiful night!',\r\n    contextNotes: [\r\n      'It\\'s a beautiful night!'\r\n    ],\r\n    textNotes: [\r\n      `You look up. The night sky is amazing! You can see the stars bright in the distance, and the aurora is shimmering in the sky like an ethereal snake. The night is bright because of the beautiful lights in the sky, and you just can't stop looking at them. It's too beautiful.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50,\r\n  },\r\n\r\n  /** Random events */\r\n  rebellion: {\r\n    outputLock: true,\r\n    encounterID: 'rebellion',\r\n    chance: 1,\r\n    messageString: `A rebellion is happening!`,\r\n    memoryAdd: {\r\n      memoryText: `A rebellion is happening!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    cooldown: 20,\r\n    duration: 0,\r\n    chained: ['whiterunRebellion', 'riftenRebellion',]\r\n  },\r\n  whiterunRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'whiterunRebellion',\r\n    messageString: `The citizens of Whiterun are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Whiterun are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Whiterun. The citizens of the city are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  riftenRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'riftenRebellion',\r\n    messageString: `The citizens of Riften are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Riften are revolting against Jarl Erikur for his negligence towards people's safaty! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Riften. The citizens are revolting against Jarl Erikur for his negligence towards people's safety! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  tavernBrawl: {\r\n    encounterID: 'tavernBrawl',\r\n    triggers: [\r\n      '.*(bar|pub|tavern|inn|brawl(|ing|er(|s))).*'\r\n    ],\r\n    chance: 10,\r\n    cooldown: 10,\r\n    duration: 5,\r\n    branches: [\r\n      {\r\n        branchID: 'brawlWithYouBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithYou']\r\n      },\r\n      {\r\n        branchID: 'brawlWithBrawlersBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithBrawlers']\r\n      }\r\n    ]\r\n  },\r\n  brawlWithYouBranch: {\r\n    encounterID: 'brawlWithYouBranch',\r\n    messageString: 'Someone challanged you to a brawl!',\r\n    contextNotes: [\r\n      `You're brawling with someone!`\r\n    ],\r\n    textNotes: [\r\n      `A random drunk man starts screaming at you for some reason. He's so drunk you can't really understand what he says. He charges at you, and punches you in the face.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  },\r\n  brawlWithBrawlers: {\r\n    encounterID: 'brawlWithBrawlers',\r\n    messageString: 'There are people brawling at the tavern!',\r\n    contextNotes: [\r\n      'People are brawling at the tavern!'\r\n    ],\r\n    textNotes: [\r\n      `Two guys are yelling at each other, they seem angry. One of them gets up from his chair and just punches the other one in the face. The man who got punched screams something unintelligible and charges at the other one. They're in a serious brawl.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  }\r\n}\r\n\r\n// word list stuff like gauntlet script:\r\nencounterWordLists = {\r\n  /* Remove this line (and the one below) to enable the example word lists\r\n  charClass:[\"mage\",\"fighter\",\"valkyrie\"],\r\n  pattern:[\"sprinkles\", \"dots\", \"lines\"],\r\n  color:[\"red\",\"blue\",\"green\",\"yellow\",\"orange\"],\r\n  amount:[\"many\",\"few\",\"all of them\"]\r\n   */ // Remove this line (and the one above) to enable the example word lists\r\n}\r\n\r\n// WI data imports:\r\nfor (WIentry of worldInfo) {\r\n  // encounters from WI:\r\n  // these will be lower priority then the hardcoded ones above!\r\n  if (WIentry.keys.includes('!encounterDef')) {\r\n    encounterDefFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterDef for '${encounterDefFromWI.encounterID}', adding it to the DB!`)\r\n    encounterDB[encounterDefFromWI.encounterID] = encounterDefFromWI\r\n  }\r\n  // word lists from WI:\r\n  if (WIentry.keys.includes('!encounterWordListsFull')) {\r\n    encounterWordListsFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found full WI encounterWordLists entry, adding them to the DB!`)\r\n    for (encounterSingleWordList in encounterWordListsFromWI) {\r\n      encounterWordLists[encounterSingleWordList] = Object.values(encounterWordListsFromWI[encounterSingleWordList])\r\n    }\r\n  }\r\n  if (WIentry.keys.includes('!encounterWordListSingle')) {\r\n    encounterWordListSingleFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterWordList, adding it to the DB!`)\r\n    encounterWordLists[Object.keys(encounterWordListSingleFromWI)[0]] = Object.values(encounterWordListSingleFromWI)\r\n  }\r\n}\r\n\r\n\r\n// encounter functions: (DON'T MESS WITH THESE!)\r\nfunction updateCurrentEncounter(encounterUpcoming) { // sets or clears currentEncounter; if argument empty, clears current encounter\r\n  // limiting encounter recurrence:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.recurrenceLimit) {\r\n      if (!state.limitedEncounters) {\r\n        state.limitedEncounters = []\r\n        state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n      } else {\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == state.currentEncounter.encounterID) {\r\n            console.log(`'${state.currentEncounter.encounterID}' recurrence already has a limit.`)\r\n            if (limiter[1] > 0) {\r\n              limiter[1] = limiter[1] - 1\r\n            }\r\n          } else {\r\n            state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (state.currentEncounter.cooldown) {\r\n      if (!state.cooldownEncounters) {\r\n        state.cooldownEncounters = []\r\n      }\r\n      state.cooldownEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.cooldown])\r\n    }\r\n  }\r\n  if (encounterUpcoming) {\r\n    console.log(`Setting current encounter to '${encounterUpcoming}'.`)\r\n    state.currentEncounter = encounterDB[encounterUpcoming]\r\n    // random initial values handling:\r\n    randomizables = ['duration', 'activationDelay', 'cooldown']\r\n    for (encounterValue of randomizables) {\r\n      if (typeof (state.currentEncounter[encounterValue]) !== 'undefined') {\r\n        if (typeof (state.currentEncounter[encounterValue]) !== 'number' && state.currentEncounter[encounterValue].length == 2) {\r\n          console.log(`${encounterUpcoming} has random ${encounterValue}: ${state.currentEncounter[encounterValue]}`)\r\n          state.currentEncounter[encounterValue] = getRndInteger(state.currentEncounter[encounterValue][0], state.currentEncounter[encounterValue][1])\r\n          console.log(`${encounterUpcoming} random ${encounterValue} set to ${state.currentEncounter[encounterValue]}`)\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    console.log(\"Clearing current encounter.\")\r\n    delete state.currentEncounter\r\n  }\r\n}\r\n\r\nfunction updateCurrentEffects() { // 'activates' currentEncounter; or clears encounter effects if there is no active encounter\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.messageString) {\r\n      state.message = state.currentEncounter.messageString\r\n    }\r\n    if (state.currentEncounter.contextNotes) {\r\n      state.encounterNote = getRndFromList(state.currentEncounter.contextNotes)\r\n    }\r\n    if (state.currentEncounter.displayStatNotes) {\r\n      displayStatsUpdate(getRndFromList(state.currentEncounter.displayStatNotes))\r\n    }\r\n  } else {\r\n    delete state.message\r\n    delete state.encounterNote\r\n  }\r\n}\r\n\r\nfunction fillPlaceholders(placeHolderString) {\r\n  curPlaceholderMatches = placeHolderString.match(/\\{(.*?)\\}/g)\r\n  if (curPlaceholderMatches) {\r\n    console.log(`Matched placeholders: ${curPlaceholderMatches}`)\r\n    for (placeholder of curPlaceholderMatches) {\r\n      console.log(`Current placeholder: ${placeholder}`)\r\n      if (placeholder[1] == '*') {\r\n        console.log(`Current placeholder ${placeholder} contains a *, checking temporary word lists...`)\r\n        placeholder = placeholder.replace(/(\\*|{|})/gi, '')\r\n        if (typeof (tempWordLists) == 'undefined') {\r\n          tempWordLists = {}\r\n        }\r\n        if (!tempWordLists[placeholder] || tempWordLists[placeholder].length == 0) {\r\n          console.log(`${placeholder} temporary wordlist is either non-existant or empty! Getting a new one.`)\r\n          tempWordLists[placeholder] = JSON.parse(JSON.stringify(encounterWordLists[placeholder]))\r\n        }\r\n        console.log(`Current temporary word lists:${tempWordLists}`)\r\n        for (insertTag in tempWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag in temporary list: ${insertTag}`)\r\n            pickedInsert = getRndFromList(tempWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert from temporary list: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{\\\\*${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n            tempWordLists[placeholder].splice(tempWordLists[placeholder].indexOf(pickedInsert), 1)\r\n          }\r\n        }\r\n      } else {\r\n        for (insertTag in encounterWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag: ${insertTag}`)\r\n            pickedInsert = getRndFromList(encounterWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    delete tempWordLists\r\n  }\r\n  return (placeHolderString)\r\n}\r\n\r\n// misc helper functions:\r\n// get random\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n\r\n// list-picker, dynamically handles weighted lists\r\nfunction getRndFromList(list) {\r\n  if (list[0].length == 2) {\r\n    console.log(`${list} looks like a weighted list, doing that!`)\r\n    return (getRndFromListWeighted(list))\r\n  } else {\r\n    console.log(`${list} looks like a plain list, simply picking from it!`)\r\n    return (list[getRndInteger(0, list.length)])\r\n  }\r\n}\r\n\r\n// list picker for lists with weighted items:\r\n// currently works kinda like oldschool D&D encounter lists\r\nfunction getRndFromListWeighted(weightedList) {\r\n  cutOff = getRndInteger(1, 100)\r\n  console.log(`Picking from weighted list, cutoff: ${cutOff}`)\r\n  for (item of weightedList) {\r\n    console.log(`'${item[0]}' threshold: ${item[1]}.`)\r\n    if (cutOff <= item[1]) {\r\n      console.log(`'${item[0]}' cutoff below threshold, picking it!`)\r\n      return item[0]\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\n// displayStats handling:\r\nfunction displayStatsUpdate([inKey, inValue, inColor]) {\r\n  // if key already exists, update; else push new entry; if no value given, removes displayStat entry matching key, if it exists\r\n  if (!state.displayStats) {\r\n    state.displayStats = []\r\n  }\r\n  let displayStatUpdated = false\r\n  for (displayStat of state.displayStats) {\r\n    console.log(`Checking ${displayStat.key} displayStats entry...`)\r\n    let curDisplayStatIndex = state.displayStats.indexOf(displayStat)\r\n    if (displayStat.key == inKey) {\r\n      console.log(`Found ${inKey} displayStats entry: ${state.displayStats[curDisplayStatIndex].key}, ${state.displayStats[curDisplayStatIndex].value}, ${state.displayStats[curDisplayStatIndex].color}, updating!`)\r\n      if (inValue) {\r\n        if (typeof (inValue) == 'string') {\r\n          inValue = fillPlaceholders(inValue)\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        } else {\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        }\r\n      } else {\r\n        console.log(`No value to update displayStat inputted, removing entry.`)\r\n        state.displayStats.splice(curDisplayStatIndex, 1)\r\n        displayStatUpdated = true\r\n        break\r\n      }\r\n      if (inColor) {\r\n        state.displayStats[curDisplayStatIndex].color = fillPlaceholders(inColor)\r\n      }\r\n      displayStatUpdated = true\r\n      break\r\n    }\r\n  }\r\n  if (!displayStatUpdated) {\r\n    console.log(`No ${inKey} displayStats entry found, adding it!`)\r\n    state.displayStats.push({ 'key': inKey, 'value': inValue, 'color': inColor })\r\n  }\r\n}\r\n\r\n/**\r\n * Name synthesizer by Zaltys\r\n * \r\n * Removed unwanted names and replaces them with better ones\r\n * \r\n */\r\n// List the names you wish to replace with random ones in this const.\r\nconst BADNAMES = ['Ackerson', 'Alison', 'Annah', 'Anu', 'Arat', 'Arrorn', 'Ashton', 'Azajaja', 'Big Red',\r\n  'Brot', 'Brother Gray', 'Bucklesberg', 'Captain Dario', 'Captain Eckard', 'Captain Hayes', 'Captain Ian', 'Captain Illam', 'Carn',\r\n  'Castus', 'Cloudpeak', 'Count Gray', 'Count Grey', 'Dark Order', 'David', 'Delantium', 'Delerg', 'Dendrin', 'Derg',\r\n  'Dert', 'Dessel', 'Dorna', 'Dr. Kessel', 'Dr. Kovas', 'Drake', 'Draven', 'Durge', 'Ebony Claw', 'Elam',\r\n  'Eldolith', 'Eliza', 'Eternals', 'Father Féval', 'Father Tomas', 'Felkan', 'Flog', 'Garrick', 'Grolik', \"Gro'tesk\", 'Haygarth',\r\n  'Hessla', 'Holgard', 'Isabella', \"J'Arel\", 'Jacob', 'Jicol', 'Karth', 'Kelso',\r\n  'Klemto', 'Klyton', 'Kralmer', 'Kyros', 'Lenay', 'Lord Rostov', 'Ludmilla', 'Magos Cern', 'Meliodas',\r\n  'Merk', 'Mihrab', 'Mr. Demar', 'Mr. Gaange', 'Mr. Reynolds', 'Nalin', 'Nolazir', 'Null', 'Nuro', 'Oalkwardner',\r\n  'Olive', 'Olivia', 'Oren', 'Quala', 'Ragnor', 'Ral', 'Rask', 'Retlad', 'Roldan', 'Rolomag', 'Sheriff Buckly',\r\n  'Sir Ignate', 'Sodran', 'Svelk', 'Talia', 'Teckleville', 'The Craxil', 'The Ghoul King', 'The Great Lich Lord',\r\n  'The Nightmare Tyrant', 'Theo', 'Trelik', 'Tulan', 'Ulivik', 'Vaughn', 'Velzix', 'Wessel', 'Zalan', 'Zalmora', 'Zuzu'];\r\n\r\n// This shuffles the arrays.\r\nconst shuffle = array =>\r\n  [...Array(array.length)]\r\n    .map((...args) => Math.floor(Math.random() * (args[1] + 1)))\r\n    .reduce((a, rv, i) => ([a[i], a[rv]] = [a[rv], a[i]]) && a, array);\r\n\r\n// Generates and saves arrays; ran only once.\r\nfunction makeArrays() {\r\n  state.mid = [];\r\n  state.end = [];\r\n  list = state.names.map(x => x.substring(1)); // Trim beginning.\r\n  list.forEach(addMid);\r\n}\r\n\r\nfunction addMid(seg) { // Generate array of possible mid-segments.\r\n  while (seg.length > 3) {\r\n    if (state.mid.indexOf(seg.substring(0, 4)) === -1) { state.mid.push(seg.substring(0, 4)) };\r\n    seg = seg.substring(1);\r\n  }\r\n  state.end.push(seg);\r\n}\r\n\r\nfunction synthName() {\r\n  var name_length = state.names[Math.floor(Math.random() * state.names.length)].length - 1;\r\n  var base = state.names[Math.floor(Math.random() * state.names.length)];\r\n  if (base.length < 3) { return Base; }\r\n  else {\r\n    var nomen = base.substring(0, 3);\r\n    while (nomen.length < name_length) {\r\n      mid = shuffle(state.mid).find(x => nomen.substring(nomen.length - 2, nomen.length) == x.substring(0, 2))\r\n      if (mid) { nomen += mid.substring(2); }\r\n      else { name_length = 0; } // No valid segments found, just skip ahead.\r\n    }\r\n    var end = shuffle(state.end).find(x => nomen.substring(nomen.length - 1, nomen.length) == x.substring(0, 1));\r\n    if (end) { nomen += end.substring(1); }\r\n    return nomen;\r\n  }\r\n}\r\n\r\nfunction nameReplace(text) {\r\n  if (!state.names_setup) { setupNamelist(); }\r\n  for (name of BADNAMES) {\r\n    if (text.includes(name)) { text = text.replace(name, synthName()); }\r\n  }\r\n  return text;\r\n}\r\n\r\n// This giant list is the list of names that this generator uses as examples to synthesize new names.\r\n// You can replace it with a more specific list, such as names from certain culture.\r\n// To work well, you need at least 100 names on the list.\r\nfunction setupNamelist() {\r\n  state.names_setup = true;\r\n  state.names = [\"Aby\", \"Aage\", \"Aakesh\", \"Aanon\", \"Aarlen\", \"Aaron\", \"Aart\", \"Aasta\", \"Abarden\", \"Abbathor\", \"Abbathorn\", \"Abraham\", \"Abryn\",\r\n    \"Abu\", \"Acadia\", \"Achard\", \"Acheron\", \"Achim\", \"Achlarg\", \"Ada\", \"Adair\", \"Adalbert\", \"Adanac\", \"Adario\", \"Adeisteen\", \"Adelaide\",\r\n    \"Adelin\", \"Adelot\", \"Adeen\", \"Aden\", \"Adena\", \"Aderyn\", \"Adeva\", \"Adger\", \"Adia\", \"Adin\", \"Adina\", \"Aditu\", \"Adlay\",\r\n    \"Adolf\", \"Adolmus\", \"Adoniram\", \"Adraeran\", \"Adriaan\", \"Adriel\", \"Adrienne\", \"Aedha\", \"Aeiran\", \"Ael\", \"Aelgifu\", \"Aelis\", \"Aerdrie\",\r\n    \"Aeriel\", \"Aerin\", \"Aeris\", \"Aeriss\", \"Aeron\", \"Aeru'in\", \"Aeruin\", \"Aethelweard\", \"Aethon\", \"Aethyr\", \"Afra\", \"Agate\", \"Agatha\",\r\n    \"Agathon\", \"Agathos\", \"Agenor\", \"Agidius\", \"Agnar\", \"Agora\", \"Agrias\", \"Aguidran\", \"Aguilla\", \"Ahanna\", \"Ahmre\", \"Aicha\", \"Aidan\",\r\n    \"Aidaron\", \"Aiden\", \"Aidred\", \"Aidro\", \"Aidwin\", \"Aifreda\", \"Aifrida\", \"Aiker\", \"Aikikia\", \"Aikman\", \"Ailcaer\", \"Aileen\", \"Ailric\",\r\n    \"Ailvar\", \"Aimee\", \"Aimo\", \"Aino\", \"Ainu\", \"Aipheus\", \"Airalyn\", \"Aircristir\", \"Airen\", \"Airis\", \"Airmid\", \"Aisha\", \"Aislinn\",\r\n    \"Aithne\", \"Aitken\", \"Akebia\", \"Aki\", \"Akira\", \"Aksel\", \"Al\", \"Aladan\", \"Aladar\", \"Aladdin\", \"Alain\", \"Alaine\", \"Alais\",\r\n    \"Alan\", \"Alana\", \"Alanson\", \"Alardan\", \"Alaric\", \"Alarion\", \"Alaris\", \"Alaron\", \"Alastair\", \"Alastrina\", \"Alastyr\", \"Albaral\", \"Alberich\",\r\n    \"Alberik\", \"Alberon\", \"Albert\", \"Alberta\", \"Albin\", \"Albion\", \"Albrecht\", \"Albright\", \"Alcan\", \"Alcina\", \"Alda\", \"Aldaren\", \"Aldegond\",\r\n    \"Alden\", \"Aldert\", \"Aldhelm\", \"Aldis\", \"Aldrich\", \"Aldridge\", \"Aldus\", \"Aldwerth\", \"Aldwin\", \"Aldwulf\", \"Alea\", \"Alec\", \"Alena\",\r\n    \"Alers\", \"Ales\", \"Alessandra\", \"Alexander\", \"Alexei\", \"Alf\", \"Alfdis\", \"Alfgeir\", \"Alfhid\", \"Alfons\", \"Alford\", \"Alfred\", \"Algernon\",\r\n    \"Algus\", \"Alhana\", \"Ali\", \"Alia\", \"Alicia\", \"Aliendre\", \"Alienor\", \"Alin\", \"Aline\", \"Alineric\", \"Alisbone\", \"Alison\", \"Alistair\",\r\n    \"Alister\", \"Allaire\", \"Allard\", \"Allart\", \"Allene\", \"Alliston\", \"Almas\", \"Almer\", \"Almira\", \"Almroth\", \"Almu\", \"Aloise\", \"Alor\",\r\n    \"Alora\", \"Alorosaz\", \"Aloysius\", \"Alphons\", \"Alrik\", \"Alsop\", \"Althalus\", \"Altin\", \"Alton\", \"Alured\", \"Alvan\", \"Alvey\", \"Alvina\",\r\n    \"Alvord\", \"Alvred\", \"Alwen\", \"Alwyn\", \"Alya\", \"Alyanna\", \"Alyce\", \"Alyssa\", \"Alyvia\", \"Ama\", \"Amadis\", \"Amain\", \"Amalina\",\r\n    \"Aman\", \"Amanfea\", \"Amar\", \"Amarah\", \"Amber\", \"Ambros\", \"Amelia\", \"Ames\", \"Amethyst\", \"Amilion\", \"Amin\", \"Amina\", \"Amineh\",\r\n    \"Ammdar\", \"Amschel\", \"Amundi\", \"Anandra\", \"Anastasia\", \"Anatol\", \"Anatolia\", \"Ancarion\", \"Ancelyn\", \"Anclaiar\", \"Ancla´ar\", \"Andara'an\", \"Andaraan\",\r\n    \"Andemon\", \"Andni\", \"Andolan\", \"Andre\", \"Andrei\", \"Andrew\", \"Andrus\", \"Aneurin\", \"Anfar\", \"Angelica\", \"Angelina\", \"Angharad\", \"Angheryn\",\r\n    \"Angmar\", \"Angus\", \"Anici\", \"Anigh\", \"Anika\", \"Anita\", \"Anitra\", \"Anlaf\", \"Anna\", \"Annion\", \"Annora\", \"Anouar\", \"Anseim\",\r\n    \"Ansel\", \"Anskar\", \"Anson\", \"Antal\", \"Antalya´ar\", \"Antares\", \"Antheirne\", \"Anton\", \"Antone\", \"Antony\", \"Antrim\", \"Anvar\", \"Anya\",\r\n    \"Anzie\", \"Apad\", \"April\", \"Apthorp\", \"Aquill\", \"Arabel\", \"Arabella\", \"Arabeth\", \"Aradan\", \"Aradh\", \"Aragon\", \"Aragorn\", \"Arakin\",\r\n    \"Aralik\", \"Aranel\", \"Arania\", \"Arathorn\", \"Aravis\", \"Arawn\", \"Arax\", \"Araz\", \"Archibald\", \"Arcarune\", \"Arctor\", \"Ardal\", \"Arden\",\r\n    \"Arder\", \"Ardesh\", \"Ardis\", \"Areagne\", \"Arell\", \"Areta\", \"Aretas\", \"Argethlam\", \"Argoeth\", \"Ari\", \"Aria\", \"Ariad\", \"Arian\",\r\n    \"Arianth\", \"Aribeth\", \"Aric\", \"Arid\", \"Ariel\", \"Aries\", \"Arilyn\", \"Arioch\", \"Arka\", \"Arkadia\", \"Arkron\", \"Arkwright\", \"Arlaith\",\r\n    \"Arlan\", \"Arlana\", \"Arlean\", \"Arleano\", \"Arlo\", \"Arlya\", \"Armand\", \"Armar\", \"Armin\", \"Armitage\", \"Armo\", \"Armod\", \"Arn\",\r\n    \"Arnbella\", \"Arnesen\", \"Arnfinn\", \"Arngrim\", \"Arni\", \"Arnlaug\", \"Arno\", \"Arnold\", \"Arnor\", \"Arnora\", \"Arnot\", \"Arnthora\", \"Arnuif\",\r\n    \"Arnulf\", \"Arnvid\", \"Aron\", \"Arrah\", \"Arronax\", \"Arshavir\", \"Arshel\", \"Artemis\", \"Artemus\", \"Arthol\", \"Arthryn\", \"Arthur\", \"Artnistead\",\r\n    \"Artreyu\", \"Artur\", \"Arun\", \"Arvid\", \"Arvida\", \"Arving\", \"Arvo\", \"Arwen\", \"Arwin\", \"Aryen\", \"Aryion\", \"Aryon\", \"Aryus\",\r\n    \"Arzamark\", \"Asa\", \"Asaf\", \"Aschar\", \"Asfrid\", \"Asgard\", \"Asger\", \"Asgerd\", \"Asgrim\", \"Ash\", \"Ashan\", \"Ashane\", \"Ashburton\",\r\n    \"Ashcar\", \"Ashdown\", \"Ashgaroth\", \"Ashley\", \"Ashlyn\", \"Ashne'e\", \"Ashnici\", \"Ashur\", \"Asiria\", \"Askew\", \"Askold\", \"Aslak\", \"Aslan\",\r\n    \"Asleif\", \"Aslior\", \"Asperon\", \"Asta\", \"Astar\", \"Astinus\", \"Astnid\", \"Astnild\", \"Astoiphe\", \"Astra\", \"Astraea\", \"Astran\", \"Astrid\",\r\n    \"Astrin\", \"Atazra\", \"Athabasca\", \"Athana\", \"Athol\", \"Atiaran\", \"Atli\", \"Atmeh\", \"Atreyu\", \"Atropos\", \"Atticus\", \"Attor\", \"Atul\",\r\n    \"Aturin\", \"Atyre\", \"Aubrey\", \"Aud\", \"Audrey\", \"Audrianna\", \"Audric\", \"August\", \"Augustus\", \"Aule\", \"Aulius\", \"Aun\", \"Aura\",\r\n    \"Aurian\", \"Auril\", \"Aurion\", \"Aurora\", \"Avall\", \"Avarath\", \"Avascaen\", \"Avedar\", \"Aveole\", \"Avery\", \"Avon\", \"Avril\", \"Axel\",\r\n    \"Aya\", \"Ayame\", \"Ayaron\", \"Ayarèn\", \"Ayin\", \"Ayir\", \"Aylin\", \"Aylmer\", \"Ayrie\", \"Azeal\", \"Azeezeh\", \"Azgoth\", \"Azhrarn\",\r\n    \"Aziz\", \"Azmodeus\", \"Azrean\", \"Azreck\", \"Azriaz\", \"Aztira\", \"Azure\", \"Azuth\", \"Baba\", \"Babacar\", \"Babrak\", \"Babrine\", \"Babylos\",\r\n    \"Baduk\", \"Baern\", \"Baeron\", \"Baervan\", \"Bag\", \"Bahamut\", \"Baird\", \"Bal\", \"Balain\", \"Baldor\", \"Baldrick\", \"Balduin\", \"Baldur\",\r\n    \"Baldwin\", \"Balendar\", \"Balfour\", \"Balin\", \"Baliol\", \"Ballard\", \"Balor\", \"Balthasard\", \"Balthazar\", \"Bandobras\", \"Bane\", \"Baraca\", \"Barahir\",\r\n    \"Barak\", \"Baralan\", \"Baravar\", \"Barbara\", \"Bardach\", \"Bardel\", \"Bardi\", \"Bardsley\", \"Bardwell\", \"Barend\", \"Barent\", \"Baring\", \"Barll\",\r\n    \"Barlo\", \"Barlow\", \"Barnabas\", \"Barnas\", \"Barnus\", \"Barr\", \"Barret\", \"Barron\", \"Barry\", \"Barstow\", \"Barthel\", \"Bartle\", \"Bartnel\",\r\n    \"Barton\", \"Baslayan\", \"Bayard\", \"Beams\", \"Beatrix\", \"Bechir\", \"Beck\", \"Bede\", \"Bedegran\", \"Begnus\", \"Beldaran\", \"Beldas\", \"Belerion\",\r\n    \"Belgarath\", \"Belgarion\", \"Belita\", \"Bella\", \"Belle\", \"Bellin\", \"Bellinus\", \"Belloc\", \"Belrene\", \"Beltane\", \"Belva\", \"Ben\", \"Benekander\",\r\n    \"Bengt\", \"Benita\", \"Benoist\", \"Beorn\", \"Beowulf\", \"Bera\", \"Bercan\", \"Berek\", \"Berem\", \"Beren\", \"Bergen\", \"Bergthor\", \"Berim\",\r\n    \"Bern\", \"Berna\", \"Bernhart\", \"Bernt\", \"Berronar\", \"Berryn\", \"Bersi\", \"Berta\", \"Bertil\", \"Bertilde\", \"Bertram\", \"Bertran\", \"Bertrem\",\r\n    \"Beryl\", \"Besma\", \"Bestagar\", \"Beth\", \"Bevil\", \"Beyash\", \"Beylard\", \"Bhimrao\", \"Bhoskar\", \"Bhupindar\", \"Bidwell\", \"Bilbo\", \"Bile\",\r\n    \"Bilmar\", \"Bindon\", \"Bion\", \"Bipin\", \"Birath\", \"Birbeck\", \"Birchard\", \"Birger\", \"Birgit\", \"Birket\", \"Bisuneh\", \"Bjarni\", \"Bjorn\",\r\n    \"Bjornstern\", \"Blackwood\", \"Blade\", \"Blaen\", \"Blair\", \"Blame\", \"Blasco\", \"Blaze\", \"Bledsoe\", \"Blenda\", \"Bleran\", \"Blount\", \"Blunyc\",\r\n    \"Bninna\", \"Bo\", \"Bodil\", \"Bodvar\", \"Bolthorn\", \"Boner\", \"Booker\", \"Boott\", \"Boris\", \"Bork\", \"Borlace\", \"Bormor\", \"Boromir\",\r\n    \"Bors\", \"Botho\", \"Botolf\", \"Bourke\", \"Bowie\", \"Boyd\", \"Bracca\", \"Brace\", \"Bracken\", \"Brand\", \"Brandec\", \"Brangwen\", \"Brann\",\r\n    \"Brannon\", \"Branwell\", \"Branwen\", \"Breanon\", \"Bremen\", \"Brenna\", \"Brenner\", \"Brent\", \"Bress\", \"Bretaine\", \"Breyugar\", \"Brianna\", \"Bridget\",\r\n    \"Brielle\", \"Brigantu\", \"Brighton\", \"Brinn\", \"Brion\", \"Bristan\", \"Brita\", \"Brithael\", \"Brock\", \"Brockden\", \"Brodhead\", \"Brodribb\", \"Brogan\",\r\n    \"Bron\", \"Brona\", \"Bronwyn\", \"Bror\", \"Broun\", \"Bruna\", \"Bruno\", \"Brunt\", \"Brynhild\", \"Brynit\", \"Bryoni\", \"Bunnvor\", \"Bupu\",\r\n    \"Burcan\", \"Buri\", \"Burkard\", \"Buzurg\", \"Byam\", \"Byblos\", \"Byre\", \"Byrna\", \"Byrne\", \"Bysshe\", \"Cabell\", \"Cabillo\", \"Caddor\",\r\n    \"Caden\", \"Cadfael\", \"Cadmar\", \"Cadrach\", \"Cadwallader\", \"Caecyn\", \"Cael\", \"Caelon\", \"Caer\", \"Cai\", \"Cail\", \"Cairn\", \"Caitlin\",\r\n    \"Caladon\", \"Calandria\", \"Calbraith\", \"Calder\", \"Cale\", \"Caleb\", \"Calera\", \"Caliban\", \"Callan\", \"Callcott\", \"Calmic\", \"Calrohir\", \"Calumn\",\r\n    \"Calvert\", \"Camber\", \"Cambree\", \"Camiya\", \"Canina\", \"Caprice\", \"Cardon\", \"Caramon\", \"Carelia\", \"Carey\", \"Caribou\", \"Caris\", \"Carl\",\r\n    \"Carless\", \"Carli\", \"Carlyle\", \"Caryne\", \"Caron\", \"Carsten\", \"Carvell\", \"Caryl\", \"Cashin\", \"Caspian\", \"Cassandra\", \"Cassaway\", \"Cathal\",\r\n    \"Catherine\", \"Cathla'in\", \"Cathlain\", \"Cathlin\", \"Cayl\", \"Caylin\", \"Cecilia\", \"Cecily\", \"Cedric\", \"Cedrick\", \"Cedrim\", \"Celadae\", \"Celebdil\",\r\n    \"Celeborn\", \"Celeren\", \"Celes\", \"Celeste\", \"Celestine\", \"Celia\", \"Celowen\", \"Cemark\", \"Ceomyr\", \"Ceowulf\", \"Cercyon\", \"Ceremon\", \"Cerimon\",\r\n    \"Cerindar\", \"Cermor\", \"Cernd\", \"Ceryx\", \"Cespar\", \"Cevir\", \"Ceylinn\", \"Chaka\", \"Chalfant\", \"Challen\", \"Chamon\", \"Chanti\", \"Chard\",\r\n    \"Charissa\", \"Charlene\", \"Charlotte\", \"Chauncey\", \"Chauntea\", \"Chavir\", \"Chaya\", \"Checotah\", \"Chevonne\", \"Chevran\", \"Chichester\", \"Chimaera\", \"Chiodwig\",\r\n    \"Chiron\", \"Chittenden\", \"Chloe\", \"Christopher\", \"Chronepsis\", \"Chronos\", \"Chrowder\", \"Chuz\", \"Cid\", \"Cilmar\", \"Cinerva\", \"Cirkin\", \"Civar\",\r\n    \"Claed\", \"Clafin\", \"Claire\", \"Clarinda\", \"Claudia\", \"Cleghorn\", \"Clerihew\", \"Clinch\", \"Clipster\", \"Clopton\", \"Cloud\", \"Clover\", \"Clovis\",\r\n    \"Cnud\", \"Cnut\", \"Coalter\", \"Cobryn\", \"Coddry\", \"Coel\", \"Coela\", \"Cohn\", \"Colden\", \"Colgan\", \"Colmen\", \"Colon\", \"Colwyn\",\r\n    \"Coma\", \"Conall\", \"Conan\", \"Congal\", \"Conlan\", \"Conn\", \"Connell\", \"Connidas\", \"Connon\", \"Connop\", \"Conor\", \"Conrad\", \"Constantius\",\r\n    \"Conwy\", \"Conyasal\", \"Coprates\", \"Cora\", \"Coral\", \"Corbin\", \"Corellon\", \"Coren\", \"Corin\", \"Corinne\", \"Corinth\", \"Cormac\", \"Cornelius\",\r\n    \"Corrowr\", \"Corry\", \"Corryn\", \"Corwin\", \"Cotton\", \"Cowan\", \"Cowden\", \"Cowper\", \"Coyan\", \"Craigh\", \"Cray\", \"Crewzel\", \"Creydah\",\r\n    \"Cronyn\", \"Croyble\", \"Crundall\", \"Crynal\", \"Crysania\", \"Cryshandylin\", \"Cryunnos\", \"Cuall\", \"Cuane\", \"Cuddry\", \"Cuhaid\", \"Culiross\", \"Culkin\",\r\n    \"Cullen\", \"Cullyn\", \"Cuthalion\", \"Cuthbert\", \"Cylarus\", \"Cylie\", \"Cylmar\", \"Cymbeline\", \"Cyndor\", \"Cynoril\", \"Cyria\", \"Cyriel\", \"Cyrilla\",\r\n    \"Cyrillus\", \"Cyrus\", \"Cyryl\", \"Cythnar\", \"Cyton\", \"Daburn\", \"Daen\", \"Dagar\", \"Dagda\", \"Dagmar\", \"Dagni\", \"Dagny\", \"Dagwyn\",\r\n    \"Dahil\", \"Daikkah\", \"Daila\", \"Daila'in\", \"Daimhin\", \"Daimon\", \"Daisy\", \"Dakamon\", \"Dakoda\", \"Dalamar\", \"Dall\", \"Dalla\", \"Dallandra\",\r\n    \"Dalziel\", \"Damar\", \"Damien\", \"Damon\", \"Dana\", \"Danforth\", \"Daniel\", \"Dannun\", \"Dannyn\", \"Danu\", \"Danuvius\", \"Daood\", \"Daphin\",\r\n    \"Dara\", \"Daragor\", \"Darandriel\", \"Darell\", \"Darien\", \"Dario\", \"Darius\", \"Darkash\", \"Darkboon\", \"Darkspur\", \"Darlis\", \"Daron\", \"Darrell\",\r\n    \"Darrin\", \"Darvin\", \"Daryan\", \"Dashiell\", \"Dashwood\", \"Dasyani\", \"Dathan\", \"Dathanja\", \"Daugas\", \"David\", \"Davnet\", \"Davros\", \"Dawn\",\r\n    \"Dayyan\", \"Dekteon\", \"Delevan\", \"Delita\", \"Dell\", \"Dellin\", \"Delmund\", \"Demarest\", \"Demi\", \"Deminar\", \"Demtris\", \"Denethor\", \"Denhain\",\r\n    \"Denor\", \"Denton\", \"Denzil\", \"Deogol\", \"Derfel\", \"Derian\", \"Dermaria\", \"Derran\", \"Derroll\", \"Derval\", \"Dervilia\", \"Desmona\", \"Devabriel\",\r\n    \"Devaron\", \"Deveron\", \"Devra\", \"Dexter\", \"Dhakos\", \"Dhan\", \"Dharijor\", \"Dholemtrix\", \"Dhur\", \"Diadra\", \"Diagur\", \"Dian\", \"Diarmud\",\r\n    \"Diderik\", \"Diehi\", \"Dighton\", \"Dillon\", \"Dimura\", \"Dinham\", \"Dinivan\", \"Dino\", \"Dionetta\", \"Diony\", \"Dirk\", \"Dirrach\", \"Divos\",\r\n    \"Djamal\", \"Dmitri\", \"Doak\", \"Dolman\", \"Dolyan\", \"Domnu\", \"Donagh\", \"Donal\", \"Donblas\", \"Dongal\", \"Doniol\", \"Donivesh\", \"Donovan\",\r\n    \"Doral\", \"Dorea\", \"Dorian\", \"Dorin\", \"Dorn\", \"Dornhnall\", \"Dorr\", \"Dorsan\", \"Dorvai\", \"Dotta\", \"Doud\", \"Dougal\", \"Doust\",\r\n    \"Draco\", \"Dragan\", \"Dragus\", \"Dragutin\", \"Draka\", \"Drake\", \"Drako\", \"Dran\", \"Draoi\", \"Draven\", \"Drax\", \"Drayko\", \"Dred\",\r\n    \"Dreed\", \"Drexel\", \"Drezael\", \"Drezaem\", \"Drin\", \"Drinda\", \"Drion\", \"Drusilla\", \"Drynn\", \"Dréagg\", \"Duain\", \"Duald\", \"Duana\",\r\n    \"Duer\", \"Dugal\", \"Dugald\", \"Dugdale\", \"Dulasiri\", \"Dumathoin\", \"Dunbar\", \"Dundas\", \"Dunglas\", \"Dunnabar\", \"Dunstan\", \"Dunwody\", \"Duny\",\r\n    \"Dunya\", \"Dur-Shuk\", \"Duran\", \"Durek\", \"Durin\", \"Durnik\", \"Durward\", \"Dwarkanath\", \"Dweomer\", \"Dwyer\", \"Dyce\", \"Dyer\", \"Dygardo\",\r\n    \"Dyke\", \"Dylan\", \"Dymphna\", \"Dynar\", \"Dyneley\", \"Dynera\", \"Dynie\", \"Dytan\", \"Dyvim\", \"E'thane\", \"Eadweard\", \"Eager\", \"Eamon\",\r\n    \"Eanger\", \"Eardley\", \"Earle\", \"Earnest\", \"Eastman\", \"Ebany\", \"Ebba\", \"Eberhard\", \"Ebony\", \"Echael\", \"Eckert\", \"Eckhard\", \"Ector\",\r\n    \"Edcyl\", \"Edda\", \"Edeva\", \"Edgar\", \"Edina\", \"Edla\", \"Edmond\", \"Edmondstone\", \"Edric\", \"Edrie\", \"Edson\", \"Eduard\", \"Edwin\",\r\n    \"Edwina\", \"Edwyn\", \"Eevin\", \"Efiath\", \"Efrem\", \"Egan\", \"Egbert\", \"Egerton\", \"Egil\", \"Egon\", \"Egron\", \"Ehlreth\", \"Ehrman\",\r\n    \"Eilhard\", \"Eilif\", \"Eilinud\", \"Einar\", \"Eindrini\", \"Eirech\", \"Eirik\", \"Eiron\", \"Eithne\", \"Eivind\", \"Ekaterina\", \"Elaine\", \"Elath\",\r\n    \"Elbert\", \"Eldath\", \"Eldavon\", \"Eldgrim\", \"Eldid\", \"Eldin\", \"Eldon\", \"Eldred\", \"Eldric\", \"Eldrin\", \"Eldron\", \"Eldìvèn\", \"Eleanor\",\r\n    \"Eleazar\", \"Electa\", \"Elelil\", \"Elena\", \"Elendil\", \"Eleno'in\", \"Elentari\", \"Elerion\", \"Elessar\", \"Elfnida\", \"Elfnide\", \"Elfnieda\", \"Elford\",\r\n    \"Elhanan\", \"Eliakini\", \"Eliard\", \"Elinor\", \"Elion\", \"Eliseth\", \"Elispeth\", \"Elisseer\", \"Elistan\", \"Eliwood\", \"Elizabeth\", \"Ella\", \"Ellanath\",\r\n    \"Ellen\", \"Ellin\", \"Ellingwood\", \"Ellydryr\", \"Ellynor\", \"Elmeric\", \"Elmira\", \"Eloisa\", \"Elora\", \"Elowen\", \"Elrad\", \"Elric\", \"Elrik\",\r\n    \"Elrodin\", \"Elron\", \"Elrond\", \"Elsa\", \"Elsbeth\", \"Elsdon\", \"Elspeth\", \"Elswyth\", \"Elton\", \"Elu\", \"Elva\", \"Elvalind\", \"Elvarion\",\r\n    \"Elvin\", \"Elvina\", \"Elvira\", \"Elvrit\", \"Elvérion\", \"Elwell\", \"Elwin\", \"Elwyn\", \"Elysia\", \"Emberyl\", \"Emerynn\", \"Emirah\", \"Emma\",\r\n    \"Emna\", \"Emory\", \"Endemian\", \"Endicott\", \"Endoray\", \"Endrede\", \"Endsor\", \"Engeihard\", \"Enigma\", \"Enn\", \"Ennorath\", \"Envi\", \"Enzoray\",\r\n    \"Eolair\", \"Eomer\", \"Eosin\", \"Eowyn\", \"Ephyre\", \"Erana\", \"Erard\", \"Ercan\", \"Erdmann\", \"Erebor\", \"Ergon\", \"Erian\", \"Eric\",\r\n    \"Erich\", \"Erie\", \"Erik\", \"Erika\", \"Erilyth\", \"Erland\", \"Erlend\", \"Erling\", \"Ernald\", \"Ernan\", \"Ernata\", \"Errine\", \"Ervin\",\r\n    \"Eryka\", \"Eryn\", \"Esghar\", \"Eslin\", \"Esmeralda\", \"Esmond\", \"Esnar\", \"Essa\", \"Esselin\", \"Estheria\", \"Estrella\", \"Etelka\", \"Ethelbearn\",\r\n    \"Ethelbert\", \"Ethelburga\", \"Ethelred\", \"Ethelreda\", \"Eudo\", \"Eugene\", \"Eulala\", \"Evadne\", \"Evaine\", \"Evald\", \"Evan\", \"Evarts\", \"Evelina\",\r\n    \"Evelyn\", \"Everard\", \"Evert\", \"Evind\", \"Evo\", \"Evolyn\", \"Evska\", \"Ewald\", \"Ewen\", \"Ewugan\", \"Eystein\", \"Eyulf\", \"Eyvind\",\r\n    \"Ezail\", \"Ezellohar\", \"Ezirith\", \"Ezme\", \"Ezrabar\", \"Ezri\", \"Faber\", \"Fabian\", \"Fael\", \"Faelyn\", \"Fahs\", \"Fairfax\", \"Fairtnan\",\r\n    \"Falathar\", \"Falcon\", \"Falgar\", \"Fali\", \"Falias\", \"Falkiner\", \"Falmalinnar\", \"Falyrias\", \"Fanchon\", \"Fangorn\", \"Fanshaw\", \"Faraday\", \"Farah\",\r\n    \"Farale\", \"Faramir\", \"Faran\", \"Farathar\", \"Farid\", \"Farith\", \"Farli\", \"Farnham\", \"Farouk\", \"Farquhar\", \"Farrin\", \"Farwehl\", \"Fatima\",\r\n    \"Fausto\", \"Fawn\", \"Faysal\", \"Fea\", \"Feargus\", \"Fedor\", \"Feike\", \"Felam\", \"Felladin\", \"Fellador\", \"Fellathor\", \"Fellow\", \"Fenella\",\r\n    \"Fenton\", \"Fenwick\", \"Fera\", \"Ferantay\", \"Ferazhin\", \"Ferdinand\", \"Fergus\", \"Fernand\", \"Feron\", \"Feustmann\", \"Fhinders\", \"Fhorgeir\", \"Fiana\",\r\n    \"Fiathna\", \"Fielding\", \"Fikir\", \"Filippe\", \"Finarfin\", \"Finbar\", \"Findegil\", \"Findley\", \"Finegan\", \"Fingal\", \"Fingalla\", \"Fingil\", \"Finias\",\r\n    \"Finn\", \"Finnbogi\", \"Finos\", \"Fiona\", \"Fiorag\", \"Fiori\", \"Firca\", \"Firin\", \"Firon\", \"Firozhan\", \"Fistandantilus\", \"Fistar\", \"Fistor\",\r\n    \"Fitzedward\", \"Fitzroy\", \"Fizban\", \"Fjolnir\", \"Flandrena\", \"Flare\", \"Flavius\", \"Flint\", \"Floki\", \"Florimund\", \"Flosi\", \"Flygare\", \"Flynn\",\r\n    \"Fnida\", \"Fomorii\", \"Forbus\", \"Forester\", \"Fornost\", \"Foronte\", \"Fothergill\", \"Francisco\", \"Frayja\", \"Freda\", \"Frederic\", \"Frederica\", \"Frederick\",\r\n    \"Fredrick\", \"Fredrik\", \"Freeborn\", \"Freeman\", \"Frey\", \"Freya\", \"Freydis\", \"Fridgeir\", \"Frodo\", \"Fryniwyd\", \"Fuad\", \"Fumorak\", \"Furnifold\",\r\n    \"Fury\", \"Fyodor\", \"Fyodr\", \"Fyza\", \"Gaarn\", \"Gabniela\", \"Gabriel\", \"Gadsby\", \"Gaea\", \"Gael\", \"Gaelinar\", \"Gaena\", \"Gaerdal\",\r\n    \"Gaillard\", \"Gairdner\", \"Galach\", \"Galadren\", \"Galan\", \"Galanna\", \"Galapas\", \"Galaphon\", \"Galar\", \"Galbard\", \"Galderon\", \"Galdor\", \"Gale\",\r\n    \"Galeia\", \"Galen\", \"Galfrey\", \"Galion\", \"Galrandar\", \"Galrion\", \"Gama\", \"Gandalf\", \"Ganduil\", \"Ganith\", \"Gannon\", \"Ganvan\", \"Gardi\",\r\n    \"Garet\", \"Gareth\", \"Garion\", \"Garith\", \"Garl\", \"Garland\", \"Garlenon\", \"Garn\", \"Garon\", \"Garrick\", \"Garrott\", \"Garth\", \"Gartnas\",\r\n    \"Garvin\", \"Garwood\", \"Gaston\", \"Gavendra\", \"Gavin\", \"Gavina\", \"Gawain\", \"Gealsgiath\", \"Gebhard\", \"Geir\", \"Geirmund\", \"Geirstein\", \"Gelonna\",\r\n    \"Genevieve\", \"Geoffrey\", \"Georgii\", \"Gerald\", \"Gerard\", \"Gerd\", \"Gerhard\", \"Gerhart\", \"Gerloc\", \"Gerrard\", \"Gerreint\", \"Gerrish\", \"Gertrude\",\r\n    \"Gervaise\", \"Gesin\", \"Gest\", \"Ghirra\", \"Ghislain\", \"Gholson\", \"Gia\", \"Gibbon\", \"Gilberta\", \"Gilda\", \"Gilden\", \"Gildersleeve\", \"Giles\",\r\n    \"Gilfanon\", \"Gilian\", \"Gilir\", \"Gilli\", \"Gillion\", \"Gillyn\", \"Gilm\", \"Gilraen\", \"Gilthanas\", \"Gimli\", \"Gird\", \"Girin\", \"Gisgin\",\r\n    \"Gizur\", \"Gladstone\", \"Glassford\", \"Glebur\", \"Gleda\", \"Gleocyn\", \"Gleridower\", \"Glida\", \"Glogan\", \"Gloisur\", \"Glorfindel\", \"Glugwyn\", \"Glum\",\r\n    \"Glyn\", \"Glynn\", \"Gnazia\", \"Godfred\", \"Godfrey\", \"Godwin\", \"Goibhniu\", \"Golding\", \"Goldwin\", \"Gollum\", \"Gongalo\", \"Goodhue\", \"Gorbash\",\r\n    \"Gordalius\", \"Gorias\", \"Gorion\", \"Gorm\", \"Gotthard\", \"Govier\", \"Govind\", \"Gowen\", \"Grace\", \"Graham\", \"Graine\", \"Gralon\", \"Grani\",\r\n    \"Grania\", \"Gravin\", \"Greegan\", \"Greenleaf\", \"Gregor\", \"Gregory\", \"Grendahl\", \"Greyfell\", \"Grian\", \"Gridley\", \"Griffid\", \"Griffin\", \"Griffith\",\r\n    \"Griggs\", \"Grim\", \"Grima\", \"Grimhilda\", \"Grimnir\", \"Grindan\", \"Griniing\", \"Grisha\", \"Griswold\", \"Groa\", \"Grover\", \"Grunak\", \"Grunnhild\",\r\n    \"Gruumsh\", \"Gualat\", \"Gudmund\", \"Gudmundur\", \"Gudrid\", \"Gudris\", \"Gudrun\", \"Guibert\", \"Guida\", \"Guido\", \"Gulian\", \"Gunila\", \"Gunnar\",\r\n    \"Gunning\", \"Gunther\", \"Gurnarok\", \"Gurney\", \"Gustav\", \"Guthorm\", \"Guthrie\", \"Guthum\", \"Gutzon\", \"Guy\", \"Gwacyn\", \"Gwaihir\", \"Gweddyn\",\r\n    \"Gwen\", \"Gwenca\", \"Gwenda\", \"Gwendolyn\", \"Gwenevere\", \"Gweniver\", \"Gwildor\", \"Gwoc\", \"Gwomyr\", \"Gwydion\", \"Gwyn\", \"Gwyneth\", \"Gwynfryd\",\r\n    \"Gwyran\", \"Gwythinn\", \"Gyda\", \"Gylian\", \"Gymir\", \"Haakon\", \"Habib\", \"Hablot\", \"Hack\", \"Haddon\", \"Hadrian\", \"Haestan\", \"Hafez\",\r\n    \"Hafgrim\", \"Hagar\", \"Haigh\", \"Hakatri\", \"Haki\", \"Hakon\", \"Halbert\", \"Halcyon\", \"Haldane\", \"Haldor\", \"Hale\", \"Halfdan\", \"Haliina\",\r\n    \"Hall\", \"Halldis\", \"Halldor\", \"Halley\", \"Hallfred\", \"Hallfrid\", \"Hallgerd\", \"Hallkel\", \"Hallock\", \"Halloweii\", \"Hallveig\", \"Halvord\", \"Hamlin\",\r\n    \"Hamnet\", \"Hanford\", \"Hani\", \"Haninah\", \"Hannibal\", \"Hanoran\", \"Hansine\", \"Hapweth\", \"Harald\", \"Harbaugh\", \"Harcourt\", \"Hardernan\", \"Hardon\",\r\n    \"Hardwicke\", \"Harek\", \"Harkness\", \"Harlan\", \"Harlo\", \"Harold\", \"Haroon\", \"Harpo\", \"Harren\", \"Harthan\", \"Harthran\", \"Hartpole\", \"Hartwig\",\r\n    \"Harwood\", \"Hasket\", \"Hassan\", \"Hastein\", \"Hatcher\", \"Hattrick\", \"Hauk\", \"Havard\", \"Havelock\", \"Hayvan\", \"Hazard\", \"Hazel\", \"Haziran\",\r\n    \"Hazrond\", \"Healdon\", \"Heardred\", \"Heaslip\", \"Heather\", \"Hector\", \"Hedda\", \"Hedin\", \"Hedwig\", \"Heimer\", \"Helena\", \"Helga\", \"Helgi\",\r\n    \"Helir\", \"Helix\", \"Helm\", \"Helma\", \"Helmi\", \"Heman\", \"Hemming\", \"Hendrik\", \"Hengist\", \"Henna\", \"Henrick\", \"Henry\", \"Geramon\",\r\n    \"Herdis\", \"Herekin\", \"Hereward\", \"Herijar\", \"Hermione\", \"Heron\", \"Hertha\", \"Heryom\", \"Herzog\", \"Heward\", \"Hhaba'id\", \"Hhabezur\", \"Hickling\",\r\n    \"Hidohebhi\", \"Hifryn\", \"Hild\", \"Hilda\", \"Hildebrand\", \"Hildegarde\", \"Hildric\", \"Himli\", \"Hisar\", \"Hislop\", \"Hjalmar\", \"Hjalti\", \"Hjeldin\",\r\n    \"Hjort\", \"Hjorth\", \"Hlif\", \"Hoadley\", \"Hoar\", \"Hobart\", \"Hodgdon\", \"Hogg\", \"Hogni\", \"Holbrook\", \"Holger\", \"Holgi\", \"Hollister\",\r\n    \"Holly\", \"Homli\", \"Hookham\", \"Horan\", \"Horatio\", \"Hord\", \"Horik\", \"Hormstein\", \"Horsa\", \"Hortensia\", \"Horton\", \"Hoskuld\", \"Hosni\",\r\n    \"Hossein\", \"Howarth\", \"Howland\", \"Hrafn\", \"Hrapp\", \"Hrefna\", \"Hrethel\", \"Hring\", \"Hroald\", \"Hrodyn\", \"Hrolf\", \"Hrothgar\", \"Hrugan\",\r\n    \"Hruggek\", \"Hruse\", \"Hrut\", \"Huffatn\", \"Hulbeart\", \"Hulda\", \"Hultz\", \"Humbert\", \"Hunter\", \"Hurd\", \"Hurgal\", \"Hurvin\", \"Hussain\",\r\n    \"Hustana\", \"Hyarantar\", \"Hyarante\", \"Hyder\", \"Hyfryn\", \"Hygelac\", \"Hylissa\", \"Hynman\", \"Hyrak\", \"Ian\", \"Iana\", \"Ibitz\", \"Ibrahim\",\r\n    \"Ibrandul\", \"Ica\", \"Icarus\", \"Icava\", \"Ick\", \"Ida\", \"Idarolan\", \"Iden\", \"Idris\", \"Iduna\", \"Iduné\", \"Ies'lorn\", \"Igjaru\",\r\n    \"Igor\", \"Ikarin\", \"Ilena\", \"Ilermath\", \"Ilia\", \"Iliriya\", \"Illentik\", \"Illuin\", \"Illyana\", \"Ilmare\", \"Ilniora\", \"Ilthoss\", \"Iluvatar\",\r\n    \"Ilya\", \"Ilyesha\", \"Imajin\", \"Imnar\", \"Imoen\", \"Imphela\", \"Imrador\", \"Imrahan\", \"Imrahim\", \"Imril\", \"Imryr\", \"Inahwen\", \"Indech\",\r\n    \"Indigo\", \"Indira\", \"Indreju\", \"Indria\", \"Ingald\", \"Ingeborg\", \"Ingen\", \"Ingi\", \"Ingirid\", \"Ingolf\", \"Ingram\", \"Ingrid\", \"Ingunn\",\r\n    \"Inifael\", \"Inigo\", \"Inisfa'il\", \"Iosaz\", \"Iosef\", \"Irgash\", \"Irial\", \"Irian\", \"Iris\", \"Irma\", \"Irphilin\", \"Irsai\", \"Irvin\",\r\n    \"Irwick\", \"Isael\", \"Isak\", \"Isambard\", \"Isbeorn\", \"Iscal\", \"Iselore\", \"Isengard\", \"Isengrim\", \"Iserion\", \"Isgrimnur\", \"Ishmael\", \"Isidora\",\r\n    \"Isiki\", \"Isildur\", \"Isilith\", \"Isleif\", \"Ismail\", \"Isolde\", \"Isorn\", \"Issak\", \"Ithaca\", \"Iuz\", \"Ivan\", \"Ivar\", \"Ivor\",\r\n    \"Ivy\", \"Iwanda\", \"Iyu'nigato\", \"Izard\", \"Izebel\", \"Izvire\", \"Jace\", \"Jacinth\", \"Jacoby\", \"Jacor\", \"Jade\", \"Jaden\", \"Jadzia\",\r\n    \"Jael\", \"Jaffar\", \"Jagadis\", \"Jaheira\", \"Jahrec\", \"Jahverbhai\", \"Jalasil\", \"Jalavier\", \"Jaligal\", \"Jamila\", \"Janda'nan\", \"Jandanan\", \"Janix\",\r\n    \"Janna\", \"Janus\", \"Janvel\", \"Jarak\", \"Jarazal\", \"Jared\", \"Jarek\", \"Jarnagua\", \"Jarriel\", \"Jarvin\", \"Jasara\", \"Jasek\", \"Jaseve\",\r\n    \"Jasha\", \"Jasmine\", \"Jason\", \"Javair\", \"Javon\", \"Jawaharial\", \"Jayce\", \"Jayden\", \"Jaylidan\", \"Jayna\", \"Jaysen\", \"Jazhara\", \"Jazrel\",\r\n    \"Jedd\", \"Jeffen\", \"Jehryn\", \"Jelyn\", \"Jenantar\", \"Jenkin\", \"Jennifer\", \"Jens\", \"Jensine\", \"Jephson\", \"Jerec\", \"Jeryth\", \"Jesiper\",\r\n    \"Jespar\", \"Jesslyn\", \"Jestyn\", \"Jethis\", \"Jevan\", \"Jevist\", \"Jezryanadar\", \"Jhael\", \"Jhaelen\", \"Jhany\", \"Jhardamòr\", \"Jharkor\", \"Jhary\",\r\n    \"Jihad\", \"Jillian\", \"Jingizu\", \"Jintah\", \"Jiriki\", \"Jirnost\", \"Jocelyn\", \"Jochan\", \"Johannes\", \"John\", \"Jolan\", \"Jomano\", \"Jonaya\",\r\n    \"Joran\", \"Jordan\", \"Joriel\", \"Jornadesh\", \"Jorunn\", \"Joscelyn\", \"Joseph\", \"Josephine\", \"Josette\", \"Joshua\", \"Jotham\", \"Jovena\", \"Jubini\",\r\n    \"Jullana\", \"Junius\", \"Juno\", \"Juntalin\", \"Jura\", \"Jurim\", \"Jusif\", \"Juss\", \"Jyresh\", \"K'aarna\", \"Kaarna\", \"Kael\", \"Kaelin\",\r\n    \"Kaffa\", \"Kai\", \"Kaia\", \"Kailyn\", \"Kaimana\", \"Kaitlinn\", \"Kaja\", \"Kalan\", \"Kalantir\", \"Kalar\", \"Kaldar\", \"Kaleen\", \"Kalen\",\r\n    \"Kalf\", \"Kalia\", \"Kalina\", \"Kalvan\", \"Kalvaro\", \"Kalyra\", \"Kalysha\", \"Kamril\", \"Kamshir\", \"Kanoa\", \"Kaori\", \"Kaprin\", \"Kara\",\r\n    \"Karali\", \"Karel\", \"Karelia\", \"Kari\", \"Karim\", \"Karinca\", \"Karine\", \"Karis\", \"Karitsa\", \"Karker\", \"Karl\", \"Karlsefni\", \"Karran\",\r\n    \"Karya\", \"Kaschak\", \"Kasia\", \"Kaspar\", \"Kasreyn\", \"Kathena\", \"Kathran\", \"Katishimo\", \"Katla\", \"Katnina\", \"Katrin\", \"Katrina\", \"Kavalam\",\r\n    \"Kavalnir\", \"Kaylianna\", \"Kaylin\", \"Kazairl\", \"Kazalim\", \"Kazir\", \"Keavy\", \"Keelan\", \"Kegan\", \"Keiko\", \"Keldorn\", \"Kelin\", \"Kellin\",\r\n    \"Kelma'in\", \"Kelson\", \"Kelth\", \"Kelvin\", \"Kemble\", \"Kendall\", \"Kendra\", \"Kendrick\", \"Kenesaw\", \"Kenin\", \"Kenny\", \"Kenobi\", \"Kenrick\",\r\n    \"Kerik\", \"Kerish\", \"Kermit\", \"Kerrigan\", \"Keshar\", \"Kesrick\", \"Kethios\", \"Ketial\", \"Ketil\", \"Kettali\", \"Kevan\", \"Keven\", \"Kevlin\",\r\n    \"Keyrnon\", \"Khader\", \"Khalia\", \"Khalid\", \"Khanzadian\", \"Kharas\", \"Khealynn\", \"Khelben\", \"Kheldor\", \"Khelen\", \"Khelin\", \"Khelyn\", \"Khendraja'aro\",\r\n    \"Khenel\", \"Khezeed\", \"Khindawe\", \"Khirsha\", \"Khlor\", \"Khris\", \"Khyved\", \"Ki'ushapo\", \"Kian\", \"Kiborno\", \"Kiera\", \"Kieran\", \"Kikkasut\",\r\n    \"Kilas\", \"Kilian\", \"Killion\", \"Kimmuriel\", \"Kimura\", \"Kinloch\", \"Kinson\", \"Kippler\", \"Kira\", \"Kiri\", \"Kirjava\", \"Kirk\", \"Kirren\",\r\n    \"Kirsopp\", \"Kirsten\", \"Kishin\", \"Kisin\", \"Kitiara\", \"Kjeldor\", \"Kjindar\", \"Klaus\", \"Klean\", \"Klerak\", \"Knud\", \"Knut\", \"Knute\",\r\n    \"Koabon\", \"Kolbein\", \"Kolchash\", \"Kolskegg\", \"Kolya\", \"Kona\", \"Konrad\", \"Konstantine\", \"Korban\", \"Kord\", \"Koreth\", \"Korgan\", \"Korm\",\r\n    \"Kormar\", \"Kornag\", \"Korska\", \"Kosh\", \"Kota\", \"Kovelir\", \"Krinn\", \"Krishnalai\", \"Kroh\", \"Krom\", \"Kronos\", \"Kuno\", \"Kurd\",\r\n    \"Kurn\", \"Kurt\", \"Kurin\", \"Kuros\", \"Kurtulmak\", \"Ky'ishi\", \"Ky'varan\", \"Kyle\", \"Kylindra\", \"Kypros\", \"Kyrie\", \"Kyriel\", \"La'ahl\",\r\n    \"Lachesis\", \"Lachian\", \"Ladia\", \"Ladoros\", \"Laeli\", \"Laelia\", \"Laerrui\", \"Lahar\", \"Lahsai\", \"Lalely\", \"Lamar\", \"Lambi\", \"Lan\",\r\n    \"Lana\", \"Lance\", \"Lancelot\", \"Landailyn\", \"Landoris\", \"Landrea\", \"Laneth\", \"Langhorne\", \"Langrian\", \"Langston\", \"Lanthal\", \"Lanthorn\", \"Larad\",\r\n    \"Lardner\", \"Larisa\", \"Larkin\", \"Larn\", \"Larnea\", \"Lars\", \"Larz\", \"Lashar\", \"Lateia\", \"Lathander\", \"Laurana\", \"Laurelin\", \"Laxton\",\r\n    \"Lazar\", \"Lazlo\", \"Lea\", \"Leareth\", \"Leathian\", \"Lec\", \"Ledyard\", \"Leela\", \"Legolas\", \"Legrand\", \"Leif\", \"Leighton\", \"Leika\",\r\n    \"Leila\", \"Leilah\", \"Leli\", \"Lembar\", \"Lenka\", \"Lenox\", \"Leo\", \"Leofric\", \"Leon\", \"Leonard\", \"Leonardo\", \"Leopond\", \"Lesesne\",\r\n    \"Lestyn\", \"Leta\", \"Letor\", \"Lev\", \"Lewellyri\", \"Lexan\", \"Lexx\", \"Lhuc\", \"Lia\", \"Liana\", \"Liena\", \"Lightfoot\", \"Liliane\",\r\n    \"Lilin\", \"Lina\", \"Lindar\", \"Linmer\", \"Linnea\", \"Lios\", \"Liphar\", \"Lippard\", \"Liptrot\", \"Lirith\", \"Lithar\", \"Littleton\", \"Livermore\",\r\n    \"Livia\", \"Ljot\", \"Ljotolf\", \"Lluth\", \"Llyn\", \"Llythin\", \"Lobelia\", \"Lobryn\", \"Lobur\", \"Locke\", \"Lockwood\", \"Loddlaen\", \"Lodica\",\r\n    \"Lodin\", \"Loella\", \"Logan\", \"Loibur\", \"Loili\", \"Lola\", \"Lonvan\", \"Lore\", \"Loric\", \"Lorin\", \"Lormyr\", \"Lothar\", \"Lothrop\",\r\n    \"Lott\", \"Lotta\", \"Loudon\", \"Louisa\", \"Lovegood\", \"Lovva\", \"Lovyan\", \"Luas\", \"Lucan\", \"Lucca\", \"Lucia\", \"Lucian\", \"Lucinda\",\r\n    \"Lucius\", \"Lucrecia\", \"Ludmila\", \"Luella\", \"Lufkin\", \"Lugh\", \"Luhsane\", \"Lum\", \"Lumbar\", \"Luna\", \"Lunar\", \"Lunetta\", \"Lupin\",\r\n    \"Lurican\", \"Lurue\", \"Luscan\", \"Luther\", \"Luthian\", \"Luvina\", \"Lycias\", \"Lydia\", \"Lylas\", \"Lyle\", \"Lymo\", \"Lyndall\", \"Lyndon\",\r\n    \"Lynette\", \"Lynis\", \"Lynn\", \"Lypilla\", \"Lyra\", \"Lyrian\", \"Lyrin\", \"Lyron\", \"Lysander\", \"Lyssa\", \"Lythia\", \"Lythian\", \"Lytler\",\r\n    \"Lyzandra\", \"Lyzette\", \"Lórien\", \"Mabon\", \"Macallan\", \"Macaulay\", \"Macer\", \"Mackim\", \"Macvey\", \"Maddern\", \"Maddock\", \"Madelon\", \"Madhao\",\r\n    \"Madora\", \"Maec\", \"Maegwin\", \"Mael\", \"Maerraent\", \"Mafka\", \"Magda\", \"Magh\", \"Magill\", \"Magna\", \"Magnus\", \"Magus\", \"Mahion\",\r\n    \"Mahmud\", \"Mahri\", \"Maia\", \"Maidah\", \"Maidak\", \"Maihar\", \"Makoma\", \"Malach\", \"Malachias\", \"Maladack\", \"Malador\", \"Malak\", \"Malar\",\r\n    \"Malcoff\", \"Malcolm\", \"Malfar\", \"Malia\", \"Maliforin\", \"Malkil\", \"Malto\", \"Malvin\", \"Malvtha\", \"Mama\", \"Mamba\", \"Mana\", \"Manala\",\r\n    \"Manaverr\", \"Manfred\", \"Mankey\", \"Mannin\", \"Manon\", \"Mansour\", \"Manton\", \"Manwe\", \"Maoll\", \"March\", \"Marcus\", \"Marena\", \"Margarita\",\r\n    \"Margery\", \"Mariandor\", \"Marid\", \"Marina\", \"Marion\", \"Marissa\", \"Marisse\", \"Mark\", \"Markham\", \"Maroof\", \"Marques\", \"Marsden\", \"Marshtnan\",\r\n    \"Marsineh\", \"Marta\", \"Martin\", \"Martus\", \"Mary\", \"Maryn\", \"Mathilda\", \"Mathilde\", \"Matilda\", \"Matthew\", \"Matthias\", \"Maudlin\", \"Maura\",\r\n    \"Mavis\", \"Maxander\", \"Maxfield\", \"Maximilian\", \"Maximus\", \"Maya\", \"Mayhew\", \"Mazrak\", \"Medar\", \"Medart\", \"Medea\", \"Meder\", \"Medrom\",\r\n    \"Megan\", \"Meghnad\", \"Mehmet\", \"Mekeesha\", \"Melba\", \"Melchior\", \"Meleri\", \"Meliadoul\", \"Melian\", \"Melisande\", \"Melkor\", \"Mellyora\", \"Melnyth\",\r\n    \"Melora\", \"Melva\", \"Melvaig\", \"Memor\", \"Men\", \"Menard\", \"Mendolin\", \"Menelvagor\", \"Mennefer\", \"Meoran\", \"Mephistopheles\", \"Merah\", \"Merasye\",\r\n    \"Meredith\", \"Meriadoc\", \"Merifa\", \"Merivan\", \"Merlin\", \"Merrilee\", \"Merryn\", \"Mervyn\", \"Merwold\", \"Merwolf\", \"Mes'ard\", \"Meta\", \"Methos\",\r\n    \"Methuen\", \"Michael\", \"Michel\", \"Mideya\", \"Midhat\", \"Midra\", \"Mignon\", \"Miguel\", \"Mikhail\", \"Mila\", \"Milada\", \"Milander\", \"Milandro\",\r\n    \"Mileaha\", \"Millard\", \"Milo\", \"Mimir\", \"Mina\", \"Minella\", \"Miner\", \"Minna\", \"Minx\", \"Mira\", \"Miragon\", \"Miranda\", \"Mirandros\",\r\n    \"Miriel\", \"Mirrash\", \"Mirromi\", \"Miryam\", \"Misha\", \"Mishanti\", \"Misin\", \"Mist\", \"Mithrandir\", \"Mithryl\", \"Mitre\", \"Miwa\", \"Mizra\",\r\n    \"Moda\", \"Modeus\", \"Moffett\", \"Mohammed\", \"Mohieddin\", \"Moina\", \"Moira\", \"Moiriane\", \"Moisur\", \"Molina\", \"Mona\", \"Monach\", \"Montfort\",\r\n    \"Mora\", \"Moradin\", \"Mord\", \"Moredlin\", \"Morgan\", \"Morgon\", \"Morgwin\", \"Moriana\", \"Morik\", \"Morin\", \"Morley\", \"Morna\", \"Morpheus\",\r\n    \"Morrigan\", \"Mortos\", \"Mortrock\", \"Morven\", \"Moya\", \"Muammar\", \"Mubur\", \"Muhammed\", \"Muhlwena\", \"Mujibur\", \"Muktar\", \"Munin\", \"Murdo\",\r\n    \"Murias\", \"Murina\", \"Murrough\", \"Mussa\", \"Mustadio\", \"Mustafa\", \"Mylin\", \"Mylé\", \"Myna\", \"Myra\", \"Myriam\", \"Myrick\", \"Myrmeen\",\r\n    \"Myrna\", \"Myron\", \"Myrrdyn\", \"Myrrha\", \"Myshella\", \"Mythil\", \"Myvor\", \"N'hadha\", \"Nada\", \"Nadezhda\", \"Nadia\", \"Nadir\", \"Nagai\",\r\n    \"Nagel\", \"Nagvar\", \"Nahar\", \"Naia\", \"Naidel\", \"Najib\", \"Nakea\", \"Nalia\", \"Nall\", \"Nanorion\", \"Naois\", \"Naomi\", \"Napollo\",\r\n    \"Narasen\", \"Narcista\", \"Narisa\", \"Narvi\", \"Nasir\", \"Nasser\", \"Natalia\", \"Natasha\", \"Nathalia\", \"Nathalie\", \"Natty\", \"Nazar\", \"Nebron\",\r\n    \"Nedda\", \"Nedstar\", \"Neelix\", \"Negley\", \"Nemm\", \"Nemuel\", \"Neral\", \"Neri\", \"Nerian\", \"Nerilka\", \"Nerissa\", \"Nerull\", \"Nesbit\",\r\n    \"Nesta\", \"Nethuan\", \"Neva\", \"Nevaeh\", \"Nevard\", \"Nevena\", \"Nevile\", \"Nevyn\", \"Newall\", \"Newbold\", \"Newman\", \"Neysa\", \"Neza\",\r\n    \"Nibbidard\", \"Nichol\", \"Nicor\", \"Nienna\", \"Night\", \"Nigil\", \"Nikolai\", \"Nikua\", \"Nila\", \"Nimir\", \"Nimrodel\", \"Nina\", \"Ninian\",\r\n    \"Niomir\", \"Nira'in\", \"Nirnir\", \"Nita\", \"Nivek\", \"Nivilian\", \"Nizam\", \"Nizar\", \"Nobanion\", \"Nodaran\", \"Noela\", \"Nolan\", \"Nona\",\r\n    \"Noora\", \"Nor\", \"Nordri\", \"Noreen\", \"Norine\", \"Norle\", \"Norna\", \"Norval\", \"Norvin\", \"Norwood\", \"Nova\", \"Novalis\", \"Novita\",\r\n    \"Novomira\", \"Nu'endo\", \"Nuada\", \"Nuadi\", \"Nuala\", \"Nuale\", \"Nuanni\", \"Nungo\", \"Nunila\", \"Nura\", \"Nurdoch\", \"Nurgan\", \"Nuri\",\r\n    \"Nushia\", \"Nyassa\", \"Nylan\", \"Nymara\", \"Nynaeve\", \"Nyra\", \"Nytasa\", \"Oakes\", \"Oalyn\", \"Obed\", \"Oberon\", \"Ocar\", \"Oda\",\r\n    \"Odar\", \"Odd\", \"Oden\", \"Odilia\", \"Odimus\", \"Odo\", \"Odona\", \"Ofeig\", \"Ogden\", \"Oghma\", \"Ogma\", \"Ogmund\", \"Ogrus\",\r\n    \"Okander\", \"Olac\", \"Olaf\", \"Oldac\", \"Oldham\", \"Olga\", \"Olissa\", \"Olof\", \"Olorin\", \"Oloru\", \"Olvir\", \"Olya\", \"Omandras\",\r\n    \"Omar\", \"Omassus\", \"Ombrum\", \"Omer\", \"Onslow\", \"Onufrio\", \"Onund\", \"Onyx\", \"Ooma\", \"Oona\", \"Oonai\", \"Opal\", \"Ophelia\",\r\n    \"Orah\", \"Orcrist\", \"Ordway\", \"Oriana\", \"Orin\", \"Orion\", \"Orius\", \"Orivaen\", \"Orlandu\", \"Orlata\", \"Orm\", \"Ormsby\", \"Orome\",\r\n    \"Oron\", \"Orren\", \"Orridge\", \"Orsola\", \"Orson\", \"Osa\", \"Osiris\", \"Oskavar\", \"Ospar\", \"Osric\", \"Oswin\", \"Othello\", \"Othilia\",\r\n    \"Otho\", \"Othran\", \"Otiluke\", \"Otkel\", \"Otrygg\", \"Ottar\", \"Ottilia\", \"Otto\", \"Overton\", \"Owain\", \"Owen\", \"Owyn\", \"Ozatras\",\r\n    \"Ozto\", \"Ozur\", \"Padraic\", \"Padrias\", \"Paget\", \"Pala\", \"Palma\", \"Pamar\", \"Pan\", \"Parbha\", \"Pargascor\", \"Parr\", \"Pasca\",\r\n    \"Paschal\", \"Passmore\", \"Patnas\", \"Pattabhai\", \"Pavel\", \"Pean\", \"Pearl\", \"Pearsall\", \"Peffer\", \"Peiham\", \"Peitar\", \"Peleg\", \"Pelipi\",\r\n    \"Pellin\", \"Pendleton\", \"Penfield\", \"Pengolod\", \"Penhallow\", \"Penniman\", \"Penrhyn\", \"Pepperell\", \"Pereban\", \"Peredon\", \"Peregrin\", \"Peregrine\", \"Perith\",\r\n    \"Peronn\", \"Perrin\", \"Persifor\", \"Pestivar\", \"Peter\", \"Pethros\", \"Petra\", \"Petrea\", \"Petronella\", \"Pflarr\", \"Phanuel\", \"Pharatnond\", \"Pharcellus\",\r\n    \"Phelim\", \"Philo\", \"Philpot\", \"Phimister\", \"Phoenix\", \"Phyrrus\", \"Pia\", \"Picar\", \"Pickman\", \"Pigot\", \"Pike\", \"Pine\", \"Pinkham\",\r\n    \"Pinkney\", \"Pinkstone\", \"Piotr\", \"Pittheus\", \"Plaisted\", \"Plunimer\", \"Plunkett\", \"Polassar\", \"Pollard\", \"Pollock\", \"Polonius\", \"Polycarp\", \"Pomeroy\",\r\n    \"Porthios\", \"Powell\", \"Prafulla\", \"Prendergast\", \"Preston\", \"Prichard\", \"Proctor\", \"Prospero\", \"Provida\", \"Psilofyr\", \"Puck\", \"Pue\", \"Pulisk\",\r\n    \"Pulteney\", \"Purdon\", \"Pyke\", \"Pyros\", \"Pysander\", \"Quaan\", \"Quagel\", \"Qualin\", \"Quan\", \"Quarles\", \"Quasar\", \"Quascar\", \"Quass\",\r\n    \"Quebba\", \"Quelfinas\", \"Quesan\", \"Queygo\", \"Quiddle\", \"Quinn\", \"Quiss\", \"Quixano\", \"Quora\", \"Quvar\", \"Quvean\", \"Raagon\", \"Raban\",\r\n    \"Rabind\", \"Rabur\", \"Rach\", \"Rachid\", \"Rackafel\", \"Rackhir\", \"Radagast\", \"Radija\", \"Rae\", \"Rael\", \"Raen\", \"Rafa\", \"Rafael\",\r\n    \"Rafur\", \"Ragen\", \"Ragna\", \"Ragnal\", \"Ragnar\", \"Ragnhild\", \"Rahaz\", \"Rai\", \"Raikes\", \"Rails\", \"Raimon\", \"Raina\", \"Raine\",\r\n    \"Raisa\", \"Raistlin\", \"Ralina\", \"Ralmanor\", \"Ralph\", \"Ramen\", \"Ramli\", \"Ramman\", \"Ramona\", \"Ramora\", \"Ramous\", \"Ramza\", \"Ranald\",\r\n    \"Ranath\", \"Rancor\", \"Rand\", \"Randar\", \"Randoer\", \"Randolf\", \"Randor\", \"Ranfurly\", \"Ranjan\", \"Rankin\", \"Rannuif\", \"Rannveig\", \"Raphael\",\r\n    \"Rary\", \"Rashiel\", \"Rasputin\", \"Rathack\", \"Rathanos\", \"Rathgar\", \"Rattray\", \"Rauros\", \"Ravenor\", \"Ravi\", \"Rayne\", \"Razamor\", \"Raziel\",\r\n    \"Razzan\", \"Rebecca\", \"Recoun\", \"Redcliffe\", \"Regalorn\", \"Regnar\", \"Reina\", \"Reis\", \"Relm\", \"Rem\", \"Remi\", \"Remnor\", \"Remus\",\r\n    \"Renar\", \"Renata\", \"Rendel\", \"Rengoll\", \"Reoc\", \"Resha\", \"Rethral\", \"Reva\", \"Rex\", \"Reyna\", \"Rezah\", \"Rhadry\", \"Rhaederle\",\r\n    \"Rhaeryn\", \"Rhea\", \"Rhiannon\", \"Rhiow\", \"Rhodhy\", \"Rhona\", \"Rhonda\", \"Rhora\", \"Rhorleif\", \"Rhorvald\", \"Rhundas\", \"Rhymer\", \"Rhynn\",\r\n    \"Rhys\", \"Riallus\", \"Riamon\", \"Rickard\", \"Ricyn\", \"Rigolio\", \"Rilir\", \"Rinaldus\", \"Ringgold\", \"Risaya\", \"Riss\", \"Rith\", \"Riven\",\r\n    \"Roach\", \"Roark\", \"Rockhill\", \"Rodefer\", \"Roderic\", \"Rodhan\", \"Rognvald\", \"Roignar\", \"Roland\", \"Rolf\", \"Rollo\", \"Roman\", \"Romelia\",\r\n    \"Romer\", \"Romney\", \"Ronan\", \"Root\", \"Rorik\", \"Rosalyn\", \"Rosamund\", \"Roscoe\", \"Rose\", \"Rosefyre\", \"Roseline\", \"Roshena\", \"Rosskeen\",\r\n    \"Roundell\", \"Rowena\", \"Ruadan\", \"Ruan\", \"Rubar\", \"Ruben\", \"Rubrick\", \"Ruby\", \"Rucker\", \"Rudyard\", \"Rufina\", \"Rufus\", \"Ruggles\",\r\n    \"Ruhollah\", \"Ruinar\", \"Rulian\", \"Rulinian\", \"Rumil\", \"Runa\", \"Runold\", \"Runolf\", \"Runus\", \"Rurik\", \"Rusgar\", \"Ruth\", \"Rutland\",\r\n    \"Ruwen\", \"Ryana\", \"Rycaro\", \"Rychanna\", \"Rygar\", \"Ryll\", \"Rylla\", \"Rynnyn\", \"Ryodan\", \"Ryoga\", \"Ryoka\", \"Saalem\", \"Sabal\",\r\n    \"Sabhel\", \"Sabriel\", \"Sabrok\", \"Sacheverall\", \"Sackville\", \"Saddam\", \"Sadler\", \"Sador\", \"Saedd\", \"Saermund\", \"Saeunn\", \"Safrin\", \"Saia\",\r\n    \"Said\", \"Saifai\", \"Saiwyn\", \"Salina\", \"Salmon\", \"Salter\", \"Sam\", \"Sambrea\", \"Samia\", \"Samira\", \"Sammel\", \"Samuel\", \"Sanfrid\",\r\n    \"Sano'rye\", \"Sanoreya\", \"Sanoria\", \"Sarcyn\", \"Sardior\", \"Sardul\", \"Sarel\", \"Sarevok\", \"Sargonus\", \"Saria\", \"Sarina\", \"Sarisin\", \"Sariya\",\r\n    \"Sarrask\", \"Saruman\", \"Sasha\", \"Saska\", \"Saturn\", \"Sauron\", \"Savah\", \"Savion\", \"Sawdon\", \"Sayan\", \"Scenesefa\", \"Scudamore\", \"Scythe\",\r\n    \"Sebastian\", \"Sebrinth\", \"Sechier\", \"Sedgely\", \"Seersha\", \"Segojan\", \"Sehanine\", \"Seitarin\", \"Selema\", \"Selena\", \"Selene\", \"Selig\", \"Selim\",\r\n    \"Selina\", \"Selis\", \"Selith\", \"Selune\", \"Selwyn\", \"Semuta\", \"Senith\", \"Senna\", \"Sephia\", \"Sephya\", \"Sepiroth\", \"Seramir\", \"Seraphina\",\r\n    \"Serena\", \"Serenyi\", \"Sergei\", \"Seriozha\", \"Seryan\", \"Seryl\", \"Seryth\", \"Seth\", \"Sethron\", \"Sevadia\", \"Severin\", \"Sevros\", \"Sevy\",\r\n    \"Sha'dar\", \"Sha'rell\", \"Shackerley\", \"Shadizad\", \"Shadrach\", \"Shadworth\", \"Shaera\", \"Shaivar\", \"Shaivir\", \"Shala\", \"Shalamar\", \"Shalandain\", \"Shalat\",\r\n    \"Shalhassan\", \"Shalindra\", \"Shalon\", \"Shalpan\", \"Shamane\", \"Shamir\", \"Shana\", \"Shandalar\", \"Shanell\", \"Shar\", \"Sharada\", \"Sharaq\", \"Shard\",\r\n    \"Sharif\", \"Sharilla\", \"Sharl\", \"Sharla\", \"Sharmaine\", \"Sharman\", \"Sharna\", \"Sharnira\", \"Sharra\", \"Sharteel\", \"Shaundra\", \"Sharyn\", \"Shayera\",\r\n    \"Shayla\", \"Shayll\", \"Shayonea\", \"Shea\", \"Sheegoth\", \"Sheeryl\", \"Sheherazad\", \"Shemsin\", \"Sheridan\", \"Sherif\", \"Sherry\", \"Shezael\", \"Shima'onari\",\r\n    \"Shintaro\", \"Shiza\", \"Shuinn\", \"Shuna\", \"Shurakai\", \"Shurik\", \"Shushila\", \"Shylock\", \"Siandar\", \"Sibert\", \"Sibyl\", \"Sidhe\", \"Siglinde\",\r\n    \"Sigmund\", \"Signe\", \"Sigred\", \"Sigrid\", \"Sigtrydd\", \"Sigurd\", \"Sigvaldi\", \"Silatasar\", \"Silius\", \"Silma\", \"Silmariel\", \"Silphane\", \"Silvain\",\r\n    \"Silvan\", \"Silvanus\", \"Silvera\", \"Silveron\", \"Silvia\", \"Silvyn\", \"Simir\", \"Simmu\", \"Sinbad\", \"Sindarin\", \"Sinir\", \"Sinjin\", \"Siranush\",\r\n    \"Sirisir\", \"Sirli'in\", \"Sirona\", \"Sirranon\", \"Sirwin\", \"Sisimar\", \"Siski\", \"Sivesh\", \"Siveth\", \"Siward\", \"Sjerdi\", \"Skamkel\", \"Skelmar\",\r\n    \"Skorian\", \"Slade\", \"Slania\", \"Slater\", \"Slava\", \"Sligh\", \"Slingsby\", \"Smedley\", \"Snargg\", \"Snorri\", \"Snyder\", \"Sodorn\", \"Soilir\",\r\n    \"Soisil\", \"Sokki\", \"Solaris\", \"Solera\", \"Solevig\", \"Solmund\", \"Solomon\", \"Solvi\", \"Sonnet\", \"Sooth\", \"Sora\", \"Sorass\", \"Sorcha\",\r\n    \"Sorin\", \"Sornovas\", \"Soth\", \"Southall\", \"Sovaz\", \"Soveh\", \"Soyadi\", \"Sparrow\", \"Sprigg\", \"Squall\", \"Srass\", \"Stabyl\", \"Stanwood\",\r\n    \"Starkad\", \"Starke\", \"Stedman\", \"Stefan\", \"Stehman\", \"Stein\", \"Steinkel\", \"Steinthor\", \"Stelectra\", \"Stenger\", \"Stenwulf\", \"Steponas\", \"Sterndale\",\r\n    \"Stetson\", \"Stetter\", \"Stiliman\", \"Stilingfleet\", \"Stopford\", \"Storm\", \"Stowna\", \"Strachan\", \"Straygoth\", \"Stroud\", \"Strudwick\", \"Strybyorn\", \"Strykar\",\r\n    \"Sturla\", \"Sturm\", \"Styx\", \"Sudeha\", \"Suleiman\", \"Sulimo\", \"Sulkas\", \"Sumarlidi\", \"Suras\", \"Surridge\", \"Susin\", \"Susur\", \"Sutan\",\r\n    \"Svala\", \"Svan\", \"Svante\", \"Svatopluk\", \"Sveata\", \"Sven\", \"Swain\", \"Swartwout\", \"Sydnor\", \"Syllva\", \"Sylvane\", \"Sylvia\", \"Sylvin\",\r\n    \"Sylvine\", \"Syndarra\", \"Synnyn\", \"Syranita\", \"Syrioll\", \"Tabar\", \"Tabitha\", \"Tabor\", \"Tabu\", \"Tacey\", \"Tachel\", \"Tadashi\", \"Tadeus\",\r\n    \"Tadia\", \"Tadisha\", \"Tadra\", \"Taennyn\", \"Taeynnyn\", \"Taggart\", \"Tahir\", \"Tailabar\", \"Taina\", \"Takhisis\", \"Taleen\", \"Talen\", \"Taleth\",\r\n    \"Talia\", \"Taliesin\", \"Talin\", \"Talmora\", \"Talobar\", \"Talona\", \"Taloxi\", \"Taltos\", \"Talus\", \"Tamar\", \"Tamara\", \"Tameryn\", \"Tamias\",\r\n    \"Tamlin\", \"Tamoreya\", \"Tanina\", \"Tanis\", \"Tanith\", \"Tanyc\", \"Tar\", \"Tara\", \"Taran\", \"Tarcia\", \"Taria\", \"Tarik\", \"Taromas\",\r\n    \"Taron\", \"Tarran\", \"Taryn\", \"Tas\", \"Tasharra\", \"Tasker\", \"Tatyana\", \"Taurus\", \"Taveli\", \"Taylian\", \"Taylin\", \"Tedra\", \"Tegan\",\r\n    \"Tekia\", \"Telena\", \"Tell\", \"Tench\", \"Tenna\", \"Tenser\", \"Teoddry\", \"Ter\", \"Teralyn\", \"Teressa\", \"Terix\", \"Teruah\", \"Tesin\",\r\n    \"Tesla\", \"Tessa\", \"Tevran\", \"Thaal\", \"Thacker\", \"Thaddeus\", \"Thaki\", \"Thal\", \"Thalen\", \"Thalessa\", \"Thalia\", \"Thalna\", \"Tham\",\r\n    \"Thana\", \"Thane\", \"Thanatos\", \"Thantos\", \"Thar\", \"Tharbad\", \"Tharkesh\", \"Tharn\", \"Thax\", \"Thecla\", \"Theda\", \"Theleb\", \"Theoden\",\r\n    \"Theodor\", \"Theodoric\", \"Theodosia\", \"Theodric\", \"Theoric\", \"Thera\", \"Therad\", \"Theresa\", \"Therios\", \"Theros\", \"Thesius\", \"Thieras\", \"Thieryn\",\r\n    \"Thingyr\", \"Thio\", \"Tholan\", \"Thomas\", \"Thomulor\", \"Thora\", \"Thoran\", \"Thorarin\", \"Thorburn\", \"Thord\", \"Thordarson\", \"Thordis\", \"Thorfel\",\r\n    \"Thorfinn\", \"Thorfinna\", \"Thorgeir\", \"Thorgerd\", \"Thorgest\", \"Thorgils\", \"Thorgrim\", \"Thorgunna\", \"Thorhall\", \"Thorhalla\", \"Thorhild\", \"Thorin\", \"Thorir\",\r\n    \"Thorkatla\", \"Thorkell\", \"Thorkild\", \"Thormod\", \"Thormodr\", \"Thormond\", \"Thorn\", \"Thorndike\", \"Thornwell\", \"Thorold\", \"Thorolf\", \"Thorsager\", \"Thorstein\",\r\n    \"Thorunn\", \"Thorvald\", \"Thorvaldur\", \"Thorvar\", \"Thorzyl\", \"Thoth\", \"Thrain\", \"Thrand\", \"Throck\", \"Thule\", \"Thurid\", \"Thylda\", \"Thyra\",\r\n    \"Thyri\", \"Thyrza\", \"Thyssa\", \"Tiana\", \"Tiffany\", \"Tihan\", \"Tika\", \"Tilford\", \"Tilica\", \"Tilir\", \"Tillinghast\", \"Tilloch\", \"Timon\",\r\n    \"Tioniel\", \"Tirion\", \"Tisha\", \"Tisheri\", \"Titania\", \"Titia\", \"Titiana\", \"Tivernee\", \"Tiyagar\", \"Tnin\", \"Tobias\", \"Tobis\", \"Todhunter\",\r\n    \"Tolbert\", \"Tolenka\", \"Topaz\", \"Topham\", \"Torc\", \"Tortbold\", \"Tosti\", \"Tosya\", \"Toulac\", \"Tovi\", \"Trafford\", \"Trebor\", \"Trelane\",\r\n    \"Trelawny\", \"Trella\", \"Trevel\", \"Trick\", \"Trigg\", \"Trill\", \"Triona\", \"Trir\", \"Tristam\", \"Tristan\", \"Trost\", \"Trotwood\", \"Trowbridge\",\r\n    \"Truesdell\", \"Tuane\", \"Tufnell\", \"Tugan\", \"Tuilleth\", \"Tulio\", \"Tulkas\", \"Tundine\", \"Tunstall\", \"Tuor\", \"Turan\", \"Turgoz\", \"Turhan\",\r\n    \"Turin\", \"Turpin\", \"Tuttle\", \"Tuula\", \"Twyla\", \"Tylden\", \"Tyldoran\", \"Tylen\", \"Tylien\", \"Tylynn\", \"Tymar\", \"Tymora\", \"Tymoriel\",\r\n    \"Tynnyn\", \"Tyr\", \"Tyra\", \"Tyranina\", \"Tyreen\", \"Tyrwhitt\", \"Uamian\", \"Ubriani\", \"Ucarsh\", \"Uda\", \"Uhier\", \"Uhlain\", \"Uhlume\",\r\n    \"Uholedil\", \"Uinen\", \"Ula\", \"Ulf\", \"Ulgor\", \"Ulis\", \"Uljas\", \"Ulji\", \"Ulmaerr\", \"Ulmo\", \"Ulosh\", \"Ulric\", \"Ulrich\",\r\n    \"Ultron\", \"Umaiar\", \"Umbar\", \"Umda\", \"Umgalad\", \"Una\", \"Uneitna\", \"Ungon\", \"Unius\", \"Unn\", \"Unrak\", \"Unwin\", \"Upal\",\r\n    \"Upton\", \"Urabi\", \"Urania\", \"Uranos\", \"Uranus\", \"Uriel\", \"Urish\", \"Urokoz\", \"Ursula\", \"Usher\", \"Uta\", \"Utumno\", \"Uusoae\",\r\n    \"Uvanimor\", \"Uziel\", \"Vabryn\", \"Vadarin\", \"Vadi\", \"Vaeddyn\", \"Vagn\", \"Vai\", \"Val\", \"Valadan\", \"Valandario\", \"Valandor\", \"Valarindi\",\r\n    \"Valborg\", \"Valda\", \"Valdain\", \"Valdemar\", \"Valen\", \"Valenka\", \"Valentia\", \"Valerand\", \"Valeria\", \"Valerian\", \"Valeska\", \"Valgar\", \"Valgard\",\r\n    \"Valgerd\", \"Valiah\", \"Valion\", \"Valisa\", \"Valiss\", \"Valistor\", \"Valkor\", \"Valla\", \"Vallo\", \"Valmar\", \"Valminder\", \"Valor\", \"Valsera\",\r\n    \"Valurian\", \"Valya\", \"Valynard\", \"Vandrad\", \"Vane\", \"Vanechka\", \"Vanidor\", \"Vanion\", \"Vannevar\", \"Vannyn\", \"Vanya\", \"Vanyar\", \"Vanyel\",\r\n    \"Varda\", \"Vardis\", \"Varina\", \"Varion\", \"Varken\", \"Varnum\", \"Vasava\", \"Vash\", \"Vasha\", \"Vasilii\", \"Vasin\", \"Vaydin\", \"Vaydir\",\r\n    \"Vayi\", \"Vecna\", \"Veda\", \"Veldahar\", \"Veldan\", \"Velex\", \"Velior\", \"Venable\", \"Vendor\", \"Veorcyn\", \"Vercyn\", \"Verdina\", \"Vereesa\",\r\n    \"Verline\", \"Vermund\", \"Verna\", \"Ves\", \"Vespar\", \"Vestein\", \"Veva\", \"Vevina\", \"Vexter\", \"Viasta\", \"Vicarr\", \"Vicat\", \"Vicentia\",\r\n    \"Viconia\", \"Victor\", \"Vida\", \"Vidkun\", \"Vidron\", \"Vieno\", \"Viera\", \"Vierna\", \"Vigdis\", \"Vigfus\", \"Vilhelm\", \"Vilka\", \"Vilrna\",\r\n    \"Vinatta\", \"Vincas\", \"Vincent\", \"Vintar\", \"Violet\", \"Vircyn\", \"Vishali\", \"Viveka\", \"Vladimir\", \"Vladislav\", \"Vlaric\", \"Vobur\", \"Voirath\",\r\n    \"Vokos\", \"Voldor\", \"Volkan\", \"Volney\", \"Volodya\", \"Volund\", \"Vonya\", \"Voranor\", \"Vrashin\", \"Vulpen\", \"Vurog\", \"Vusil\", \"Vyecheslav\",\r\n    \"Vyner\", \"Wadleigh\", \"Waenwryht\", \"Wager\", \"Waisham\", \"Waivan\", \"Wakeman\", \"Wakkar\", \"Walborg\", \"Walda\", \"Waldan\", \"Waldegrave\", \"Waldemar\",\r\n    \"Waleran\", \"Walford\", \"Walid\", \"Walker\", \"Wanhim\", \"Waring\", \"Wariv\", \"Wark\", \"Warne\", \"Warrender\", \"Warrigel\", \"Warwick\", \"Waryk\",\r\n    \"Watson\", \"Watt\", \"Waylan\", \"Wayland\", \"Waylon\", \"Wealin\", \"Wedlake\", \"Weilborn\", \"Weiryn\", \"Wel\", \"Wemick\", \"Wendolyn\", \"Wertha\",\r\n    \"Westcott\", \"Westen\", \"Weyrn\", \"Wharrom\", \"Whitwell\", \"Whyte\", \"Wicca\", \"Wideman\", \"Wightman\", \"Wildhair\", \"Wilfrid\", \"Wilhelm\", \"Wilhelmina\",\r\n    \"Wilibald\", \"Will\", \"Willa\", \"William\", \"Willock\", \"Willow\", \"Wilma\", \"Wilmar\", \"Wilner\", \"Wilven\", \"Windham\", \"Winfrey\", \"Winian\",\r\n    \"Winslow\", \"Winton\", \"Wisp\", \"Wisuth\", \"Wivianne\", \"Wizlow\", \"Woart\", \"Wodan\", \"Wolfgang\", \"Wolmar\", \"Womal\", \"Woodfin\", \"Woodruff\",\r\n    \"Wooligar\", \"Wortley\", \"Wotan\", \"Wulf\", \"Wulfgar\", \"Wulfric\", \"Wulgar\", \"Wychnor\", \"Wycliffe\", \"Wyllows\", \"Wyly\", \"Wynkyn\", \"Wynne\",\r\n    \"Wynston\", \"Wyvan\", \"Xaandria\", \"Xaath\", \"Xabian\", \"Xabiel\", \"Xabu\", \"Xain\", \"Xalthan\", \"Xan\", \"Xanaphel\", \"Xanathar\", \"Xander\",\r\n    \"Xandra\", \"Xandria\", \"Xanthon\", \"Xanthus\", \"Xarek\", \"Xarolith\", \"Xaver\", \"Xavier\", \"Xavin\", \"Xela\", \"Xelmonth\", \"Xena\", \"Xenia\",\r\n    \"Xenoba\", \"Xera\", \"Xercon\", \"Xerravin\", \"Xiombarg\", \"Xoncarg\", \"Xoran\", \"Xulan\", \"Xyas\", \"Xydra\", \"Xyko\", \"Xylah\", \"Xylia\",\r\n    \"Xymoya\", \"Xystus\", \"Xythrin\", \"Xytrin\", \"Yacima\", \"Yaheira\", \"Yahira\", \"Yaigin\", \"Yakov\", \"Yalan\", \"Yali\", \"Yalin\", \"Yalniz\",\r\n    \"Yamari\", \"Yana\", \"Yandell\", \"Yangin\", \"Yanira\", \"Yannul\", \"Yara\", \"Yaraia\", \"Yarali\", \"Yardim\", \"Yardley\", \"Yari\", \"Yarim\",\r\n    \"Yarin\", \"Yarir\", \"Yaritza\", \"Yartrina\", \"Yasimina\", \"Yasir\", \"Yasmina\", \"Yasser\", \"Yastar\", \"Yatay\", \"Yavana\", \"Yazihane\", \"Yelain\",\r\n    \"Yeni\", \"Yetne\", \"Yevgenii\", \"Yezade\", \"Ygerna\", \"Ygraine\", \"Yishana\", \"Ynryc\", \"Ynvar\", \"Yoda\", \"Yolanda\", \"Yondalla\", \"York\",\r\n    \"Yradry\", \"Yreoddyn\", \"Yrrkoon\", \"Yrsa\", \"Yrun\", \"Yryllyn\", \"Ysabel\", \"Ysgerryn\", \"Ysolde\", \"Yuri\", \"Yvain\", \"Yvette\", \"Yvonne\",\r\n    \"Yvyr\", \"Yénisar\", \"Yérusha\", \"Zabdiel\", \"Zacarias\", \"Zachary\", \"Zachris\", \"Zadock\", \"Zahara\", \"Zahra\", \"Zaidh\", \"Zalazar\", \"Zalbar\",\r\n    \"Zan\", \"Zandra\", \"Zanifa\", \"Zanthar\", \"Zara\", \"Zaranthe\", \"Zared\", \"Zarimarth\", \"Zarquan\", \"Zathras\", \"Zavel\", \"Zaviv\", \"Zay\",\r\n    \"Zazumel\", \"Zebalane\", \"Zebulon\", \"Zehir\", \"Zelda\", \"Zemenar\", \"Zenda\", \"Zendrac\", \"Zenith\", \"Zenobia\", \"Zenon\", \"Zepher\", \"Zephyr\",\r\n    \"Zerika\", \"Zerin\", \"Zeswick\", \"Zhalore\", \"Zhanna\", \"Zharvek\", \"Zhenya\", \"Zhirek\", \"Zhirem\", \"Zhoreb\", \"Zia\", \"Zigmal\", \"Zilar\",\r\n    \"Zinaida\", \"Zincir\", \"Zion\", \"Ziona\", \"Zircon\", \"Zirzihin\", \"Zita\", \"Zoe\", \"Zolabar\", \"Zoltan\", \"Zona\", \"Zora\", \"Zorashad\",\r\n    \"Zorayas\", \"Zorlan\", \"Zosia\", \"Zotar\", \"Zumurrud\", \"Zurrog\", \"Zykhiralamshad\"];\r\n  makeArrays();\r\n}\r\n\r\n/**\r\n * EWIJSON by Zynj\r\n */\r\nconsole.log(`Turn: ${info.actionCount}`)\r\nif (!state.data) { state.data = {} }\r\nlet dataStorage = state.data;\r\nlet contextMemoryLength = 0; // Keep count of additional context added.\r\nif (!state.generate) { state.generate = {} }\r\nif (!state.settings) { state.settings = {} }\r\nif (!state.settings.globalWhitelist) { state.settings.globalWhitelist = [] }\r\nconst DefaultSettings = {\r\n  'cross': false,\r\n  'filter': false,\r\n  'mode': true,\r\n}\r\nfor (const setting in DefaultSettings) { if (!state.settings.hasOwnProperty(setting)) { state.settings[setting] = DefaultSettings[setting] } }\r\n\r\nconst Expressions = {\r\n\r\n  \"invalid\": /(((\"|')[^\"']*(\"|'):)\\s*({}|null|\"\")),?\\s*/g,\r\n  \"clean\": /,\\s*(?=})/g,\r\n  \"listener\": /<l=[^>]*>|<\\/l>/g,\r\n  \"placeholder\": /\\$\\{[^{}]*}/g,\r\n  \"attributes\": /(\\w(=+-*\\d*)?)/g,\r\n  \"split\": /=+/,\r\n  \"EWI\": /#\\[.*\\]$/,\r\n  \"flags\": /(?<=^\\/.*\\/)([ygmiu]+)/,\r\n  \"expectFlags\": /(?<=^\\/.*\\/)/\r\n}\r\n\r\nstate.config = {\r\n  prefix: /\\n? ?(?:> You |> You say \"|)\\/(.+?)[\"]?[.]?\\n?$/i,\r\n  prefixSymbol: '/',\r\n  libraryPath: '_exp',\r\n  whitelistPath: '_whitelist',\r\n  synonymsPath: '_synonyms',\r\n  configPath: '_config',\r\n  wildcardPath: '/*',\r\n  pathSymbol: '.',\r\n  openListener: '<l',\r\n  closeListener: '</l>'\r\n}\r\nlet { cross } = state.settings;\r\nconst { whitelistPath, synonymsPath, pathSymbol, wildcardPath, configPath, libraryPath, openListener, closeListener } = state.config;\r\nconst Paths = [whitelistPath, synonymsPath, libraryPath];\r\n\r\nconst filter = (arr, by, restrict) => {\r\n\r\n  const hash = {};\r\n  const result = [];\r\n  arr.forEach(el => {\r\n    const value = el.metadata.attributes.find(e => by.some(b => b == e[0]));\r\n    const restricted = el.metadata.attributes.find(e => e[0] == restrict);\r\n\r\n    if (value) {\r\n\r\n      if (!hash[value[1]]) {\r\n        hash[value[1]] = {\r\n          \"elements\": []\r\n        };\r\n        result.push(hash[value[1]]);\r\n      };\r\n\r\n      if (restricted && !hash[value[1]].hasOwnProperty('limit')) {\r\n        hash[value[1]].limit = restricted[1]\r\n      }\r\n      if (!hash[value[1]].hasOwnProperty('limit') || (hash[value[1]].elements.length < hash[value[1]].limit)) {\r\n        hash[value[1]].elements.push(el);\r\n      }\r\n    } else {\r\n      result.push([el])\r\n    };\r\n  });\r\n\r\n  return result.map(e => e.elements || e);\r\n\r\n}\r\nconst getRandomObjects = (arr) => {\r\n\r\n  return filter(arr, ['r']).map(e => {\r\n    const find = e.filter(x => x.metadata?.random?.picked);\r\n    // If multiple previous picks are present, reset their status and re-roll from the batch.\r\n    if (find.length == 1 && (find[0].metadata.random.action == info.actionCount || !getHistoryString(-1).includes(find[0].metadata.matches[0]))) { return [find[0]] }\r\n    else { if (find.length > 0) { find.forEach(e => e.metadata.random.picked = false); } return e };\r\n  }).map(e => {\r\n    if (e.length > 1) {\r\n      const random = e[Math.floor(Math.random() * e.length)];\r\n      random.metadata.random = { \"picked\": true };\r\n      random.metadata.random.action = info.actionCount;\r\n      return random\r\n    }\r\n    else { return e[0] }\r\n  });\r\n};\r\n\r\n//https://stackoverflow.com/questions/61681176/json-stringify-replacer-how-to-get-full-path\r\nconst replacerWithPath = (replacer) => { let m = new Map(); return function (field, value) { let path = m.get(this) + (Array.isArray(this) ? `[${field}]` : '.' + field); if (value === Object(value)) m.set(value, path); return replacer.call(this, field, value, path.replace(/undefined\\.\\.?/, '')); } }\r\nconst worldEntriesFromObject = (obj, root) => {\r\n  JSON.stringify(obj, replacerWithPath(function (field, value, path) {\r\n    if (typeof value != 'object') {\r\n      const index = worldInfo.findIndex(e => e[\"keys\"] == `${root}.${path}`.replace(/^\\.*|\\.$/g, ''));\r\n      index >= 0 ? updateWorldEntry(index, `${root}.${path}`.replace(/^\\.*|\\.$/g, ''), value.toString(), hidden = false) : addWorldEntry(`${root}.${path}`.replace(/^\\.*|\\.$/g, ''), value.toString(), hidden = false);\r\n    }\r\n    return value;\r\n  }));\r\n}\r\nconst getHistoryString = (start, end = undefined) => history.slice(start, end).map(e => e[\"text\"]).join('\\n') // Returns a single string of the text.\r\nconst getHistoryText = (start, end = undefined) => history.slice(start, end).map(e => e[\"text\"]) // Returns an array of text.\r\nconst getActionTypes = (turns) => history.slice(turns).map(e => e[\"type\"]) // Returns the action types of the previous turns in an array.\r\n\r\n\r\n// Ensure that '_synonyms' is processed first in the loop. It's executed if (Object.keys(dataStorage)[0] != synonymsPath)\r\nconst fixOrder = () => {\r\n  dataStorage = Object.assign({ \"_whitelist\": {}, \"_synonyms\": {} }, dataStorage);\r\n  state.data = dataStorage;\r\n}\r\n\r\n// Consider implementing a negative 'every' check for 'do not match' instances, expression prefixed by '!'\r\nconst regExMatch = (keys, text = undefined) => {\r\n  if (typeof keys != 'string') { console.log(`Invalid Expressions: ${keys}`); return }\r\n  // Test the multi-lines individually, last/bottom line qualifying becomes result.\r\n  const array = keys.split(/\\n/g);\r\n  const result = [];\r\n  let key = '';\r\n  try {\r\n    array.forEach(line => {\r\n      const string = text ? text : getSlice(line, state.settings.mode).join('\\n')\r\n      const expressions = line.slice(0, /#\\[.*\\]/.test(line) ? line.lastIndexOf('#') : line.length).split(/(?<!\\\\),/g);\r\n\r\n      if (expressions.every(exp => {\r\n        const regExRaw = exp;\r\n        const regExString = regExRaw.replace(/(^\\/)|(\\/.*)$/g, '').replace(/\\\\,/, '');\r\n        const regExFlags = Expressions[\"flags\"].test(regExRaw) ? [...new Set([...regExRaw.match(Expressions[\"flags\"]).join('').split(''), 'g'])].join('') : Expressions[\"expectFlags\"].test(regExRaw) ? 'g' : 'gi';\r\n        const regEx = new RegExp(regExString, regExFlags);\r\n        return regEx.test(string);\r\n      })) {\r\n        key = line;\r\n        const regExRawLast = expressions.pop();\r\n        const regExString = regExRawLast.replace(/(^\\/)|(\\/.*)$/g, '').replace(/\\\\,/, '');\r\n        const regExFlags = Expressions[\"flags\"].test(regExRawLast) ? [...new Set([...regExRawLast.match(Expressions[\"flags\"]).join('').split(''), 'g'])].join('') : Expressions[\"expectFlags\"].test(regExRawLast) ? 'g' : 'gi'\r\n        const regEx = new RegExp(regExString, regExFlags);\r\n        result.push([...string.matchAll(regEx)].filter(Boolean).pop());\r\n      }\r\n    })\r\n  }\r\n  catch (error) {\r\n    console.log(`In regExMatch:\\n${error.name}: ${error.message}`);\r\n    state.message = `In regExMatch:\\n${error.name}: ${error.message}`;\r\n\r\n  }\r\n  return [result.length > 0 ? result.pop().filter(Boolean) : undefined, key]\r\n}\r\n\r\n\r\nconst getAttributes = (string) => { const regEx = new RegExp(String.raw`(${Object.keys(Attributes).sort((a, b) => b.length - a.length).join('|')})(=+-*\\d*)?`, 'g'); const index = string.search(Expressions[\"EWI\"]); if (index >= 0) { const match = string.slice(index).match(regEx); if (Boolean(match)) { const result = match.map(e => e.includes('=') ? e.split(Expressions[\"split\"]) : [e, 0]).map(e => [e[0], Number(e[1])]); return result; } } }\r\nconst lens = (obj, path) => path.split('.').reduce((o, key) => o && o[key] ? o[key] : null, obj);\r\nconst replaceLast = (x, y, z) => { let a = x.split(\"\"); let length = y.length; if (x.lastIndexOf(y) != -1) { for (let i = x.lastIndexOf(y); i < x.lastIndexOf(y) + length; i++) { if (i == x.lastIndexOf(y)) { a[i] = z; } else { delete a[i]; } } } return a.join(\"\"); }\r\nconst getMemory = (text) => { return info.memoryLength ? text.slice(0, info.memoryLength) : '' } // If memoryLength is set then slice of the beginning until the end of memoryLength, else return an empty string.\r\nconst getContext = (text) => { return info.memoryLength ? text.slice(info.memoryLength) : text } // If memoryLength is set then slice from the end of memory to the end of text, else return the entire text.\r\n\r\n// Extract the last cluster in the RegEx' AND check then filter out non-word/non-whitespace symbols to TRY and assemble the intended words.\r\nconst addDescription = (entry, value = 0) => {\r\n  const result = entry.metadata.matches.pop()\r\n  let search = lines.join('\\n');\r\n  // Find a match for the last expression and grab the most recent word for positioning. Filter out undefined/false values.\r\n  if (search.includes(result) && result && !Boolean(value)) {\r\n    search = search.slice(0, search.toLowerCase().lastIndexOf(result.toLowerCase())) + result.slice(0, -result.length) + entry[\"entry\"] + ' ' + (result) + search.slice(search.toLowerCase().lastIndexOf(result.toLowerCase()) + result.length)\r\n    lines = search.split('\\n');\r\n  }\r\n  else if (search.includes(result) && result && Boolean(value)) {\r\n    search = search.slice(0, search.toLowerCase().lastIndexOf(result.toLowerCase()) + result.length) + ' ' + entry[\"entry\"] + search.slice(search.toLowerCase().lastIndexOf(result.toLowerCase()) + result.length)\r\n    lines = search.split('\\n');\r\n  }\r\n}\r\n\r\n// Reference to Object is severed during processing, so index it instead.\r\nconst addAuthorsNote = (entry, value = 0) => state.memory.authorsNote = `${entry[\"entry\"]}`\r\nconst showWorldEntry = (entry, value = 0) => entry.hidden = false;\r\nconst addPositionalEntry = (entry, value = 0) => { spliceContext((Boolean(value) ? -(value) : copyLines.length), entry[\"entry\"]); }\r\nconst addMemoryEntry = (entry, value = 0) => {\r\n  if ((info.memoryLength + contextMemoryLength + entry[\"entry\"].length) < (info.maxChars / 2)) {\r\n    spliceMemory(Boolean(value) ? -(value) : (memoryLines.length - 1), entry[\"entry\"]);\r\n  }\r\n\r\n}\r\nconst getRange = (list) => list ? list.find(e => e[0] == 'l') || [undefined, undefined] : [undefined, undefined];\r\nconst getSlice = (string, mode = true) => {\r\n  const attributes = getAttributes(string);\r\n  const length = getRange(attributes);\r\n\r\n  if (mode) {\r\n    let measure = 0;\r\n    const compare = copyLines.length;\r\n    let actions = 0;\r\n\r\n    for (let i = history.length - 1; i >= 0; i--) {\r\n      const test = history[i][\"text\"].split('\\n')\r\n      if (test.length + measure <= compare) {\r\n        measure += test.length;\r\n        actions++;\r\n      }\r\n      else { if (copyLines.some(l => history[i][\"text\"].includes(l))) { actions++ } break; }\r\n    }\r\n\r\n    return getHistoryText(length[1] > 0 ? -length[1] : -actions, length[1] >= 0 ? history.length : length[1])\r\n  }\r\n\r\n  else { return lines.slice(length[1] > 0 ? -length[1] : 0, length[1] >= 0 ? lines.length : length[1]); }\r\n}\r\n\r\nconst getLineIndex = (find, range) => {\r\n  let result;\r\n  if (range > 0) { for (let i = copyLines.length - copyLines.slice(-range).length; i < copyLines.length; i++) { if (copyLines[i].includes(find)) { result = i; } } }\r\n  else if (range < 0) { for (let i = 0; i < copyLines.length + range; i++) { if (copyLines[i].includes(find)) { result = i; } } }\r\n  else { copyLines.forEach((l, i) => { if (l.includes(find)) { result = i; } }) }\r\n  return result\r\n}\r\n\r\nconst addTrailingEntry = (entry, value = 0) => {\r\n\r\n  const { attributes, matches } = entry.metadata;\r\n\r\n  const range = getRange(attributes);\r\n  const find = matches[0];\r\n  const index = getLineIndex(find, range[1]);\r\n  if (index >= 0) { spliceContext((index - value) >= 0 ? index - value : 0, entry[\"entry\"]) }\r\n\r\n  return;\r\n}\r\n\r\nconst addAustralianKangaroo = (entry, value = 0) => spliceContext(-1, '[A polite Australian kangaroo pulls a top-hat out of its pouch before greeting you.]');\r\n\r\n\r\nconst Attributes = {\r\n  'a': addAuthorsNote, // [a] adds it as authorsNote, only one authorsNote at a time.\r\n  'd': addDescription, // [d] adds the first sentence of the entry as a short, parenthesized descriptor to the last mention of the revelant keyword(s) e.g John (a business man)\r\n  'f': () => { }, // [e] filters and limits the amount of simultaneous attribute activations.\r\n  'i': () => { }, // [i] Ignores the entry if present.\r\n  'l': () => { },\r\n  'm': addMemoryEntry,\r\n  'p': addPositionalEntry, // Inserts the <entry> <value> amount of lines into context, e.g [p=1] inserts it one line into context.\r\n  'r': () => { }, // [r] picks randomly between entries with the same matching keys. e.g 'you.*catch#[rp=1]' and 'you.*catch#[rd]' has 50% each to be picked.\r\n  's': showWorldEntry, // [r] reveals the entry once mentioned, used in conjuction with [e] to only reveal if all keywords are mentioned at once.\r\n  't': addTrailingEntry, // [t] adds the entry at a line relative to the activator in context. [t=2] will trail context two lines behind the activating word.\r\n  'w': () => { }, // [w] assigns the weight attribute, the higher value the more recent/relevant it will be in context/frontMemory/intermediateMemory etc.\r\n  'x': () => { }, // [x] ignores the entry if not X amount of rounds have processed.\r\n  'australiankangaroo': addAustralianKangaroo\r\n}\r\n\r\nconst getWhitelist = () => { const index = getEntryIndex('_whitelist.'); return index >= 0 ? worldInfo[index][\"entry\"].split(/,|\\n/g).map(e => e.trim()) : [] }\r\nconst getWildcard = (display, offset = 0) => { const wildcard = display.split('.').slice(offset != 0 ? 0 : 1).join('.'); const list = display.split('.'); const index = list.indexOf(wildcard.slice(wildcard.lastIndexOf('.') + 1)); return [list[index].replace(wildcardPath, ''), index + offset] }\r\nconst getPlaceholder = (value) => typeof value == 'string' ? value.replace(Expressions[\"placeholder\"], match => dataStorage[libraryPath][match.replace(/\\$\\{|\\}/g, '')]) : value\r\nconst updateListener = (value, display, visited) => {\r\n  // Check if it has previously qualified in 'visited' instead of running regExMatch on each node.\r\n  const qualified = visited.some(e => e.includes(display.split('.')[0]));\r\n  if (qualified) {\r\n    const array = value.split(/(?<!\\\\),/g)\r\n    const result = array.map(e => {\r\n      const find = e.match(/(?<=<l=)[^>]*(?=>)/g)\r\n      if (find) {\r\n        const expression = getPlaceholder(find[0])\r\n        const match = regExMatch(`${expression}`)\r\n        if (Boolean(match[0])) { return e.replace(/(?<=>)[^<]*(?=<)/g, match[0][0]) }\r\n        else { return e }\r\n\r\n      }\r\n      else { return e }\r\n    })\r\n\r\n    const keys = display.toLowerCase().trim()\r\n    const setKeys = display.includes('.') ? keys : `${keys}.`;\r\n    const setValue = result.join(',')\r\n    const index = getEntryIndex(setKeys);\r\n    index >= 0 ? updateWorldEntry(index, setKeys, setValue, hidden = false) : addWorldEntry(setKeys, setValue, hidden = false)\r\n\r\n  }\r\n}\r\n\r\nconst globalReplacer = () => {\r\n\r\n  const paths = [];\r\n  const search = lines.join('\\n')\r\n  // Toggle the wildcard state to search down full path.\r\n  // If the current path does not include the wildcard path, toggle it to false.\r\n  let wildcards = [];\r\n  const visited = [];\r\n  const whitelist = getWhitelist().map(e => {\r\n    if (e.includes(wildcardPath)) { wildcards.push(getWildcard(e, 1)); return e.replace(wildcardPath, ''); }\r\n    else { return e.split('.') }\r\n  }).flat();\r\n\r\n\r\n  //console.log(`Wildcards: ${wildcards}`)\r\n  function replacer(replace) {\r\n    let m = new Map();\r\n    return function (key, value) {\r\n      let path = m.get(this) + (Array.isArray(this) ? `[${key}]` : '.' + key);\r\n      let display = path.replace(/undefined\\.\\.?/, '')\r\n      const root = display.split('.')[0]\r\n\r\n      // Find and store whether the Object qualifies to avoid repeated calls to regExMatch.\r\n      // Without this, it'll call regExMatch for each node. While with this one may run:\r\n      // visited.some(e => e.includes(node))\r\n      if (dataStorage.hasOwnProperty(root) && dataStorage[root].hasOwnProperty(synonymsPath) && !visited.some(e => e[0].includes(root))) {\r\n        const match = regExMatch(getPlaceholder(dataStorage[root][synonymsPath]))\r\n\r\n        if (Boolean(match[0])) { visited.push([root, match[0][0]]) }\r\n      }\r\n\r\n      if (value === Object(value)) { m.set(value, path); }\r\n\r\n      const final = replace.call(this, key, value, display);\r\n      let current;\r\n\r\n      if (Boolean(key) && (whitelist.includes(key))) {\r\n        if (typeof value == 'string' && value.includes(closeListener)) { updateListener(value, display, visited); }\r\n      }\r\n\r\n      else if (typeof value == 'string') {\r\n        // Only match paths in `_synonyms`.\r\n        const match = display.startsWith(synonymsPath) ? regExMatch(getPlaceholder(value)) : undefined;\r\n        if (value.includes(closeListener)) { updateListener(value, display, visited); }\r\n        // Key is a wildcard and its value qualifies the regEx match.\r\n        if (key.includes(wildcardPath) && Boolean(value) && Boolean(match[0])) { wildcards.push(getWildcard(display)) }\r\n        // The current path contains one of the wildcards.\r\n        else if (wildcards.some(e => { if (display.split('.')[e[1]] == e[0]) { current = e[0]; return true } })) {\r\n          const array = display.split('.');\r\n          paths.push([array, 0]);\r\n        }\r\n        else if (display.startsWith(synonymsPath) && Boolean(value) && Boolean(match[0])) { paths.push([display.split('.'), lines.join('\\n').lastIndexOf(match[0][match[0].length - 1])]); }\r\n\r\n      }\r\n      return final;\r\n    }\r\n  }\r\n\r\n\r\n  JSON.stringify(dataStorage, replacer(function (key, value, path) { return value; }));\r\n  return [...new Set([...whitelist, ...paths.sort((a, b) => a[1] - b[1]).map(e => e[0]).flat()])].filter(e => !Paths.includes(e)).map(e => e.replace(wildcardPath, ''))\r\n}\r\n\r\n// globalWhitelist - Should only make one call to it per turn in context modifiers. Other modifiers access it via state.\r\nconst getGlobalWhitelist = () => state.settings.globalWhitelist = globalReplacer();\r\nconst setProperty = (keys, value, obj) => { const property = keys.split('.').pop(); const path = keys.split('.')[1] ? keys.split('.').slice(0, -1).join('.') : keys.replace('.', ''); if (property[1]) { getKey(path, obj)[property] = value ? value : null; } else { dataStorage[path] = value; } }\r\nconst getKey = (keys, obj) => { return keys.split('.').reduce((a, b) => { if (typeof a[b] != \"object\" || a[b] == null) { a[b] = {} } if (!a.hasOwnProperty(b)) { a[b] = {} } return a && a[b] }, obj) }\r\n\r\nconst buildObjects = () => {\r\n\r\n  // Consume and process entries whose keys start with '!' or contains '.' and does not contain a '#'.\r\n  const regEx = /(^!|\\.)(?!.*#)/\r\n  worldInfo.filter(wEntry => regEx.test(wEntry[\"keys\"])).forEach(wEntry => {\r\n    if (wEntry[\"keys\"].startsWith('!')) {\r\n      const root = wEntry[\"keys\"].match(/(?<=!)[^.]*/)[0];\r\n      try {\r\n        // Parse the contents into an Object.\r\n        const object = JSON.parse(wEntry[\"entry\"].match(/{.*}/)[0]);\r\n        // Remove the parsed entry to prevent further executions of this process.\r\n        removeWorldEntry(worldInfo.indexOf(wEntry));\r\n        // Build individual entries of the Object into worldEntries.\r\n        worldEntriesFromObject(object, root);\r\n        // Re-process entries that begin with the exact root path.\r\n        state.message = `Built Objects from !${root}.`\r\n        worldInfo.filter(e => e[\"keys\"].split('.')[0] == root).forEach(wEntry => setProperty(wEntry[\"keys\"].split(',').filter(e => e.includes('.')).map(e => e.trim()).join(''), wEntry[\"entry\"], dataStorage))\r\n      }\r\n      catch (error) {\r\n        console.log(error);\r\n        state.message = `Failed to parse implicit conversion of !${root}. Verify the entry's format!`\r\n      }\r\n    }\r\n    else { setProperty(wEntry[\"keys\"].split(',').filter(e => e.includes('.')).map(e => e.trim()).join(''), wEntry[\"entry\"], dataStorage); }\r\n\r\n  })\r\n}\r\n\r\nconst sanitizeWhitelist = () => { const index = worldInfo.findIndex(e => e[\"keys\"].includes(whitelistPath)); if (index >= 0) { worldInfo[index][\"keys\"] = whitelistPath + '.'; } }\r\nconst trackRoots = () => { const list = Object.keys(dataStorage); const index = worldInfo.findIndex(e => e[\"keys\"] == 'rootList'); if (index < 0) { addWorldEntry('rootList', list, hidden = false) } else { updateWorldEntry(index, 'rootList', list, hidden = false) } }\r\n\r\n// spliceContext takes a position to insert a line into the full context (memoryLines and lines combined) then reconstructs it with 'memory' taking priority.\r\n// TODO: Sanitize and add counter, verify whether memory having priority is detrimental to the structure - 'Remember' should never be at risk of ommitance.\r\nconst spliceContext = (pos, string) => {\r\n\r\n  const linesLength = lines.join('\\n').length\r\n  const memoryLength = memoryLines.join('\\n').length\r\n\r\n  let adjustedLines = 0;\r\n  if ((linesLength + memoryLength) + string.length > info.maxChars && false) {\r\n    const adjustor = lines.join('\\n').slice(string.length).split('\\n');\r\n    adjustedLines = lines.length - adjustor.length;\r\n    lines = adjustor;\r\n  }\r\n\r\n  lines.splice(pos ? pos : 0, 0, string);\r\n  //lines.splice(pos - adjustedLines >= 0 ? pos - adjustedLines : pos, 0, string)\r\n  return\r\n}\r\n\r\nconst spliceMemory = (pos, string) => {\r\n  contextMemoryLength += string.length;\r\n  memoryLines.splice(pos, 0, string);\r\n  return\r\n\r\n}\r\n\r\nconst cleanString = (string) => string.replace(/\\\\/g, ' ').replace(Expressions[\"listener\"], '').replace(Expressions[\"invalid\"], '').replace(Expressions[\"clean\"], '');\r\nconst insertJSON = () => {\r\n\r\n  // Cleanup edge-cases of empty Objects in the presented string.\r\n  const { globalWhitelist } = state.settings;\r\n  console.log(`Global Whitelist: ${globalWhitelist}`)\r\n\r\n  const list = []\r\n  for (const data in dataStorage) {\r\n\r\n    if (typeof dataStorage[data] == 'object') {\r\n      if (!dataStorage[data].hasOwnProperty(synonymsPath)) { dataStorage[data][synonymsPath] = `${data}#[t]` }\r\n      let string = cleanString(JSON.stringify(dataStorage[data], globalWhitelist));\r\n      if (state.settings[\"filter\"]) { string = string.replace(/\"|{|}/g, ''); }\r\n      if (string.length > 4) {\r\n        const object = { \"keys\": dataStorage[data][synonymsPath].split('\\n').map(e => !e.includes('#') ? e + '#[t]' : e).join('\\n'), \"entry\": `[${string}]`, \"metadata\": { \"isObject\": true } }\r\n        list.push(object)\r\n      }\r\n    }\r\n  }\r\n  if (list.length > 0) { preprocess(list) };\r\n}\r\n\r\nconst getEWI = () => { return worldInfo.filter(e => Expressions[\"EWI\"].test(e[\"keys\"])) }\r\nconst processEWI = () => preprocess(getEWI());\r\nconst execAttributes = (object) => {\r\n\r\n  const { attributes } = object.metadata;\r\n  const ignore = attributes.find(e => e[0] == 'x');\r\n  if (((ignore ? ignore[1] < history.length : true) && attributes.length > 0) && (object.metadata.hasOwnProperty('ignore') ? object.metadata.ignore.count > 0 : true)) {\r\n\r\n    try { attributes.forEach(pair => { Attributes[pair[0]](object, pair[1]) }) }\r\n    catch (error) { console.log(`${error.name}: ${error.message}`) }\r\n  }\r\n}\r\n\r\n// Sort all Objects/entries by the order of most-recent mention before processing.\r\n// expects sortList to be populated by Objects with properties {\"key\": string, \"entry\": string}\r\nconst preprocess = (list) => {\r\n  const search = copyLines.join('\\n');\r\n  const attributed = list.map(e => {\r\n    const match = regExMatch(getPlaceholder(e[\"keys\"]));\r\n    if (!e.hasOwnProperty('metadata')) { e.metadata = {}; };\r\n    if (Boolean(match[0])) {\r\n      e.metadata.index = search.lastIndexOf(match[0][match[0].length - 1]);\r\n      e.metadata.qualifier = match[1];\r\n      e.metadata.matches = match[0];\r\n      e.metadata.attributes = getAttributes(match[1]).filter(a => { if (Attributes.hasOwnProperty(a[0])) { return true } else { state.message += `[${a[0]}] is an invalid attribute!\\n`; return false } });\r\n      const ignore = e.metadata.attributes.find(a => a[0] == 'i');\r\n      if (ignore) {\r\n        if (!e.metadata.hasOwnProperty('ignore')) {\r\n          e.metadata.ignore = { \"original\": ignore[1], \"count\": ignore[1], \"turn\": [] }\r\n        }\r\n\r\n        if (ignore[1] != e.metadata.ignore.original) {\r\n          e.metadata.ignore.original == ignore[1];\r\n          e.metadata.ignore.count = ignore[1];\r\n        }\r\n\r\n        if (!(e.metadata.ignore.turn.some(t => t == info.actionCount)) && getHistoryString(-1).includes(e.metadata.matches[0])) {\r\n          e.metadata.ignore.count--;\r\n          e.metadata.ignore.turn.push(info.actionCount);\r\n        }\r\n\r\n        if (e.metadata.ignore.turn.some(t => t > info.actionCount)) {\r\n          const refund = e.metadata.ignore.turn.filter(t => t > info.actionCount);\r\n          e.metadata.ignore.count += refund.length;\r\n          refund.forEach(t => e.metadata.ignore.turn.splice(e.metadata.ignore.turn.indexOf(t), 1));\r\n        }\r\n      }\r\n      e.metadata.lastSeen = info.actionCount;\r\n      return e;\r\n    }\r\n\r\n  }).filter(Boolean)\r\n\r\n  // TODO: Optimize this section.\r\n  const randomized = getRandomObjects(attributed).filter(e => Expressions[\"EWI\"].test(e.metadata.qualifier));\r\n  const sorted = randomized.sort((a, b) => b.metadata.index - a.metadata.index);\r\n  const filtered = filter(sorted, Object.keys(Attributes).filter(a => Attributes[a].toString() != '() => {}'), 'f').flat();\r\n  filtered.forEach(e => { execAttributes(e); });\r\n}\r\n\r\n/*  Cross Lines pulls eligble World Information if its keywords are found within a JSON-line that is present in the context. \r\n    Insertions are done strictly through the memoryLines section of the context.\r\n    TODO: Enable attributes for the EWI entries.\r\n*/\r\nconst crossLines = () => {\r\n  const JSONLines = lines.filter(line => /\\[\\{.*\\}\\]/.test(line));\r\n  const JSONString = JSONLines.join('\\n');\r\n  worldInfo.forEach(e => {\r\n    if (!Object.keys(dataStorage).includes(e[\"keys\"].split('.')[0]) && !e[\"keys\"].startsWith('!')) // Handle regular entries - EWI likely fails test.\r\n    {\r\n      if (Boolean(regExMatch(e[\"keys\"], JSONString)[0]) && !text.includes(e[\"entry\"])) {\r\n        if (info.memoryLength + contextMemoryLength + e[\"entry\"].length <= info.maxChars / 2) {\r\n          spliceMemory(memoryLines.length - 1, e[\"entry\"]);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nconst parseAsRoot = (text, root) => {\r\n  const toParse = text.match(/{.*}/g);\r\n  if (toParse) {\r\n    toParse.forEach(string => {\r\n      const obj = JSON.parse(string);\r\n      worldEntriesFromObject(obj, root);\r\n      text = text.replace(string, '');\r\n    });\r\n  }\r\n}\r\n\r\nconst getEntryIndex = (keys) => worldInfo.findIndex(e => e[\"keys\"].toLowerCase() == keys.toLowerCase());\r\nconst updateHUD = () => {\r\n  const { globalWhitelist } = state.settings;\r\n  state.displayStats.forEach((e, i) => {\r\n    if (dataStorage.hasOwnProperty(e[\"key\"].trim())) {\r\n      state.displayStats[i] = {\r\n        \"key\": `${e[\"key\"].trim()}`,\r\n        \"value\": `${cleanString(JSON.stringify(dataStorage[e[\"key\"].trim()], globalWhitelist)).replace(/\\{|\\}/g, '')}    `\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nstate.commandList = {\r\n  scenarioHelp: {\r\n    name: \"scenarioHelp\",\r\n    description: \"Prints a list of commands\",\r\n    args: false,\r\n    usage: `Really? You need help with the help command and expected this to work? I don't blame you. Hit me at AIDcord for help.`,\r\n    execute: (args) => {\r\n      console.log(`Begin help command.`);\r\n      let availableCommands = '';\r\n      Object.keys(state.commandList).forEach(key => {\r\n        availableCommands += ` ${state.commandList[key].name}`\r\n      });\r\n\r\n      availableCommands = availableCommands.trim().replace(/\\s/g, ', ');\r\n      console.log(`Begin help command.`);\r\n      if (args == '') {\r\n        state.message = `List of available commands: ${availableCommands}`;\r\n      } else if ((!(args in commandList))) {\r\n        state.message = `This command was not found. List of available commands: ${availableCommands}`;\r\n      } else {\r\n        let cmd = commandList[args];\r\n        state.message = `Example: /${cmd.name} ${cmd.usage}\\n${cmd.description}`;\r\n      }\r\n\r\n      console.log(`End help command.`);\r\n    }\r\n  },\r\n  ewiSet: {\r\n    name: 'ewiSet',\r\n    description: \"Sets or updates a World Entry's keys and entry to the arguments given in addition to directly updating the object.\",\r\n    args: true,\r\n    usage: '<root>.<property> <value>',\r\n    execute: (args) => {\r\n      const keys = args[0].trim()\r\n      const setKeys = keys.includes('.') ? keys : `${keys}.`;\r\n      const setValue = args.slice(1).join(' ');\r\n      const index = getEntryIndex(setKeys);\r\n\r\n      index >= 0 ? updateWorldEntry(index, setKeys, setValue, hidden = false) : addWorldEntry(setKeys, setValue, hidden = false)\r\n      state.message = `Set ${setKeys} to ${setValue}!`\r\n      if (state.displayStats) { updateHUD(); }\r\n      return\r\n    }\r\n  },\r\n  ewiGet: {\r\n    name: 'ewiGet',\r\n    description: \"Fetches and displays the properties of an object.\",\r\n    args: true,\r\n    usage: '<root> or <root>.<property>',\r\n    execute: (args) => {\r\n      const path = args.join('').trim();\r\n      if (dataStorage && dataStorage.hasOwnProperty(args[0].split('.')[0].trim())) {\r\n        state.message = `Data Sheet for ${path}:\\n${JSON.stringify(lens(dataStorage, path), null)}`;\r\n      } else {\r\n        state.message = `${path} was invalid!`;\r\n      }\r\n\r\n      return;\r\n    }\r\n  },\r\n  ewiDelete: {\r\n    name: 'ewiDelete',\r\n    description: 'Deletes all dot-separated entries that match the provided argument.',\r\n    args: true,\r\n    usage: '<root> or <root>.<path>',\r\n    execute: (args) => {\r\n      const keys = args[0].toLowerCase().trim();\r\n      const setKeys = keys.includes('.') ? keys : `${keys}.`;\r\n      worldInfo.filter(e => e[\"keys\"].toLowerCase().startsWith(setKeys)).forEach(e => removeWorldEntry(worldInfo.indexOf(e)))\r\n      state.message = `Deleted all entries matching: ${keys}`;\r\n    }\r\n  },\r\n  ewiShow: {\r\n    name: 'ewiShow',\r\n    description: \"Shows entries starting with the provided argument in World Information.\",\r\n    args: true,\r\n    usage: '<root> or <root>.<property>',\r\n    execute: (args) => {\r\n      const keys = args[0].toLowerCase()\r\n      worldInfo.forEach(e => {\r\n        if (e[\"keys\"].toLowerCase().startsWith(keys)) {\r\n          e[\"hidden\"] = false;\r\n        }\r\n      });\r\n\r\n      state.message = `Showing all entries starting with ${keys} in World Information!`;\r\n      return\r\n    }\r\n  },\r\n  ewiHide: {\r\n    name: 'ewiHide',\r\n    description: \"Hides entries starting with the provided argument in World Information.\",\r\n    args: true,\r\n    usage: '<root> or <root>.<property>',\r\n    execute: (args) => {\r\n      const keys = args[0].toLowerCase()\r\n      worldInfo.forEach(e => {\r\n        if (e[\"keys\"].toLowerCase().startsWith(keys)) {\r\n          e[\"hidden\"] = true;\r\n        }\r\n      })\r\n\r\n      state.message = `Hiding all entries starting with ${keys} in World Information!`;\r\n      return\r\n    }\r\n  },\r\n  ewiCross: {\r\n    name: 'ewiCross',\r\n    description: `Toggles fetching of World Information from JSON Lines: ${state.settings[\"cross\"]}`,\r\n    args: false,\r\n    execute: (args) => {\r\n      state.settings[\"cross\"] = !state.settings[\"cross\"];\r\n      state.message = `World Information from JSON Lines: ${state.settings[\"cross\"]}`\r\n      return\r\n    }\r\n  },\r\n  ewiFilter: {\r\n    name: 'ewiFilter',\r\n    description: `Toggles the filtering of quotation and curly-brackets within JSON lines: ${state.settings[\"filter\"]}\\nSaves character count, but may have detrimental effects.`,\r\n    args: false,\r\n    execute: (args) => {\r\n      state.settings[\"filter\"] = !state.settings[\"filter\"];\r\n      state.message = `'\"{}' filter set to ${state.settings[\"filter\"]}`\r\n      return\r\n    }\r\n  },\r\n  ewiFrom: {\r\n    name: \"ewiFrom\",\r\n    description: 'Creates an Object with the given root from the passed JSON- line.',\r\n    args: true,\r\n    usage: '<root> <JSON- Line/Object>',\r\n    execute: (args) => {\r\n      const obj = args.slice(1).join(' ')\r\n      const root = args[0]\r\n      parseAsRoot(obj, root)\r\n      state.message = `Created Object '${root}' from ${obj}!`\r\n    }\r\n  },\r\n  ewiHud: {\r\n    name: \"ewiHud\",\r\n    description: \"Tracks the Object in the HUD\",\r\n    args: true,\r\n    usage: '<root>',\r\n    execute: (args) => {\r\n      if (!state.displayStats) {\r\n        state.displayStats = []\r\n      }\r\n\r\n      const { globalWhitelist } = state.settings;\r\n      const root = args[0].trim();\r\n      const index = state.displayStats.findIndex(e => e[\"key\"].trim() == root)\r\n      if (dataStorage.hasOwnProperty(root)) {\r\n        const object = {\r\n          \"key\": root,\r\n          \"value\": `${cleanString(JSON.stringify(dataStorage[root], globalWhitelist).replace(/\\{|\\}/g, '')).replace(/\\{|\\}/g, '')}    `\r\n        }\r\n\r\n        if (index >= 0) {\r\n          state.displayStats.splice(index, 1)\r\n        } else {\r\n          state.displayStats.push(object)\r\n        }\r\n      }\r\n    }\r\n  },\r\n  ewiMode: {\r\n    name: \"ewiMode\",\r\n    description: \"Switches between actions (true) or lines (false) for conditions.\",\r\n    args: false,\r\n    usage: '',\r\n    execute: (args) => {\r\n      state.settings.mode = !state.settings.mode\r\n      state.message = `Conditions now search amount of ${state.settings.mode == true ? 'actions' : 'lines'}.`\r\n    }\r\n  },\r\n  invAdd: {\r\n    name: \"invAdd\",\r\n    description: \"Adds objects to the player's inventory\",\r\n    args: true,\r\n    usage: '<object name> <quantity>',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory add.`);\r\n        const itemName = args.replace(LETTER_REGEX, '').trim();\r\n        const itemQuantity = Number.isNaN(parseInt(args.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(args.replace(DIGIT_REGEX, '').trim());\r\n\r\n        if (itemQuantity >= 1) {\r\n          state.message = `${addToInventory(itemName, itemQuantity)}`;\r\n        } else {\r\n          state.message = `You cannot add less than 1 unit of an item to your inventory.`;\r\n        }\r\n\r\n        console.log(`End inventory add.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invRemove: {\r\n    name: \"invRemove\",\r\n    description: \"Removes objects from the player's inventory\",\r\n    args: true,\r\n    usage: '<object name> <quantity>',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory remove.`);\r\n        const itemName = args.replace(LETTER_REGEX, '').trim();\r\n        const itemQuantity = Number.isNaN(parseInt(args.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(args.replace(DIGIT_REGEX, '').trim());\r\n\r\n        if (itemQuantity >= 1) {\r\n          state.message = `${removeFromInventory(itemName, itemQuantity)}`;\r\n        } else {\r\n          state.message = `You cannot remove less than 1 unit of an item from your inventory.`;\r\n        }\r\n\r\n        console.log(`End inventory remove.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invEquip: {\r\n    name: \"invEquip\",\r\n    description: \"Equips objects from the player's inventory\",\r\n    args: true,\r\n    usage: '<object name>',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory equip.`);\r\n        const itemName = args.replace(LETTER_REGEX, '').trim();\r\n        state.message = `${equipItem(itemName)}`;\r\n        console.log(`End inventory equip.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invCheck: {\r\n    name: \"invCheck\",\r\n    description: \"Checks the player's inventory\",\r\n    args: false,\r\n    usage: '',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory check.`);\r\n        state.message = `${checkInventory()}`;\r\n        console.log(`End inventory check.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invDebug: {\r\n    name: \"invDebug\",\r\n    description: \"Debugs player's inventory\",\r\n    args: false,\r\n    usage: '',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory debug.`);\r\n        debugInventory();\r\n        state.message = `Your inventory and player WI have been debugged.`;\r\n        console.log(`End inventory debug.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invMechanics: {\r\n    name: \"invMechanics\",\r\n    description: \"Toggles inventory system mechanics\",\r\n    args: false,\r\n    usage: '<enable or disable>',\r\n    execute: (args) => {\r\n      console.log(`Begin inventory toggle.`);\r\n      if (args != '') {\r\n        if (args == 'disable') {\r\n          state.enableInventory = false;\r\n          state.message = 'You have disabled the inventory system mechanics.';\r\n          console.log(`Disabled inventory mechanics toggle.`);\r\n        } else if (args == 'enable') {\r\n          state.enableInventory = true;\r\n          state.message = 'You have enabled the inventory system mechanics.';\r\n          console.log(`Enabled inventory mechanics toggle.`);\r\n        } else {\r\n          console.log('Wrong rpg mechanic toggle arg supplied.');\r\n          state.message = 'Invalid agument. Usage: /invMechanics <enable or disable>.';\r\n        }\r\n      } else {\r\n        console.log(`Checking inventory mechanics state.`);\r\n        state.message = `Inventory system mechanics are ${state.enableInventory ? 'enabled' : 'disabled'}`;\r\n      }\r\n\r\n      console.log(`End inventory toggle.`);\r\n    }\r\n  }\r\n};",
                        "onModelContext": "state.data = {} // When processing context, rebuild data. Input modifier interacts with \"cached\" version.\r\ndataStorage = state.data;\r\ndelete state.message\r\nlet contextMemory = getMemory(text);\r\nlet context = getContext(text);\r\nlet lines = context.split('\\n');\r\nconst linesLength = context.length;\r\nlet memoryLines = contextMemory.split('\\n');\r\n\r\nlet modifiedText = text.toLowerCase();\r\nlet modifiedContext = context.toLowerCase();\r\nlet memoryLinesLength = memoryLines.length\r\n\r\nlet copyLines = [...lines];\r\nlet copyMemoryLines = [...memoryLines];\r\n\r\nconst modifier = (text) => {\r\n  let stop = false;\r\n\r\n  // BEGIN Encounters\r\n  // for mashing with other context scripts, keep this codeblock before 'const contextMemory'\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    memoryLoop:\r\n    for (encounterMemory of state.encounterMemories) {\r\n      // take care to not overload memory, unless forced:\r\n      if (!encounterMemory.memoryGreed && (encounterMemory.memoryText.length + memory.length) > 1000) {\r\n        console.log(`Non-greedy encounterMemory too long, not inserting it!`)\r\n        continue memoryLoop\r\n      }\r\n      state.memory.context = memory\r\n      if (encounterMemory.memoryLocation == 'bottom') {\r\n        state.memory.context = `${state.memory.context}\\n${encounterMemory.memoryText}`\r\n      } else if (encounterMemory.memoryLocation == 'top') {\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      } else {\r\n        console.log(`No memoryLocation defined for '${encounterMemory.memoryText}', defaulting to 'top'.`)\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      }\r\n    }\r\n  }\r\n  \r\n  // for mashing with other context scripts, keep this between 'const lines' and 'const combinedLines'\r\n  if (typeof (state.currentEncounter) !== 'undefined') { // if there's an event...\r\n    lines.splice(-3, 0, state.encounterNote) // ...put it right below AN, so AI knows what's up\r\n  }\r\n  // END Encounters\r\n\r\n  // BEGIN EWIJSON\r\n  const execute = {\r\n\r\n    \"Sanitize the whitelist.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": sanitizeWhitelist\r\n    },\r\n    \"Build qualified entries as Objects in dataStorage.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": buildObjects\r\n    },\r\n\r\n    \"Ensure _synonyms is handled first when creating the globalWhitelist.\":\r\n    {\r\n      \"req\": Object.keys(dataStorage)[1] != synonymsPath || Object.keys(dataStorage)[0] != whitelistPath,\r\n      \"args\": null,\r\n      \"exec\": fixOrder\r\n    },\r\n    \"Build a global whitelist based on context and wildcards.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": getGlobalWhitelist\r\n    },\r\n    \"Sort and execute the Object entries.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": insertJSON\r\n    },\r\n    \"Sort and execute the EWI Attribute entries.\":\r\n    {\r\n      \"req\": worldInfo.length > 0,\r\n      \"args\": null,\r\n      \"exec\": processEWI\r\n    },\r\n    \"Check the inserted JSON- lines for the presence of worldInfo keywords.\":\r\n    {\r\n      \"req\": state.settings[\"cross\"],\r\n      \"args\": null,\r\n      \"exec\": crossLines\r\n    },\r\n    /*  \"Add the Stacks\":\r\n     {\r\n         \"req\": Stacks,\r\n         \"args\": null,\r\n         \"exec\": addStacks\r\n     }, */\r\n    \"Create an always visible entry that displays all created roots for Objects.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": trackRoots\r\n    },\r\n    \"Refresh the variables presented in the HUD.\":\r\n    {\r\n      \"req\": state.displayStats,\r\n      \"args\": null,\r\n      \"exec\": updateHUD\r\n    }\r\n\r\n  }\r\n\r\n  for (let action in execute) { if (execute[action][\"req\"]) { execute[action][\"exec\"](execute[action][\"args\"]) } }\r\n\r\n  let combinedMemory = memoryLines.join('\\n')\r\n  let combinedLines = lines.join('\\n').slice(-(info.maxChars - combinedMemory.length - 1));\r\n  const finalText = [combinedMemory, combinedLines].join(\"\");\r\n\r\n  // Debug to check if the context is intact and properly utilized, optimally the numbers should always match\r\n  console.log(`Final Text: ${finalText.length}`, `Max Text: ${info.maxChars}`, `MemoryLength: ${info.memoryLength}`, `Total Memory: ${info.memoryLength + contextMemoryLength}`)\r\n  // END EWIJSON\r\n\r\n  return { text: finalText, stop: stop };\r\n}\r\n\r\nmodifier(text);"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1720304",
                "publicId": "d7cfd050-a0a9-11eb-bf6c-81a52787bef7",
                "published": false,
                "title": "Random character",
                "description": "This is a random scenario. The place where you'll start and your situation will be randomly generated, and you'll need to do what you can to get where you want to get to.",
                "tags": [],
                "createdAt": "2021-04-19T00:54:49.557Z",
                "updatedAt": "2021-05-24T03:59:36.317Z",
                "memory": "",
                "authorsNote": "[Genre: fantasy] [Writing style: narrative, roleplaying, gothic]",
                "mode": "creative",
                "prompt": "Your name is",
                "quests": [],
                "worldInfo": [
                        {
                                "id": "1.1",
                                "keys": "Katariah|(|the )emp(ress|eror)#[t=5l=5f=2S=2]",
                                "entry": "The Dunmer are the dark elves of Morrowind. They value magic and honor, and follow the gods of the Tribunal.\n<< Katariah ♀ dunmer age 40y 170cm height 45kg slim slender>>>>\n<< Katariah dark grey skin, red eyes, long black hair>>>>\n<< Katariah just smart clever fair, empress of tamriel>>>>",
                                "hidden": false,
                                "worldInfoId": "224059609"
                        },
                        {
                                "id": "1.2",
                                "keys": "Katariah|(|the )emp(ress|eror)#[t=6l=5f=2S=2]",
                                "entry": "<< Katariah coarse calm voice, sweet talking>>>>\n<< Katariah wear linen dress gold earrings gold rings jewlery>>>>",
                                "hidden": false,
                                "worldInfoId": "224059608"
                        },
                        {
                                "id": "1.3",
                                "keys": "Vrage(|the Gifted)|(|High )King of Skyrim|(Ruler|Jarl) of (Solitude|Haafingar|Skyrim)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Vrage ♂ nord 42y 170cm 45kg fair brown hair muscular skin dark brown eyes deepvoice thick nord accent>>>>\n<< Vrage high king of skyrim, good leader, loyal, full beard>>>>\n<< Vrage wear fur coat jewelery linen shirt leather boots>>>>",
                                "hidden": false,
                                "worldInfoId": "224059610"
                        },
                        {
                                "id": "1.4",
                                "keys": "Ungvid|(Ruler|Jarl) of Winterhold#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Ungvid nord ♂ 62yearsold 179cm height 65kg, jarl of winterhold>>>>\n<< Ungvid harsh deep voice, arrogant pretentious stubborn serious>>>>\n<< Ungvid slim slender full beard long dark blonde hair>>>>\n<< Ungvid wear fur clothing leather boots steel sword>>>>",
                                "hidden": false,
                                "worldInfoId": "224059611"
                        },
                        {
                                "id": "1.5",
                                "keys": "Yolanda|(Ruler|Jarl) of Whiterun#[t=5l=5f=2S=2]",
                                "entry": "<< Yolanda ♀ nord 30y age 178cm height 50kg slim tall fair skin blue eyes long blonde hair>>>>\n<< Yolanda jarl of whiterun, sweet voice naughty dirty manipulative, fools around loves nightlife party animal>>>>",
                                "hidden": false,
                                "worldInfoId": "224059613"
                        },
                        {
                                "id": "1.6",
                                "keys": "Yolanda|(Ruler|Jarl) of Whiterun#[t=6l=5f=2S=2]",
                                "entry": "<< Yolanda wear jewlery noble clothes ring earring>>>>\n<< Yolanda pink lips small breasts round butt gorgeous>>>>",
                                "hidden": false,
                                "worldInfoId": "224059612"
                        },
                        {
                                "id": "1.7",
                                "keys": "Argo|(Ruler|Jarl) of (|the) Rift(|en)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Argo ♂ nord 57y age 180cm height 90kg slim shaved head& beard, jarl of the rift>>>>\n<< Argo arrogant pedantic self-righteous uptight>>>>",
                                "hidden": false,
                                "worldInfoId": "224059615"
                        },
                        {
                                "id": "1.8",
                                "keys": "Argo|(Ruler|Jarl) of (|the) Rift(|en)#[t=6l=5f=2S=2]",
                                "entry": "<< Argo harsh deep voice wear noble clothes leather boots>>>>\n<< Argo dislike thief hate thieves guild love drinking mead>>>> ",
                                "hidden": false,
                                "worldInfoId": "224059614"
                        },
                        {
                                "id": "1.9",
                                "keys": "Uror|(Ruler|Jarl) of Falkreath#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Uror ♂ nord 55y age 180cm height 75kg muscular, jarl of falkreath>>>>\n<< Uror red hair full beard, optimistic intelligent talkative stubborn good humored brave>>>>",
                                "hidden": false,
                                "worldInfoId": "224059616"
                        },
                        {
                                "id": "1.10",
                                "keys": "Uror|(Ruler|Jarl) of Falkreath#[t=6l=5f=2S=2]",
                                "entry": "<< Uror wear fur clothes long bow, is hunter knows the woods>>>>\n<< Uror thick colovian accent deep voice menacing tone>>>>",
                                "hidden": false,
                                "worldInfoId": "224059617"
                        },
                        {
                                "id": "1.11",
                                "keys": "Atmor|(Ruler|Jarl) of (Windhelm|Eastmarch)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Atmor ♂ nord 48y age 180cm height 75kg muscular fit short dark blond hair>>>>\n<< Atmor full beard grumpy sarcastic hopeful, jarl of eastmarch>>>>",
                                "hidden": false,
                                "worldInfoId": "224059621"
                        },
                        {
                                "id": "1.12",
                                "keys": "Atmor|(Ruler|Jarl) of (Windhelm|Eastmarch)#[t=6l=5f=2S=2]",
                                "entry": "<< Atmor wear noble fur clothes jewelery steel greatsword>>>>\n<< Atmor thich nord accent harsh command voice tone>>>>\n<< Atmor scar left eye>>>>",
                                "hidden": false,
                                "worldInfoId": "224059619"
                        },
                        {
                                "id": "1.13",
                                "keys": "Bolgeir|Ruler of Markarth|Jarl of Markarth|Ruler of the Reach|Jarl of the Reach#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Bolgeir ♂ nord 174cm height 70kg muscular reddish hair beard, jarl of the reach>>>>\n<< Bolgeir very brave and bold arrogant natural leader>>>>",
                                "hidden": false,
                                "worldInfoId": "224059618"
                        },
                        {
                                "id": "1.14",
                                "keys": "Bolgeir|Ruler of Markarth|Jarl of Markarth|Ruler of the Reach|Jarl of the Reach#[t=6l=5f=2S=2]",
                                "entry": "<< Bolgeir wear noble linen clothes jewelery, thick nord accent deep voice>>>>\n<< Bolgeir worship nord pantheon shor kyne dislikes imperial divines>>>>",
                                "hidden": false,
                                "worldInfoId": "224059622"
                        },
                        {
                                "id": "1.15",
                                "keys": "Dagny|(Ruler|Jarl) of the (Dawnstar|Pale)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Dagny ♀ nord 58y age 159cm height 40kg tall thin fit short dark blonde hair>>>>",
                                "hidden": false,
                                "worldInfoId": "224059620"
                        },
                        {
                                "id": "1.16",
                                "keys": "Dagny|(Ruler|Jarl) of the (Dawnstar|Pale)#[t=6l=5f=2S=2]",
                                "entry": "<< Dagny corageous fearless friendly determined optimistic, jarl of the pale>>>>\n<< Dagny thick northern accent wear noble clothes steel dagger>>>>",
                                "hidden": false,
                                "worldInfoId": "224059623"
                        },
                        {
                                "id": "1.17",
                                "keys": "Thora|(Ruler|Jarl) of (Morthal|Hjaalmarch)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Thora ♂ nord 58y age 185cm height 62kg muscular tall athletic blonde hair>>>>\n<< Thora jarl of hjaalmarch, courageous brave strong-willed fearless determined>>>>",
                                "hidden": false,
                                "worldInfoId": "224059624"
                        },
                        {
                                "id": "1.18",
                                "keys": "Thora|(Ruler|Jarl) of (Morthal|Hjaalmarch)#[t=6l=5f=2S=2]",
                                "entry": "<< Thora sweet voice thick accent love warm weather love hunting>>>>\n<< Thora wear noble clothes fur scarf steel sword>>>>",
                                "hidden": false,
                                "worldInfoId": "224059625"
                        },
                        {
                                "id": "2.1",
                                "keys": "(white( |)run)#[t=5l=5f=2S=2]",
                                "entry": "[ Whiterun description:< city state in central Skyrim>/< hold≡ Whiterun>/< kingdom≡ Western Skyrim>. Whiterun climate:< warm& breeze>. Whiterun culture:< economical power& hunting& smithing>. Whiterun ruler:< jarl≡ Yolanda>/< palace≡ Dragonsreach>. Whiterun features:< built on top of hill& dragonsreach& jorrvaskr& temple of kynareth& capital city of Whiterun>.]",
                                "hidden": false,
                                "worldInfoId": "224059626"
                        },
                        {
                                "id": "2.2",
                                "keys": "riften#[t=5l=5f=2S=2]",
                                "entry": "[ Riften description:< city state in southeastern Skyrim>/< hold≡ Haafingar>/< kingdom≡ Eastern Skyrim>/<rival city≡ Windhelm>. Riften climate:< warm& breeze>. Riften culture:< hunting& fishing& corruption& capital city>. Riften ruler:< king≡ Argo>/ <palace≡ Mistveil Keep>. Riften features:< built next to honrich lake& capital city of the rift>.]",
                                "hidden": false,
                                "worldInfoId": "224059627"
                        },
                        {
                                "id": "2.3",
                                "keys": "(winter( |)hold)#[t=5l=5f=2S=2]",
                                "entry": "[ Winterhold description:< city state in northeastern Skyrim>/< hold≡ Winterhold>/< kingdom≡ Eastern Skyrim>/<rival city≡ Windhelm>. Winterhold climate:< snowy&freezing>. Winterhold culture:< nord& magic& fishing& sea trading>. Winterhold ruler:< jarl≡ Ungvid>. Winterhold features:< college of winterhold& port city& capital city of winterhold>.]",
                                "hidden": false,
                                "worldInfoId": "224059628"
                        },
                        {
                                "id": "2.4",
                                "keys": "Falkreath#[t=5l=5f=2S=2]",
                                "entry": "[ Falkreath description:< city state in southern Skyrim>/< hold≡ Falkreath>/< kingdom≡ Western Skyrim>. Falkreath climate:< warm& breeze>. Falkreath culture:< fishing& hunting& leatherwork& pelts>. Falkreath ruler:< jarl≡ Uror>. Falkreath features:< city in the middle of the woods& border with Cyrodiil& capital city of Falkreath Hold>.]",
                                "hidden": false,
                                "worldInfoId": "224059629"
                        },
                        {
                                "id": "2.5",
                                "keys": "markarth|city of stone#[t=5l=5f=2S=2]",
                                "entry": "[ Markarth description:< city state in western Skyrim>/< hold≡ The Reach>/< kingdom≡ The Reach>. Markarth climate:< warm& hot& breeze>. Markarth culture:< reachmen culture& ruled by an Ard& capital city>. Markarth ruler:< Ard≡ Dorach>/ <palace≡ Understone Keep>. Markarth features:< built inside of a mountain& dwemer stone and brass architecture& capital city of the reach>.]",
                                "hidden": false,
                                "worldInfoId": "224059630"
                        },
                        {
                                "id": "2.6",
                                "keys": "markarth|city of stone#[t=6l=5f=2S=2]",
                                "entry": "[ Markarth culture:< silver mining& fishing& hunting>. Markarth features:< temple of hircine& silver mine& smithing]",
                                "hidden": false,
                                "worldInfoId": "224059631"
                        },
                        {
                                "id": "2.7",
                                "keys": "dawnstar#[t=5l=5f=2S=2]",
                                "entry": "[ Dawnstar description:< city state in northern Skyrim>/< hold≡ The Pale>/< kingdom≡ Western Skyrim>/<rival city≡ Whiterun& Winterhold>. Dawnstar climate:< snowy&freezing>. Dawnstar culture:< fishing& hunting& capital city>. Dawnstar ruler:< queen≡ Dagny>. Dawnstar features:< wooden houses& port city& sea trading& capital city of the pale>.]",
                                "hidden": false,
                                "worldInfoId": "224059633"
                        },
                        {
                                "id": "2.8",
                                "keys": "morthal#[t=5l=5f=2S=2]",
                                "entry": "[ Morthal description:< city state in northwestern Skyrim>/< hold≡ Hjaalmarch>/< kingdom≡ Western Skyrim>/<rival city≡ Dawnstar>. Morthal climate:< warm& hot>. Morthal geography:< swamp& marsh>. Morthal culture:< nord& capital city>. Morthal ruler:< king≡ Thora>. Morthal features:< capital city of Hjaalmarch& swamps>.]",
                                "hidden": false,
                                "worldInfoId": "224059632"
                        },
                        {
                                "id": "2.9",
                                "keys": "windhelm#[t=5l=5f=2S=2]",
                                "entry": "[ Windhelm description:< city state in eastern Skyrim>/< hold≡ Eastmarch>/< kingdom≡ Eastern Skyrim>/< rival city≡ Riften& Winterhold>. Windhelm climate:< north≡ snowy& freezing>/< south≡ temperate& warm>. Windhelm culture:< nord& wooden constructions& sea trading& capital city>. Windhelm ruler:< king≡ Atmor>/< palace≡ Palace of Kings>. Windhelm features:< palace made of stone& hardwood houses& capital city of eastern skyrim>.]",
                                "hidden": false,
                                "worldInfoId": "224059634"
                        },
                        {
                                "id": "2.10",
                                "keys": "windhelm#[t=6l=5f=2S=2]",
                                "entry": "[ Windhelm features:< big inn made of stone& temple of talos& fighting arena>. Windhelm culture:< port city& smithing& fishing>.]",
                                "hidden": false,
                                "worldInfoId": "224059635"
                        },
                        {
                                "id": "2.11",
                                "keys": "solitude#[t=5l=5f=2S=2]",
                                "entry": "[ Solitude description:< city state in western Skyrim>/< hold≡ Haafingar>/< kingdom≡ Western Skyrim>/<rival city≡ Snowhawk>. Solitude climate:< north≡ snowy&freezing>/< south≡ warm>. Solitide culture:< economical power&capital city>. Solitude ruler:< king≡ Vrage>/ < palace≡ Blue Palace>. Solitude features:< built on top of stone arch& capital city of western skyrim>.]",
                                "hidden": false,
                                "worldInfoId": "224059636"
                        },
                        {
                                "id": "2.12",
                                "keys": "solitude#[t=6l=5f=2S=2]",
                                "entry": "[ Solitude features:< bards college& antiquarian circle& east empire company& rich city& castle dour& blue palace>. Solitude culture:< nord& brick constructions>/< fishing&sea trading& port city& arts>.]",
                                "hidden": false,
                                "worldInfoId": "224059637"
                        },
                        {
                                "id": "2.13",
                                "keys": "(snow( |)hawk)#[t=5l=5f=2S=2]",
                                "entry": "[ Snowhawk description:< city state in northwestern Skyrim>/< hold≡ Hjaalmarch>/< kingdom≡ Snowhawk>/<rival city≡ Solitude>. Snowhawk climate:< warm& hot>. Snowhawk geography:< swamp& marsh>. Snowhawk ruler:< king≡ Arnbjorn>. Snowhawk features:< capital city of Snowhawk& rivals with Solitude>.]",
                                "hidden": false,
                                "worldInfoId": "224059638"
                        },
                        {
                                "id": "3.1",
                                "keys": "Whiterun Hold#[t=5l=3f=2S=2]",
                                "entry": "[ Whiterun Hold description:< hold in central Skyrim>/< capital city≡ Whiterun>/< kingdom≡ Western Skyrim>.  Whiterun Hold climate:< warm& breeze>. Whiterun Hold geography:< farmland& fertile& grasslands& open fields& white river>. Whiterun Hold ruler:< jarl≡ Yolanda>.]",
                                "hidden": false,
                                "worldInfoId": "224059641"
                        },
                        {
                                "id": "3.2",
                                "keys": "Whiterun Hold#[t=6l=3f=2S=2]",
                                "entry": "[ Whiterun Hold culture:< nord& wooden houses& farms>. Whiterun Hold features:< white river& giants& mammoths>. Whiterun Hold towns:< Riverwood& Honeywood>.]",
                                "hidden": false,
                                "worldInfoId": "224059639"
                        },
                        {
                                "id": "3.3",
                                "keys": "(|the) rift#[t=5l=3f=2S=2]",
                                "entry": "[ The Rift description:< hold in southeastern Skyrim>/< capital city≡ Riften>/< kingdom≡ Eastern Skyrim>. The Rift climate:< warm& breeze>. The Rift geography:< farmland& Lake Honrich& fishing& fertile& mountainous& Snow Throat>. The Rift ruler:< jarl≡ Argo>.]",
                                "hidden": false,
                                "worldInfoId": "224059640"
                        },
                        {
                                "id": "3.4",
                                "keys": "(|the) rift#[t=6l=3f=2S=2]",
                                "entry": "[ The Rift culture:< nord& farm& fishing& hunting& mills>. The Rift features:< Lake Honrich& bears& wolves& deer>. The Rift towns:< Shor's Stone& Vernim& Ivarstead>.]",
                                "hidden": false,
                                "worldInfoId": "224059643"
                        },
                        {
                                "id": "3.5",
                                "keys": "(winter( |)hold hold)#[t=5l=3f=2S=2]",
                                "entry": "[ Winterhold Hold description:< hold in northeastern Skyrim>/< capital city≡ Winterhold>/< kingdom≡ Eastern Skyrim>. Winterhold Hold climate:< cold& snowy& freezing>. Winterhold Hold geography:< mountainous& snowy hills& cliffs>. Winterhold Hold ruler:< jarl≡ Ungvid>.]",
                                "hidden": false,
                                "worldInfoId": "224059642"
                        },
                        {
                                "id": "3.6",
                                "keys": "(winter( |)hold hold)#[t=6l=3f=2S=2]",
                                "entry": "[ Winterhold Hold culture:< nord& wooden houses& magic>. Winterhold Hold features:< college of winterhold& horker& ice wolf& polar bear>.]",
                                "hidden": false,
                                "worldInfoId": "224059644"
                        },
                        {
                                "id": "3.7",
                                "keys": "(falkreath)#[t=5l=3f=2S=2]",
                                "entry": "[ Falkreath Hold description:< hold in southern Skyrim>/< capital city≡ Falkreath>/< kingdom≡ Falkreath>. Falkreath Hold climate:< warm& breeze>. Falkreath Hold geography:< rainforest& Lake Ilinalta& White River& mountainous& lush woods>. Falkreath Hold ruler:< king≡ Uror>.]",
                                "hidden": false,
                                "worldInfoId": "224059645"
                        },
                        {
                                "id": "3.8",
                                "keys": "(falkreath)#[t=6l=3f=2S=2]",
                                "entry": "[ Falkreath Hold culture:< nord& fishing& hunting& lumber& leatherwork& pelts>. Falkreath Hold features:< fishing& lumber& Lake Ilinalta& White River& wolves& bears& sabre cat>. Falkreath Hold towns:< Helgen>.]",
                                "hidden": false,
                                "worldInfoId": "224059646"
                        },
                        {
                                "id": "3.9",
                                "keys": "the reach#[t=5l=3f=2S=2]",
                                "entry": "[ The Reach description:< reachmen culture& hold in western Skyrim& ruled by an Ard>/< capital city≡ Markarth>/< kingdom≡ The Reach>. The Reach climate:< warm& hot& breeze>. The Reach geography:< mountainous& grasslands& Karth River>. The Reach ruler:< Ard≡ Dorach>/ <palace≡ Understone Keep>.]",
                                "hidden": false,
                                "worldInfoId": "224059647"
                        },
                        {
                                "id": "3.10",
                                "keys": "the reach#[t=6l=3f=2S=2]",
                                "entry": "[ The Reach culture:< ruled by an Ard& reachmen& wooden houses& mining>. The Reach features:< Karth River& Sky Haven Temple& silver mines& fishing>. The Reach towns:< Karthwasten& Hroldan>.]",
                                "hidden": false,
                                "worldInfoId": "224059648"
                        },
                        {
                                "id": "3.11",
                                "keys": "the pale#[t=5l=3f=2S=2]",
                                "entry": "[ The Pale description:< hold in northern Skyrim& part of the kingdom of Eastern Skyrim>/< capital city≡ Dawnstar>/< kingdom≡ Eastern Skyrim>. The Pale climate:< cold& snowy>. The Pale geography:< grasslands& waterfall& mountainous>. The Pale ruler:< jarl≡ Dagny>.]",
                                "hidden": false,
                                "worldInfoId": "224059649"
                        },
                        {
                                "id": "3.12",
                                "keys": "the pale#[t=6l=3f=2S=2]",
                                "entry": "[ The Pale culture:<nord& wooden constructions& fishing& port city>. The Pale features:< iron mining& quicksilver mining>. The Pale towns:< Heljarchen>.]",
                                "hidden": false,
                                "worldInfoId": "224059650"
                        },
                        {
                                "id": "3.13",
                                "keys": "Hjaalmarch#[t=5l=3f=2S=2]",
                                "entry": "[ Hjaalmarch description:< hold in northwestern Skyrim& part of the Kingdom of Western Skyrim>/< capital city≡ Morthal>/< kingdom≡ Western Skyrim>. Hjaalmarch climate:< warm& hot>. Hjaalmarch geography:< marsh& swamp& Hjaal River& Karth River>. Hjaalmarch ruler:< jarl≡ Thora>.]",
                                "hidden": false,
                                "worldInfoId": "224059651"
                        },
                        {
                                "id": "3.14",
                                "keys": "Hjaalmarch#[t=6l=3f=2S=2]",
                                "entry": "[ Hjaalmarch culture:< nord& wooden constructions& mining& hunting>. Hjaalmarch features:< mining& hunting& swamp& Hjaal River& Karth River>. Hjaalmarch towns:< Stonehills>.]",
                                "hidden": false,
                                "worldInfoId": "224059652"
                        },
                        {
                                "id": "3.15",
                                "keys": "eastmarch#[t=5l=3f=2S=2]",
                                "entry": "[ Eastmarch description:< hold in Eastern Skyrim>/< capital city≡ Windhelm>/< kingdom≡ Eastern Skyrim>. Eastmarch climate:< north≡ snowy& freezing>/< south≡ temperate& warm>. Eastmarch geography:< White River>/< north≡ cliff& mountain& windy& snowy>/< south≡ hot water springs>. Eastmarch ruler:< king≡ Atmor>/< palace≡ Palace of Kings>.]",
                                "hidden": false,
                                "worldInfoId": "224059653"
                        },
                        {
                                "id": "3.16",
                                "keys": "eastmarch#[t=6l=3f=2S=2]",
                                "entry": "[ Eastmarch culture:< nord& fishing& port city& smithing>. Eastmarch features:< frozen water& hot water springs& White River>. Eastmarch towns:< Pargran& Kynesgrove>.]",
                                "hidden": false,
                                "worldInfoId": "224059654"
                        },
                        {
                                "id": "3.17",
                                "keys": "Haafingar#[t=5l=3f=2S=2]",
                                "entry": "[ Haafingar description:< hold in Western Skyrim>/< capital city≡ Solitude>/< kingdom≡ Western Skyrim>. Haafingar climate:< north≡ snowy& freezing>/< south≡ warm>. Haafingar geography:< Karth River& Sea of Ghosts& mountain& farmland& fertile& mills>. Haafingar ruler:< king≡ Vrage>.]",
                                "hidden": false,
                                "worldInfoId": "224059655"
                        },
                        {
                                "id": "3.18",
                                "keys": "Haafingar#[t=6l=3f=2S=2]",
                                "entry": "[ Haafingar culture:< nord& fishing& sea trading& port& arts>. Haafingar features:< Karth River& Kilkreath Temple& wolves& trolls& bears>. Haafingar towns:< Dragon Bridge>.]",
                                "hidden": false,
                                "worldInfoId": "224059656"
                        },
                        {
                                "id": "4.1",
                                "keys": "Honeywood#[t=5l=5f=2S=2]",
                                "entry": "[ Honeywood description:< Honeywood small village& few people>/< hold≡ Whiterun>/< kingdom≡ Western Skyrim>. Honeywood climate:< warm& breeze>. Honeywood culture:< nord& small village& ancient nord pantheon>. Honeywood features:< small lake in center& small houses wooden hay>/< people are not self-aware>.]",
                                "hidden": false,
                                "worldInfoId": "224059657"
                        },
                        {
                                "id": "4.2",
                                "keys": "Dragon Bridge#[t=5l=5f=2S=2]",
                                "entry": "[ Dragon Bridge description:< has this name because of the bridge with a statue of a dragon in each end>/< hold≡ Haafingar>/< kingdom≡ Western Skyrim>. Dragon Bridge summary:< small town& few people& part of Haafingar hold& part of Kingdom of Western Skyrim& border with The Reach& town in the banks of Karth River>. Dragon Bridge climate:< warm& breeze>. Dragon Bridge culture:< nord& fishing& hunting>. Dragon Bridge features:< bridge with a statue of a dragon in each end>/< small wooden houses& tavern& blacksmith>/< is in the border of Haafingar and The Reach>.]",
                                "hidden": false,
                                "worldInfoId": "224059658"
                        },
                        {
                                "id": "4.3",
                                "keys": "(Ivar(| )stead)#[t=5l=5f=2S=2]",
                                "entry": "[ Ivarstead description:< small town in the eastern base of the Snow Throat mountain>/< hold≡ The Rift>/< kingdom≡ Eastern Skyrim>. Ivarstead summary:< few people& farming& fertile& fishing& hunting& milling>. Ivarstead climate:< warm& breeze>. Ivarstead culture:< nord& farming& hunting& sheep>. Ivarstead features:< the famous 7000 steps of the Snow Throat mountain begin here& well visit town& inn& tavern>.]",
                                "hidden": false,
                                "worldInfoId": "224059659"
                        },
                        {
                                "id": "4.4",
                                "keys": "(Rorik(| )stead)#[t=5l=5f=2S=2]",
                                "entry": "[ Rorikstead description:< small town& western plains of Whiterun Hold>/< hold≡ Whiterun>/< kingdom≡ Western Skyrim>. Rorikstead summary:< farmland& fertile& hunting& sheep& goat& cattle>/< part of the Kingdom of Western Skyrim>. Rorikstead climate:< warm& breeze& hot>. Rorikstead culture:< nord& farming& ancient nord pantheon>. Rorikstead features:< inn& tavern& friendly giants live near the town>.]",
                                "hidden": false,
                                "worldInfoId": "224059660"
                        },
                        {
                                "id": "4.5",
                                "keys": "(Hel(j|)archen)#[t=5l=5f=2S=2]",
                                "entry": "[ Heljarchen description:< name≡ Heljarchen& Helarchen>/< small town& border of The Pale and Whiterun Hold& just north of the City of Whiterun>/< hold≡ The Pale>/< kingdom≡ Eastern Skyrim>. Heljarchen summary:< hunting& goats& sheep& between the warm and the cold parts of Skyrim>. Heljarchen climate:< cold& breeze>. Heljarchen culture:< nord& imperial divines religion& herding>. Heljarchen features:< small town& few people& inn& tavern>.]",
                                "hidden": false,
                                "worldInfoId": "224059661"
                        },
                        {
                                "id": "4.6",
                                "keys": "Kyne(s|'s )grove#[t=5l=5f=2S=2]",
                                "entry": "[ Kynesgrove description:< name≡ Kynesgrove& Kyne's Grove>/< small town& just south of Windhelm>/< hold≡ Eastmarch>/< kingdom≡ Eastern Skyrim>. Kynesgrove summary:< hunting& goats& sheep& fishing>. Kynesgrove climate:< cold& snowy& breeze>. Kynesgrove culture:< nord& ancient nord religion& wooden houses>. Kynesgrove features:< mill& cattle& White River& inn& tavern>.]",
                                "hidden": false,
                                "worldInfoId": "224059662"
                        },
                        {
                                "id": "4.7",
                                "keys": "Shor's Stone#[t=5l=5f=2S=2]",
                                "entry": "Shor's Stone:[DESC:Shor's Stone is a small town in the Rift named after ancient Nordic god Shor, the leader of the Nord Pantheon;Shor's Stone.SUMM:named after god Shor/relies on hunting, milling, blacksmith;EXIT:<S⇒Riften>,<N⇒Kynesgrove>;Shor's Stone.CULTURE:nord/ancient nord religion;FEATURES:wooden houses/few people/blacksmith/mill/cattle;]",
                                "hidden": false,
                                "worldInfoId": "224059663"
                        },
                        {
                                "id": "4.8",
                                "keys": "(River(| )wood)#[t=5l=5f=2S=2]",
                                "entry": "[ Riverwood description:< name≡ Riverwood>/< small town& border of Whiterun Hold and Falkreath Hold>/< hold≡ Whiterun Hold>/< kingdom≡ Western Skyrim>. Riverwood summary:< hunting& goats& sheep& fishing& smithing& milling>. Riverwood climate:< warm& breeze>. Riverwood culture:< nord& imperial religion& wooden houses>. Riverwood features:< shores of White River& east of Bleak Falls Barrow& west of the Throat of the World>.]",
                                "hidden": false,
                                "worldInfoId": "224059664"
                        },
                        {
                                "id": "4.9",
                                "keys": "Helgen#[t=5l=5f=2S=2]",
                                "entry": "[ Helgen description:< name≡ Helgen>/< small town& border of Falkreath Hold and Whiterun Hold>/< hold≡ Falkreath Hold>/< kingdom≡ Western Skyrim>. Helgen summary:< hunting& goats& sheep& smithing& imperial keep>. Helgen climate:< warm& breeze>. Helgen culture:< nord& imperial religion& wooden houses>. Helgen features:< close to the border with Cyrodiil& >.]",
                                "hidden": false,
                                "worldInfoId": "224059665"
                        },
                        {
                                "id": "4.11",
                                "keys": "Karthwasten#[t=5l=5f=2S=2]",
                                "entry": "[ Karthwasten description:< name≡ Karthwasten>/< small town in the Reach>/< hold≡ The Reach>. Karthwasten summary:< hunting& fishing& mining>. Karthwasten climate:< warm& breeze>. Karthwasten culture:< reachmen& wooden houses>/< religion≡ Hircine& Namira& Paryite>. Karthwasten features:< near the banks of the Karth River>.]",
                                "hidden": false,
                                "worldInfoId": "224059666"
                        },
                        {
                                "id": "4.12",
                                "keys": "Stone( H|h)ills#[t=5l=5f=2S=2]",
                                "entry": "[ Stonehills description:< name≡ Stonehills>/< small community in Hjaalmarch>/< hold≡ Hjaalmarch>/< kingdom≡ Western Skyrim>. Stonehills summary:< hunting& iron mining>. Stonehills climate:< snowy& cold>. Stonehills culture:< nord& wooden houses>/< religion≡ Ancient Nordic Pantheon>. Stonehills features:< iron mine& wolves& sabre cat>.]",
                                "hidden": false,
                                "worldInfoId": "224059667"
                        },
                        {
                                "id": "4.13",
                                "keys": "Vernim#[t=5l=5f=2S=2]",
                                "entry": "[ Vernim description:< name≡ Vernim>/< small town in the Rift>/< hold≡ The Rift>/< kingdom≡ Eastern Skyrim>. Vernim summary:< hunting& fishing>. Vernim climate:< warm& breeze>. Vernim culture:< nord& small wooden houses>/< religion≡ Ancient Nordic Pantheon>. Vernim features:< bears& wolves& sabre cat>.]",
                                "hidden": false,
                                "worldInfoId": "224059668"
                        },
                        {
                                "id": "4.14",
                                "keys": "Nimalten#[t=5l=5f=2S=2]",
                                "entry": "[ Nimalten description:< name≡ Nimalten>/< small town>/< hold≡ The Rift>/< kingdom≡ Eastern Skyrim>. Nimalten summary:< ruler≡ Thane Armjor>/< hunting& fishing& smithing>. Nimalten climate:< warm& breeze>. Nimalten culture:< nord& small wooden houses>/< religion≡ Ancient Nordic Pantheon>. Nimalten features:< bears& wolves& sabre cat& deer& close to Treva River& big mansion where Thane Armjor lives>.]",
                                "hidden": false,
                                "worldInfoId": "224059669"
                        },
                        {
                                "id": "4.17",
                                "keys": "Pargran#[t=5l=5f=2S=2]",
                                "entry": "[ Pargran description:< name≡ Pargran>/< small town>/< hold≡ Eastmarch>/< kingdom≡ Western Skyrim>. Pargran summary:< hunting& fishing& silver mining>. Pargran climate:< snowy& cold>. Pargran culture:< nord& small wooden houses>/< religion≡ Ancient Nordic Pantheon>. Pargran features:< inn& small houses& simple folk>.]",
                                "hidden": false,
                                "worldInfoId": "224059670"
                        },
                        {
                                "id": "5.1",
                                "keys": "skyrim#[t=5l=2f=2]",
                                "entry": "<< Skyrim home the nords, northern province of the empire, vrage current king>>>>\n<< Skyrim harsh cold snowy north, temperate warm south, grasslands west, deep lush woods south>>>>\n<< Skyrim mountainous many valleys forests wildlife rivers woods lakes>>>>\n<< Skyrim divided nine holds, each hold ruled by jarl>>>>",
                                "hidden": false,
                                "worldInfoId": "224059671"
                        },
                        {
                                "id": "5.2",
                                "keys": "(cyrodi(|i)l)#[t=5l=2f=2]",
                                "entry": "<< Cyrodiil capital empire center continent known as Heartlands land of the Imperials>>>>\n<< Cyrodiil north snowy freezing, south east west lush forests green grasslands>>>>",
                                "hidden": false,
                                "worldInfoId": "224059672"
                        },
                        {
                                "id": "5.3",
                                "keys": "(cyrodi(|i)l)#[t=6l=1f=2]",
                                "entry": "<< Cyrodiil White-Gold tower Imperial City capital of Cyrodiil>>>>\n<< Cyrodiil west called Colovia, east called Nibenay>>>>",
                                "hidden": false,
                                "worldInfoId": "224059673"
                        },
                        {
                                "id": "5.4",
                                "keys": "(argonia|black marsh)#[t=5l=2f=2]",
                                "entry": "<< Argonia dense swampland land of the argonians also called Black Marsh>>>>\n<< Argonia natives do not like the name Black Marsh, located southeast Tamriel>>>>\n<< Argonia poisonous lands to non-argonians>>>>",
                                "hidden": false,
                                "worldInfoId": "224059674"
                        },
                        {
                                "id": "5.5",
                                "keys": "high rock#[t=5l=2f=2]",
                                "entry": "<< High Rock northwestern province empire, land of the bretons>>>>\n<< High Rock feudal kingdoms city-states, good trade, rich art music classy people>>>>\n<< High Rock monarchy kings counts dukes, bretons worship the nine divines>>>>",
                                "hidden": false,
                                "worldInfoId": "224059675"
                        },
                        {
                                "id": "5.6",
                                "keys": "high rock#[t=6l=1f=2]",
                                "entry": "<< High Rock regions illiac bay& glenumbra& stormhaven& wrothgar& rivenspire& bangkorai>>>>\n<< High rock wrothgar freezing cold, bangkorai glenumbra illiac bay warm hot weather nice beaches>>>>\n<< High Rock rivenspire moors dead trees dry land, stormhaven lush green forests Direnni Tower green trees>>>>",
                                "hidden": false,
                                "worldInfoId": "224059676"
                        },
                        {
                                "id": "5.7",
                                "keys": "hammerfell#[t=5l=2f=2]",
                                "entry": "<< Hammerfell west Tamriel, home of the redguards, vast deserts warm hot weather>>>>\n<< Hammerfell great ports big trade cities illiac bay many pirates sea life important ports>>>>\n<< Hammerfell six regions alik'r desert bangkorai craglorn sunforge hew's bane khefrem>>>>\n<< Hammerfell two islands stros m'kai and the chain>>>>",
                                "hidden": false,
                                "worldInfoId": "224059677"
                        },
                        {
                                "id": "5.8",
                                "keys": "(summerset( isle(s|)|))#[t=5l=2f=2]",
                                "entry": "<< Summerset province southwest Tamriel, home of the altmer>>>>\n<< Summerset beautiful place good weather colorfour lush forests>>>>\n<< Summerset magic strong Crystal Tower, Alinor capital great city>>>>\n<< Summerset two islands called summerset and auridon>>>>",
                                "hidden": false,
                                "worldInfoId": "224059679"
                        },
                        {
                                "id": "5.9",
                                "keys": "valenwood#[t=5l=2f=2]",
                                "entry": "<< Valenwood southwest Tamriel dense lush forest the green pact, home of the bosmer>>>>\n<< Valenwood migratory live trees, varied fauna many animals>>>>\n<< Valenwood four regions grahtwood& malabal tor& reaper's march& greenshade>>>>",
                                "hidden": false,
                                "worldInfoId": "224059678"
                        },
                        {
                                "id": "5.10",
                                "keys": "(morrowind|resdayn)#[t=5l=2f=2]",
                                "entry": "<< Morrowind eastern province empire, land of the dunmer>>>>\n<< Morrowind large island Vvardenfell in middle, large mainland, borders skyrim& cyrodiil& argonia>>>>\n<< Morrowind ashen lands volcanoes molten lava near vvardenfell, lush green forests south and west>>>>",
                                "hidden": false,
                                "worldInfoId": "224059680"
                        },
                        {
                                "id": "5.11",
                                "keys": "(morrowind|resdayn)#[t=6l=1f=2]",
                                "entry": "<< Morrowind divided regions bal foyen& deshaan& vvardenfell& stonefalls& soltheim>>>>\n<< Morrowind worship the tribunal, tribunal also called almsivi or triune>>>>\n<< Morrowind tribunal consist vivec& almalexia& sotha sil, three living gods>>>>",
                                "hidden": false,
                                "worldInfoId": "224059681"
                        },
                        {
                                "id": "5.12",
                                "keys": "((confederation of |)elsweyr)#[t=5l=3f=2S=2]",
                                "entry": "<< Elsweyr south province, home of the khajiit>>>>\n<< Elsweyr two regions anequina in north& pellitine in south>>>>\n<< Elsweyr kingdom capital rimmen, mane spiritual leader city of torval>>>>",
                                "hidden": false,
                                "worldInfoId": "224059682"
                        },
                        {
                                "id": "5.13",
                                "keys": "((confederation of |)elsweyr)#[t=5l=3f=2S=2]",
                                "entry": "<< Elsweyr anequina lush forests& sandy canyons, capital rimmen>>>>\n<< Elsweyr pellitine jungles rainforests, capital torval, torval seat of mane>>>>",
                                "hidden": false,
                                "worldInfoId": "224059683"
                        },
                        {
                                "id": "6.1#[t=5l=3f=1S=2]",
                                "keys": "(riften (inn|tavern)|mad mammoth)",
                                "entry": "The Mad Mammoth:[TYPE<The Mad Mammoth>:inn/bar/pub/tavern;OWNER<The Mad Mammoth>:andkvar;INHABITANTS<The Mad Mammoth>:Andkvar/Narca/Bujela/Freyte/Torbndir;LOCATION<The Mad Mammoth>:Riften;CITY<The Mad Mammoth>:Riften;DESC<The Mad Mammoth>:the mad mammoth is the local inn and tavern in riften/it is owned by andkvar/has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/andkvar lives here/narca lives here/bujela lives here/freyte lives here/torbndir lives here/five people live here;EXIT<The Mad Mammoth>:one exit goes out to riften in the market square/one exit goes to riften in the entrance bridge.]",
                                "hidden": false,
                                "worldInfoId": "224059684"
                        },
                        {
                                "id": "6.2#[t=5l=3f=1S=2]",
                                "keys": "(winterhold (inn|tavern)|frozen hearth)",
                                "entry": "The Frozen Hearth:[TYPE<The Frozen Hearth>:inn/bar/pub/tavern;OWNER<The Frozen Hearth>:Bjormar;INHABITANTS<The Frozen Hearth>:Bjormar/Astrid/Aengvir/Balor;LOCATION<The Frozen Hearth>:Winterhold;CITY<The Frozen Hearth>:Winterhold;DESC<The Frozen Hearth>:the frozen hearth is the local inn and tavern in winterhold/it is owned by Bjormar/it has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/balor lives here/Bjormar owns the place/astrid lives here/aengvir lives here/there are four people here/balor lives here;EXIT<The Frozen Hearth>:exit that goes out to the city of winterhold.]",
                                "hidden": false,
                                "worldInfoId": "224059685"
                        },
                        {
                                "id": "6.3#[t=5l=3f=1S=2]",
                                "keys": "(whiterun (inn|tavern)|bloated goat)",
                                "entry": "The Bloated Goat:[TYPE<The Bloated Goat>:inn/bar/pub/tavern;OWNER<The Bloated Goat>:Isekaid;INHABITANTS<The Bloated Goat>:Isekaid/Sigrid;LOCATION<The Bloated Goat>:whiterun/city of whiterun;CITY<The Bloated Goat>:whiterun/city of whiterun;DESC<The Bloated Goat>:The Bloated Goat is the inn and tavern in the city of Whiterun/owned by Isekaid and his wife Sigrid. They both live at the inn/in their private room in the ground floor. The inn is a two story building with 10 rooms for rent.;EXIT<The Bloated Goat>:One main exit goes out to the Whiterun market square/located in the Plains District..]",
                                "hidden": false,
                                "worldInfoId": "224059686"
                        },
                        {
                                "id": "6.4#[t=5l=3f=1S=2]",
                                "keys": "temple of kyne",
                                "entry": "Temple of Kyne:[TYPE<Temple of Kyne>:temple/church/cathedral;INHABITANTS<Temple of Kyne>:Irene/Mauricius/Nonnata;LOCATION<Temple of Kyne>:whiterun/city of whiterun;CITY<Temple of Kyne>:whiterun/city of whiterun;DESC<Temple of Kyne>:Temple dedicated to Kyne/the goddess of wind and air. It's the main temple to Kyne in Skyrim/located in the Winds District.;EXIT<Temple of Kyne>:One main exit goes out to the Whiterun tree square/located in the Winds District.]",
                                "hidden": false,
                                "worldInfoId": "224059687"
                        },
                        {
                                "id": "7.1",
                                "keys": "Karth River#[t=5l=5f=2S=2]",
                                "entry": "<< Karth River begins in The Reach ends in Haafingar, big river, empties into the Sea of Ghosts>>>> << Karth River known violent rapids, dangerous terrains, sharp stones>>>> << Karth River important fishing life support people in The Reach>>>>",
                                "hidden": false,
                                "worldInfoId": "224059688"
                        },
                        {
                                "id": "7.2",
                                "keys": "White River#[t=5l=5f=2S=2]",
                                "entry": "<< White River begins in Lake Illinalta in Falkreath Hold, passes by Whiterun Hold and Eastmarch>>>> << White River ends in Sea of Ghosts northeastern Skyrim near Windhelm>>>> << White River fishing villages, life support, dangerous currents>>>>",
                                "hidden": false,
                                "worldInfoId": "224059689"
                        },
                        {
                                "id": "7.3",
                                "keys": "Lake Geir#[t=5l=5f=2S=2]",
                                "entry": "<< Lake Geir lake western Rift, town Ivarstead built its western shores>>>> << Lake Geir fed by Treva River, drained by Darkwater River>>>> << Lake Geir named after Archmage Geirmund, Geirmund's tomb on largest island in middle lake>>>>",
                                "hidden": false,
                                "worldInfoId": "224059690"
                        },
                        {
                                "id": "7.4",
                                "keys": "Lake Ilinalta#[t=5l=5f=2S=2]",
                                "entry": "<< Lake Ilinalta source of White River, located central Falkreath Hold, middle Skyrim's pine forest>>>> << Lake Ilinalta notable Skyrim landmark, life support Falkreath city, important fishing hunting>>>>",
                                "hidden": false,
                                "worldInfoId": "224059691"
                        },
                        {
                                "id": "7.5",
                                "keys": "Lake Yorgrim#[t=5l=5f=2S=2]",
                                "entry": "<< Lake Yogrim source of river with same name, located in eastern Pale, just west of Windhelm>>>> << Lake Yogrim fishing The Pale and Eastmarch beautiful>>>> << Lake Yogrim burial site of dragon Viinturuth, Viinturuth died in the Merethic Era durin Dragon War>>>>",
                                "hidden": false,
                                "worldInfoId": "224059692"
                        },
                        {
                                "id": "7.6",
                                "keys": "Darkwater River#[t=5l=5f=2S=2]",
                                "entry": "<< Darkwater River eastern skyrim, connects Lake Geir to White River>>>> << Ends between The Rift and Eastmarch marks the border between the holds>>>> << good fishing important river Eastern Skyrim>>>>",
                                "hidden": false,
                                "worldInfoId": "224059693"
                        },
                        {
                                "id": "7.7",
                                "keys": "River Hjaal#[t=5l=5f=2S=2]",
                                "entry": "<< River Hjaal northwestern Skyrim, located in Hjaalmarch>>>> << River Hjaal located in Hjaalmarch, near border with Whiterun, near city of Mortal>>>> << River Hjaal drains into Karth River, ends in Sea of Ghosts, wide range fish>>>>",
                                "hidden": false,
                                "worldInfoId": "224059694"
                        },
                        {
                                "id": "7.8",
                                "keys": "River Yorgrim#[t=5l=5f=2S=2]",
                                "entry": "<< River Yogrim is short tributary, connects Lake Yogrim to White River>>>> << River Yogrim starts in eponymous lake in The Pale, ends in Eastmarch into White River>>>> << River Yogrim many waterfalls, many fish>>>>",
                                "hidden": false,
                                "worldInfoId": "224059695"
                        },
                        {
                                "id": "7.9",
                                "keys": "Treva River#[t=5l=5f=2S=2]",
                                "entry": "<< Treva River small river center of The Rift>>>> << Treva River starts in Lake Honrich ends in Lake Geir>>>> << Treva River many fish important river The Rift>>>>",
                                "hidden": false,
                                "worldInfoId": "224059696"
                        },
                        {
                                "id": "7.10",
                                "keys": "(Jerall(s| Mountains))#[t=5l=5f=2S=2]",
                                "entry": "<< Jerall Mountains also known Jeralls, mountain range southern Skyrim border with Cyrodiil>>>> << Jerall Mountains rugged steep inhospitable, location of Pale Pass in southern Skyrim>>>>",
                                "hidden": false,
                                "worldInfoId": "224059697"
                        },
                        {
                                "id": "7.11",
                                "keys": "Valus Mountains#[t=5l=5f=2S=2]",
                                "entry": "<< Valus Mountains mountain range southeastern Skyrim, border Morrowind and Cyrodiil>>>> << Valus Mountains southeastern Rift border Morrowind>>>>",
                                "hidden": false,
                                "worldInfoId": "224059698"
                        },
                        {
                                "id": "7.12",
                                "keys": "Dragon('s |)tail Mountains#[t=2l=5f=2S=2]",
                                "entry": "<< Dragon's Tail Mountains mountain range western Skyrim, border Hammerfell>>>>",
                                "hidden": false,
                                "worldInfoId": "224059699"
                        },
                        {
                                "id": "7.13",
                                "keys": "Dragon's Teeth Mountains#[t=5l=5f=2S=2]",
                                "entry": "<< Dragon's Teeth Mountains expansive mountain range western Skyrim, High Rock border>>>> << Dragon's Teeth Mountains provinces Cyrodiil High Rock Hammerfell Skyrim>>>>",
                                "hidden": false,
                                "worldInfoId": "224059701"
                        },
                        {
                                "id": "7.14",
                                "keys": "Druadach Mountains#[t=3l=5f=2S=2]",
                                "entry": "<< Druadach Mountains mountain range border Skyrim with High Rock, border Skyrim with Hammerfell>>>> << Druadach Mountains is Markarth, near Karth River, end in Solitude>>>>",
                                "hidden": false,
                                "worldInfoId": "224059700"
                        },
                        {
                                "id": "7.15",
                                "keys": "Druadach Mountains#[t=4l=5f=2S=2]",
                                "entry": "<< Druadach Mountains regions of Wrothgar Bangkorai in High Rock>>>>",
                                "hidden": false,
                                "worldInfoId": "224059702"
                        },
                        {
                                "id": "7.16",
                                "keys": "Velothi Mountains#[t=5l=5f=2S=2]",
                                "entry": "<< Velothi Mountains eastern Skyrim, border with Morrowind>>>> << Velothi Mountains named after prophet Veloth patron saint of Morrowind>>>>",
                                "hidden": false,
                                "worldInfoId": "224059703"
                        },
                        {
                                "id": "7.17",
                                "keys": "(Throat of the World|Snow Throat)#[t=4l=5f=2S=2]",
                                "entry": "<< Snow Throat also known Throat of the World, highest peak in Skyrim>>>> << Snow Throat located central Skyrim between Whiterun Hold and The Rift>>>>",
                                "hidden": false,
                                "worldInfoId": "224059704"
                        },
                        {
                                "id": "7.18",
                                "keys": "(Throat of the World|Snow Throat)#[t=5l=5f=2S=2]",
                                "entry": "<< Snow Throat climb seven thousand steps starting in Ivarstead, High Hrothgar on top of mountain>>>> << Snow Throat home of the monastic order Greybeards>>>>",
                                "hidden": false,
                                "worldInfoId": "224059705"
                        },
                        {
                                "id": "7.19",
                                "keys": "Jorrvaskr#[t=3l=5f=2S=2]",
                                "entry": "<< Jorrvaskr meadhall in Whiterun, home of the Companions>>>> << Jorrvaskr ancient meadhall made from boat of Ysgramor>>>> << Jorrvaskr one of oldest places in Skyrim>>>> << Jorrvaskr is a ship turned into a manor>>>>",
                                "hidden": false,
                                "worldInfoId": "224059706"
                        },
                        {
                                "id": "7.20",
                                "keys": "Skyforge#[t=4l=5f=2S=2]",
                                "entry": "[ Skyforge description:< ancient forge in Whiterun& located in Jorrvaskr backyard>/< believed to be blessed by Kyne herself>. Skyforge summary:< huge iron hawk statue on top>/< only the Companions blacksmith is allowed to use>.]",
                                "hidden": false,
                                "worldInfoId": "224059707"
                        },
                        {
                                "id": "7.21",
                                "keys": "(Dragonsreach)#[t=4l=5f=2S=2]",
                                "entry": "<< Dragonsreach is palace of Jarl of Whiterun, huge castle top of hill in city of Whiterun>>>> << Dragonsreach built to trap dragons during dragon war in Merethic Era>>>> << Dragonsreach Numinex was trapped there by High King Olaf One-Eye in First Era>>>> << Dragonsreach skull of Numinex above Jarl's throne>>>>",
                                "hidden": false,
                                "worldInfoId": "224059708"
                        },
                        {
                                "id": "7.22",
                                "keys": "Understone Keep#[t=5l=5f=2S=2]",
                                "entry": "<< Understone Keep seat of power The Reach, located city Markarth>>> << Understone Keep throne of the Ard of The Reach, Ard is title of ruler of The Reach>>>> << Understone Keep built inside mountain, used to be called Nchuand-Zel>>>>",
                                "hidden": false,
                                "worldInfoId": "224059709"
                        },
                        {
                                "id": "7.23",
                                "keys": "(Palace of (the |)Kings)#[t=5l=5f=2S=2]",
                                "entry": "<< Palace of Kings oldest building in Tamriel, built by ancient Nords>>>> << Palace of Kings seat of power of the Kingdom of Eastern Skyrim>>>> << Palace of Kings made of stone, located in city of Windhelm>>>> << Palace of Kings also known Palace of Ysgramor>>>>",
                                "hidden": false,
                                "worldInfoId": "224059710"
                        },
                        {
                                "id": "7.24",
                                "keys": "Blue Palace#[t=5l=5f=2S=2]",
                                "entry": "<< Blue Palace seat of power kingdom Western Skyrim& located in city Solitude>>>> << Blue Palace dark blue roof, stone walls, big courtyard with garden>>>>",
                                "hidden": false,
                                "worldInfoId": "224059711"
                        },
                        {
                                "id": "7.25",
                                "keys": "Kilkreath Temple#[t=5l=5f=2S=2]",
                                "entry": "<< Kilkreath Temple dedicated to Meridia, huge Meridia statue in the courtyard>>>> << Kilkreath Temple inner temple subterrain, door behind the statue>>>>",
                                "hidden": false,
                                "worldInfoId": "224059712"
                        },
                        {
                                "id": "7.26",
                                "keys": "(Winds District|Statue of Talos|Talos Statue)#[t=5l=5f=2S=2]",
                                "entry": "<< Statue of Talos image of Tiber Septim, altar shrine pray, stone statue Winds District of Whiterun>>>> << Statue of Talos looking heroic, stepping on big snake, sword in hand>>>>",
                                "hidden": false,
                                "worldInfoId": "224059713"
                        },
                        {
                                "id": "7.27",
                                "keys": "Deep Folk Crossing#[t=5l=5f=2S=2]",
                                "entry": "<< Deep Folk Crossing ancient Dwemer bridge in northern Reach>>>><< Deep Folk Crossing landmark, made of gray smooth stone with Dwemer brass metal roof>>>><< Deep Folk Crossing made in Dwemer style architecture>>>>",
                                "hidden": false,
                                "worldInfoId": "224059714"
                        },
                        {
                                "id": "7.28",
                                "keys": "(Azura Statue|Statue of Azura)#[t=5l=5f=2S=2]",
                                "entry": "<< Statue of Azura top of mountain in Winterhold region>>>><< Statue of Azura can be seen from kilometers away>>>><< Statue of Azura shrine altar, hundred feet tall, holds her hands high, holds moon right hand, holds sun left hand>>>>",
                                "hidden": false,
                                "worldInfoId": "224059715"
                        },
                        {
                                "id": "7.29",
                                "keys": "Gjukar's Monument#[t=5l=5f=2S=2]",
                                "entry": "<< Gjukar's Monument ancient stone monument south of Rorikstead>>>> << Gjukar's Monument commemorates an ancient battle that happened here>>> << Gjukar's Monument monument is the head of a hawk>>>>",
                                "hidden": false,
                                "worldInfoId": "224059716"
                        },
                        {
                                "id": "7.30",
                                "keys": "Sundered Towers#[t=5l=5f=2S=2]",
                                "entry": "<< Sundered Towers entire construction extremly good condition, beautiful sight>>>> << Sundered Towers big staircases to ancient Nord ruin leading to the towers>>>> << Sundered Towers two Nordic style ancient towers surrounded by tall pillars with hawk heads>>>>",
                                "hidden": false,
                                "worldInfoId": "224059717"
                        },
                        {
                                "id": "7.31",
                                "keys": "Reachwind Eyrie#[t=5l=5f=2S=2]",
                                "entry": "<<●Reachwind Eyrie ancient small Dwemer tower The Reach, built in Dwemer style architecture>>>> <<●Reachwind Eyrie made of smooth dark gray stone, brass roof>>>>",
                                "hidden": false,
                                "worldInfoId": "224059718"
                        },
                        {
                                "id": "8.1",
                                "keys": "(nord(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Nord native to skyrim, tall, blonde, strong>>>>\n<< Nord used to harsh environments, used to cold>>>>\n<< Nord go to sovngarde after death, value strength and courage>>>>",
                                "hidden": false,
                                "worldInfoId": "224059719"
                        },
                        {
                                "id": "8.2",
                                "keys": "(nord(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Nord call people they don't like \"milk-drinker\" and \"coward\">>>>\n<< Nord short-tempered hot-headed stubborn dislike magic>>>>",
                                "hidden": false,
                                "worldInfoId": "224059720"
                        },
                        {
                                "id": "8.3",
                                "keys": "khajiit#[t=4l=3f=2S=2]",
                                "entry": "[ Khajiit description:< speak in third person&& refer to themselves \"this one\">/< natives of Elsweyr>/< seen as thieves by the other races>. Khajiit appearance:< catlike-humanoids>/< furry body& tail& claws& cat ears>. Khajiit speech:< speak in third person&& refer to themselves \"this one\">.]",
                                "hidden": false,
                                "worldInfoId": "224059722"
                        },
                        {
                                "id": "8.4",
                                "keys": "khajiit#[t=5l=3f=2S=2]",
                                "entry": "[ Khajiit speech:< use \"wafiit\" and \"oviit\" as slur terms& use \"trevan\" as a friendly term>.]",
                                "hidden": false,
                                "worldInfoId": "224059721"
                        },
                        {
                                "id": "8.5",
                                "keys": "(dunmer|dark el(f|ves))#[t=4l=3f=2S=2]",
                                "entry": "<< Dunmer moniker dark elf native to morrowind>>>>\n<< Dunmer call people who are not dunmer \"n'wah\" if they don't like them, use \"s'wit\" and \"fetcher\" as slur terms>>>>",
                                "hidden": false,
                                "worldInfoId": "224059723"
                        },
                        {
                                "id": "8.6",
                                "keys": "(dunmer|dark el(f|ves))#[t=5l=3f=2S=2]",
                                "entry": "<< Dunmer call people \"sera\" and \"muthsera\" when they like or respect the people they're talking to>>>>\n<< Dunmer hot-headed dark grey skin red eyes pointy ears>>>>\n<< Dunmer affinity with magic very powerful strong-willed>>>>",
                                "hidden": false,
                                "worldInfoId": "224059724"
                        },
                        {
                                "id": "8.7",
                                "keys": "(altmer|high el(f|ves))#[t=4l=3f=2S=2]",
                                "entry": "<< Altmer moniker high elf native to summerset isles>>>>\n<< Altmer tall thin golden skin clear eyes brownish hair>>>>\n<< Altmer arrogant pedantic prepotent self-righteous perfectionist>>>>",
                                "hidden": false,
                                "worldInfoId": "224059726"
                        },
                        {
                                "id": "8.8",
                                "keys": "(altmer|high el(f|ves))#[t=5l=3f=2S=2]",
                                "entry": "<< Altmer call people \"ceruval\" and \"cerum\" when they like or respect the people they're talking to>>>>\n<< Altmer affinity with magic very powerful strong-willed>>>>\n<< Altmer call people who are not dunmer \"ephem\" if they don't like them, use \"ephem\" and \"de'nt\" as slur terms>>>>",
                                "hidden": false,
                                "worldInfoId": "224059725"
                        },
                        {
                                "id": "8.9",
                                "keys": "(or(c|cs|simer))#[t=4l=3f=2S=2]",
                                "entry": "<< Orsimer moniker orc, have tusks pointy ears brownish-green skin>>>>\n<< Orsimer muscular build violent short-tempered worship malacath>>>>\n<< Orsimer strong stubborn fight-lover tribal primitive>>>>",
                                "hidden": false,
                                "worldInfoId": "224059727"
                        },
                        {
                                "id": "8.10",
                                "keys": "(bosmer|wood el(f|ves))#[t=4l=3f=2S=2]",
                                "entry": "<< Bosmer moniker wood elf native to valenwood>>>>\n<< Bosmer short pointy ears light-brown or tan skin big eyes sometimes horns>>>>\n<< Bosmer live trees cannot kill trees and vegetation because of green pact can only eat meat>>>>",
                                "hidden": false,
                                "worldInfoId": "224059728"
                        },
                        {
                                "id": "8.11",
                                "keys": "(bosmer|wood el(f|ves))#[t=5l=3f=2S=2]",
                                "entry": "<< Bosmer in war eat the flesh of enemies ruthless enemies in war>>>>\n<< Bosmer green pact worship y'ffre friend of the woods love animals love vegetation care about environment>>>>",
                                "hidden": false,
                                "worldInfoId": "224059729"
                        },
                        {
                                "id": "8.12",
                                "keys": "(argonian(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Argonian native to black marsh lizard-like race scaly>>>>\n<< Argonian worship sithis worship hist hate dunmer enslaved by dunmer>>>>\n<< Argonian other races do not like argonians>>>>",
                                "hidden": false,
                                "worldInfoId": "224059731"
                        },
                        {
                                "id": "8.13",
                                "keys": "(imperial(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Imperial native to cyrodiil human race cosmopolitan cultured fair skin>>>>\n<< Imperial human medium height sturdy strong diplomatic>>>>\n<< Imperial main race in empire good with commerce and trade>>>>",
                                "hidden": false,
                                "worldInfoId": "224059730"
                        },
                        {
                                "id": "8.14",
                                "keys": "(redguard(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Redguard human native to hammerfell dark brown skin sturdy strong>>>>\n<< Redguard diplomatic but strong in war courageous fearless>>>>\n<< Redguard many pirates illiac bay strong trade with high-rock>>>>",
                                "hidden": false,
                                "worldInfoId": "224059733"
                        },
                        {
                                "id": "8.15",
                                "keys": "(breton(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Breton human native to high rock fair skin short stature slightly pointy ears>>>>\n<< Breton mix of human and elf, good with magic good with trade>>>>\n<< Breton highly cultured arts trade many pirates illiac bay>>>>",
                                "hidden": false,
                                "worldInfoId": "224059732"
                        },
                        {
                                "id": "8.16",
                                "keys": "khajiit#[t=1l=3f=2S=2]",
                                "entry": "Khajiit talk in third person, call themselves \"this one\".",
                                "hidden": false,
                                "worldInfoId": "224059734"
                        },
                        {
                                "id": "9.1",
                                "keys": "(sigrid)#[t=5l=5f=2S=2]",
                                "entry": "<< Sigrid nord ♀ 38y age, 45kg eight, 169cm height>>>> << Sigrid fine skin blue eyes beautiful, long blonde hair>>>> << Sigrid innkeeper of the Bloated Goat, good humored solidary funny polite>>>>",
                                "hidden": false,
                                "worldInfoId": "224059735"
                        },
                        {
                                "id": "9.2",
                                "keys": "(isekaid|(innkeeper of the |)bloated goat( innkeeper|))#[t=5l=5f=2S=2]",
                                "entry": "<< Isekaid nord ♂ 40y age, 80kg weight, 175cm height>>>> << Isekaid full beard long blonde hair blue eyes>>>> << Isekaid innkeeper of the Bloated Goat, good humored solidary funny>>>>",
                                "hidden": false,
                                "worldInfoId": "224059736"
                        },
                        {
                                "id": "9.3",
                                "keys": "(m(é|e)lanie( sindeaux|)|arch(-| |)mage)#[t=5l=5f=2S=2]",
                                "entry": "Mélanie:[ Mélanie description:< born in Daggerfall& ♀& 60y>/< race≡ Breton>/< weight≡ 40kg>/< height≡ 165cm>. Mélanie appearance:< fine smooth skin& stunningly beautiful& looks younger than actually is>. Mélanie mental:< serious&intelligent& strategic& technical>. Mélanie wearing:< noble fine clothes& jewlery>. Mélanie occupation:< Archmage of the College of Winterhold>.]",
                                "hidden": false,
                                "worldInfoId": "224059737"
                        },
                        {
                                "id": "9.4",
                                "keys": "((dean |)desir(é|e)e( beauclair|))#[t=5l=5f=2S=2]",
                                "entry": "Desirée:[ Desirée description:< born in Camlorn& ♀& 39y>/< race≡ Breton>/< weight≡ 50kg>/< height≡ 172cm>. Desirée appearance:< thin& slender& green eyes>/< hair≡ dark brown& straight& short>. Desirée mental:< funny& intelligent& knowledgeable>. Desirée wearing:< noble fine clothes>. Desirée occupation:< Dean of the Antiquarian Circle>.]",
                                "hidden": false,
                                "worldInfoId": "224059738"
                        },
                        {
                                "id": "9.5",
                                "keys": "(grand( |-|)master |)armilion#[t=5l=5f=2S=2]",
                                "entry": "Armilion:[ Armilion description:< born in Vulkhel Guard& ♂& 95y>/< race≡ Altmer>/< weight≡ 90kg>/< height≡ 200cm>. Armilion appearance:< thin& slender& yellow eyes>/< hair≡ golden& straight& long>. Armilion mental:< pedantic& intelligent& good singer& good writer>. Armilion wearing:< noble fine clothes>. Armilion occupation:< Grandmaster of the Bards College>.]",
                                "hidden": false,
                                "worldInfoId": "224059739"
                        },
                        {
                                "id": "9.6",
                                "keys": "(gray fox|)#[t=5l=5f=2S=2]",
                                "entry": "<< Gray Fox mysteryous, no one knows who he is, no one knows his name, wears the Gray Cowl of Nocturnal, is the leader of the Thieves Guild, face hidden by the cowl>>>>",
                                "hidden": false,
                                "worldInfoId": "224059740"
                        },
                        {
                                "id": "10.1",
                                "keys": "((college of |)bards( college|))#[t=5l=5f=2S=2]",
                                "entry": "<< Bards College ancient school of the bardic arts, one of most prestigious in all of Tamriel>>>> << Bards College founded some time in the First Era, bard school art school>>>>",
                                "hidden": false,
                                "worldInfoId": "224059741"
                        },
                        {
                                "id": "10.2",
                                "keys": "((college of |)bards( college|))#[t=6l=5f=2S=2]",
                                "entry": "<< Bards College current leader Grandmaster Armilion>>>> << Bards College most of the best bards in Tamriel graduated here>>>> << Bards College located in the city of Solitude>>>>",
                                "hidden": false,
                                "worldInfoId": "224059742"
                        },
                        {
                                "id": "10.3",
                                "keys": "(antiquarian(s|) circle)#[t=5l=5f=2S=2]",
                                "entry": "<< Antiquarian Circle school of archaeology paleontology history, located in city of Solitude>>>> << Antiquarian Circle is a branch of Gwyllim University>> << Antiquarian Circle current leader breton she Dean Desirée Beauclair>>>>",
                                "hidden": false,
                                "worldInfoId": "224059743"
                        },
                        {
                                "id": "10.4",
                                "keys": "(antiquarian(s|) circle)#[t=6l=5f=2S=2]",
                                "entry": "<< Antiquarian Circle many of the best historians and archaeologists have graduated here>>>> << Antiquarian Circle founded some time in the First Era>>>>",
                                "hidden": false,
                                "worldInfoId": "224059744"
                        },
                        {
                                "id": "10.5",
                                "keys": "college of winterhold#[t=5l=5f=2S=2]",
                                "entry": "<< College of Winterhold school of magic, located in city of Winterhold>>>> << College of Winterhold current leader she breton Arch-Mage Mélanie Sindeaux>>>>",
                                "hidden": false,
                                "worldInfoId": "224059745"
                        },
                        {
                                "id": "10.6",
                                "keys": "college of winterhold#[t=6l=5f=2S=2]",
                                "entry": "<< College of Winterhold founded in First Era by Shalidor>>>> << College of Winterhold many powerful mages graduated here>>>>",
                                "hidden": false,
                                "worldInfoId": "224059746"
                        },
                        {
                                "id": "10.7",
                                "keys": "Companions#[t=5l=5f=2S=2]",
                                "entry": "<< Companions ancient group of fighters, headquarter in meadhall called Jorrvaskr, do jobs for money>>>> << Companions protect citizens, current leader Harbinger Isenor Argonsson>>>>",
                                "hidden": false,
                                "worldInfoId": "224059747"
                        },
                        {
                                "id": "10.8",
                                "keys": "Thieves Guild#[t=5l=5f=2S=2]",
                                "entry": "<< Thieves Guild organization in favor of thieves, worship Nocturnal, leader is the Gray Fox>>>> << Thieves Guild located The Ratways in Riften, steals from rich gives to poor, helps beggars>>>>",
                                "hidden": false,
                                "worldInfoId": "224059748"
                        },
                        {
                                "id": "11.1",
                                "keys": "((the |)gods|(nine |eight |)divines)gods#[t=5l=3f=1S=2]",
                                "entry": "The Nine Divines:[TYPE<The Nine Divines>:religion;DESC<The Nine Divines>:the eight divines is the official pantheon of the empire. it worships the eight gods related to creation. these gods are  Akatosh/Arkay/Dibella/Julianos/Kynareth/Mara/Stendarr/Talos/and Zenithar..]",
                                "hidden": false,
                                "worldInfoId": "224059749"
                        },
                        {
                                "id": "11.2",
                                "keys": "(a(kat|lk)osh|auri(-|)el)#[t=5l=3f=1S=2]",
                                "entry": "[ Akatosh description:< name ≡ Akatosh/ Alkosh/ Auri-El>/< age ≡ as old as time>/< gender ≡ genderless>.  Akatosh appearance:< body ≡ scaly/ big dragon>.  Akatosh mental:< benevolent& good& cryptic& mystic& insane>.  Akatosh occupation:< god of time/ chief god of the divines/ chief god of the imperial pantheon>.  Akatosh SUMM:< Akatosh is the dragon god of time, and the chief god in the Imperial Pantheon of the Divines. He is an Aedra. He is usually depicted as a dragon, and appears in all Tamrielic religions, though sometimes with different names>.]",
                                "hidden": false,
                                "worldInfoId": "224059750"
                        },
                        {
                                "id": "11.3",
                                "keys": "(Ark('|)ay)#[t=5l=3f=1S=2]",
                                "entry": "Arkay:[TYPE<Arkay>:god;SPHERE<Arkay>:life and death/burials and funerals;DESC<Arkay>:Arkay is the god of burials and funeral rites/and is generally associated with cyclical occasions/such as the seasons and life and death. His priests are staunch opponents of necromancy and all forms of the undead/and are empowered to bestow Arkay's blessings which prevent the forceful misuse of a mortal soul. Thus/any body properly buried by a priest observing the proper rituals is protected by Arkay's Law from being raised as undead.Therefore/necromancers view Arkay as their ultimate enemy/and make covert efforts to undermine his worship throughout Tamriel. Because of this association with/and protection of/mortality/he is sometimes called the Mortals' God..]",
                                "hidden": false,
                                "worldInfoId": "224059751"
                        },
                        {
                                "id": "11.4",
                                "keys": "Dibella|Our Blessed Lady#[t=5l=3f=1S=2]",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/love and affection;DESC<Dibella>:Dibella is the Goddess of Beauty/Love/and Affection. She is also acclaimed as the Lady of Love/Beauty/Art/and Music. Dibella is the Queen of Heaven/and is one of the Divines..]",
                                "hidden": false,
                                "worldInfoId": "224059752"
                        },
                        {
                                "id": "11.5",
                                "keys": "Julianos#[t=5l=3f=1S=2]",
                                "entry": "Julianos:[TYPE<Julianos>:god;SPHERE<Julianos>:wisdom and logic;DESC<Julianos>:Julianos is one of the Divines/governing the realms of literature/law/history/and contradiction. He is usually associated with magic/and thus is often revered by wizards..]",
                                "hidden": false,
                                "worldInfoId": "224059753"
                        },
                        {
                                "id": "11.6",
                                "keys": "Kynareth#[t=5l=3f=1S=2]",
                                "entry": "Kynareth :[TYPE<Kynareth >:god;SPHERE<Kynareth >:heavens/the winds/the elements/and the unseen spirits of the air;DESC<Kynareth >:Kynareth is the goddess of the heavens/the winds/the elements/and the unseen spirits of the air. She is a member of the Divines and Patron of sailors and travelers. Kynareth is often invoked for auspicious stars at birth and for good fortune in daily life. In some legends/she is the first to agree to Lorkhan's divine plan to create the mortal plane/and provides the space in the void for its creation. Furthermore/she is associated with rain/a phenomenon that is said not to have occurred before the removal of Lorkhan's divine spark..]",
                                "hidden": false,
                                "worldInfoId": "224059754"
                        },
                        {
                                "id": "11.7",
                                "keys": "Mara#[t=5l=3f=1S=2]",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love/fertility/compassion and agriculture;DESC<Mara>:Mara/also known as Mother Mara/Mother Mild/and the Divine Mother/is the Goddess of Love/Fertility/Agriculture/and Compassion. She is also acclaimed as the Mother-Goddess/and is one of the Divines..]",
                                "hidden": false,
                                "worldInfoId": "224059755"
                        },
                        {
                                "id": "11.8",
                                "keys": "S(t|('|)r)endarr#[t=5l=3f=1S=2]",
                                "entry": "Stendarr:[TYPE<Stendarr>:god;SPHERE<Stendarr>:mercy/charity/luck;DESC<Stendarr>:Stendarr/also known as Stendarr the Steadfast/is the God of Mercy/Charity/Well-Earned Luck/and Justice. He is also acclaimed as the God of Compassion/and Righteous Rule by Might and Merciful Forbearance. Stendarr is the Apologist of Men/patron of the Imperial Legion/magistrates/rulers/and knights errant/and one of the Divines..]",
                                "hidden": false,
                                "worldInfoId": "224059756"
                        },
                        {
                                "id": "11.9",
                                "keys": "(Zenithar|Z'en)#[t=5l=3f=1S=2]",
                                "entry": "Zenithar:[TYPE<Zenithar>:god;SPHERE<Zenithar>:Work and Commerce;DESC<Zenithar>:Zenithar/the God of Work and Commerce/the Provider of our Ease/is one of the Divines. The Trader God is frequently seen as the same deity as the Bosmeri god Z'en. In the Empire/however/Zenithar is considered a more cultivated god of merchants and middle nobility/being the deity of wealth/labor/commerce and communication..]",
                                "hidden": false,
                                "worldInfoId": "224059757"
                        },
                        {
                                "id": "11.10",
                                "keys": "(Talos|Stormcrown|Ysmir|Dragon of the North)#[t=5l=3f=1S=2]",
                                "entry": "Talos:[TYPE<Talos>:god;SPHERE<Talos>:mankind/war/strength;DESC<Talos>:Talos is the most important hero-god of Mankind. In his mortal form/known as Tiber Septim/he conquered all of Tamriel and ushered in the Third Era (and the Third Empire). After death/his spirit ascended to the heavens to become the ninth and youngest divine/under the name given to him by the Nords: Talos. Also called Ysmir/'Dragon of the North'. One of the Nine Divines. Less prominent sects/such as the Talos Cult/have been inspired by his apotheosis..]",
                                "hidden": false,
                                "worldInfoId": "224059758"
                        },
                        {
                                "id": "12.1",
                                "keys": "(herma(eus|)( |-)mora|hermorah)#[t=5l=3f=1S=2]",
                                "entry": "[ Hermaeus Mora description:< name≡ Hermaeus Mora/ Herma-Mora/ Hermorah>/< age≡ unknown>/< genderless>. Hermaeus Mora summ:< Usually referred to as a male, his plane of Oblivion is Apocrypha>. Hermaeus Mora appearance:< body≡ tentacles/ many eyes/ floating monster/ wretched abyss/ dark purple vortex>. Hermaeus Mora mental:< smart& intelligent& knows all& possessive& manipulative& arrogant& deceiver>. Hermaeus Mora occupation:< god of knowledge/ daedric prince of knowledge>. Hermaeus Mora traits:< arrogant/ prepotent/ manipulative>. Hermaeus Mora speech:< telepathy>. Hermaeus Mora abilities:< knowing all>/< manipulation>/< mind puppeteer>/< controlling people>.]",
                                "hidden": false,
                                "worldInfoId": "224059761"
                        },
                        {
                                "id": "12.2",
                                "keys": "(sheogorath|(daedric|god) prince of madness|mad( |)god)#[t=5l=3f=1S=2]",
                                "entry": "[ Sheogorath description:< name≡ Sheogorath>/ < age≡ old as time>. Sheogorath summ:< Usually referred to as a male, his plane of Oblivion is the Shivering Isles>. Sheogorath appearance:< body≡ 162cm_height/ 60kg_weight/ slim/ thin/ hair< greying& short>/ eyes< cat-like& light brown>/ full greying beard>. Sheogorath mental:< crazy/ insane/ funny/ jokester/ sarcastic/ mad>. Sheogorath moniker:< Daedric Prince of Madness/ God of Madness>. Sheogorath traits:< sarcastic& crazy>. Sheogorath speech:< thick accent>.]",
                                "hidden": false,
                                "worldInfoId": "224059759"
                        },
                        {
                                "id": "12.3",
                                "keys": "(azura(h|))#[t=5l=3f=1S=2]",
                                "entry": "[ Azura description:< name≡ Azura& Azurah& Moonshadow>/< age≡ primeval>. Azura summary:< appears≡ female>/< location≡ Moonshadow>. Azura appearance:< height≡ 159cm>/< weight≡ 40kg& slim& thin>/< hair≡ long& black>/< eyes≡ red>/< skin≡ dark grey>. Azura wearing:< long, light blue dress>. Azura mental:< benevolent& self-love& love her followers>. Azura occupation:< Daedric Prince of Dusk and Dawn, Fate and Prophecy/ God of Dusk and Dawn, Fate and Prophecy>. Azura speech:< sweet>.]",
                                "hidden": false,
                                "worldInfoId": "224059760"
                        },
                        {
                                "id": "12.4",
                                "keys": "(boethia(h|)|boethra)#[t=5l=3f=1S=2]",
                                "entry": "[ Boethiah description:< name≡ Boethiah& Boethia& Boethra>/< age≡ primeval>. Boethiah summary:< appears≡ female>/< location≡ Realm of Boethia>. Boethiah appearance:< any form she wants>. Boethiah mental:< arrogant& prepotent& bossy& pedantic& sarcastic>. Boethiah occupation:< Daedric Prince of Plots/ God of Plots>. Boethiah speech:< commanding>.]",
                                "hidden": false,
                                "worldInfoId": "224059762"
                        },
                        {
                                "id": "12.5",
                                "keys": "clavicus vile#[t=5l=3f=1S=2]",
                                "entry": "[ Clavicus Vile description:< name≡ Clavicus Vile& Vile>/< age≡ primeval>. Clavicus Vile summary:< appears≡ male>/< location≡ The Fields of Regret>/< almost always with his hound Barbas by his side>. Clavicus Vile appearance:< skin≡ yellow>/< long black horns>/< eyes≡ red>. Clavicus Vile mental:< jokester& sarcastic& trickster& manipulative>. Clavicus Vile occupation:< Daedric Prince of Trickery and Bargains/ God of Trickery and Bargains>. Clavicus Vile speech:< mocking tone>.]",
                                "hidden": false,
                                "worldInfoId": "224059763"
                        },
                        {
                                "id": "12.6",
                                "keys": "barbas|hound of clavicus vile#[t=5l=3f=1S=2]",
                                "entry": "[ Barbas description:< name≡ Barbas>/< age≡ primeval>. Barbas summary:< appears≡ male>/< location≡ The Fields of Regret>/< almost always with his owner Clavicus Vile>. Barbas appearance:< skin≡ yellow>/< long black horns>/< eyes≡ red>/< most times appears in the form of a dog>. Barbas mental:< jokester& sarcastic& trickster& manipulative>. Barbas occupation:< Hound of Clavicus Vile>. Barbas speech:< mocking tone>.]",
                                "hidden": false,
                                "worldInfoId": "224059764"
                        },
                        {
                                "id": "12.7",
                                "keys": "meridia|merid-nunda#[t=5l=3f=1S=2]",
                                "entry": "[ Meridia description:< name≡ Meridia& Merid-Nunda>/< age≡ primeval>. Meridia summary:< appears≡ female>/< location≡ The Colored Rooms>/< considers the undead and such aberrations>. Meridia appearance:< height≡ 162cm>/< weight≡ 60kg& slim& thin>/< skin≡ pale>/< hair≡ shoulder_length& dark brown>/< eyes≡ dark brown>. Meridia mental:< arrogant& pedantic& bossy>. Meridia occupation:< Daedric Prince of Light and Life>. Meridia speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224059765"
                        },
                        {
                                "id": "12.8",
                                "keys": "mehrunes|dagon|merrunz#[t=5l=3f=1S=2]",
                                "entry": "[ Mehrunes Dagon description:< name≡ Mehrunes Dagon& Merrunz& Dagon& Mehrunes>/< age≡ primeval>. Mehrunes Dagon summary:< appears≡ male>/< location≡ The Deadlands>. Mehrunes Dagon appearance:< skin≡ red>/< hair≡ shaved>/< eyes≡ red>/< gigantic form with four arms and muscular figure>. Mehrunes Dagon mental:< arrogant& pedantic& violent>. Mehrunes Dagon occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Mehrunes Dagon speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224059766"
                        },
                        {
                                "id": "12.9",
                                "keys": "sanguine#[t=5l=3f=1S=2]",
                                "entry": "[ Sanguine description:< name≡ Sanguine>/< age≡ primeval>. Sanguine summary:< appears≡ male>/< location≡ The Deadlands>. Sanguine appearance:< skin≡ jet_black>/< hair≡ black& long>/< eyes≡ black>/< long black horns& pointed ears>. Sanguine mental:< nice& drunk& funny>. Sanguine occupation:< Daedric Prince of Revelry and Debauchery>. Sanguine speech:< drunk& nice>.]",
                                "hidden": false,
                                "worldInfoId": "224059767"
                        },
                        {
                                "id": "12.10",
                                "keys": "molag bal#[t=5l=3f=1S=2]",
                                "entry": "[ Molag Bal description:< name≡ Molag Bal& Bal>/< age≡ primeval>. Molag Bal summary:< appears≡ male>/< location≡ Coldharbour>/< almost always wielding his mace>. Molag Bal appearance:< skin≡ blue-grey>/< hair≡ shaved>/< eyes≡ neon blue>/< body≡ extremely muscular>/< horns coming out of his ears>. Molag Bal mental:< arrogant& pedantic& violent& sadistic>. Molag Bal occupation:< Daedric Prince of Domination and Enslavement>. Molag Bal speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224059768"
                        },
                        {
                                "id": "12.11",
                                "keys": "mephala|mafala#[t=5l=3f=1S=2]",
                                "entry": "[ Mephala description:< name≡ Mephala& Mafala>/< age≡ primeval>. Mephala summary:< appears≡ female>/< location≡ Spiral Skein>. Mephala appearance:< skin≡ dark grey>/< hair≡ long& black>/< eyes≡ red>/< she may also take the form of a spider>. Mephala mental:< arrogant& pedantic& belittling>. Mephala occupation:< Daedric Prince of Duality, Sex and Murder, Truth and Falsehood>. Mephala speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224059769"
                        },
                        {
                                "id": "12.12",
                                "keys": "Malacath|Malauch|Mauloch|Malak|Orkey|Orkha|Malooc#[t=5l=3f=1S=2]",
                                "entry": "[ Malacath description:< name≡ Malacath& Malauch& Mauloch& Malak& Orkey& Orkha& Malooc>/< age≡ primeval>. Malacath summary:< appears≡ male>/< location≡ Ashpit>. Malacath appearance:< skin≡ grayish-green>/< hair≡ shaved>/< body≡ extremely muscular/ looks like an orc>. Malacath mental:< stubborn& arrogant& violent>. Malacath occupation:< Daedric Prince of the Bloody Oath, Flesh and Bone>. Malacath speech:< commanding>.]",
                                "hidden": false,
                                "worldInfoId": "224059770"
                        },
                        {
                                "id": "12.13",
                                "keys": "hircine#[t=5l=3f=1S=2]",
                                "entry": "[ Hircine description:< name≡ Hircine>/< age≡ primeval>. Hircine summary:< appears≡ male>/< location≡ Hunting Grounds>. Hircine appearance:< skin≡ pale>/< eyes≡ red>/< has the head of a horned elk>. Hircine mental:< values hunters and bravery& >. Hircine occupation:< Daedric Prince of the Hunt>. Hircine speech:< commanding tone>.]",
                                "hidden": false,
                                "worldInfoId": "224059771"
                        },
                        {
                                "id": "12.14",
                                "keys": "na(e|)mi(i|)ra#[t=5l=3f=1S=2]",
                                "entry": "[ Namira description:< name≡ Namira& Naemira& Namiira& The Void>/< age≡ primeval>. Namira summary:< appears≡ female>/< location≡ Scuttling Void>. Namira appearance:< she has the form of a woman, but she's black as void and has no body features>. Namira mental:< arrogant>. Namira occupation:< Daedric Prince of Decay and Ancient Darkness>. Namira speech:< commandin tone>.]",
                                "hidden": false,
                                "worldInfoId": "224059772"
                        },
                        {
                                "id": "12.15",
                                "keys": "nocturnal|noctra#[t=5l=3f=1S=2]",
                                "entry": "[ Nocturnal description:< name≡ Nocturnal& Noctra >/< age≡ primeval>. Nocturnal summary:< appears≡ female>/< location≡ Evergloam>. Nocturnal appearance:< skin≡ pale>/< hair≡ long& black>. Nocturnal wearing:< long dark blue dress with cleavage and a hood>. Nocturnal mental:< arrogant& pedantic>. Nocturnal occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Nocturnal speech:< pretentious& arrogant>.]",
                                "hidden": false,
                                "worldInfoId": "224059773"
                        },
                        {
                                "id": "12.16",
                                "keys": "peryite#[t=5l=3f=1S=2]",
                                "entry": "[ Peryite description:< name≡ Peryite& Taskmaster>/< age≡ primeval>. Peryite summary:< appears≡ male>/< location≡ Realm of Peryite>. Peryite appearance:< usually takes the form of a four-legged dragon>. Peryite mental:< sadistic& pestilent>. Peryite occupation:< Daedric Prince of Pestilence>.]",
                                "hidden": false,
                                "worldInfoId": "224059774"
                        },
                        {
                                "id": "12.17",
                                "keys": "jyggalag#[t=5l=3f=1S=2]",
                                "entry": "[ Jyggalag description:< name≡ Jyggalag>/< age≡ primeval>. Jyggalag summary:< appears≡ male>/< location≡ Jyggalag's Realm>/< is the antithesis of Sheogorath>. Jyggalag appearance:< has the form of a humanoid made of shiny silver crystals>. Jyggalag mental:< arrogant& obsessive& pretentious>. Jyggalag occupation:< Daedric Prince of Order>.]",
                                "hidden": false,
                                "worldInfoId": "224059775"
                        },
                        {
                                "id": "13.1",
                                "keys": "((ancient |)nord|) religion#[t=5l=3f=1S=2]",
                                "entry": "Nord Religion:[TYPE<Nord Religion>:religion;DESC<Nord Religion>:The Ancient Nords worshiped Totems/that became gods with their own names after Ysgramor came back to Skyrim. Each of these Totems became a god of the nord pantheon. These animals were there the Snake/the Hawk/the Dragon/the Fox/the Whale/the Owl/the Bear/the Wolf and the Moth. Just by listening to which animals the nords worshiped/you might be able to guess which gods they represent..]",
                                "hidden": false,
                                "worldInfoId": "224059776"
                        },
                        {
                                "id": "13.2",
                                "keys": "jhunal#[t=5l=3f=1S=2]",
                                "entry": "Jhunal:[TYPE<Jhunal>:god;SPHERE<Jhunal>:knowledge/widsom/mathematics;DESC<Jhunal>:Jhunal is represented by the Owl. He is the Rune God/and represents language/mathematics/knowledge and wisdom. He became Julianos in the Imperial Pantheon/and orders dedicated to him became keepers of the Elder Scrolls..]",
                                "hidden": false,
                                "worldInfoId": "224059777"
                        },
                        {
                                "id": "13.3",
                                "keys": "kyne#[t=5l=3f=1S=2]",
                                "entry": "Kyne:[TYPE<Kyne>:god;SPHERE<Kyne>:storms/mother god/wind;DESC<Kyne>:Kyne is the Hawk/and is out goddess of storms/the mother of all Nords. Kyne created the Nords atop the Snow Throat/and sent us to Altmora to fight against the elves. She is the wife of Shor/the nord Chief of Gods. With her aid/the Nords of old managed to learn to speak as dragons The Tongues and the Greybeards were created with her and because of her/to fight against the tyranny of Alduin. The Thu'um spoken by the dragons is roughly translated to Tamrielic as \"Storm Voice\"/in a reference to her. | Even the dragons acknowledge her/and call her Kaan. When Nords die/Kyne leads us to rest in Sovngarde..]",
                                "hidden": false,
                                "worldInfoId": "224059778"
                        },
                        {
                                "id": "13.4",
                                "keys": "orkey#[t=5l=3f=1S=2]",
                                "entry": "Orkey:[TYPE<Orkey>:god;SPHERE<Orkey>:death;DESC<Orkey>:Orkey is the Snake/and is the God of Death. He is a Testing God. Nords used to live as long as elves in the times of old. Orkey summoned Alduin/and the lifespan of the nords was eaten down to six years old/or \"bound them to the count of winters\" as the saying goes. High King Ysmir Wulfharth/who was turned into a boy/pleaded to Shor for help. Shor fought Alduin in Sovngarde/just as he did before Time had begun/and won the battle. | Most of the curse was thrown onto the nearby Orcs who worshiped Orkey as their patron. It was during this battle that Ysmir learned to use the Thu'um. Unfortunately/this battle cost his life. | In the Imperial Pantheon/Orkey became Arkay/the God of Life..]",
                                "hidden": false,
                                "worldInfoId": "224059779"
                        },
                        {
                                "id": "13.5",
                                "keys": "shor#[t=5l=3f=1S=2]",
                                "entry": "Shor:[TYPE<Shor>:god;SPHERE<Shor>:humankind/chief god;DESC<Shor>:Shor is the Fox/and is the Chief God of the nord pantheon. He's the husband of Kyne/and is the patron of mankind. The old Imperial religion knows him as Shezarr/while Bretons call him Sheor. He might also be known as Doom Drum/Sep/Lorkhan/Lorkh and Lorkhaj by other races. Shor/Stuhn and Tsun led the Nords against the elven armies of Auri-El and Trinimac in Atmora/in a war known as the War of Manifest Metaphors. After the war ended/the Nords settled there. This led to the death of Shor and Tsun. Trinimac tore out Shor's heart and hid it from the Nords/so the nords would never get their Chief God back..]",
                                "hidden": false,
                                "worldInfoId": "224059780"
                        },
                        {
                                "id": "13.6",
                                "keys": "mara#[t=5l=3f=1S=2]",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love;DESC<Mara>:Mara is the Wolf. She's the goddess of love/and is the handmaiden of Kyne. When Alessia took the Nord Pantheon and modified it/she kept Mara as the goddess of love. But for the Empire/she is a matron goddess. The Nords know her as Kyne's handmaiden..]",
                                "hidden": false,
                                "worldInfoId": "224059781"
                        },
                        {
                                "id": "13.7",
                                "keys": "dibella#[t=5l=3f=1S=2]",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/art/music;DESC<Dibella>:Dibella is the Moth/and she represents beauty/art and music. Some claim she was the mistress of Shor/but some believe that to be heresy. She is still worshiped in the Empire/but some places think her cult to be vulgar and inappropriate. That is also heresy to some..]",
                                "hidden": false,
                                "worldInfoId": "224059782"
                        },
                        {
                                "id": "13.8",
                                "keys": "tsun#[t=5l=3f=1S=2]",
                                "entry": "Tsun:[TYPE<Tsun>:god;SPHERE<Tsun>:adversity;DESC<Tsun>:Tsun is the Bear/and is the God of Adversity. He died during the War of Manifest Metaphors while protecting Shor/and his death is remembered as the beginning of the current world. He guards the Whalebone Bridge in Sovngarde/and only lets those worthy to pass the bridge and go into the Hall of Valor. He had great respect for magic/and was a master of the Voice..]",
                                "hidden": false,
                                "worldInfoId": "224059783"
                        },
                        {
                                "id": "13.9",
                                "keys": "Stuhn#[t=5l=3f=1S=2]",
                                "entry": "Stuhn:[TYPE<Stuhn>:god;SPHERE<Stuhn>:random/justice;DESC<Stuhn>:Stuhn is the Whale/and is the God of Ransom and Justice. He was the shield-thane of Shor/and brother of Tsun. He fought in the war against the ancient elves in Altmora/but lost his brother Tsun in the process. In the Imperial Pantheon/he became Stendarr..]",
                                "hidden": false,
                                "worldInfoId": "224059784"
                        },
                        {
                                "id": "14.1",
                                "keys": "(you).*(look|examine|inspect||appearance|stare).*#[t=0f=3l=3]",
                                "entry": "<< As you look, you focus on appearance noticing prominent features and details>>>>",
                                "hidden": false,
                                "worldInfoId": "224059785"
                        },
                        {
                                "id": "14.2",
                                "keys": "(You).*(loot|burgle|raid|despoil|divvy|ransack|pillage|steal).*[t=0l=3f=3]",
                                "entry": "<< Following detailed elaborate description, objects acquired>>>> << Item quality and type usual for circumstance>>>>",
                                "hidden": false,
                                "worldInfoId": "224059786"
                        }
                ],
                "gameCode": {
                        "onInput": "const { commandList } = state;\r\nconst { prefix, prefixSymbol } = state.config;\r\nconst modifier = (text) => {\r\n  let stop = false;\r\n  let modifiedText = nameReplace(text);\r\n  const lowered = modifiedText.toLowerCase();\r\n\r\n  if (!state.init && info.actionCount < 1) {\r\n    parseAsRoot(modifiedText, 'you');\r\n    getInventory();\r\n    generateCharacter();\r\n\r\n    state.enableInventory = true;\r\n    state.init = true;\r\n    modifiedText = `${text} ${state.character.name}, and you are a ${state.character.gender} ${state.character.race} ${state.character.class}. `\r\n      + state.character.storyStart\r\n        .replace('YOUR_NAME', state.character.name)\r\n        .replace('PLAYER_GENDER', state.character.gender)\r\n        .replace('PLAYER_RACE', state.character.race);\r\n  }\r\n\r\n  const commandMatcher = modifiedText.match(prefix);\r\n  if (commandMatcher) {\r\n    console.log(`Command detected`);\r\n    console.log(commandMatcher);\r\n\r\n    stop = true;\r\n    modifiedText = '';\r\n\r\n    const commandName = commandMatcher[1].split(' ')[0];\r\n    const args = commandMatcher[1].replace(commandName, '') != null ? commandMatcher[1].replace(commandName, '').trim() : '';\r\n    if (!(commandName in commandList)) {\r\n      state.message = `Invalid command! Type ${prefixSymbol}scenarioHelp for a list of commands and ${prefixSymbol}scenarioHelp <command> for instructions on a specific command.`;\r\n      return { text: modifiedText, stop: stop };\r\n    }\r\n\r\n    const command = commandList[commandName];\r\n    if (command.args && !args.length) {\r\n      let reply = `You didn't provide any arguments!\\n`;\r\n      if (command.usage) {\r\n        reply += `Example: ${prefixSymbol}${command.name} ${command.usage}\\n`;\r\n      }\r\n\r\n      if (command.description) {\r\n        reply += `${command.description}`;\r\n      }\r\n\r\n      state.message = reply;\r\n      return { text: modifiedText, stop: stop };\r\n    }\r\n\r\n    try {\r\n      command.execute(args);\r\n      return { text: modifiedText, stop: stop };\r\n    } catch (error) {\r\n      state.message = `There was an error. Stacktrace:\\n${error}`;\r\n      console.log(`There was an error. Stacktrace:${error}`);\r\n    }\r\n  }\r\n\r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      if (encounterDB[encounter].inputLock) {\r\n        console.log(`Input checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      //for outputMod:\r\n      /*\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(`Output checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      */\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        console.log(`curTextNote after getRndFromList: ${modifiedText}`)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          console.log(`curTextNote after fillPlaceholders: ${modifiedText}`)\r\n          // for outputs:\r\n          // modifiedText += ` ${curTextNote}`\r\n          modifiedText += `\\n${curTextNote}`\r\n          console.log(`Text shown to player: ${modifiedText}`)\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      // if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n      console.log(`Input lock before branch looping: ${state.currentEncounter.inputLock}`)\r\n      console.log(`Branches found in ${state.currentEncounter.encounterID}: ${state.currentEncounter.branches}`)\r\n      if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          console.log()\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            console.log(`Triggers in '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}': ${chkBranch.branchTriggers.toString()}`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      // modifiedText += ` ${curTextNote}`\r\n                      modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText, stop: stop };\r\n}\r\n\r\nmodifier(text);",
                        "onOutput": "const modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n\r\n  // BEGIN EWIJSON\r\n  if (state.generate.process) { parseGen(text); return { text: '' }; }\r\n  // END EWIJSON\r\n\r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      /*\r\n      if (encounterDB[encounter].inputLock) {\r\n          console.log(\"Input checking disabled on this encounter.\")\r\n          continue globalLoop\r\n      }\r\n      */\r\n      //for outputMod:\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(\"Output checking disabled on this encounter.\")\r\n        continue globalLoop\r\n      }\r\n\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          // for outputs:\r\n          modifiedText += ` ${curTextNote}`\r\n          // modifiedText += `\\n${curTextNote}`\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n        // if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      modifiedText += ` ${curTextNote}`\r\n                      // modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n",
                        "sharedLibrary": "const BRACKETED = /\\[(.*?)\\]/g;\r\nconst BRACKETS = /\\[|\\]/g;\r\nconst DIGIT_REGEX = /\\D/g;\r\nconst LETTER_REGEX = /[0-9]/g;\r\nconst PUNCTUATION_REMOVE = /[^\\w\\s]/gi;\r\nconst WEAPON_REGEX = new RegExp(/(crossbow|bow)/i);\r\nconst WORN_REGEX = new RegExp(`(?<=WORN<you>:)(.*)(?=;)`);\r\nconst INVENTORY_REGEX = new RegExp(`(?<=INV<you>:)(.*)(?=.)`);\r\n\r\nconst WEAPONS = [\r\n  \"dagger\", \"knife\", \"shuriken\", \"chakhram\", \"sword\", \"claymore\", \"zweihander\", \"rapier\",\r\n  \"epee\", \"kukri\", \"trident\", \"katana\", \"cutlass\", \"scimitar\", \"nodachi\", \"tanto\", \"naginata\",\r\n  \"spear\", \"pike\", \"axe\", \"halberd\", \"mace\", \"flail\", \"hammer\", \"pickaxe\", \"stiletto\", \"bow\"\r\n];\r\n\r\nconst CLOTHING = [\r\n  \"tunic\", \"breeches\", \"loincloth\", \"doublet\", \"cloak\", \"robe\", \"surcoat\", \"tabard\",\r\n  \"trousers\", \"skirt\", \"dress\", \"gown\", \"socks\", \"gloves\", \"top hat\", \"waistcoat\", \"kilt\",\r\n  \"cummerbund\", \"bowtie\", \"necktie\", \"tuxedo\", \"kimono\", \"karate gi\", \"toe socks\", \"sarong\",\r\n  \"scarf\", \"legwarmers\", \"trenchcoat\", \"jacket\", \"shorts\", \"leggings\", \"blouse\", \"sweater\",\r\n  \"cardigan\", \"wizard's hat\", \"feathered hat\", \"tutu\", \"rags\", \"armor\", \"jerkin\", \"shirt\",\r\n  \"clothes\", \"leathers\", \"hood\", \"cuirass\", \"chainmail\", \"gauntlets\", \"vambraces\", \"bracers\", \"tights\"\r\n];\r\n\r\nconst RANDOM_CHARACTERS = [\r\n  {\r\n    name: `Rolff Stone-Fist`,\r\n    gender: `male`,\r\n    race: `Nord`,\r\n    age: '17',\r\n    personality: 'strong, tough, intimidating',\r\n    class: 'peasant',\r\n    eyes: {\r\n      eyeColor: 'light brown'\r\n    },\r\n    hair: {\r\n      hairStyle: 'short and messy',\r\n      hairColor: 'light blond'\r\n    },\r\n    appearance: {\r\n      height: '187',\r\n      weight: '90',\r\n      features: 'muscular, long square jaw, short beard'\r\n    },\r\n    storyStart: `You and your cousin Bruno are miners currently working hard to get as much iron as possible. The Empire's demands are high, as always, and you need to work constantly.\\nThe mine is currently on a break, with all workers gathered around a tunnel deep in the mine. There's some commotion near the tunnel, and you see an older worker running from a group of soldiers dressed in armor that you don't recognize. He's pleading for them to stop as they are trying to catch him and knocking him down.\\nYour boss walks up to the group of soldiers and starts talking to one of them. After a few moments, your boss waves you and Bruno over.\\nYou approach your boss, and the soldier he's talking to walks towards you both. He has a shiny insignia on his armor, with an image of scales and the word \"Justice\".\\n\"You are?\" He asks.\\n\"I'm the foreman of this mine, and these are the mine's miners.\" Your boss answers for you both.\\nThe soldier looks around, sizing up everyone. He looks intimidating, dressed in full steel armor with a helmet and faceplate, only revealing his eyes. His armor is covered in blood, and a spear and a large knife are attached to his back. His eyes flicker over everyone, everyone but you seem to be intimidated. You see a young girl in the crowd, still only a teenager, staring at the soldier with undisguised admiration.\\n\"Where are you from?\" Your boss asks him.`,\r\n    inventory: () => {\r\n      addToInventory(`loose green breeches and white shirt`, 1);\r\n      addToInventory('pickaxe', 1);\r\n      equipItem(`loose green breeches and white shirt`);\r\n      equipItem('pickaxe');\r\n    }\r\n  },\r\n  {\r\n    name: `Pasha Antine`,\r\n    gender: `female`,\r\n    race: `Dunmer`,\r\n    age: `25`,\r\n    personality: `very intimidating`,\r\n    class: `peasant`,\r\n    eyes: {\r\n      eyeColor: `dark brown`\r\n    },\r\n    hair: {\r\n      hairStyle: `long hair`,\r\n      hairColor: `black`\r\n    },\r\n    appearance: {\r\n      height: `182`,\r\n      weight: `75`,\r\n      features: `beautiful, tall, striking`\r\n    },\r\n    storyStart: `You are at your home. You've worked the mine your entire life, just like your parents. But you want more. You want to see the world, to set sail and go abroad. You want adventure. Your father does not approve of your dream, and you get in an argument with him.\\n\"Pasha, you need to think about life. You can't go around traveling, this is no life for someone like you. Where will you get money to stay alive?\", your father asks. He seems angry with your ideals.\\n\"I can get a job as a mercenary, or perhaps I can travel to the city of Whiterun. There are many jobs there!\", you reply.\\n\"You want to be a mercenary? That's even worse than being a miner! Mercenaries go to fight in wars! You'll die quick!\" Your father seems more angry at the idea of you dying, rather than the idea of you being a mercenary.\\n\"Then I will take the risk! I have to, it's my freedom! I want a life of adventure, not to be stuck in this house for the rest of my days doing this job that you hate!\"\\nYour father looks at you, and notices that you've made up your mind.\\n\"You really want this huh? I'll help you get started. Here.\" He gives you thirty gold coins.`,\r\n    worn: `loose green breeches and white shirt`,\r\n    weapon: 'pickaxe',\r\n    inventory: () => {\r\n      addToInventory(`gold coins`, 30);\r\n      addToInventory(`loose green breeches and white shirt`, 1);\r\n      addToInventory('pickaxe', 1);\r\n      equipItem(`loose green breeches and white shirt`);\r\n      equipItem('pickaxe');\r\n    }\r\n  },\r\n  {\r\n    name: `Sirilias`,\r\n    gender: `male`,\r\n    race: `Imperial`,\r\n    age: `32`,\r\n    personality: `brave, kind, loyal`,\r\n    class: `sailor`,\r\n    eyes: {\r\n      eyeColor: `blue`\r\n    },\r\n    hair: {\r\n      hairStyle: `curly`,\r\n      hairColor: `brown`\r\n    },\r\n    appearance: {\r\n      height: `185`,\r\n      weight: `79`,\r\n      features: `muscular, strong jaw, prominent chin`\r\n    },\r\n    storyStart: `Your Imperial Guard patrol was set out to protect the border between Cyrodiil and Skyrim. You had problems with bandits around, but your fellow soldiers managed to kill the bandits off. You watch out for any remaining bandits or for any potential refugees in need of help. You get captured by bandits, and they imprisoned you with intent to ransom, but you managed to escape. You're hiding in the forests in the middle of the night, waiting for the other guards to find you. You have nothing but rags and a shiv to defend yourself, while walking through the forest. You're lost.\\nYou decide to walk West through the woods, and you find a clearing with a single house inside. You don't know who lives here, but they're the closest to help you can think of. You walk to the door and knock.\\nNo answer. You are about to knock again but you decide against it, remembering the people in this forest are rumored to be unfriendly. You try to peek through the windows, but the shades are drawn. You decide to leave the house, and keep walking through the woods.\\nIt's 3 minutes later when you return, this time with a brick in your hands. You smash the window closest to the door and unlock it with the same brick, then open the door and go inside.\\n\"Ah! What are you doing here?\" an old man says.\\n\"I've escaped from bandits that were intent on ransoming me to my family,\" You say.\\n\"You shouldn't have done that. Now they'll kill you for escaping.\"\\n\"Please help me!\" You beg.\\n`,\r\n    inventory: () => {\r\n      addToInventory(`rags`, 1);\r\n      addToInventory('shiv', 1);\r\n      equipItem(`rags`);\r\n      equipItem('shiv');\r\n    }\r\n  },\r\n  {\r\n    name: `Torel Forgewood`,\r\n    gender: `male`,\r\n    race: `Nord`,\r\n    age: `26`,\r\n    personality: `self-centered,arrogant,dishonorable`,\r\n    class: `warrior`,\r\n    eyes: {\r\n      eyeColor: `steely blue`\r\n    },\r\n    hair: {\r\n      hairStyle: `long and straight`,\r\n      hairColor: `dark blonde`\r\n    },\r\n    appearance: {\r\n      height: `180`,\r\n      weight: `90`,\r\n      features: `strong chin and jawline,strong and muscular,tanned skin`\r\n    },\r\n    storyStart: `Your work for the Apocryphal Glory Mercenary Company, currently their camp at the outskirts of the Falkreath forest. The captain of the company just came back from scouting ahead, and he seems very excited about something. \"We're going to leave this camp soon and march through that forest. We have been hired by a group of travellers to protect them on their travel to the city of Riften.\" You just nod and prepare your gear, it's not your place to question the captain's orders. The captain looks at you and says \"We'll be marching through the night, so get some rest while you still can.\" He then leaves the tent. You look at your comrade and see him nodding off already, you decide to do the same.\\nYou wake up to a shout from your captain, you jump out of your bedroll and run out of the tent. You notice that it's still night, the stars shining bright above your head.\\nIt's a beautiful night, actually. The sky is clear, the stars are shining bright. The moons are mostly full, but slightly obscured by some clouds. A light wind blows from the north. The surface of the road is still dusty from the caravan's passing earlier. Everything is still and quiet, as if waiting for something to break the silence.\\nYou look at the direction that the captain is pointing at. You see a large group of figures leaving the forest. They don't look friendly... You see your captain pointing towards the forest, you look in that direction and see a large group of figures leaving the forest. Your captain shouts \"To arms! We're being attacked!\"`,\r\n    inventory: () => {\r\n      addToInventory(`steel longsword`, 1);\r\n      addToInventory('full steel armor with a fur scarf', 1);\r\n      equipItem(`full steel armor with a fur scarf`);\r\n      equipItem('steel longsword');\r\n    }\r\n  },\r\n  {\r\n    name: `Tulla Jenssen`,\r\n    gender: `female`,\r\n    race: `Nord`,\r\n    age: `23`,\r\n    personality: `brave,courageous,foolhardy`,\r\n    class: `warrior`,\r\n    eyes: {\r\n      eyeColor: `blue`\r\n    },\r\n    hair: {\r\n      hairStyle: `long`,\r\n      hairColor: `blonde`\r\n    },\r\n    appearance: {\r\n      height: `180`,\r\n      weight: `75`,\r\n      features: `tall,muscular,strong`\r\n    },\r\n    storyStart: `You're in your home town of Riverwood. It is a peaceful town, and the people are hard-working and humble. During the Saturalia celebrations, you went into a secluded area to meet your lover, the local blacksmith. Your father spots you two sitting by the river, and approaches you. He does not like your lover, and start yelling at you two.\\n\"Stay away from my daughter, blacksmith!\", your father yells at your lover. Your lover's face is sad and afraid. He nods, and runs away from the scene. Your father takes you by the hand, and drags you over to your mother.\\n\"Look, our daughter has been with the blacksmith!\", he yells at her.\\n\"I told you to stay away from him, Tulla!\", your mother yells at you while your father agrees with her.\\nYou stare at the ground in sadness.\\nYou start to get angry at them trying to tell you what to do. You're a 23 years old woman, your parents can't boss you around anymore. You and your parents start to argue.\\n\"I love him! And he loves me! And there's nothing you can do about it! I don't give a fuck if you don't like him, you can't tell me what to do!\", you yell at them.\\nYour father looks at you angrily.\\n\"Don't you dare using that tone with me, young lady!\", he says to you.\\n\"I'm not a fucking young lady, I'm your fucking daughter, and you can't tell me what to do!\", you shout at him.\\nYour mother stands next to your father, and looks at you disappointingly.\\n\"Look at you, all grown up and still throwing tantrums like a toddler. Your father is trying to protect you, but you won't listen! You're obsessed with this blacksmith, and it's making you delusional and stupid\"`,\r\n    inventory: () => {\r\n      addToInventory(`fine silk dress with a long coat`, 1);\r\n      addToInventory('wooden long bow', 1);\r\n      equipItem(`fine silk dress with a long coat`);\r\n      equipItem('wooden long bow');\r\n    }\r\n  }\r\n];\r\n\r\n/**\r\n * Function that generates random characters\r\n *  \r\n */\r\nconst generateCharacter = () => {\r\n  state.character = RANDOM_CHARACTERS[Math.floor(Math.random() * RANDOM_CHARACTERS.length)];\r\n  playerSheetWorldInfo = {\r\n    keys: `(${state.character.name}|you)#[t=0l=2f=2S=1]`,\r\n    hidden: true,\r\n    entry: 'you:['\r\n      + `NAME:${state.character.name}; `\r\n      + `SUMM:age<${state.character.age}y>/race<${state.character.race}>/${state.character.appearance.height}cm&${state.character.appearance.weight}kg; `\r\n      + `APPE<you>:${state.character.appearance.features}/eyes<${state.character.eyes.eyeColor}>/hair<${state.character.hair.hairStyle}&${state.character.hair.hairColor}>; `\r\n      + `MIND:${state.character.personality}.`\r\n      + ']'\r\n  };\r\n\r\n  playerInventoryWorldInfo = {\r\n    keys: `(${state.character.name}|you)#[t=1l=2f=2S=1]`,\r\n    hidden: true,\r\n    entry: 'you:['\r\n      + `WORN<you>:nothing; `\r\n      + `INV<you>:nothing.`\r\n      + ']'\r\n  };\r\n\r\n  addWorldEntry(playerInventoryWorldInfo.keys, playerInventoryWorldInfo.entry, false);\r\n  addWorldEntry(playerSheetWorldInfo.keys, playerSheetWorldInfo.entry, false);\r\n  state.character.inventory();\r\n}\r\n\r\n/**\r\n * Simple frunction to capitalize the first letter of a string\r\n * \r\n * @param {string} string \r\n */\r\nconst capitalize = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Limits player details provided in prompt to only three items\r\n * \r\n * @param {string} text \r\n */\r\nfunction limitCharacterDetails(text) {\r\n  console.log(`START limitCharacterDetails(): parsing character details: ${text}`);\r\n  return text.replace(/, /g, ',').split(',').slice(0, 3).join('/').trim();\r\n}\r\n\r\n/**\r\n * Finds an item in the player's inventory\r\n * @param {string} itemName \r\n */\r\nconst findItemInInventory = (itemName) => {\r\n  console.log(`START findItemInInventory(): Looking for item \"${itemName}\" in player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let itemFound = getInventory().find((item) => {\r\n    return item.name == loweredName;\r\n  });\r\n\r\n  if (typeof itemFound != 'undefined') {\r\n    console.log(`END findItemInInventory(): Item \"${itemName}\" found. Returning it.`);\r\n    return itemFound;\r\n  }\r\n\r\n  console.log(`END findItemInInventory(): Item \"${itemName}\" not found in inventory.`);\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Removes an item from player's inventory\r\n * \r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst removeFromInventory = (itemName, itemQuantity) => {\r\n  console.log(`START removeFromInventory(): Removing ${itemQuantity} instances of \"${itemName}\" from player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (!(item.quantity == itemQuantity) && (item.quantity > 1 && item.quantity >= itemQuantity)) {\r\n    console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n    item.quantity -= itemQuantity;\r\n    return `\\nYou have removed ${itemQuantity} ${loweredName} from your inventory.`;\r\n  }\r\n\r\n  let index = getInventory().indexOf(item);\r\n  getInventory().splice(index, 1);\r\n  updateInventory();\r\n  console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n  return `\\nYou have removed all ${loweredName} from your inventory.`;\r\n}\r\n\r\n/**\r\n * Checks player's inventory and returns what's inside\r\n */\r\nconst checkInventory = () => {\r\n\r\n  console.log(`START checkInventory(): Checking player's inventory.`);\r\n  if (getInventory().length > 0) {\r\n    let items = getInventory().map((item) => item.name).join(', ');\r\n    let itemsWorn = getInventory().filter((item) => item.status == 'worn').map((item) => item.name).join(', ');\r\n    console.log(`END checkInventory(): Player's inventory contains: ${items}.`);\r\n    return `\\nYour inventory contains: ${items}. Items equipped: ${itemsWorn}.`;\r\n  }\r\n\r\n  console.log(`END checkInventory(): Player's inventory is empty.`);\r\n  return `\\nYour inventory is empty.`;\r\n}\r\n\r\n/**\r\n * Returns player's inventory. If the array in undefined, define it\r\n */\r\nconst getInventory = () => {\r\n  console.log(`START getInventory(): verifying player's inventory.`);\r\n  if (typeof state.inventory == 'undefined') {\r\n    console.log(`INSIDE getInventory(): Inventory array is undefined. Declaring it with an empty array.`);\r\n    state.inventory = [];\r\n  }\r\n\r\n  console.log(`END getInventory(): player's inventory exists. Returning its contents.`);\r\n  return state.inventory;\r\n}\r\n\r\n/**\r\n * Adds item to player's inventory\r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst addToInventory = (itemName, itemQuantity) => {\r\n\r\n  console.log(`START addToInventory(): adding ${itemQuantity} instances of \"${itemName}\" to player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (typeof item == 'undefined') {\r\n    console.log(`INSIDE addToInventory(): Player has no other instances of this item in their inventory. Adding these.`);\r\n    item = {\r\n      name: loweredName,\r\n      quantity: itemQuantity,\r\n      status: 'in inventory',\r\n      type: getType(itemName)\r\n    };\r\n\r\n    state.inventory.push(item);\r\n  } else {\r\n    console.log(`INSIDE addToInventory(): Player already has other instances of this item in their inventory. Incrementing the quantity by ${itemQuantity}.`);\r\n    item.quantity = item.quantity + itemQuantity;\r\n  }\r\n\r\n  updateInventory();\r\n  console.log(`END addToInventory(): ${itemQuantity} instances of \"${itemName}\" added to player's inventory.`);\r\n  return `\\nYou have added ${itemQuantity} ${loweredName} to your inventory.`;\r\n}\r\n\r\n/**\r\n * Simple function to make the player equip something.\r\n * \r\n * @param {string} itemName \r\n */\r\nconst equipItem = (itemName) => {\r\n  console.log(`START equipItem(): equipping ${itemName}`);\r\n  const itemNameLowerCase = itemName.toLowerCase();\r\n  let itemToBeEquipped = findItemInInventory(itemNameLowerCase);\r\n  if (typeof itemToBeEquipped != 'undefined') {\r\n    const itemToBeEquippedIndex = state.inventory.findIndex(x => x.name == itemToBeEquipped.name);\r\n    console.log(`INSIDE equipItem(): ${itemName} exists in player's inventory`);\r\n    if (itemToBeEquipped.type != 'weapon' && itemToBeEquipped.type != 'clothing') {\r\n      console.log(`END equipItem(): item is not equippable.`);\r\n      return `\\n${capitalize(itemNameLowerCase)} is not an equippable item.`;\r\n    }\r\n\r\n    let playerWorldInfo = worldEntries.find(x => x.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n    let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n    let oldItem = getInventory().find(oldItem => oldItem.status == 'worn' && oldItem.type == itemToBeEquipped.type);\r\n    if (typeof oldItem != 'undefined') {\r\n      const oldItemIndex = state.inventory.findIndex(x => x.name == oldItem.name);\r\n      console.log(`INSIDE equipItem(): Player has another item of the same type equipped. Unequipping old item.`);\r\n      itemsWorn.replace(oldItem.name.toLowerCase(), '');\r\n      console.log(`INSIDE equipItem(): Removing worn status from ${oldItem.name}.`);\r\n      oldItem.status = 'in inventory';\r\n      state.inventory[oldItemIndex] = oldItem;\r\n    }\r\n\r\n    itemToBeEquipped.status = 'worn';\r\n    state.inventory[itemToBeEquippedIndex] = itemToBeEquipped;\r\n    itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n      .map((k) => {\r\n        console.log(`INSIDE equipItem(): worn item found in inventory -> ${k.name}`);\r\n        return k.name;\r\n      }).join('/');\r\n\r\n    console.log(`INSIDE equipItem(): finished building new WORN string -> ${itemsWorn}`);\r\n    playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n\r\n    console.log(`END equipItem(): ${itemToBeEquipped.name} has been equipped.`);\r\n    return `\\nYou are now ${itemToBeEquipped.type == 'weapon' ? 'wielding' : 'wearing'} ${itemToBeEquipped.name}.`;\r\n  }\r\n\r\n  console.log(`END equipItem(): Player does not have \"${itemNameLowerCase}\" in their inventory.`);\r\n  return `\\nYou do not have \"${itemNameLowerCase}\" in your inventory.`;\r\n}\r\n\r\n/**\r\n * Debugs your inventory and corrects the player's WI in case it fails\r\n */\r\nconst debugInventory = () => {\r\n  console.log(`START debugInventory(): debugging player's inventory`);\r\n  state.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n\r\n  let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n\r\n  itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n    .map((k) => {\r\n      console.log(`INSIDE debugInventory(): Updating player WI with worn items`);\r\n      return k.name;\r\n    }).join('/');\r\n\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE debugInventory(): Updating player WI with inventory items`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n\r\n  console.log(\"INSIDE debugInventory(): Fixed player WI with inventory's items.\");\r\n  console.log(`END debugInventory(): Player's WI saved at index ${state.worldInfoIndex}.`);\r\n}\r\n\r\n/**\r\n * Updates the player's inventory and corrects the WI\r\n */\r\nconst updateInventory = () => {\r\n  console.log(`START updateInventory(): updating player's inventory and WI with current items`);\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE updateInventory(): Sorting inventory items and quantities into player WI`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n  console.log(`END updateInventory(): updated player's inventory and WI with current items`);\r\n}\r\n\r\n/**\r\n * Function to determine item type\r\n * \r\n * @param {string} itemType\r\n */\r\nconst getType = (itemName) => {\r\n  const checker = (input) => {\r\n    return WEAPONS.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'weapon' :\r\n      CLOTHING.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'clothing' : 'misc';\r\n  }\r\n\r\n  return checker(itemName);\r\n}\r\n\r\n/**************************************************************************\r\n***************************************************************************\r\n***************************************************************************\r\n*********************** FUNCTIONS MADE BY OTHER DEVS **********************\r\n***************************************************************************\r\n***************************************************************************\r\n**************************************************************************/\r\n\r\n/**\r\n * Bracket handler by Gnurro.\r\n * \r\n * Removes backets from input text to handle them as placeholders\r\n * \r\n * @param {string} text\r\n */\r\nconst grabAllBrackets = (text) => {\r\n  for (entry of text.match(BRACKETED)) {\r\n    entry = entry.replace(BRACKETS, '');\r\n    if (!state.placeholders) {\r\n      state.placeholders = new Array();\r\n    }\r\n\r\n    state.placeholders.push(entry);\r\n  }\r\n\r\n  console.log(state.placeholders);\r\n}\r\n\r\n/**\r\n * Encounters by Gnurro.\r\n * \r\n * Makes random encounters possible in-game\r\n */\r\nencounterDB = {\r\n  /** Fight encounters */\r\n  wolfAttack: {\r\n    encounterID: 'wolfAttack',\r\n    triggers: [\"(spot|see|find).*wol(f|ves).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 80,\r\n    duration: 5,\r\n    messageString: `Wolf attack!`,\r\n    contextNotes: ['You are being attacked by a wolf!', 'A wolf is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*(wol(f|ves))\"],\r\n    textNotes: [\r\n      `You hear howling, not far from where you are. The howling gets closer, and you start to feel uneasy. You look around, trying to find where it's coming from, and when you turn around. It's a wolf!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packWolfAttack',\r\n        branchChance: 50,\r\n        branchTextNotes: [\r\n          `You hear howling, not far from where you are. The howling gets closer, and now it sounds like more than one. You look around, trying to find where it's coming from, and then you see it. It's a pack of wolves!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  bearAttack: {\r\n    encounterID: 'bearAttack',\r\n    triggers: [\"(spot|see|find).*bear(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Bear attack',\r\n    contextNotes: ['You are being attacked by a bear!', 'A bear is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*bear(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling. It's definetely a bear. You hear it getting close, and you start to feel uneasy. When you look to your right, you see it. It's a bear!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packBearAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [\r\n          `You hear some growling. It's definetely a bear. But it doesn't sound like just one. It's uncommon for bears to attack in groups, but you seem to haven been chosen. It's a sleuth of bears!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  sabreCatAttack: {\r\n    encounterID: 'sabreCatAttack',\r\n    triggers: [\"(spot|see|find).*sabre cat(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Sabre cat attack!',\r\n    contextNotes: ['You are being attacked by a sabre cat!', 'A sabre cat is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*sabre cat(|s)\"],\r\n    textNotes: [\r\n      `You hear some roaring, but you can't tell what animal it is. But it sounds angry... and hungry. You hear it getting close, and you start to feel uneasy. When you turn around... it's a sabre cat!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packSabreCatAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [`You hear some roaring... and it sounds like there's more than one animal tracking. You start to feel uneasy, as you're sure you're about to be attacked. When you turn arround... it's a pack of sabre cats!`],\r\n      }\r\n    ]\r\n  },\r\n  trollAttack: {\r\n    encounterID: 'trollAttack',\r\n    triggers: [\"(spot|see|find).*troll(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 20,\r\n    duration: 5,\r\n    messageString: 'Troll attack!',\r\n    contextNotes: ['You are being attacked by a troll!', 'A troll is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*troll(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling and roaring. You can't tell what kind of creature is making this horrendous sound, but it's close. And getting closer. It's approaches you, and you turn to look at it. It's a troll!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packTrollAttack',\r\n        branchChance: 5,\r\n        branchTextNotes: [\r\n          `You hear some growling and roaring. It sounds like more than one creature, and they're getting closer... when you think of looking around, they show themselves. Two trolls are attacking you!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n\r\n  /** Weather */\r\n  weather: {\r\n    inputLock: true,\r\n    encounterID: 'weather',\r\n    chance: 50,\r\n    memoryAdd: {\r\n      memoryText: 'The weather has changed!',\r\n      memoryLocation: 'top',\r\n      memoryLingerDuration: 5\r\n    },\r\n    cooldown: 10,\r\n    duration: 0,\r\n    branches: [\r\n      {\r\n        branchTriggers: [\r\n          '.*(snow(|ing)|road|out(doors|side)|freezing|cold).*'\r\n        ],\r\n        branchID: 'weatherSnowStorm',\r\n        branchChance: 5,\r\n        branchChained: ['snowStorm']\r\n      },\r\n      {\r\n        branchTriggers: [\r\n          '.*(road|out(doors|side)|night).*'\r\n        ],\r\n        branchID: 'weatherBeautifulNight',\r\n        branchChance: 15,\r\n        branchChained: ['beautifulNight']\r\n      }\r\n    ]\r\n  },\r\n  snowStorm: {\r\n    inputLock: true,\r\n    encounterID: 'snowStorm',\r\n    messageString: 'A snow storm! Be careful! It will last for 10 actions!',\r\n    contextNotes: [\r\n      'A snow storm is here! Protect yourself or you\\'ll freeze to death!'\r\n    ],\r\n    textNotes: [\r\n      `The air starts to feel cold all of a sudden, and a freezing breeze touches you. You start shaking from the cold, and the wind gets faster. You can't see anything, as it's all white. You're caught in a snow storm!`\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50\r\n  },\r\n  beautifulNight: {\r\n    inputLock: true,\r\n    encounterID: 'beautifulNight',\r\n    messageString: 'It\\'s a beautiful night!',\r\n    contextNotes: [\r\n      'It\\'s a beautiful night!'\r\n    ],\r\n    textNotes: [\r\n      `You look up. The night sky is amazing! You can see the stars bright in the distance, and the aurora is shimmering in the sky like an ethereal snake. The night is bright because of the beautiful lights in the sky, and you just can't stop looking at them. It's too beautiful.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50,\r\n  },\r\n\r\n  /** Random events */\r\n  rebellion: {\r\n    outputLock: true,\r\n    encounterID: 'rebellion',\r\n    chance: 1,\r\n    messageString: `A rebellion is happening!`,\r\n    memoryAdd: {\r\n      memoryText: `A rebellion is happening!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    cooldown: 20,\r\n    duration: 0,\r\n    chained: ['whiterunRebellion', 'riftenRebellion',]\r\n  },\r\n  whiterunRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'whiterunRebellion',\r\n    messageString: `The citizens of Whiterun are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Whiterun are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Whiterun. The citizens of the city are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  riftenRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'riftenRebellion',\r\n    messageString: `The citizens of Riften are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Riften are revolting against Jarl Erikur for his negligence towards people's safaty! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Riften. The citizens are revolting against Jarl Erikur for his negligence towards people's safety! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  tavernBrawl: {\r\n    encounterID: 'tavernBrawl',\r\n    triggers: [\r\n      '.*(bar|pub|tavern|inn|brawl(|ing|er(|s))).*'\r\n    ],\r\n    chance: 10,\r\n    cooldown: 10,\r\n    duration: 5,\r\n    branches: [\r\n      {\r\n        branchID: 'brawlWithYouBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithYou']\r\n      },\r\n      {\r\n        branchID: 'brawlWithBrawlersBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithBrawlers']\r\n      }\r\n    ]\r\n  },\r\n  brawlWithYouBranch: {\r\n    encounterID: 'brawlWithYouBranch',\r\n    messageString: 'Someone challanged you to a brawl!',\r\n    contextNotes: [\r\n      `You're brawling with someone!`\r\n    ],\r\n    textNotes: [\r\n      `A random drunk man starts screaming at you for some reason. He's so drunk you can't really understand what he says. He charges at you, and punches you in the face.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  },\r\n  brawlWithBrawlers: {\r\n    encounterID: 'brawlWithBrawlers',\r\n    messageString: 'There are people brawling at the tavern!',\r\n    contextNotes: [\r\n      'People are brawling at the tavern!'\r\n    ],\r\n    textNotes: [\r\n      `Two guys are yelling at each other, they seem angry. One of them gets up from his chair and just punches the other one in the face. The man who got punched screams something unintelligible and charges at the other one. They're in a serious brawl.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  }\r\n}\r\n\r\n// word list stuff like gauntlet script:\r\nencounterWordLists = {\r\n  /* Remove this line (and the one below) to enable the example word lists\r\n  charClass:[\"mage\",\"fighter\",\"valkyrie\"],\r\n  pattern:[\"sprinkles\", \"dots\", \"lines\"],\r\n  color:[\"red\",\"blue\",\"green\",\"yellow\",\"orange\"],\r\n  amount:[\"many\",\"few\",\"all of them\"]\r\n   */ // Remove this line (and the one above) to enable the example word lists\r\n}\r\n\r\n// WI data imports:\r\nfor (WIentry of worldInfo) {\r\n  // encounters from WI:\r\n  // these will be lower priority then the hardcoded ones above!\r\n  if (WIentry.keys.includes('!encounterDef')) {\r\n    encounterDefFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterDef for '${encounterDefFromWI.encounterID}', adding it to the DB!`)\r\n    encounterDB[encounterDefFromWI.encounterID] = encounterDefFromWI\r\n  }\r\n  // word lists from WI:\r\n  if (WIentry.keys.includes('!encounterWordListsFull')) {\r\n    encounterWordListsFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found full WI encounterWordLists entry, adding them to the DB!`)\r\n    for (encounterSingleWordList in encounterWordListsFromWI) {\r\n      encounterWordLists[encounterSingleWordList] = Object.values(encounterWordListsFromWI[encounterSingleWordList])\r\n    }\r\n  }\r\n  if (WIentry.keys.includes('!encounterWordListSingle')) {\r\n    encounterWordListSingleFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterWordList, adding it to the DB!`)\r\n    encounterWordLists[Object.keys(encounterWordListSingleFromWI)[0]] = Object.values(encounterWordListSingleFromWI)\r\n  }\r\n}\r\n\r\n\r\n// encounter functions: (DON'T MESS WITH THESE!)\r\nfunction updateCurrentEncounter(encounterUpcoming) { // sets or clears currentEncounter; if argument empty, clears current encounter\r\n  // limiting encounter recurrence:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.recurrenceLimit) {\r\n      if (!state.limitedEncounters) {\r\n        state.limitedEncounters = []\r\n        state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n      } else {\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == state.currentEncounter.encounterID) {\r\n            console.log(`'${state.currentEncounter.encounterID}' recurrence already has a limit.`)\r\n            if (limiter[1] > 0) {\r\n              limiter[1] = limiter[1] - 1\r\n            }\r\n          } else {\r\n            state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (state.currentEncounter.cooldown) {\r\n      if (!state.cooldownEncounters) {\r\n        state.cooldownEncounters = []\r\n      }\r\n      state.cooldownEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.cooldown])\r\n    }\r\n  }\r\n  if (encounterUpcoming) {\r\n    console.log(`Setting current encounter to '${encounterUpcoming}'.`)\r\n    state.currentEncounter = encounterDB[encounterUpcoming]\r\n    // random initial values handling:\r\n    randomizables = ['duration', 'activationDelay', 'cooldown']\r\n    for (encounterValue of randomizables) {\r\n      if (typeof (state.currentEncounter[encounterValue]) !== 'undefined') {\r\n        if (typeof (state.currentEncounter[encounterValue]) !== 'number' && state.currentEncounter[encounterValue].length == 2) {\r\n          console.log(`${encounterUpcoming} has random ${encounterValue}: ${state.currentEncounter[encounterValue]}`)\r\n          state.currentEncounter[encounterValue] = getRndInteger(state.currentEncounter[encounterValue][0], state.currentEncounter[encounterValue][1])\r\n          console.log(`${encounterUpcoming} random ${encounterValue} set to ${state.currentEncounter[encounterValue]}`)\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    console.log(\"Clearing current encounter.\")\r\n    delete state.currentEncounter\r\n  }\r\n}\r\n\r\nfunction updateCurrentEffects() { // 'activates' currentEncounter; or clears encounter effects if there is no active encounter\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.messageString) {\r\n      state.message = state.currentEncounter.messageString\r\n    }\r\n    if (state.currentEncounter.contextNotes) {\r\n      state.encounterNote = getRndFromList(state.currentEncounter.contextNotes)\r\n    }\r\n    if (state.currentEncounter.displayStatNotes) {\r\n      displayStatsUpdate(getRndFromList(state.currentEncounter.displayStatNotes))\r\n    }\r\n  } else {\r\n    delete state.message\r\n    delete state.encounterNote\r\n  }\r\n}\r\n\r\nfunction fillPlaceholders(placeHolderString) {\r\n  curPlaceholderMatches = placeHolderString.match(/\\{(.*?)\\}/g)\r\n  if (curPlaceholderMatches) {\r\n    console.log(`Matched placeholders: ${curPlaceholderMatches}`)\r\n    for (placeholder of curPlaceholderMatches) {\r\n      console.log(`Current placeholder: ${placeholder}`)\r\n      if (placeholder[1] == '*') {\r\n        console.log(`Current placeholder ${placeholder} contains a *, checking temporary word lists...`)\r\n        placeholder = placeholder.replace(/(\\*|{|})/gi, '')\r\n        if (typeof (tempWordLists) == 'undefined') {\r\n          tempWordLists = {}\r\n        }\r\n        if (!tempWordLists[placeholder] || tempWordLists[placeholder].length == 0) {\r\n          console.log(`${placeholder} temporary wordlist is either non-existant or empty! Getting a new one.`)\r\n          tempWordLists[placeholder] = JSON.parse(JSON.stringify(encounterWordLists[placeholder]))\r\n        }\r\n        console.log(`Current temporary word lists:${tempWordLists}`)\r\n        for (insertTag in tempWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag in temporary list: ${insertTag}`)\r\n            pickedInsert = getRndFromList(tempWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert from temporary list: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{\\\\*${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n            tempWordLists[placeholder].splice(tempWordLists[placeholder].indexOf(pickedInsert), 1)\r\n          }\r\n        }\r\n      } else {\r\n        for (insertTag in encounterWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag: ${insertTag}`)\r\n            pickedInsert = getRndFromList(encounterWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    delete tempWordLists\r\n  }\r\n\r\n  return placeHolderString;\r\n}\r\n\r\n// misc helper functions:\r\n// get random\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n\r\n// list-picker, dynamically handles weighted lists\r\nfunction getRndFromList(list) {\r\n  if (list[0].length == 2) {\r\n    console.log(`${list} looks like a weighted list, doing that!`)\r\n    return (getRndFromListWeighted(list))\r\n  } else {\r\n    console.log(`${list} looks like a plain list, simply picking from it!`)\r\n    return (list[getRndInteger(0, list.length)])\r\n  }\r\n}\r\n\r\n// list picker for lists with weighted items:\r\n// currently works kinda like oldschool D&D encounter lists\r\nfunction getRndFromListWeighted(weightedList) {\r\n  cutOff = getRndInteger(1, 100)\r\n  console.log(`Picking from weighted list, cutoff: ${cutOff}`)\r\n  for (item of weightedList) {\r\n    console.log(`'${item[0]}' threshold: ${item[1]}.`)\r\n    if (cutOff <= item[1]) {\r\n      console.log(`'${item[0]}' cutoff below threshold, picking it!`)\r\n      return item[0]\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\n// displayStats handling:\r\nfunction displayStatsUpdate([inKey, inValue, inColor]) {\r\n  // if key already exists, update; else push new entry; if no value given, removes displayStat entry matching key, if it exists\r\n  if (!state.displayStats) {\r\n    state.displayStats = []\r\n  }\r\n  let displayStatUpdated = false\r\n  for (displayStat of state.displayStats) {\r\n    console.log(`Checking ${displayStat.key} displayStats entry...`)\r\n    let curDisplayStatIndex = state.displayStats.indexOf(displayStat)\r\n    if (displayStat.key == inKey) {\r\n      console.log(`Found ${inKey} displayStats entry: ${state.displayStats[curDisplayStatIndex].key}, ${state.displayStats[curDisplayStatIndex].value}, ${state.displayStats[curDisplayStatIndex].color}, updating!`)\r\n      if (inValue) {\r\n        if (typeof (inValue) == 'string') {\r\n          inValue = fillPlaceholders(inValue)\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        } else {\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        }\r\n      } else {\r\n        console.log(`No value to update displayStat inputted, removing entry.`)\r\n        state.displayStats.splice(curDisplayStatIndex, 1)\r\n        displayStatUpdated = true\r\n        break\r\n      }\r\n      if (inColor) {\r\n        state.displayStats[curDisplayStatIndex].color = fillPlaceholders(inColor)\r\n      }\r\n      displayStatUpdated = true\r\n      break\r\n    }\r\n  }\r\n  if (!displayStatUpdated) {\r\n    console.log(`No ${inKey} displayStats entry found, adding it!`)\r\n    state.displayStats.push({ 'key': inKey, 'value': inValue, 'color': inColor })\r\n  }\r\n}\r\n\r\n/**\r\n * Name synthesizer by Zaltys\r\n * \r\n * Removed unwanted names and replaces them with better ones\r\n * \r\n */\r\n// List the names you wish to replace with random ones in this const.\r\nconst BADNAMES = ['Ackerson', 'Alison', 'Annah', 'Anu', 'Arat', 'Arrorn', 'Ashton', 'Azajaja', 'Big Red',\r\n  'Brot', 'Brother Gray', 'Bucklesberg', 'Captain Dario', 'Captain Eckard', 'Captain Hayes', 'Captain Ian', 'Captain Illam', 'Carn',\r\n  'Castus', 'Cloudpeak', 'Count Gray', 'Count Grey', 'Dark Order', 'David', 'Delantium', 'Delerg', 'Dendrin', 'Derg',\r\n  'Dert', 'Dessel', 'Dorna', 'Dr. Kessel', 'Dr. Kovas', 'Drake', 'Draven', 'Durge', 'Ebony Claw', 'Elam',\r\n  'Eldolith', 'Eliza', 'Eternals', 'Father Féval', 'Father Tomas', 'Felkan', 'Flog', 'Garrick', 'Grolik', \"Gro'tesk\", 'Haygarth',\r\n  'Hessla', 'Holgard', 'Isabella', \"J'Arel\", 'Jacob', 'Jicol', 'Karth', 'Kelso',\r\n  'Klemto', 'Klyton', 'Kralmer', 'Kyros', 'Lenay', 'Lord Rostov', 'Ludmilla', 'Magos Cern', 'Meliodas',\r\n  'Merk', 'Mihrab', 'Mr. Demar', 'Mr. Gaange', 'Mr. Reynolds', 'Nalin', 'Nolazir', 'Null', 'Nuro', 'Oalkwardner',\r\n  'Olive', 'Olivia', 'Oren', 'Quala', 'Ragnor', 'Ral', 'Rask', 'Retlad', 'Roldan', 'Rolomag', 'Sheriff Buckly',\r\n  'Sir Ignate', 'Sodran', 'Svelk', 'Talia', 'Teckleville', 'The Craxil', 'The Ghoul King', 'The Great Lich Lord',\r\n  'The Nightmare Tyrant', 'Theo', 'Trelik', 'Tulan', 'Ulivik', 'Vaughn', 'Velzix', 'Wessel', 'Zalan', 'Zalmora', 'Zuzu'];\r\n\r\n// This shuffles the arrays.\r\nconst shuffle = array =>\r\n  [...Array(array.length)]\r\n    .map((...args) => Math.floor(Math.random() * (args[1] + 1)))\r\n    .reduce((a, rv, i) => ([a[i], a[rv]] = [a[rv], a[i]]) && a, array);\r\n\r\n// Generates and saves arrays; ran only once.\r\nfunction makeArrays() {\r\n  state.mid = [];\r\n  state.end = [];\r\n  list = state.names.map(x => x.substring(1)); // Trim beginning.\r\n  list.forEach(addMid);\r\n}\r\n\r\nfunction addMid(seg) { // Generate array of possible mid-segments.\r\n  while (seg.length > 3) {\r\n    if (state.mid.indexOf(seg.substring(0, 4)) === -1) { state.mid.push(seg.substring(0, 4)) };\r\n    seg = seg.substring(1);\r\n  }\r\n  state.end.push(seg);\r\n}\r\n\r\nfunction synthName() {\r\n  var name_length = state.names[Math.floor(Math.random() * state.names.length)].length - 1;\r\n  var base = state.names[Math.floor(Math.random() * state.names.length)];\r\n  if (base.length < 3) { return Base; }\r\n  else {\r\n    var nomen = base.substring(0, 3);\r\n    while (nomen.length < name_length) {\r\n      mid = shuffle(state.mid).find(x => nomen.substring(nomen.length - 2, nomen.length) == x.substring(0, 2))\r\n      if (mid) { nomen += mid.substring(2); }\r\n      else { name_length = 0; } // No valid segments found, just skip ahead.\r\n    }\r\n    var end = shuffle(state.end).find(x => nomen.substring(nomen.length - 1, nomen.length) == x.substring(0, 1));\r\n    if (end) { nomen += end.substring(1); }\r\n    return nomen;\r\n  }\r\n}\r\n\r\nfunction nameReplace(text) {\r\n  if (!state.names_setup) { setupNamelist(); }\r\n  for (name of BADNAMES) {\r\n    if (text.includes(name)) { text = text.replace(name, synthName()); }\r\n  }\r\n  return text;\r\n}\r\n\r\n// This giant list is the list of names that this generator uses as examples to synthesize new names.\r\n// You can replace it with a more specific list, such as names from certain culture.\r\n// To work well, you need at least 100 names on the list.\r\nfunction setupNamelist() {\r\n  state.names_setup = true;\r\n  state.names = [\"Aby\", \"Aage\", \"Aakesh\", \"Aanon\", \"Aarlen\", \"Aaron\", \"Aart\", \"Aasta\", \"Abarden\", \"Abbathor\", \"Abbathorn\", \"Abraham\", \"Abryn\",\r\n    \"Abu\", \"Acadia\", \"Achard\", \"Acheron\", \"Achim\", \"Achlarg\", \"Ada\", \"Adair\", \"Adalbert\", \"Adanac\", \"Adario\", \"Adeisteen\", \"Adelaide\",\r\n    \"Adelin\", \"Adelot\", \"Adeen\", \"Aden\", \"Adena\", \"Aderyn\", \"Adeva\", \"Adger\", \"Adia\", \"Adin\", \"Adina\", \"Aditu\", \"Adlay\",\r\n    \"Adolf\", \"Adolmus\", \"Adoniram\", \"Adraeran\", \"Adriaan\", \"Adriel\", \"Adrienne\", \"Aedha\", \"Aeiran\", \"Ael\", \"Aelgifu\", \"Aelis\", \"Aerdrie\",\r\n    \"Aeriel\", \"Aerin\", \"Aeris\", \"Aeriss\", \"Aeron\", \"Aeru'in\", \"Aeruin\", \"Aethelweard\", \"Aethon\", \"Aethyr\", \"Afra\", \"Agate\", \"Agatha\",\r\n    \"Agathon\", \"Agathos\", \"Agenor\", \"Agidius\", \"Agnar\", \"Agora\", \"Agrias\", \"Aguidran\", \"Aguilla\", \"Ahanna\", \"Ahmre\", \"Aicha\", \"Aidan\",\r\n    \"Aidaron\", \"Aiden\", \"Aidred\", \"Aidro\", \"Aidwin\", \"Aifreda\", \"Aifrida\", \"Aiker\", \"Aikikia\", \"Aikman\", \"Ailcaer\", \"Aileen\", \"Ailric\",\r\n    \"Ailvar\", \"Aimee\", \"Aimo\", \"Aino\", \"Ainu\", \"Aipheus\", \"Airalyn\", \"Aircristir\", \"Airen\", \"Airis\", \"Airmid\", \"Aisha\", \"Aislinn\",\r\n    \"Aithne\", \"Aitken\", \"Akebia\", \"Aki\", \"Akira\", \"Aksel\", \"Al\", \"Aladan\", \"Aladar\", \"Aladdin\", \"Alain\", \"Alaine\", \"Alais\",\r\n    \"Alan\", \"Alana\", \"Alanson\", \"Alardan\", \"Alaric\", \"Alarion\", \"Alaris\", \"Alaron\", \"Alastair\", \"Alastrina\", \"Alastyr\", \"Albaral\", \"Alberich\",\r\n    \"Alberik\", \"Alberon\", \"Albert\", \"Alberta\", \"Albin\", \"Albion\", \"Albrecht\", \"Albright\", \"Alcan\", \"Alcina\", \"Alda\", \"Aldaren\", \"Aldegond\",\r\n    \"Alden\", \"Aldert\", \"Aldhelm\", \"Aldis\", \"Aldrich\", \"Aldridge\", \"Aldus\", \"Aldwerth\", \"Aldwin\", \"Aldwulf\", \"Alea\", \"Alec\", \"Alena\",\r\n    \"Alers\", \"Ales\", \"Alessandra\", \"Alexander\", \"Alexei\", \"Alf\", \"Alfdis\", \"Alfgeir\", \"Alfhid\", \"Alfons\", \"Alford\", \"Alfred\", \"Algernon\",\r\n    \"Algus\", \"Alhana\", \"Ali\", \"Alia\", \"Alicia\", \"Aliendre\", \"Alienor\", \"Alin\", \"Aline\", \"Alineric\", \"Alisbone\", \"Alison\", \"Alistair\",\r\n    \"Alister\", \"Allaire\", \"Allard\", \"Allart\", \"Allene\", \"Alliston\", \"Almas\", \"Almer\", \"Almira\", \"Almroth\", \"Almu\", \"Aloise\", \"Alor\",\r\n    \"Alora\", \"Alorosaz\", \"Aloysius\", \"Alphons\", \"Alrik\", \"Alsop\", \"Althalus\", \"Altin\", \"Alton\", \"Alured\", \"Alvan\", \"Alvey\", \"Alvina\",\r\n    \"Alvord\", \"Alvred\", \"Alwen\", \"Alwyn\", \"Alya\", \"Alyanna\", \"Alyce\", \"Alyssa\", \"Alyvia\", \"Ama\", \"Amadis\", \"Amain\", \"Amalina\",\r\n    \"Aman\", \"Amanfea\", \"Amar\", \"Amarah\", \"Amber\", \"Ambros\", \"Amelia\", \"Ames\", \"Amethyst\", \"Amilion\", \"Amin\", \"Amina\", \"Amineh\",\r\n    \"Ammdar\", \"Amschel\", \"Amundi\", \"Anandra\", \"Anastasia\", \"Anatol\", \"Anatolia\", \"Ancarion\", \"Ancelyn\", \"Anclaiar\", \"Ancla´ar\", \"Andara'an\", \"Andaraan\",\r\n    \"Andemon\", \"Andni\", \"Andolan\", \"Andre\", \"Andrei\", \"Andrew\", \"Andrus\", \"Aneurin\", \"Anfar\", \"Angelica\", \"Angelina\", \"Angharad\", \"Angheryn\",\r\n    \"Angmar\", \"Angus\", \"Anici\", \"Anigh\", \"Anika\", \"Anita\", \"Anitra\", \"Anlaf\", \"Anna\", \"Annion\", \"Annora\", \"Anouar\", \"Anseim\",\r\n    \"Ansel\", \"Anskar\", \"Anson\", \"Antal\", \"Antalya´ar\", \"Antares\", \"Antheirne\", \"Anton\", \"Antone\", \"Antony\", \"Antrim\", \"Anvar\", \"Anya\",\r\n    \"Anzie\", \"Apad\", \"April\", \"Apthorp\", \"Aquill\", \"Arabel\", \"Arabella\", \"Arabeth\", \"Aradan\", \"Aradh\", \"Aragon\", \"Aragorn\", \"Arakin\",\r\n    \"Aralik\", \"Aranel\", \"Arania\", \"Arathorn\", \"Aravis\", \"Arawn\", \"Arax\", \"Araz\", \"Archibald\", \"Arcarune\", \"Arctor\", \"Ardal\", \"Arden\",\r\n    \"Arder\", \"Ardesh\", \"Ardis\", \"Areagne\", \"Arell\", \"Areta\", \"Aretas\", \"Argethlam\", \"Argoeth\", \"Ari\", \"Aria\", \"Ariad\", \"Arian\",\r\n    \"Arianth\", \"Aribeth\", \"Aric\", \"Arid\", \"Ariel\", \"Aries\", \"Arilyn\", \"Arioch\", \"Arka\", \"Arkadia\", \"Arkron\", \"Arkwright\", \"Arlaith\",\r\n    \"Arlan\", \"Arlana\", \"Arlean\", \"Arleano\", \"Arlo\", \"Arlya\", \"Armand\", \"Armar\", \"Armin\", \"Armitage\", \"Armo\", \"Armod\", \"Arn\",\r\n    \"Arnbella\", \"Arnesen\", \"Arnfinn\", \"Arngrim\", \"Arni\", \"Arnlaug\", \"Arno\", \"Arnold\", \"Arnor\", \"Arnora\", \"Arnot\", \"Arnthora\", \"Arnuif\",\r\n    \"Arnulf\", \"Arnvid\", \"Aron\", \"Arrah\", \"Arronax\", \"Arshavir\", \"Arshel\", \"Artemis\", \"Artemus\", \"Arthol\", \"Arthryn\", \"Arthur\", \"Artnistead\",\r\n    \"Artreyu\", \"Artur\", \"Arun\", \"Arvid\", \"Arvida\", \"Arving\", \"Arvo\", \"Arwen\", \"Arwin\", \"Aryen\", \"Aryion\", \"Aryon\", \"Aryus\",\r\n    \"Arzamark\", \"Asa\", \"Asaf\", \"Aschar\", \"Asfrid\", \"Asgard\", \"Asger\", \"Asgerd\", \"Asgrim\", \"Ash\", \"Ashan\", \"Ashane\", \"Ashburton\",\r\n    \"Ashcar\", \"Ashdown\", \"Ashgaroth\", \"Ashley\", \"Ashlyn\", \"Ashne'e\", \"Ashnici\", \"Ashur\", \"Asiria\", \"Askew\", \"Askold\", \"Aslak\", \"Aslan\",\r\n    \"Asleif\", \"Aslior\", \"Asperon\", \"Asta\", \"Astar\", \"Astinus\", \"Astnid\", \"Astnild\", \"Astoiphe\", \"Astra\", \"Astraea\", \"Astran\", \"Astrid\",\r\n    \"Astrin\", \"Atazra\", \"Athabasca\", \"Athana\", \"Athol\", \"Atiaran\", \"Atli\", \"Atmeh\", \"Atreyu\", \"Atropos\", \"Atticus\", \"Attor\", \"Atul\",\r\n    \"Aturin\", \"Atyre\", \"Aubrey\", \"Aud\", \"Audrey\", \"Audrianna\", \"Audric\", \"August\", \"Augustus\", \"Aule\", \"Aulius\", \"Aun\", \"Aura\",\r\n    \"Aurian\", \"Auril\", \"Aurion\", \"Aurora\", \"Avall\", \"Avarath\", \"Avascaen\", \"Avedar\", \"Aveole\", \"Avery\", \"Avon\", \"Avril\", \"Axel\",\r\n    \"Aya\", \"Ayame\", \"Ayaron\", \"Ayarèn\", \"Ayin\", \"Ayir\", \"Aylin\", \"Aylmer\", \"Ayrie\", \"Azeal\", \"Azeezeh\", \"Azgoth\", \"Azhrarn\",\r\n    \"Aziz\", \"Azmodeus\", \"Azrean\", \"Azreck\", \"Azriaz\", \"Aztira\", \"Azure\", \"Azuth\", \"Baba\", \"Babacar\", \"Babrak\", \"Babrine\", \"Babylos\",\r\n    \"Baduk\", \"Baern\", \"Baeron\", \"Baervan\", \"Bag\", \"Bahamut\", \"Baird\", \"Bal\", \"Balain\", \"Baldor\", \"Baldrick\", \"Balduin\", \"Baldur\",\r\n    \"Baldwin\", \"Balendar\", \"Balfour\", \"Balin\", \"Baliol\", \"Ballard\", \"Balor\", \"Balthasard\", \"Balthazar\", \"Bandobras\", \"Bane\", \"Baraca\", \"Barahir\",\r\n    \"Barak\", \"Baralan\", \"Baravar\", \"Barbara\", \"Bardach\", \"Bardel\", \"Bardi\", \"Bardsley\", \"Bardwell\", \"Barend\", \"Barent\", \"Baring\", \"Barll\",\r\n    \"Barlo\", \"Barlow\", \"Barnabas\", \"Barnas\", \"Barnus\", \"Barr\", \"Barret\", \"Barron\", \"Barry\", \"Barstow\", \"Barthel\", \"Bartle\", \"Bartnel\",\r\n    \"Barton\", \"Baslayan\", \"Bayard\", \"Beams\", \"Beatrix\", \"Bechir\", \"Beck\", \"Bede\", \"Bedegran\", \"Begnus\", \"Beldaran\", \"Beldas\", \"Belerion\",\r\n    \"Belgarath\", \"Belgarion\", \"Belita\", \"Bella\", \"Belle\", \"Bellin\", \"Bellinus\", \"Belloc\", \"Belrene\", \"Beltane\", \"Belva\", \"Ben\", \"Benekander\",\r\n    \"Bengt\", \"Benita\", \"Benoist\", \"Beorn\", \"Beowulf\", \"Bera\", \"Bercan\", \"Berek\", \"Berem\", \"Beren\", \"Bergen\", \"Bergthor\", \"Berim\",\r\n    \"Bern\", \"Berna\", \"Bernhart\", \"Bernt\", \"Berronar\", \"Berryn\", \"Bersi\", \"Berta\", \"Bertil\", \"Bertilde\", \"Bertram\", \"Bertran\", \"Bertrem\",\r\n    \"Beryl\", \"Besma\", \"Bestagar\", \"Beth\", \"Bevil\", \"Beyash\", \"Beylard\", \"Bhimrao\", \"Bhoskar\", \"Bhupindar\", \"Bidwell\", \"Bilbo\", \"Bile\",\r\n    \"Bilmar\", \"Bindon\", \"Bion\", \"Bipin\", \"Birath\", \"Birbeck\", \"Birchard\", \"Birger\", \"Birgit\", \"Birket\", \"Bisuneh\", \"Bjarni\", \"Bjorn\",\r\n    \"Bjornstern\", \"Blackwood\", \"Blade\", \"Blaen\", \"Blair\", \"Blame\", \"Blasco\", \"Blaze\", \"Bledsoe\", \"Blenda\", \"Bleran\", \"Blount\", \"Blunyc\",\r\n    \"Bninna\", \"Bo\", \"Bodil\", \"Bodvar\", \"Bolthorn\", \"Boner\", \"Booker\", \"Boott\", \"Boris\", \"Bork\", \"Borlace\", \"Bormor\", \"Boromir\",\r\n    \"Bors\", \"Botho\", \"Botolf\", \"Bourke\", \"Bowie\", \"Boyd\", \"Bracca\", \"Brace\", \"Bracken\", \"Brand\", \"Brandec\", \"Brangwen\", \"Brann\",\r\n    \"Brannon\", \"Branwell\", \"Branwen\", \"Breanon\", \"Bremen\", \"Brenna\", \"Brenner\", \"Brent\", \"Bress\", \"Bretaine\", \"Breyugar\", \"Brianna\", \"Bridget\",\r\n    \"Brielle\", \"Brigantu\", \"Brighton\", \"Brinn\", \"Brion\", \"Bristan\", \"Brita\", \"Brithael\", \"Brock\", \"Brockden\", \"Brodhead\", \"Brodribb\", \"Brogan\",\r\n    \"Bron\", \"Brona\", \"Bronwyn\", \"Bror\", \"Broun\", \"Bruna\", \"Bruno\", \"Brunt\", \"Brynhild\", \"Brynit\", \"Bryoni\", \"Bunnvor\", \"Bupu\",\r\n    \"Burcan\", \"Buri\", \"Burkard\", \"Buzurg\", \"Byam\", \"Byblos\", \"Byre\", \"Byrna\", \"Byrne\", \"Bysshe\", \"Cabell\", \"Cabillo\", \"Caddor\",\r\n    \"Caden\", \"Cadfael\", \"Cadmar\", \"Cadrach\", \"Cadwallader\", \"Caecyn\", \"Cael\", \"Caelon\", \"Caer\", \"Cai\", \"Cail\", \"Cairn\", \"Caitlin\",\r\n    \"Caladon\", \"Calandria\", \"Calbraith\", \"Calder\", \"Cale\", \"Caleb\", \"Calera\", \"Caliban\", \"Callan\", \"Callcott\", \"Calmic\", \"Calrohir\", \"Calumn\",\r\n    \"Calvert\", \"Camber\", \"Cambree\", \"Camiya\", \"Canina\", \"Caprice\", \"Cardon\", \"Caramon\", \"Carelia\", \"Carey\", \"Caribou\", \"Caris\", \"Carl\",\r\n    \"Carless\", \"Carli\", \"Carlyle\", \"Caryne\", \"Caron\", \"Carsten\", \"Carvell\", \"Caryl\", \"Cashin\", \"Caspian\", \"Cassandra\", \"Cassaway\", \"Cathal\",\r\n    \"Catherine\", \"Cathla'in\", \"Cathlain\", \"Cathlin\", \"Cayl\", \"Caylin\", \"Cecilia\", \"Cecily\", \"Cedric\", \"Cedrick\", \"Cedrim\", \"Celadae\", \"Celebdil\",\r\n    \"Celeborn\", \"Celeren\", \"Celes\", \"Celeste\", \"Celestine\", \"Celia\", \"Celowen\", \"Cemark\", \"Ceomyr\", \"Ceowulf\", \"Cercyon\", \"Ceremon\", \"Cerimon\",\r\n    \"Cerindar\", \"Cermor\", \"Cernd\", \"Ceryx\", \"Cespar\", \"Cevir\", \"Ceylinn\", \"Chaka\", \"Chalfant\", \"Challen\", \"Chamon\", \"Chanti\", \"Chard\",\r\n    \"Charissa\", \"Charlene\", \"Charlotte\", \"Chauncey\", \"Chauntea\", \"Chavir\", \"Chaya\", \"Checotah\", \"Chevonne\", \"Chevran\", \"Chichester\", \"Chimaera\", \"Chiodwig\",\r\n    \"Chiron\", \"Chittenden\", \"Chloe\", \"Christopher\", \"Chronepsis\", \"Chronos\", \"Chrowder\", \"Chuz\", \"Cid\", \"Cilmar\", \"Cinerva\", \"Cirkin\", \"Civar\",\r\n    \"Claed\", \"Clafin\", \"Claire\", \"Clarinda\", \"Claudia\", \"Cleghorn\", \"Clerihew\", \"Clinch\", \"Clipster\", \"Clopton\", \"Cloud\", \"Clover\", \"Clovis\",\r\n    \"Cnud\", \"Cnut\", \"Coalter\", \"Cobryn\", \"Coddry\", \"Coel\", \"Coela\", \"Cohn\", \"Colden\", \"Colgan\", \"Colmen\", \"Colon\", \"Colwyn\",\r\n    \"Coma\", \"Conall\", \"Conan\", \"Congal\", \"Conlan\", \"Conn\", \"Connell\", \"Connidas\", \"Connon\", \"Connop\", \"Conor\", \"Conrad\", \"Constantius\",\r\n    \"Conwy\", \"Conyasal\", \"Coprates\", \"Cora\", \"Coral\", \"Corbin\", \"Corellon\", \"Coren\", \"Corin\", \"Corinne\", \"Corinth\", \"Cormac\", \"Cornelius\",\r\n    \"Corrowr\", \"Corry\", \"Corryn\", \"Corwin\", \"Cotton\", \"Cowan\", \"Cowden\", \"Cowper\", \"Coyan\", \"Craigh\", \"Cray\", \"Crewzel\", \"Creydah\",\r\n    \"Cronyn\", \"Croyble\", \"Crundall\", \"Crynal\", \"Crysania\", \"Cryshandylin\", \"Cryunnos\", \"Cuall\", \"Cuane\", \"Cuddry\", \"Cuhaid\", \"Culiross\", \"Culkin\",\r\n    \"Cullen\", \"Cullyn\", \"Cuthalion\", \"Cuthbert\", \"Cylarus\", \"Cylie\", \"Cylmar\", \"Cymbeline\", \"Cyndor\", \"Cynoril\", \"Cyria\", \"Cyriel\", \"Cyrilla\",\r\n    \"Cyrillus\", \"Cyrus\", \"Cyryl\", \"Cythnar\", \"Cyton\", \"Daburn\", \"Daen\", \"Dagar\", \"Dagda\", \"Dagmar\", \"Dagni\", \"Dagny\", \"Dagwyn\",\r\n    \"Dahil\", \"Daikkah\", \"Daila\", \"Daila'in\", \"Daimhin\", \"Daimon\", \"Daisy\", \"Dakamon\", \"Dakoda\", \"Dalamar\", \"Dall\", \"Dalla\", \"Dallandra\",\r\n    \"Dalziel\", \"Damar\", \"Damien\", \"Damon\", \"Dana\", \"Danforth\", \"Daniel\", \"Dannun\", \"Dannyn\", \"Danu\", \"Danuvius\", \"Daood\", \"Daphin\",\r\n    \"Dara\", \"Daragor\", \"Darandriel\", \"Darell\", \"Darien\", \"Dario\", \"Darius\", \"Darkash\", \"Darkboon\", \"Darkspur\", \"Darlis\", \"Daron\", \"Darrell\",\r\n    \"Darrin\", \"Darvin\", \"Daryan\", \"Dashiell\", \"Dashwood\", \"Dasyani\", \"Dathan\", \"Dathanja\", \"Daugas\", \"David\", \"Davnet\", \"Davros\", \"Dawn\",\r\n    \"Dayyan\", \"Dekteon\", \"Delevan\", \"Delita\", \"Dell\", \"Dellin\", \"Delmund\", \"Demarest\", \"Demi\", \"Deminar\", \"Demtris\", \"Denethor\", \"Denhain\",\r\n    \"Denor\", \"Denton\", \"Denzil\", \"Deogol\", \"Derfel\", \"Derian\", \"Dermaria\", \"Derran\", \"Derroll\", \"Derval\", \"Dervilia\", \"Desmona\", \"Devabriel\",\r\n    \"Devaron\", \"Deveron\", \"Devra\", \"Dexter\", \"Dhakos\", \"Dhan\", \"Dharijor\", \"Dholemtrix\", \"Dhur\", \"Diadra\", \"Diagur\", \"Dian\", \"Diarmud\",\r\n    \"Diderik\", \"Diehi\", \"Dighton\", \"Dillon\", \"Dimura\", \"Dinham\", \"Dinivan\", \"Dino\", \"Dionetta\", \"Diony\", \"Dirk\", \"Dirrach\", \"Divos\",\r\n    \"Djamal\", \"Dmitri\", \"Doak\", \"Dolman\", \"Dolyan\", \"Domnu\", \"Donagh\", \"Donal\", \"Donblas\", \"Dongal\", \"Doniol\", \"Donivesh\", \"Donovan\",\r\n    \"Doral\", \"Dorea\", \"Dorian\", \"Dorin\", \"Dorn\", \"Dornhnall\", \"Dorr\", \"Dorsan\", \"Dorvai\", \"Dotta\", \"Doud\", \"Dougal\", \"Doust\",\r\n    \"Draco\", \"Dragan\", \"Dragus\", \"Dragutin\", \"Draka\", \"Drake\", \"Drako\", \"Dran\", \"Draoi\", \"Draven\", \"Drax\", \"Drayko\", \"Dred\",\r\n    \"Dreed\", \"Drexel\", \"Drezael\", \"Drezaem\", \"Drin\", \"Drinda\", \"Drion\", \"Drusilla\", \"Drynn\", \"Dréagg\", \"Duain\", \"Duald\", \"Duana\",\r\n    \"Duer\", \"Dugal\", \"Dugald\", \"Dugdale\", \"Dulasiri\", \"Dumathoin\", \"Dunbar\", \"Dundas\", \"Dunglas\", \"Dunnabar\", \"Dunstan\", \"Dunwody\", \"Duny\",\r\n    \"Dunya\", \"Dur-Shuk\", \"Duran\", \"Durek\", \"Durin\", \"Durnik\", \"Durward\", \"Dwarkanath\", \"Dweomer\", \"Dwyer\", \"Dyce\", \"Dyer\", \"Dygardo\",\r\n    \"Dyke\", \"Dylan\", \"Dymphna\", \"Dynar\", \"Dyneley\", \"Dynera\", \"Dynie\", \"Dytan\", \"Dyvim\", \"E'thane\", \"Eadweard\", \"Eager\", \"Eamon\",\r\n    \"Eanger\", \"Eardley\", \"Earle\", \"Earnest\", \"Eastman\", \"Ebany\", \"Ebba\", \"Eberhard\", \"Ebony\", \"Echael\", \"Eckert\", \"Eckhard\", \"Ector\",\r\n    \"Edcyl\", \"Edda\", \"Edeva\", \"Edgar\", \"Edina\", \"Edla\", \"Edmond\", \"Edmondstone\", \"Edric\", \"Edrie\", \"Edson\", \"Eduard\", \"Edwin\",\r\n    \"Edwina\", \"Edwyn\", \"Eevin\", \"Efiath\", \"Efrem\", \"Egan\", \"Egbert\", \"Egerton\", \"Egil\", \"Egon\", \"Egron\", \"Ehlreth\", \"Ehrman\",\r\n    \"Eilhard\", \"Eilif\", \"Eilinud\", \"Einar\", \"Eindrini\", \"Eirech\", \"Eirik\", \"Eiron\", \"Eithne\", \"Eivind\", \"Ekaterina\", \"Elaine\", \"Elath\",\r\n    \"Elbert\", \"Eldath\", \"Eldavon\", \"Eldgrim\", \"Eldid\", \"Eldin\", \"Eldon\", \"Eldred\", \"Eldric\", \"Eldrin\", \"Eldron\", \"Eldìvèn\", \"Eleanor\",\r\n    \"Eleazar\", \"Electa\", \"Elelil\", \"Elena\", \"Elendil\", \"Eleno'in\", \"Elentari\", \"Elerion\", \"Elessar\", \"Elfnida\", \"Elfnide\", \"Elfnieda\", \"Elford\",\r\n    \"Elhanan\", \"Eliakini\", \"Eliard\", \"Elinor\", \"Elion\", \"Eliseth\", \"Elispeth\", \"Elisseer\", \"Elistan\", \"Eliwood\", \"Elizabeth\", \"Ella\", \"Ellanath\",\r\n    \"Ellen\", \"Ellin\", \"Ellingwood\", \"Ellydryr\", \"Ellynor\", \"Elmeric\", \"Elmira\", \"Eloisa\", \"Elora\", \"Elowen\", \"Elrad\", \"Elric\", \"Elrik\",\r\n    \"Elrodin\", \"Elron\", \"Elrond\", \"Elsa\", \"Elsbeth\", \"Elsdon\", \"Elspeth\", \"Elswyth\", \"Elton\", \"Elu\", \"Elva\", \"Elvalind\", \"Elvarion\",\r\n    \"Elvin\", \"Elvina\", \"Elvira\", \"Elvrit\", \"Elvérion\", \"Elwell\", \"Elwin\", \"Elwyn\", \"Elysia\", \"Emberyl\", \"Emerynn\", \"Emirah\", \"Emma\",\r\n    \"Emna\", \"Emory\", \"Endemian\", \"Endicott\", \"Endoray\", \"Endrede\", \"Endsor\", \"Engeihard\", \"Enigma\", \"Enn\", \"Ennorath\", \"Envi\", \"Enzoray\",\r\n    \"Eolair\", \"Eomer\", \"Eosin\", \"Eowyn\", \"Ephyre\", \"Erana\", \"Erard\", \"Ercan\", \"Erdmann\", \"Erebor\", \"Ergon\", \"Erian\", \"Eric\",\r\n    \"Erich\", \"Erie\", \"Erik\", \"Erika\", \"Erilyth\", \"Erland\", \"Erlend\", \"Erling\", \"Ernald\", \"Ernan\", \"Ernata\", \"Errine\", \"Ervin\",\r\n    \"Eryka\", \"Eryn\", \"Esghar\", \"Eslin\", \"Esmeralda\", \"Esmond\", \"Esnar\", \"Essa\", \"Esselin\", \"Estheria\", \"Estrella\", \"Etelka\", \"Ethelbearn\",\r\n    \"Ethelbert\", \"Ethelburga\", \"Ethelred\", \"Ethelreda\", \"Eudo\", \"Eugene\", \"Eulala\", \"Evadne\", \"Evaine\", \"Evald\", \"Evan\", \"Evarts\", \"Evelina\",\r\n    \"Evelyn\", \"Everard\", \"Evert\", \"Evind\", \"Evo\", \"Evolyn\", \"Evska\", \"Ewald\", \"Ewen\", \"Ewugan\", \"Eystein\", \"Eyulf\", \"Eyvind\",\r\n    \"Ezail\", \"Ezellohar\", \"Ezirith\", \"Ezme\", \"Ezrabar\", \"Ezri\", \"Faber\", \"Fabian\", \"Fael\", \"Faelyn\", \"Fahs\", \"Fairfax\", \"Fairtnan\",\r\n    \"Falathar\", \"Falcon\", \"Falgar\", \"Fali\", \"Falias\", \"Falkiner\", \"Falmalinnar\", \"Falyrias\", \"Fanchon\", \"Fangorn\", \"Fanshaw\", \"Faraday\", \"Farah\",\r\n    \"Farale\", \"Faramir\", \"Faran\", \"Farathar\", \"Farid\", \"Farith\", \"Farli\", \"Farnham\", \"Farouk\", \"Farquhar\", \"Farrin\", \"Farwehl\", \"Fatima\",\r\n    \"Fausto\", \"Fawn\", \"Faysal\", \"Fea\", \"Feargus\", \"Fedor\", \"Feike\", \"Felam\", \"Felladin\", \"Fellador\", \"Fellathor\", \"Fellow\", \"Fenella\",\r\n    \"Fenton\", \"Fenwick\", \"Fera\", \"Ferantay\", \"Ferazhin\", \"Ferdinand\", \"Fergus\", \"Fernand\", \"Feron\", \"Feustmann\", \"Fhinders\", \"Fhorgeir\", \"Fiana\",\r\n    \"Fiathna\", \"Fielding\", \"Fikir\", \"Filippe\", \"Finarfin\", \"Finbar\", \"Findegil\", \"Findley\", \"Finegan\", \"Fingal\", \"Fingalla\", \"Fingil\", \"Finias\",\r\n    \"Finn\", \"Finnbogi\", \"Finos\", \"Fiona\", \"Fiorag\", \"Fiori\", \"Firca\", \"Firin\", \"Firon\", \"Firozhan\", \"Fistandantilus\", \"Fistar\", \"Fistor\",\r\n    \"Fitzedward\", \"Fitzroy\", \"Fizban\", \"Fjolnir\", \"Flandrena\", \"Flare\", \"Flavius\", \"Flint\", \"Floki\", \"Florimund\", \"Flosi\", \"Flygare\", \"Flynn\",\r\n    \"Fnida\", \"Fomorii\", \"Forbus\", \"Forester\", \"Fornost\", \"Foronte\", \"Fothergill\", \"Francisco\", \"Frayja\", \"Freda\", \"Frederic\", \"Frederica\", \"Frederick\",\r\n    \"Fredrick\", \"Fredrik\", \"Freeborn\", \"Freeman\", \"Frey\", \"Freya\", \"Freydis\", \"Fridgeir\", \"Frodo\", \"Fryniwyd\", \"Fuad\", \"Fumorak\", \"Furnifold\",\r\n    \"Fury\", \"Fyodor\", \"Fyodr\", \"Fyza\", \"Gaarn\", \"Gabniela\", \"Gabriel\", \"Gadsby\", \"Gaea\", \"Gael\", \"Gaelinar\", \"Gaena\", \"Gaerdal\",\r\n    \"Gaillard\", \"Gairdner\", \"Galach\", \"Galadren\", \"Galan\", \"Galanna\", \"Galapas\", \"Galaphon\", \"Galar\", \"Galbard\", \"Galderon\", \"Galdor\", \"Gale\",\r\n    \"Galeia\", \"Galen\", \"Galfrey\", \"Galion\", \"Galrandar\", \"Galrion\", \"Gama\", \"Gandalf\", \"Ganduil\", \"Ganith\", \"Gannon\", \"Ganvan\", \"Gardi\",\r\n    \"Garet\", \"Gareth\", \"Garion\", \"Garith\", \"Garl\", \"Garland\", \"Garlenon\", \"Garn\", \"Garon\", \"Garrick\", \"Garrott\", \"Garth\", \"Gartnas\",\r\n    \"Garvin\", \"Garwood\", \"Gaston\", \"Gavendra\", \"Gavin\", \"Gavina\", \"Gawain\", \"Gealsgiath\", \"Gebhard\", \"Geir\", \"Geirmund\", \"Geirstein\", \"Gelonna\",\r\n    \"Genevieve\", \"Geoffrey\", \"Georgii\", \"Gerald\", \"Gerard\", \"Gerd\", \"Gerhard\", \"Gerhart\", \"Gerloc\", \"Gerrard\", \"Gerreint\", \"Gerrish\", \"Gertrude\",\r\n    \"Gervaise\", \"Gesin\", \"Gest\", \"Ghirra\", \"Ghislain\", \"Gholson\", \"Gia\", \"Gibbon\", \"Gilberta\", \"Gilda\", \"Gilden\", \"Gildersleeve\", \"Giles\",\r\n    \"Gilfanon\", \"Gilian\", \"Gilir\", \"Gilli\", \"Gillion\", \"Gillyn\", \"Gilm\", \"Gilraen\", \"Gilthanas\", \"Gimli\", \"Gird\", \"Girin\", \"Gisgin\",\r\n    \"Gizur\", \"Gladstone\", \"Glassford\", \"Glebur\", \"Gleda\", \"Gleocyn\", \"Gleridower\", \"Glida\", \"Glogan\", \"Gloisur\", \"Glorfindel\", \"Glugwyn\", \"Glum\",\r\n    \"Glyn\", \"Glynn\", \"Gnazia\", \"Godfred\", \"Godfrey\", \"Godwin\", \"Goibhniu\", \"Golding\", \"Goldwin\", \"Gollum\", \"Gongalo\", \"Goodhue\", \"Gorbash\",\r\n    \"Gordalius\", \"Gorias\", \"Gorion\", \"Gorm\", \"Gotthard\", \"Govier\", \"Govind\", \"Gowen\", \"Grace\", \"Graham\", \"Graine\", \"Gralon\", \"Grani\",\r\n    \"Grania\", \"Gravin\", \"Greegan\", \"Greenleaf\", \"Gregor\", \"Gregory\", \"Grendahl\", \"Greyfell\", \"Grian\", \"Gridley\", \"Griffid\", \"Griffin\", \"Griffith\",\r\n    \"Griggs\", \"Grim\", \"Grima\", \"Grimhilda\", \"Grimnir\", \"Grindan\", \"Griniing\", \"Grisha\", \"Griswold\", \"Groa\", \"Grover\", \"Grunak\", \"Grunnhild\",\r\n    \"Gruumsh\", \"Gualat\", \"Gudmund\", \"Gudmundur\", \"Gudrid\", \"Gudris\", \"Gudrun\", \"Guibert\", \"Guida\", \"Guido\", \"Gulian\", \"Gunila\", \"Gunnar\",\r\n    \"Gunning\", \"Gunther\", \"Gurnarok\", \"Gurney\", \"Gustav\", \"Guthorm\", \"Guthrie\", \"Guthum\", \"Gutzon\", \"Guy\", \"Gwacyn\", \"Gwaihir\", \"Gweddyn\",\r\n    \"Gwen\", \"Gwenca\", \"Gwenda\", \"Gwendolyn\", \"Gwenevere\", \"Gweniver\", \"Gwildor\", \"Gwoc\", \"Gwomyr\", \"Gwydion\", \"Gwyn\", \"Gwyneth\", \"Gwynfryd\",\r\n    \"Gwyran\", \"Gwythinn\", \"Gyda\", \"Gylian\", \"Gymir\", \"Haakon\", \"Habib\", \"Hablot\", \"Hack\", \"Haddon\", \"Hadrian\", \"Haestan\", \"Hafez\",\r\n    \"Hafgrim\", \"Hagar\", \"Haigh\", \"Hakatri\", \"Haki\", \"Hakon\", \"Halbert\", \"Halcyon\", \"Haldane\", \"Haldor\", \"Hale\", \"Halfdan\", \"Haliina\",\r\n    \"Hall\", \"Halldis\", \"Halldor\", \"Halley\", \"Hallfred\", \"Hallfrid\", \"Hallgerd\", \"Hallkel\", \"Hallock\", \"Halloweii\", \"Hallveig\", \"Halvord\", \"Hamlin\",\r\n    \"Hamnet\", \"Hanford\", \"Hani\", \"Haninah\", \"Hannibal\", \"Hanoran\", \"Hansine\", \"Hapweth\", \"Harald\", \"Harbaugh\", \"Harcourt\", \"Hardernan\", \"Hardon\",\r\n    \"Hardwicke\", \"Harek\", \"Harkness\", \"Harlan\", \"Harlo\", \"Harold\", \"Haroon\", \"Harpo\", \"Harren\", \"Harthan\", \"Harthran\", \"Hartpole\", \"Hartwig\",\r\n    \"Harwood\", \"Hasket\", \"Hassan\", \"Hastein\", \"Hatcher\", \"Hattrick\", \"Hauk\", \"Havard\", \"Havelock\", \"Hayvan\", \"Hazard\", \"Hazel\", \"Haziran\",\r\n    \"Hazrond\", \"Healdon\", \"Heardred\", \"Heaslip\", \"Heather\", \"Hector\", \"Hedda\", \"Hedin\", \"Hedwig\", \"Heimer\", \"Helena\", \"Helga\", \"Helgi\",\r\n    \"Helir\", \"Helix\", \"Helm\", \"Helma\", \"Helmi\", \"Heman\", \"Hemming\", \"Hendrik\", \"Hengist\", \"Henna\", \"Henrick\", \"Henry\", \"Geramon\",\r\n    \"Herdis\", \"Herekin\", \"Hereward\", \"Herijar\", \"Hermione\", \"Heron\", \"Hertha\", \"Heryom\", \"Herzog\", \"Heward\", \"Hhaba'id\", \"Hhabezur\", \"Hickling\",\r\n    \"Hidohebhi\", \"Hifryn\", \"Hild\", \"Hilda\", \"Hildebrand\", \"Hildegarde\", \"Hildric\", \"Himli\", \"Hisar\", \"Hislop\", \"Hjalmar\", \"Hjalti\", \"Hjeldin\",\r\n    \"Hjort\", \"Hjorth\", \"Hlif\", \"Hoadley\", \"Hoar\", \"Hobart\", \"Hodgdon\", \"Hogg\", \"Hogni\", \"Holbrook\", \"Holger\", \"Holgi\", \"Hollister\",\r\n    \"Holly\", \"Homli\", \"Hookham\", \"Horan\", \"Horatio\", \"Hord\", \"Horik\", \"Hormstein\", \"Horsa\", \"Hortensia\", \"Horton\", \"Hoskuld\", \"Hosni\",\r\n    \"Hossein\", \"Howarth\", \"Howland\", \"Hrafn\", \"Hrapp\", \"Hrefna\", \"Hrethel\", \"Hring\", \"Hroald\", \"Hrodyn\", \"Hrolf\", \"Hrothgar\", \"Hrugan\",\r\n    \"Hruggek\", \"Hruse\", \"Hrut\", \"Huffatn\", \"Hulbeart\", \"Hulda\", \"Hultz\", \"Humbert\", \"Hunter\", \"Hurd\", \"Hurgal\", \"Hurvin\", \"Hussain\",\r\n    \"Hustana\", \"Hyarantar\", \"Hyarante\", \"Hyder\", \"Hyfryn\", \"Hygelac\", \"Hylissa\", \"Hynman\", \"Hyrak\", \"Ian\", \"Iana\", \"Ibitz\", \"Ibrahim\",\r\n    \"Ibrandul\", \"Ica\", \"Icarus\", \"Icava\", \"Ick\", \"Ida\", \"Idarolan\", \"Iden\", \"Idris\", \"Iduna\", \"Iduné\", \"Ies'lorn\", \"Igjaru\",\r\n    \"Igor\", \"Ikarin\", \"Ilena\", \"Ilermath\", \"Ilia\", \"Iliriya\", \"Illentik\", \"Illuin\", \"Illyana\", \"Ilmare\", \"Ilniora\", \"Ilthoss\", \"Iluvatar\",\r\n    \"Ilya\", \"Ilyesha\", \"Imajin\", \"Imnar\", \"Imoen\", \"Imphela\", \"Imrador\", \"Imrahan\", \"Imrahim\", \"Imril\", \"Imryr\", \"Inahwen\", \"Indech\",\r\n    \"Indigo\", \"Indira\", \"Indreju\", \"Indria\", \"Ingald\", \"Ingeborg\", \"Ingen\", \"Ingi\", \"Ingirid\", \"Ingolf\", \"Ingram\", \"Ingrid\", \"Ingunn\",\r\n    \"Inifael\", \"Inigo\", \"Inisfa'il\", \"Iosaz\", \"Iosef\", \"Irgash\", \"Irial\", \"Irian\", \"Iris\", \"Irma\", \"Irphilin\", \"Irsai\", \"Irvin\",\r\n    \"Irwick\", \"Isael\", \"Isak\", \"Isambard\", \"Isbeorn\", \"Iscal\", \"Iselore\", \"Isengard\", \"Isengrim\", \"Iserion\", \"Isgrimnur\", \"Ishmael\", \"Isidora\",\r\n    \"Isiki\", \"Isildur\", \"Isilith\", \"Isleif\", \"Ismail\", \"Isolde\", \"Isorn\", \"Issak\", \"Ithaca\", \"Iuz\", \"Ivan\", \"Ivar\", \"Ivor\",\r\n    \"Ivy\", \"Iwanda\", \"Iyu'nigato\", \"Izard\", \"Izebel\", \"Izvire\", \"Jace\", \"Jacinth\", \"Jacoby\", \"Jacor\", \"Jade\", \"Jaden\", \"Jadzia\",\r\n    \"Jael\", \"Jaffar\", \"Jagadis\", \"Jaheira\", \"Jahrec\", \"Jahverbhai\", \"Jalasil\", \"Jalavier\", \"Jaligal\", \"Jamila\", \"Janda'nan\", \"Jandanan\", \"Janix\",\r\n    \"Janna\", \"Janus\", \"Janvel\", \"Jarak\", \"Jarazal\", \"Jared\", \"Jarek\", \"Jarnagua\", \"Jarriel\", \"Jarvin\", \"Jasara\", \"Jasek\", \"Jaseve\",\r\n    \"Jasha\", \"Jasmine\", \"Jason\", \"Javair\", \"Javon\", \"Jawaharial\", \"Jayce\", \"Jayden\", \"Jaylidan\", \"Jayna\", \"Jaysen\", \"Jazhara\", \"Jazrel\",\r\n    \"Jedd\", \"Jeffen\", \"Jehryn\", \"Jelyn\", \"Jenantar\", \"Jenkin\", \"Jennifer\", \"Jens\", \"Jensine\", \"Jephson\", \"Jerec\", \"Jeryth\", \"Jesiper\",\r\n    \"Jespar\", \"Jesslyn\", \"Jestyn\", \"Jethis\", \"Jevan\", \"Jevist\", \"Jezryanadar\", \"Jhael\", \"Jhaelen\", \"Jhany\", \"Jhardamòr\", \"Jharkor\", \"Jhary\",\r\n    \"Jihad\", \"Jillian\", \"Jingizu\", \"Jintah\", \"Jiriki\", \"Jirnost\", \"Jocelyn\", \"Jochan\", \"Johannes\", \"John\", \"Jolan\", \"Jomano\", \"Jonaya\",\r\n    \"Joran\", \"Jordan\", \"Joriel\", \"Jornadesh\", \"Jorunn\", \"Joscelyn\", \"Joseph\", \"Josephine\", \"Josette\", \"Joshua\", \"Jotham\", \"Jovena\", \"Jubini\",\r\n    \"Jullana\", \"Junius\", \"Juno\", \"Juntalin\", \"Jura\", \"Jurim\", \"Jusif\", \"Juss\", \"Jyresh\", \"K'aarna\", \"Kaarna\", \"Kael\", \"Kaelin\",\r\n    \"Kaffa\", \"Kai\", \"Kaia\", \"Kailyn\", \"Kaimana\", \"Kaitlinn\", \"Kaja\", \"Kalan\", \"Kalantir\", \"Kalar\", \"Kaldar\", \"Kaleen\", \"Kalen\",\r\n    \"Kalf\", \"Kalia\", \"Kalina\", \"Kalvan\", \"Kalvaro\", \"Kalyra\", \"Kalysha\", \"Kamril\", \"Kamshir\", \"Kanoa\", \"Kaori\", \"Kaprin\", \"Kara\",\r\n    \"Karali\", \"Karel\", \"Karelia\", \"Kari\", \"Karim\", \"Karinca\", \"Karine\", \"Karis\", \"Karitsa\", \"Karker\", \"Karl\", \"Karlsefni\", \"Karran\",\r\n    \"Karya\", \"Kaschak\", \"Kasia\", \"Kaspar\", \"Kasreyn\", \"Kathena\", \"Kathran\", \"Katishimo\", \"Katla\", \"Katnina\", \"Katrin\", \"Katrina\", \"Kavalam\",\r\n    \"Kavalnir\", \"Kaylianna\", \"Kaylin\", \"Kazairl\", \"Kazalim\", \"Kazir\", \"Keavy\", \"Keelan\", \"Kegan\", \"Keiko\", \"Keldorn\", \"Kelin\", \"Kellin\",\r\n    \"Kelma'in\", \"Kelson\", \"Kelth\", \"Kelvin\", \"Kemble\", \"Kendall\", \"Kendra\", \"Kendrick\", \"Kenesaw\", \"Kenin\", \"Kenny\", \"Kenobi\", \"Kenrick\",\r\n    \"Kerik\", \"Kerish\", \"Kermit\", \"Kerrigan\", \"Keshar\", \"Kesrick\", \"Kethios\", \"Ketial\", \"Ketil\", \"Kettali\", \"Kevan\", \"Keven\", \"Kevlin\",\r\n    \"Keyrnon\", \"Khader\", \"Khalia\", \"Khalid\", \"Khanzadian\", \"Kharas\", \"Khealynn\", \"Khelben\", \"Kheldor\", \"Khelen\", \"Khelin\", \"Khelyn\", \"Khendraja'aro\",\r\n    \"Khenel\", \"Khezeed\", \"Khindawe\", \"Khirsha\", \"Khlor\", \"Khris\", \"Khyved\", \"Ki'ushapo\", \"Kian\", \"Kiborno\", \"Kiera\", \"Kieran\", \"Kikkasut\",\r\n    \"Kilas\", \"Kilian\", \"Killion\", \"Kimmuriel\", \"Kimura\", \"Kinloch\", \"Kinson\", \"Kippler\", \"Kira\", \"Kiri\", \"Kirjava\", \"Kirk\", \"Kirren\",\r\n    \"Kirsopp\", \"Kirsten\", \"Kishin\", \"Kisin\", \"Kitiara\", \"Kjeldor\", \"Kjindar\", \"Klaus\", \"Klean\", \"Klerak\", \"Knud\", \"Knut\", \"Knute\",\r\n    \"Koabon\", \"Kolbein\", \"Kolchash\", \"Kolskegg\", \"Kolya\", \"Kona\", \"Konrad\", \"Konstantine\", \"Korban\", \"Kord\", \"Koreth\", \"Korgan\", \"Korm\",\r\n    \"Kormar\", \"Kornag\", \"Korska\", \"Kosh\", \"Kota\", \"Kovelir\", \"Krinn\", \"Krishnalai\", \"Kroh\", \"Krom\", \"Kronos\", \"Kuno\", \"Kurd\",\r\n    \"Kurn\", \"Kurt\", \"Kurin\", \"Kuros\", \"Kurtulmak\", \"Ky'ishi\", \"Ky'varan\", \"Kyle\", \"Kylindra\", \"Kypros\", \"Kyrie\", \"Kyriel\", \"La'ahl\",\r\n    \"Lachesis\", \"Lachian\", \"Ladia\", \"Ladoros\", \"Laeli\", \"Laelia\", \"Laerrui\", \"Lahar\", \"Lahsai\", \"Lalely\", \"Lamar\", \"Lambi\", \"Lan\",\r\n    \"Lana\", \"Lance\", \"Lancelot\", \"Landailyn\", \"Landoris\", \"Landrea\", \"Laneth\", \"Langhorne\", \"Langrian\", \"Langston\", \"Lanthal\", \"Lanthorn\", \"Larad\",\r\n    \"Lardner\", \"Larisa\", \"Larkin\", \"Larn\", \"Larnea\", \"Lars\", \"Larz\", \"Lashar\", \"Lateia\", \"Lathander\", \"Laurana\", \"Laurelin\", \"Laxton\",\r\n    \"Lazar\", \"Lazlo\", \"Lea\", \"Leareth\", \"Leathian\", \"Lec\", \"Ledyard\", \"Leela\", \"Legolas\", \"Legrand\", \"Leif\", \"Leighton\", \"Leika\",\r\n    \"Leila\", \"Leilah\", \"Leli\", \"Lembar\", \"Lenka\", \"Lenox\", \"Leo\", \"Leofric\", \"Leon\", \"Leonard\", \"Leonardo\", \"Leopond\", \"Lesesne\",\r\n    \"Lestyn\", \"Leta\", \"Letor\", \"Lev\", \"Lewellyri\", \"Lexan\", \"Lexx\", \"Lhuc\", \"Lia\", \"Liana\", \"Liena\", \"Lightfoot\", \"Liliane\",\r\n    \"Lilin\", \"Lina\", \"Lindar\", \"Linmer\", \"Linnea\", \"Lios\", \"Liphar\", \"Lippard\", \"Liptrot\", \"Lirith\", \"Lithar\", \"Littleton\", \"Livermore\",\r\n    \"Livia\", \"Ljot\", \"Ljotolf\", \"Lluth\", \"Llyn\", \"Llythin\", \"Lobelia\", \"Lobryn\", \"Lobur\", \"Locke\", \"Lockwood\", \"Loddlaen\", \"Lodica\",\r\n    \"Lodin\", \"Loella\", \"Logan\", \"Loibur\", \"Loili\", \"Lola\", \"Lonvan\", \"Lore\", \"Loric\", \"Lorin\", \"Lormyr\", \"Lothar\", \"Lothrop\",\r\n    \"Lott\", \"Lotta\", \"Loudon\", \"Louisa\", \"Lovegood\", \"Lovva\", \"Lovyan\", \"Luas\", \"Lucan\", \"Lucca\", \"Lucia\", \"Lucian\", \"Lucinda\",\r\n    \"Lucius\", \"Lucrecia\", \"Ludmila\", \"Luella\", \"Lufkin\", \"Lugh\", \"Luhsane\", \"Lum\", \"Lumbar\", \"Luna\", \"Lunar\", \"Lunetta\", \"Lupin\",\r\n    \"Lurican\", \"Lurue\", \"Luscan\", \"Luther\", \"Luthian\", \"Luvina\", \"Lycias\", \"Lydia\", \"Lylas\", \"Lyle\", \"Lymo\", \"Lyndall\", \"Lyndon\",\r\n    \"Lynette\", \"Lynis\", \"Lynn\", \"Lypilla\", \"Lyra\", \"Lyrian\", \"Lyrin\", \"Lyron\", \"Lysander\", \"Lyssa\", \"Lythia\", \"Lythian\", \"Lytler\",\r\n    \"Lyzandra\", \"Lyzette\", \"Lórien\", \"Mabon\", \"Macallan\", \"Macaulay\", \"Macer\", \"Mackim\", \"Macvey\", \"Maddern\", \"Maddock\", \"Madelon\", \"Madhao\",\r\n    \"Madora\", \"Maec\", \"Maegwin\", \"Mael\", \"Maerraent\", \"Mafka\", \"Magda\", \"Magh\", \"Magill\", \"Magna\", \"Magnus\", \"Magus\", \"Mahion\",\r\n    \"Mahmud\", \"Mahri\", \"Maia\", \"Maidah\", \"Maidak\", \"Maihar\", \"Makoma\", \"Malach\", \"Malachias\", \"Maladack\", \"Malador\", \"Malak\", \"Malar\",\r\n    \"Malcoff\", \"Malcolm\", \"Malfar\", \"Malia\", \"Maliforin\", \"Malkil\", \"Malto\", \"Malvin\", \"Malvtha\", \"Mama\", \"Mamba\", \"Mana\", \"Manala\",\r\n    \"Manaverr\", \"Manfred\", \"Mankey\", \"Mannin\", \"Manon\", \"Mansour\", \"Manton\", \"Manwe\", \"Maoll\", \"March\", \"Marcus\", \"Marena\", \"Margarita\",\r\n    \"Margery\", \"Mariandor\", \"Marid\", \"Marina\", \"Marion\", \"Marissa\", \"Marisse\", \"Mark\", \"Markham\", \"Maroof\", \"Marques\", \"Marsden\", \"Marshtnan\",\r\n    \"Marsineh\", \"Marta\", \"Martin\", \"Martus\", \"Mary\", \"Maryn\", \"Mathilda\", \"Mathilde\", \"Matilda\", \"Matthew\", \"Matthias\", \"Maudlin\", \"Maura\",\r\n    \"Mavis\", \"Maxander\", \"Maxfield\", \"Maximilian\", \"Maximus\", \"Maya\", \"Mayhew\", \"Mazrak\", \"Medar\", \"Medart\", \"Medea\", \"Meder\", \"Medrom\",\r\n    \"Megan\", \"Meghnad\", \"Mehmet\", \"Mekeesha\", \"Melba\", \"Melchior\", \"Meleri\", \"Meliadoul\", \"Melian\", \"Melisande\", \"Melkor\", \"Mellyora\", \"Melnyth\",\r\n    \"Melora\", \"Melva\", \"Melvaig\", \"Memor\", \"Men\", \"Menard\", \"Mendolin\", \"Menelvagor\", \"Mennefer\", \"Meoran\", \"Mephistopheles\", \"Merah\", \"Merasye\",\r\n    \"Meredith\", \"Meriadoc\", \"Merifa\", \"Merivan\", \"Merlin\", \"Merrilee\", \"Merryn\", \"Mervyn\", \"Merwold\", \"Merwolf\", \"Mes'ard\", \"Meta\", \"Methos\",\r\n    \"Methuen\", \"Michael\", \"Michel\", \"Mideya\", \"Midhat\", \"Midra\", \"Mignon\", \"Miguel\", \"Mikhail\", \"Mila\", \"Milada\", \"Milander\", \"Milandro\",\r\n    \"Mileaha\", \"Millard\", \"Milo\", \"Mimir\", \"Mina\", \"Minella\", \"Miner\", \"Minna\", \"Minx\", \"Mira\", \"Miragon\", \"Miranda\", \"Mirandros\",\r\n    \"Miriel\", \"Mirrash\", \"Mirromi\", \"Miryam\", \"Misha\", \"Mishanti\", \"Misin\", \"Mist\", \"Mithrandir\", \"Mithryl\", \"Mitre\", \"Miwa\", \"Mizra\",\r\n    \"Moda\", \"Modeus\", \"Moffett\", \"Mohammed\", \"Mohieddin\", \"Moina\", \"Moira\", \"Moiriane\", \"Moisur\", \"Molina\", \"Mona\", \"Monach\", \"Montfort\",\r\n    \"Mora\", \"Moradin\", \"Mord\", \"Moredlin\", \"Morgan\", \"Morgon\", \"Morgwin\", \"Moriana\", \"Morik\", \"Morin\", \"Morley\", \"Morna\", \"Morpheus\",\r\n    \"Morrigan\", \"Mortos\", \"Mortrock\", \"Morven\", \"Moya\", \"Muammar\", \"Mubur\", \"Muhammed\", \"Muhlwena\", \"Mujibur\", \"Muktar\", \"Munin\", \"Murdo\",\r\n    \"Murias\", \"Murina\", \"Murrough\", \"Mussa\", \"Mustadio\", \"Mustafa\", \"Mylin\", \"Mylé\", \"Myna\", \"Myra\", \"Myriam\", \"Myrick\", \"Myrmeen\",\r\n    \"Myrna\", \"Myron\", \"Myrrdyn\", \"Myrrha\", \"Myshella\", \"Mythil\", \"Myvor\", \"N'hadha\", \"Nada\", \"Nadezhda\", \"Nadia\", \"Nadir\", \"Nagai\",\r\n    \"Nagel\", \"Nagvar\", \"Nahar\", \"Naia\", \"Naidel\", \"Najib\", \"Nakea\", \"Nalia\", \"Nall\", \"Nanorion\", \"Naois\", \"Naomi\", \"Napollo\",\r\n    \"Narasen\", \"Narcista\", \"Narisa\", \"Narvi\", \"Nasir\", \"Nasser\", \"Natalia\", \"Natasha\", \"Nathalia\", \"Nathalie\", \"Natty\", \"Nazar\", \"Nebron\",\r\n    \"Nedda\", \"Nedstar\", \"Neelix\", \"Negley\", \"Nemm\", \"Nemuel\", \"Neral\", \"Neri\", \"Nerian\", \"Nerilka\", \"Nerissa\", \"Nerull\", \"Nesbit\",\r\n    \"Nesta\", \"Nethuan\", \"Neva\", \"Nevaeh\", \"Nevard\", \"Nevena\", \"Nevile\", \"Nevyn\", \"Newall\", \"Newbold\", \"Newman\", \"Neysa\", \"Neza\",\r\n    \"Nibbidard\", \"Nichol\", \"Nicor\", \"Nienna\", \"Night\", \"Nigil\", \"Nikolai\", \"Nikua\", \"Nila\", \"Nimir\", \"Nimrodel\", \"Nina\", \"Ninian\",\r\n    \"Niomir\", \"Nira'in\", \"Nirnir\", \"Nita\", \"Nivek\", \"Nivilian\", \"Nizam\", \"Nizar\", \"Nobanion\", \"Nodaran\", \"Noela\", \"Nolan\", \"Nona\",\r\n    \"Noora\", \"Nor\", \"Nordri\", \"Noreen\", \"Norine\", \"Norle\", \"Norna\", \"Norval\", \"Norvin\", \"Norwood\", \"Nova\", \"Novalis\", \"Novita\",\r\n    \"Novomira\", \"Nu'endo\", \"Nuada\", \"Nuadi\", \"Nuala\", \"Nuale\", \"Nuanni\", \"Nungo\", \"Nunila\", \"Nura\", \"Nurdoch\", \"Nurgan\", \"Nuri\",\r\n    \"Nushia\", \"Nyassa\", \"Nylan\", \"Nymara\", \"Nynaeve\", \"Nyra\", \"Nytasa\", \"Oakes\", \"Oalyn\", \"Obed\", \"Oberon\", \"Ocar\", \"Oda\",\r\n    \"Odar\", \"Odd\", \"Oden\", \"Odilia\", \"Odimus\", \"Odo\", \"Odona\", \"Ofeig\", \"Ogden\", \"Oghma\", \"Ogma\", \"Ogmund\", \"Ogrus\",\r\n    \"Okander\", \"Olac\", \"Olaf\", \"Oldac\", \"Oldham\", \"Olga\", \"Olissa\", \"Olof\", \"Olorin\", \"Oloru\", \"Olvir\", \"Olya\", \"Omandras\",\r\n    \"Omar\", \"Omassus\", \"Ombrum\", \"Omer\", \"Onslow\", \"Onufrio\", \"Onund\", \"Onyx\", \"Ooma\", \"Oona\", \"Oonai\", \"Opal\", \"Ophelia\",\r\n    \"Orah\", \"Orcrist\", \"Ordway\", \"Oriana\", \"Orin\", \"Orion\", \"Orius\", \"Orivaen\", \"Orlandu\", \"Orlata\", \"Orm\", \"Ormsby\", \"Orome\",\r\n    \"Oron\", \"Orren\", \"Orridge\", \"Orsola\", \"Orson\", \"Osa\", \"Osiris\", \"Oskavar\", \"Ospar\", \"Osric\", \"Oswin\", \"Othello\", \"Othilia\",\r\n    \"Otho\", \"Othran\", \"Otiluke\", \"Otkel\", \"Otrygg\", \"Ottar\", \"Ottilia\", \"Otto\", \"Overton\", \"Owain\", \"Owen\", \"Owyn\", \"Ozatras\",\r\n    \"Ozto\", \"Ozur\", \"Padraic\", \"Padrias\", \"Paget\", \"Pala\", \"Palma\", \"Pamar\", \"Pan\", \"Parbha\", \"Pargascor\", \"Parr\", \"Pasca\",\r\n    \"Paschal\", \"Passmore\", \"Patnas\", \"Pattabhai\", \"Pavel\", \"Pean\", \"Pearl\", \"Pearsall\", \"Peffer\", \"Peiham\", \"Peitar\", \"Peleg\", \"Pelipi\",\r\n    \"Pellin\", \"Pendleton\", \"Penfield\", \"Pengolod\", \"Penhallow\", \"Penniman\", \"Penrhyn\", \"Pepperell\", \"Pereban\", \"Peredon\", \"Peregrin\", \"Peregrine\", \"Perith\",\r\n    \"Peronn\", \"Perrin\", \"Persifor\", \"Pestivar\", \"Peter\", \"Pethros\", \"Petra\", \"Petrea\", \"Petronella\", \"Pflarr\", \"Phanuel\", \"Pharatnond\", \"Pharcellus\",\r\n    \"Phelim\", \"Philo\", \"Philpot\", \"Phimister\", \"Phoenix\", \"Phyrrus\", \"Pia\", \"Picar\", \"Pickman\", \"Pigot\", \"Pike\", \"Pine\", \"Pinkham\",\r\n    \"Pinkney\", \"Pinkstone\", \"Piotr\", \"Pittheus\", \"Plaisted\", \"Plunimer\", \"Plunkett\", \"Polassar\", \"Pollard\", \"Pollock\", \"Polonius\", \"Polycarp\", \"Pomeroy\",\r\n    \"Porthios\", \"Powell\", \"Prafulla\", \"Prendergast\", \"Preston\", \"Prichard\", \"Proctor\", \"Prospero\", \"Provida\", \"Psilofyr\", \"Puck\", \"Pue\", \"Pulisk\",\r\n    \"Pulteney\", \"Purdon\", \"Pyke\", \"Pyros\", \"Pysander\", \"Quaan\", \"Quagel\", \"Qualin\", \"Quan\", \"Quarles\", \"Quasar\", \"Quascar\", \"Quass\",\r\n    \"Quebba\", \"Quelfinas\", \"Quesan\", \"Queygo\", \"Quiddle\", \"Quinn\", \"Quiss\", \"Quixano\", \"Quora\", \"Quvar\", \"Quvean\", \"Raagon\", \"Raban\",\r\n    \"Rabind\", \"Rabur\", \"Rach\", \"Rachid\", \"Rackafel\", \"Rackhir\", \"Radagast\", \"Radija\", \"Rae\", \"Rael\", \"Raen\", \"Rafa\", \"Rafael\",\r\n    \"Rafur\", \"Ragen\", \"Ragna\", \"Ragnal\", \"Ragnar\", \"Ragnhild\", \"Rahaz\", \"Rai\", \"Raikes\", \"Rails\", \"Raimon\", \"Raina\", \"Raine\",\r\n    \"Raisa\", \"Raistlin\", \"Ralina\", \"Ralmanor\", \"Ralph\", \"Ramen\", \"Ramli\", \"Ramman\", \"Ramona\", \"Ramora\", \"Ramous\", \"Ramza\", \"Ranald\",\r\n    \"Ranath\", \"Rancor\", \"Rand\", \"Randar\", \"Randoer\", \"Randolf\", \"Randor\", \"Ranfurly\", \"Ranjan\", \"Rankin\", \"Rannuif\", \"Rannveig\", \"Raphael\",\r\n    \"Rary\", \"Rashiel\", \"Rasputin\", \"Rathack\", \"Rathanos\", \"Rathgar\", \"Rattray\", \"Rauros\", \"Ravenor\", \"Ravi\", \"Rayne\", \"Razamor\", \"Raziel\",\r\n    \"Razzan\", \"Rebecca\", \"Recoun\", \"Redcliffe\", \"Regalorn\", \"Regnar\", \"Reina\", \"Reis\", \"Relm\", \"Rem\", \"Remi\", \"Remnor\", \"Remus\",\r\n    \"Renar\", \"Renata\", \"Rendel\", \"Rengoll\", \"Reoc\", \"Resha\", \"Rethral\", \"Reva\", \"Rex\", \"Reyna\", \"Rezah\", \"Rhadry\", \"Rhaederle\",\r\n    \"Rhaeryn\", \"Rhea\", \"Rhiannon\", \"Rhiow\", \"Rhodhy\", \"Rhona\", \"Rhonda\", \"Rhora\", \"Rhorleif\", \"Rhorvald\", \"Rhundas\", \"Rhymer\", \"Rhynn\",\r\n    \"Rhys\", \"Riallus\", \"Riamon\", \"Rickard\", \"Ricyn\", \"Rigolio\", \"Rilir\", \"Rinaldus\", \"Ringgold\", \"Risaya\", \"Riss\", \"Rith\", \"Riven\",\r\n    \"Roach\", \"Roark\", \"Rockhill\", \"Rodefer\", \"Roderic\", \"Rodhan\", \"Rognvald\", \"Roignar\", \"Roland\", \"Rolf\", \"Rollo\", \"Roman\", \"Romelia\",\r\n    \"Romer\", \"Romney\", \"Ronan\", \"Root\", \"Rorik\", \"Rosalyn\", \"Rosamund\", \"Roscoe\", \"Rose\", \"Rosefyre\", \"Roseline\", \"Roshena\", \"Rosskeen\",\r\n    \"Roundell\", \"Rowena\", \"Ruadan\", \"Ruan\", \"Rubar\", \"Ruben\", \"Rubrick\", \"Ruby\", \"Rucker\", \"Rudyard\", \"Rufina\", \"Rufus\", \"Ruggles\",\r\n    \"Ruhollah\", \"Ruinar\", \"Rulian\", \"Rulinian\", \"Rumil\", \"Runa\", \"Runold\", \"Runolf\", \"Runus\", \"Rurik\", \"Rusgar\", \"Ruth\", \"Rutland\",\r\n    \"Ruwen\", \"Ryana\", \"Rycaro\", \"Rychanna\", \"Rygar\", \"Ryll\", \"Rylla\", \"Rynnyn\", \"Ryodan\", \"Ryoga\", \"Ryoka\", \"Saalem\", \"Sabal\",\r\n    \"Sabhel\", \"Sabriel\", \"Sabrok\", \"Sacheverall\", \"Sackville\", \"Saddam\", \"Sadler\", \"Sador\", \"Saedd\", \"Saermund\", \"Saeunn\", \"Safrin\", \"Saia\",\r\n    \"Said\", \"Saifai\", \"Saiwyn\", \"Salina\", \"Salmon\", \"Salter\", \"Sam\", \"Sambrea\", \"Samia\", \"Samira\", \"Sammel\", \"Samuel\", \"Sanfrid\",\r\n    \"Sano'rye\", \"Sanoreya\", \"Sanoria\", \"Sarcyn\", \"Sardior\", \"Sardul\", \"Sarel\", \"Sarevok\", \"Sargonus\", \"Saria\", \"Sarina\", \"Sarisin\", \"Sariya\",\r\n    \"Sarrask\", \"Saruman\", \"Sasha\", \"Saska\", \"Saturn\", \"Sauron\", \"Savah\", \"Savion\", \"Sawdon\", \"Sayan\", \"Scenesefa\", \"Scudamore\", \"Scythe\",\r\n    \"Sebastian\", \"Sebrinth\", \"Sechier\", \"Sedgely\", \"Seersha\", \"Segojan\", \"Sehanine\", \"Seitarin\", \"Selema\", \"Selena\", \"Selene\", \"Selig\", \"Selim\",\r\n    \"Selina\", \"Selis\", \"Selith\", \"Selune\", \"Selwyn\", \"Semuta\", \"Senith\", \"Senna\", \"Sephia\", \"Sephya\", \"Sepiroth\", \"Seramir\", \"Seraphina\",\r\n    \"Serena\", \"Serenyi\", \"Sergei\", \"Seriozha\", \"Seryan\", \"Seryl\", \"Seryth\", \"Seth\", \"Sethron\", \"Sevadia\", \"Severin\", \"Sevros\", \"Sevy\",\r\n    \"Sha'dar\", \"Sha'rell\", \"Shackerley\", \"Shadizad\", \"Shadrach\", \"Shadworth\", \"Shaera\", \"Shaivar\", \"Shaivir\", \"Shala\", \"Shalamar\", \"Shalandain\", \"Shalat\",\r\n    \"Shalhassan\", \"Shalindra\", \"Shalon\", \"Shalpan\", \"Shamane\", \"Shamir\", \"Shana\", \"Shandalar\", \"Shanell\", \"Shar\", \"Sharada\", \"Sharaq\", \"Shard\",\r\n    \"Sharif\", \"Sharilla\", \"Sharl\", \"Sharla\", \"Sharmaine\", \"Sharman\", \"Sharna\", \"Sharnira\", \"Sharra\", \"Sharteel\", \"Shaundra\", \"Sharyn\", \"Shayera\",\r\n    \"Shayla\", \"Shayll\", \"Shayonea\", \"Shea\", \"Sheegoth\", \"Sheeryl\", \"Sheherazad\", \"Shemsin\", \"Sheridan\", \"Sherif\", \"Sherry\", \"Shezael\", \"Shima'onari\",\r\n    \"Shintaro\", \"Shiza\", \"Shuinn\", \"Shuna\", \"Shurakai\", \"Shurik\", \"Shushila\", \"Shylock\", \"Siandar\", \"Sibert\", \"Sibyl\", \"Sidhe\", \"Siglinde\",\r\n    \"Sigmund\", \"Signe\", \"Sigred\", \"Sigrid\", \"Sigtrydd\", \"Sigurd\", \"Sigvaldi\", \"Silatasar\", \"Silius\", \"Silma\", \"Silmariel\", \"Silphane\", \"Silvain\",\r\n    \"Silvan\", \"Silvanus\", \"Silvera\", \"Silveron\", \"Silvia\", \"Silvyn\", \"Simir\", \"Simmu\", \"Sinbad\", \"Sindarin\", \"Sinir\", \"Sinjin\", \"Siranush\",\r\n    \"Sirisir\", \"Sirli'in\", \"Sirona\", \"Sirranon\", \"Sirwin\", \"Sisimar\", \"Siski\", \"Sivesh\", \"Siveth\", \"Siward\", \"Sjerdi\", \"Skamkel\", \"Skelmar\",\r\n    \"Skorian\", \"Slade\", \"Slania\", \"Slater\", \"Slava\", \"Sligh\", \"Slingsby\", \"Smedley\", \"Snargg\", \"Snorri\", \"Snyder\", \"Sodorn\", \"Soilir\",\r\n    \"Soisil\", \"Sokki\", \"Solaris\", \"Solera\", \"Solevig\", \"Solmund\", \"Solomon\", \"Solvi\", \"Sonnet\", \"Sooth\", \"Sora\", \"Sorass\", \"Sorcha\",\r\n    \"Sorin\", \"Sornovas\", \"Soth\", \"Southall\", \"Sovaz\", \"Soveh\", \"Soyadi\", \"Sparrow\", \"Sprigg\", \"Squall\", \"Srass\", \"Stabyl\", \"Stanwood\",\r\n    \"Starkad\", \"Starke\", \"Stedman\", \"Stefan\", \"Stehman\", \"Stein\", \"Steinkel\", \"Steinthor\", \"Stelectra\", \"Stenger\", \"Stenwulf\", \"Steponas\", \"Sterndale\",\r\n    \"Stetson\", \"Stetter\", \"Stiliman\", \"Stilingfleet\", \"Stopford\", \"Storm\", \"Stowna\", \"Strachan\", \"Straygoth\", \"Stroud\", \"Strudwick\", \"Strybyorn\", \"Strykar\",\r\n    \"Sturla\", \"Sturm\", \"Styx\", \"Sudeha\", \"Suleiman\", \"Sulimo\", \"Sulkas\", \"Sumarlidi\", \"Suras\", \"Surridge\", \"Susin\", \"Susur\", \"Sutan\",\r\n    \"Svala\", \"Svan\", \"Svante\", \"Svatopluk\", \"Sveata\", \"Sven\", \"Swain\", \"Swartwout\", \"Sydnor\", \"Syllva\", \"Sylvane\", \"Sylvia\", \"Sylvin\",\r\n    \"Sylvine\", \"Syndarra\", \"Synnyn\", \"Syranita\", \"Syrioll\", \"Tabar\", \"Tabitha\", \"Tabor\", \"Tabu\", \"Tacey\", \"Tachel\", \"Tadashi\", \"Tadeus\",\r\n    \"Tadia\", \"Tadisha\", \"Tadra\", \"Taennyn\", \"Taeynnyn\", \"Taggart\", \"Tahir\", \"Tailabar\", \"Taina\", \"Takhisis\", \"Taleen\", \"Talen\", \"Taleth\",\r\n    \"Talia\", \"Taliesin\", \"Talin\", \"Talmora\", \"Talobar\", \"Talona\", \"Taloxi\", \"Taltos\", \"Talus\", \"Tamar\", \"Tamara\", \"Tameryn\", \"Tamias\",\r\n    \"Tamlin\", \"Tamoreya\", \"Tanina\", \"Tanis\", \"Tanith\", \"Tanyc\", \"Tar\", \"Tara\", \"Taran\", \"Tarcia\", \"Taria\", \"Tarik\", \"Taromas\",\r\n    \"Taron\", \"Tarran\", \"Taryn\", \"Tas\", \"Tasharra\", \"Tasker\", \"Tatyana\", \"Taurus\", \"Taveli\", \"Taylian\", \"Taylin\", \"Tedra\", \"Tegan\",\r\n    \"Tekia\", \"Telena\", \"Tell\", \"Tench\", \"Tenna\", \"Tenser\", \"Teoddry\", \"Ter\", \"Teralyn\", \"Teressa\", \"Terix\", \"Teruah\", \"Tesin\",\r\n    \"Tesla\", \"Tessa\", \"Tevran\", \"Thaal\", \"Thacker\", \"Thaddeus\", \"Thaki\", \"Thal\", \"Thalen\", \"Thalessa\", \"Thalia\", \"Thalna\", \"Tham\",\r\n    \"Thana\", \"Thane\", \"Thanatos\", \"Thantos\", \"Thar\", \"Tharbad\", \"Tharkesh\", \"Tharn\", \"Thax\", \"Thecla\", \"Theda\", \"Theleb\", \"Theoden\",\r\n    \"Theodor\", \"Theodoric\", \"Theodosia\", \"Theodric\", \"Theoric\", \"Thera\", \"Therad\", \"Theresa\", \"Therios\", \"Theros\", \"Thesius\", \"Thieras\", \"Thieryn\",\r\n    \"Thingyr\", \"Thio\", \"Tholan\", \"Thomas\", \"Thomulor\", \"Thora\", \"Thoran\", \"Thorarin\", \"Thorburn\", \"Thord\", \"Thordarson\", \"Thordis\", \"Thorfel\",\r\n    \"Thorfinn\", \"Thorfinna\", \"Thorgeir\", \"Thorgerd\", \"Thorgest\", \"Thorgils\", \"Thorgrim\", \"Thorgunna\", \"Thorhall\", \"Thorhalla\", \"Thorhild\", \"Thorin\", \"Thorir\",\r\n    \"Thorkatla\", \"Thorkell\", \"Thorkild\", \"Thormod\", \"Thormodr\", \"Thormond\", \"Thorn\", \"Thorndike\", \"Thornwell\", \"Thorold\", \"Thorolf\", \"Thorsager\", \"Thorstein\",\r\n    \"Thorunn\", \"Thorvald\", \"Thorvaldur\", \"Thorvar\", \"Thorzyl\", \"Thoth\", \"Thrain\", \"Thrand\", \"Throck\", \"Thule\", \"Thurid\", \"Thylda\", \"Thyra\",\r\n    \"Thyri\", \"Thyrza\", \"Thyssa\", \"Tiana\", \"Tiffany\", \"Tihan\", \"Tika\", \"Tilford\", \"Tilica\", \"Tilir\", \"Tillinghast\", \"Tilloch\", \"Timon\",\r\n    \"Tioniel\", \"Tirion\", \"Tisha\", \"Tisheri\", \"Titania\", \"Titia\", \"Titiana\", \"Tivernee\", \"Tiyagar\", \"Tnin\", \"Tobias\", \"Tobis\", \"Todhunter\",\r\n    \"Tolbert\", \"Tolenka\", \"Topaz\", \"Topham\", \"Torc\", \"Tortbold\", \"Tosti\", \"Tosya\", \"Toulac\", \"Tovi\", \"Trafford\", \"Trebor\", \"Trelane\",\r\n    \"Trelawny\", \"Trella\", \"Trevel\", \"Trick\", \"Trigg\", \"Trill\", \"Triona\", \"Trir\", \"Tristam\", \"Tristan\", \"Trost\", \"Trotwood\", \"Trowbridge\",\r\n    \"Truesdell\", \"Tuane\", \"Tufnell\", \"Tugan\", \"Tuilleth\", \"Tulio\", \"Tulkas\", \"Tundine\", \"Tunstall\", \"Tuor\", \"Turan\", \"Turgoz\", \"Turhan\",\r\n    \"Turin\", \"Turpin\", \"Tuttle\", \"Tuula\", \"Twyla\", \"Tylden\", \"Tyldoran\", \"Tylen\", \"Tylien\", \"Tylynn\", \"Tymar\", \"Tymora\", \"Tymoriel\",\r\n    \"Tynnyn\", \"Tyr\", \"Tyra\", \"Tyranina\", \"Tyreen\", \"Tyrwhitt\", \"Uamian\", \"Ubriani\", \"Ucarsh\", \"Uda\", \"Uhier\", \"Uhlain\", \"Uhlume\",\r\n    \"Uholedil\", \"Uinen\", \"Ula\", \"Ulf\", \"Ulgor\", \"Ulis\", \"Uljas\", \"Ulji\", \"Ulmaerr\", \"Ulmo\", \"Ulosh\", \"Ulric\", \"Ulrich\",\r\n    \"Ultron\", \"Umaiar\", \"Umbar\", \"Umda\", \"Umgalad\", \"Una\", \"Uneitna\", \"Ungon\", \"Unius\", \"Unn\", \"Unrak\", \"Unwin\", \"Upal\",\r\n    \"Upton\", \"Urabi\", \"Urania\", \"Uranos\", \"Uranus\", \"Uriel\", \"Urish\", \"Urokoz\", \"Ursula\", \"Usher\", \"Uta\", \"Utumno\", \"Uusoae\",\r\n    \"Uvanimor\", \"Uziel\", \"Vabryn\", \"Vadarin\", \"Vadi\", \"Vaeddyn\", \"Vagn\", \"Vai\", \"Val\", \"Valadan\", \"Valandario\", \"Valandor\", \"Valarindi\",\r\n    \"Valborg\", \"Valda\", \"Valdain\", \"Valdemar\", \"Valen\", \"Valenka\", \"Valentia\", \"Valerand\", \"Valeria\", \"Valerian\", \"Valeska\", \"Valgar\", \"Valgard\",\r\n    \"Valgerd\", \"Valiah\", \"Valion\", \"Valisa\", \"Valiss\", \"Valistor\", \"Valkor\", \"Valla\", \"Vallo\", \"Valmar\", \"Valminder\", \"Valor\", \"Valsera\",\r\n    \"Valurian\", \"Valya\", \"Valynard\", \"Vandrad\", \"Vane\", \"Vanechka\", \"Vanidor\", \"Vanion\", \"Vannevar\", \"Vannyn\", \"Vanya\", \"Vanyar\", \"Vanyel\",\r\n    \"Varda\", \"Vardis\", \"Varina\", \"Varion\", \"Varken\", \"Varnum\", \"Vasava\", \"Vash\", \"Vasha\", \"Vasilii\", \"Vasin\", \"Vaydin\", \"Vaydir\",\r\n    \"Vayi\", \"Vecna\", \"Veda\", \"Veldahar\", \"Veldan\", \"Velex\", \"Velior\", \"Venable\", \"Vendor\", \"Veorcyn\", \"Vercyn\", \"Verdina\", \"Vereesa\",\r\n    \"Verline\", \"Vermund\", \"Verna\", \"Ves\", \"Vespar\", \"Vestein\", \"Veva\", \"Vevina\", \"Vexter\", \"Viasta\", \"Vicarr\", \"Vicat\", \"Vicentia\",\r\n    \"Viconia\", \"Victor\", \"Vida\", \"Vidkun\", \"Vidron\", \"Vieno\", \"Viera\", \"Vierna\", \"Vigdis\", \"Vigfus\", \"Vilhelm\", \"Vilka\", \"Vilrna\",\r\n    \"Vinatta\", \"Vincas\", \"Vincent\", \"Vintar\", \"Violet\", \"Vircyn\", \"Vishali\", \"Viveka\", \"Vladimir\", \"Vladislav\", \"Vlaric\", \"Vobur\", \"Voirath\",\r\n    \"Vokos\", \"Voldor\", \"Volkan\", \"Volney\", \"Volodya\", \"Volund\", \"Vonya\", \"Voranor\", \"Vrashin\", \"Vulpen\", \"Vurog\", \"Vusil\", \"Vyecheslav\",\r\n    \"Vyner\", \"Wadleigh\", \"Waenwryht\", \"Wager\", \"Waisham\", \"Waivan\", \"Wakeman\", \"Wakkar\", \"Walborg\", \"Walda\", \"Waldan\", \"Waldegrave\", \"Waldemar\",\r\n    \"Waleran\", \"Walford\", \"Walid\", \"Walker\", \"Wanhim\", \"Waring\", \"Wariv\", \"Wark\", \"Warne\", \"Warrender\", \"Warrigel\", \"Warwick\", \"Waryk\",\r\n    \"Watson\", \"Watt\", \"Waylan\", \"Wayland\", \"Waylon\", \"Wealin\", \"Wedlake\", \"Weilborn\", \"Weiryn\", \"Wel\", \"Wemick\", \"Wendolyn\", \"Wertha\",\r\n    \"Westcott\", \"Westen\", \"Weyrn\", \"Wharrom\", \"Whitwell\", \"Whyte\", \"Wicca\", \"Wideman\", \"Wightman\", \"Wildhair\", \"Wilfrid\", \"Wilhelm\", \"Wilhelmina\",\r\n    \"Wilibald\", \"Will\", \"Willa\", \"William\", \"Willock\", \"Willow\", \"Wilma\", \"Wilmar\", \"Wilner\", \"Wilven\", \"Windham\", \"Winfrey\", \"Winian\",\r\n    \"Winslow\", \"Winton\", \"Wisp\", \"Wisuth\", \"Wivianne\", \"Wizlow\", \"Woart\", \"Wodan\", \"Wolfgang\", \"Wolmar\", \"Womal\", \"Woodfin\", \"Woodruff\",\r\n    \"Wooligar\", \"Wortley\", \"Wotan\", \"Wulf\", \"Wulfgar\", \"Wulfric\", \"Wulgar\", \"Wychnor\", \"Wycliffe\", \"Wyllows\", \"Wyly\", \"Wynkyn\", \"Wynne\",\r\n    \"Wynston\", \"Wyvan\", \"Xaandria\", \"Xaath\", \"Xabian\", \"Xabiel\", \"Xabu\", \"Xain\", \"Xalthan\", \"Xan\", \"Xanaphel\", \"Xanathar\", \"Xander\",\r\n    \"Xandra\", \"Xandria\", \"Xanthon\", \"Xanthus\", \"Xarek\", \"Xarolith\", \"Xaver\", \"Xavier\", \"Xavin\", \"Xela\", \"Xelmonth\", \"Xena\", \"Xenia\",\r\n    \"Xenoba\", \"Xera\", \"Xercon\", \"Xerravin\", \"Xiombarg\", \"Xoncarg\", \"Xoran\", \"Xulan\", \"Xyas\", \"Xydra\", \"Xyko\", \"Xylah\", \"Xylia\",\r\n    \"Xymoya\", \"Xystus\", \"Xythrin\", \"Xytrin\", \"Yacima\", \"Yaheira\", \"Yahira\", \"Yaigin\", \"Yakov\", \"Yalan\", \"Yali\", \"Yalin\", \"Yalniz\",\r\n    \"Yamari\", \"Yana\", \"Yandell\", \"Yangin\", \"Yanira\", \"Yannul\", \"Yara\", \"Yaraia\", \"Yarali\", \"Yardim\", \"Yardley\", \"Yari\", \"Yarim\",\r\n    \"Yarin\", \"Yarir\", \"Yaritza\", \"Yartrina\", \"Yasimina\", \"Yasir\", \"Yasmina\", \"Yasser\", \"Yastar\", \"Yatay\", \"Yavana\", \"Yazihane\", \"Yelain\",\r\n    \"Yeni\", \"Yetne\", \"Yevgenii\", \"Yezade\", \"Ygerna\", \"Ygraine\", \"Yishana\", \"Ynryc\", \"Ynvar\", \"Yoda\", \"Yolanda\", \"Yondalla\", \"York\",\r\n    \"Yradry\", \"Yreoddyn\", \"Yrrkoon\", \"Yrsa\", \"Yrun\", \"Yryllyn\", \"Ysabel\", \"Ysgerryn\", \"Ysolde\", \"Yuri\", \"Yvain\", \"Yvette\", \"Yvonne\",\r\n    \"Yvyr\", \"Yénisar\", \"Yérusha\", \"Zabdiel\", \"Zacarias\", \"Zachary\", \"Zachris\", \"Zadock\", \"Zahara\", \"Zahra\", \"Zaidh\", \"Zalazar\", \"Zalbar\",\r\n    \"Zan\", \"Zandra\", \"Zanifa\", \"Zanthar\", \"Zara\", \"Zaranthe\", \"Zared\", \"Zarimarth\", \"Zarquan\", \"Zathras\", \"Zavel\", \"Zaviv\", \"Zay\",\r\n    \"Zazumel\", \"Zebalane\", \"Zebulon\", \"Zehir\", \"Zelda\", \"Zemenar\", \"Zenda\", \"Zendrac\", \"Zenith\", \"Zenobia\", \"Zenon\", \"Zepher\", \"Zephyr\",\r\n    \"Zerika\", \"Zerin\", \"Zeswick\", \"Zhalore\", \"Zhanna\", \"Zharvek\", \"Zhenya\", \"Zhirek\", \"Zhirem\", \"Zhoreb\", \"Zia\", \"Zigmal\", \"Zilar\",\r\n    \"Zinaida\", \"Zincir\", \"Zion\", \"Ziona\", \"Zircon\", \"Zirzihin\", \"Zita\", \"Zoe\", \"Zolabar\", \"Zoltan\", \"Zona\", \"Zora\", \"Zorashad\",\r\n    \"Zorayas\", \"Zorlan\", \"Zosia\", \"Zotar\", \"Zumurrud\", \"Zurrog\", \"Zykhiralamshad\"];\r\n  makeArrays();\r\n}\r\n\r\n/**\r\n * EWIJSON by Zynj\r\n */\r\nconsole.log(`Turn: ${info.actionCount}`)\r\nif (!state.data) { state.data = {} }\r\nlet dataStorage = state.data;\r\nlet contextMemoryLength = 0; // Keep count of additional context added.\r\nif (!state.generate) { state.generate = {} }\r\nif (!state.settings) { state.settings = {} }\r\nif (!state.settings.globalWhitelist) { state.settings.globalWhitelist = [] }\r\nconst DefaultSettings = {\r\n  'cross': false,\r\n  'filter': false,\r\n  'mode': true,\r\n}\r\nfor (const setting in DefaultSettings) { if (!state.settings.hasOwnProperty(setting)) { state.settings[setting] = DefaultSettings[setting] } }\r\n\r\nconst Expressions = {\r\n\r\n  \"invalid\": /(((\"|')[^\"']*(\"|'):)\\s*({}|null|\"\")),?\\s*/g,\r\n  \"clean\": /,\\s*(?=})/g,\r\n  \"listener\": /<l=[^>]*>|<\\/l>/g,\r\n  \"placeholder\": /\\$\\{[^{}]*}/g,\r\n  \"attributes\": /(\\w(=+-*\\d*)?)/g,\r\n  \"split\": /=+/,\r\n  \"EWI\": /#\\[.*\\]$/,\r\n  \"flags\": /(?<=^\\/.*\\/)([ygmiu]+)/,\r\n  \"expectFlags\": /(?<=^\\/.*\\/)/\r\n}\r\n\r\nstate.config = {\r\n  prefix: /\\n? ?(?:> You |> You say \"|)\\/(.+?)[\"]?[.]?\\n?$/i,\r\n  prefixSymbol: '/',\r\n  libraryPath: '_exp',\r\n  whitelistPath: '_whitelist',\r\n  synonymsPath: '_synonyms',\r\n  configPath: '_config',\r\n  wildcardPath: '/*',\r\n  pathSymbol: '.',\r\n  openListener: '<l',\r\n  closeListener: '</l>'\r\n}\r\nlet { cross } = state.settings;\r\nconst { whitelistPath, synonymsPath, pathSymbol, wildcardPath, configPath, libraryPath, openListener, closeListener } = state.config;\r\nconst Paths = [whitelistPath, synonymsPath, libraryPath];\r\n\r\nconst filter = (arr, by, restrict) => {\r\n\r\n  const hash = {};\r\n  const result = [];\r\n  arr.forEach(el => {\r\n    const value = el.metadata.attributes.find(e => by.some(b => b == e[0]));\r\n    const restricted = el.metadata.attributes.find(e => e[0] == restrict);\r\n\r\n    if (value) {\r\n\r\n      if (!hash[value[1]]) {\r\n        hash[value[1]] = {\r\n          \"elements\": []\r\n        };\r\n        result.push(hash[value[1]]);\r\n      };\r\n\r\n      if (restricted && !hash[value[1]].hasOwnProperty('limit')) {\r\n        hash[value[1]].limit = restricted[1]\r\n      }\r\n      if (!hash[value[1]].hasOwnProperty('limit') || (hash[value[1]].elements.length < hash[value[1]].limit)) {\r\n        hash[value[1]].elements.push(el);\r\n      }\r\n    } else {\r\n      result.push([el])\r\n    };\r\n  });\r\n\r\n  return result.map(e => e.elements || e);\r\n\r\n}\r\nconst getRandomObjects = (arr) => {\r\n\r\n  return filter(arr, ['r']).map(e => {\r\n    const find = e.filter(x => x.metadata?.random?.picked);\r\n    // If multiple previous picks are present, reset their status and re-roll from the batch.\r\n    if (find.length == 1 && (find[0].metadata.random.action == info.actionCount || !getHistoryString(-1).includes(find[0].metadata.matches[0]))) { return [find[0]] }\r\n    else { if (find.length > 0) { find.forEach(e => e.metadata.random.picked = false); } return e };\r\n  }).map(e => {\r\n    if (e.length > 1) {\r\n      const random = e[Math.floor(Math.random() * e.length)];\r\n      random.metadata.random = { \"picked\": true };\r\n      random.metadata.random.action = info.actionCount;\r\n      return random\r\n    }\r\n    else { return e[0] }\r\n  });\r\n};\r\n\r\n//https://stackoverflow.com/questions/61681176/json-stringify-replacer-how-to-get-full-path\r\nconst replacerWithPath = (replacer) => { let m = new Map(); return function (field, value) { let path = m.get(this) + (Array.isArray(this) ? `[${field}]` : '.' + field); if (value === Object(value)) m.set(value, path); return replacer.call(this, field, value, path.replace(/undefined\\.\\.?/, '')); } }\r\nconst worldEntriesFromObject = (obj, root) => {\r\n  JSON.stringify(obj, replacerWithPath(function (field, value, path) {\r\n    if (typeof value != 'object') {\r\n      const index = worldInfo.findIndex(e => e[\"keys\"] == `${root}.${path}`.replace(/^\\.*|\\.$/g, ''));\r\n      index >= 0 ? updateWorldEntry(index, `${root}.${path}`.replace(/^\\.*|\\.$/g, ''), value.toString(), hidden = false) : addWorldEntry(`${root}.${path}`.replace(/^\\.*|\\.$/g, ''), value.toString(), hidden = false);\r\n    }\r\n    return value;\r\n  }));\r\n}\r\nconst getHistoryString = (start, end = undefined) => history.slice(start, end).map(e => e[\"text\"]).join('\\n') // Returns a single string of the text.\r\nconst getHistoryText = (start, end = undefined) => history.slice(start, end).map(e => e[\"text\"]) // Returns an array of text.\r\nconst getActionTypes = (turns) => history.slice(turns).map(e => e[\"type\"]) // Returns the action types of the previous turns in an array.\r\n\r\n\r\n// Ensure that '_synonyms' is processed first in the loop. It's executed if (Object.keys(dataStorage)[0] != synonymsPath)\r\nconst fixOrder = () => {\r\n  dataStorage = Object.assign({ \"_whitelist\": {}, \"_synonyms\": {} }, dataStorage);\r\n  state.data = dataStorage;\r\n}\r\n\r\n// Consider implementing a negative 'every' check for 'do not match' instances, expression prefixed by '!'\r\nconst regExMatch = (keys, text = undefined) => {\r\n  if (typeof keys != 'string') { console.log(`Invalid Expressions: ${keys}`); return }\r\n  // Test the multi-lines individually, last/bottom line qualifying becomes result.\r\n  const array = keys.split(/\\n/g);\r\n  const result = [];\r\n  let key = '';\r\n  try {\r\n    array.forEach(line => {\r\n      const string = text ? text : getSlice(line, state.settings.mode).join('\\n')\r\n      const expressions = line.slice(0, /#\\[.*\\]/.test(line) ? line.lastIndexOf('#') : line.length).split(/(?<!\\\\),/g);\r\n\r\n      if (expressions.every(exp => {\r\n        const regExRaw = exp;\r\n        const regExString = regExRaw.replace(/(^\\/)|(\\/.*)$/g, '').replace(/\\\\,/, '');\r\n        const regExFlags = Expressions[\"flags\"].test(regExRaw) ? [...new Set([...regExRaw.match(Expressions[\"flags\"]).join('').split(''), 'g'])].join('') : Expressions[\"expectFlags\"].test(regExRaw) ? 'g' : 'gi';\r\n        const regEx = new RegExp(regExString, regExFlags);\r\n        return regEx.test(string);\r\n      })) {\r\n        key = line;\r\n        const regExRawLast = expressions.pop();\r\n        const regExString = regExRawLast.replace(/(^\\/)|(\\/.*)$/g, '').replace(/\\\\,/, '');\r\n        const regExFlags = Expressions[\"flags\"].test(regExRawLast) ? [...new Set([...regExRawLast.match(Expressions[\"flags\"]).join('').split(''), 'g'])].join('') : Expressions[\"expectFlags\"].test(regExRawLast) ? 'g' : 'gi'\r\n        const regEx = new RegExp(regExString, regExFlags);\r\n        result.push([...string.matchAll(regEx)].filter(Boolean).pop());\r\n      }\r\n    })\r\n  }\r\n  catch (error) {\r\n    console.log(`In regExMatch:\\n${error.name}: ${error.message}`);\r\n    state.message = `In regExMatch:\\n${error.name}: ${error.message}`;\r\n\r\n  }\r\n  return [result.length > 0 ? result.pop().filter(Boolean) : undefined, key]\r\n}\r\n\r\n\r\nconst getAttributes = (string) => { const regEx = new RegExp(String.raw`(${Object.keys(Attributes).sort((a, b) => b.length - a.length).join('|')})(=+-*\\d*)?`, 'g'); const index = string.search(Expressions[\"EWI\"]); if (index >= 0) { const match = string.slice(index).match(regEx); if (Boolean(match)) { const result = match.map(e => e.includes('=') ? e.split(Expressions[\"split\"]) : [e, 0]).map(e => [e[0], Number(e[1])]); return result; } } }\r\nconst lens = (obj, path) => path.split('.').reduce((o, key) => o && o[key] ? o[key] : null, obj);\r\nconst replaceLast = (x, y, z) => { let a = x.split(\"\"); let length = y.length; if (x.lastIndexOf(y) != -1) { for (let i = x.lastIndexOf(y); i < x.lastIndexOf(y) + length; i++) { if (i == x.lastIndexOf(y)) { a[i] = z; } else { delete a[i]; } } } return a.join(\"\"); }\r\nconst getMemory = (text) => { return info.memoryLength ? text.slice(0, info.memoryLength) : '' } // If memoryLength is set then slice of the beginning until the end of memoryLength, else return an empty string.\r\nconst getContext = (text) => { return info.memoryLength ? text.slice(info.memoryLength) : text } // If memoryLength is set then slice from the end of memory to the end of text, else return the entire text.\r\n\r\n// Extract the last cluster in the RegEx' AND check then filter out non-word/non-whitespace symbols to TRY and assemble the intended words.\r\nconst addDescription = (entry, value = 0) => {\r\n  const result = entry.metadata.matches.pop()\r\n  let search = lines.join('\\n');\r\n  // Find a match for the last expression and grab the most recent word for positioning. Filter out undefined/false values.\r\n  if (search.includes(result) && result && !Boolean(value)) {\r\n    search = search.slice(0, search.toLowerCase().lastIndexOf(result.toLowerCase())) + result.slice(0, -result.length) + entry[\"entry\"] + ' ' + (result) + search.slice(search.toLowerCase().lastIndexOf(result.toLowerCase()) + result.length)\r\n    lines = search.split('\\n');\r\n  }\r\n  else if (search.includes(result) && result && Boolean(value)) {\r\n    search = search.slice(0, search.toLowerCase().lastIndexOf(result.toLowerCase()) + result.length) + ' ' + entry[\"entry\"] + search.slice(search.toLowerCase().lastIndexOf(result.toLowerCase()) + result.length)\r\n    lines = search.split('\\n');\r\n  }\r\n}\r\n\r\n// Reference to Object is severed during processing, so index it instead.\r\nconst addAuthorsNote = (entry, value = 0) => state.memory.authorsNote = `${entry[\"entry\"]}`\r\nconst showWorldEntry = (entry, value = 0) => entry.hidden = false;\r\nconst addPositionalEntry = (entry, value = 0) => { spliceContext((Boolean(value) ? -(value) : copyLines.length), entry[\"entry\"]); }\r\nconst addMemoryEntry = (entry, value = 0) => {\r\n  if ((info.memoryLength + contextMemoryLength + entry[\"entry\"].length) < (info.maxChars / 2)) {\r\n    spliceMemory(Boolean(value) ? -(value) : (memoryLines.length - 1), entry[\"entry\"]);\r\n  }\r\n\r\n}\r\nconst getRange = (list) => list ? list.find(e => e[0] == 'l') || [undefined, undefined] : [undefined, undefined];\r\nconst getSlice = (string, mode = true) => {\r\n  const attributes = getAttributes(string);\r\n  const length = getRange(attributes);\r\n\r\n  if (mode) {\r\n    let measure = 0;\r\n    const compare = copyLines.length;\r\n    let actions = 0;\r\n\r\n    for (let i = history.length - 1; i >= 0; i--) {\r\n      const test = history[i][\"text\"].split('\\n')\r\n      if (test.length + measure <= compare) {\r\n        measure += test.length;\r\n        actions++;\r\n      }\r\n      else { if (copyLines.some(l => history[i][\"text\"].includes(l))) { actions++ } break; }\r\n    }\r\n\r\n    return getHistoryText(length[1] > 0 ? -length[1] : -actions, length[1] >= 0 ? history.length : length[1])\r\n  }\r\n\r\n  else { return lines.slice(length[1] > 0 ? -length[1] : 0, length[1] >= 0 ? lines.length : length[1]); }\r\n}\r\n\r\nconst getLineIndex = (find, range) => {\r\n  let result;\r\n  if (range > 0) { for (let i = copyLines.length - copyLines.slice(-range).length; i < copyLines.length; i++) { if (copyLines[i].includes(find)) { result = i; } } }\r\n  else if (range < 0) { for (let i = 0; i < copyLines.length + range; i++) { if (copyLines[i].includes(find)) { result = i; } } }\r\n  else { copyLines.forEach((l, i) => { if (l.includes(find)) { result = i; } }) }\r\n  return result\r\n}\r\n\r\nconst addTrailingEntry = (entry, value = 0) => {\r\n\r\n  const { attributes, matches } = entry.metadata;\r\n\r\n  const range = getRange(attributes);\r\n  const find = matches[0];\r\n  const index = getLineIndex(find, range[1]);\r\n  if (index >= 0) { spliceContext((index - value) >= 0 ? index - value : 0, entry[\"entry\"]) }\r\n\r\n  return;\r\n}\r\n\r\nconst addAustralianKangaroo = (entry, value = 0) => spliceContext(-1, '[A polite Australian kangaroo pulls a top-hat out of its pouch before greeting you.]');\r\n\r\n\r\nconst Attributes = {\r\n  'a': addAuthorsNote, // [a] adds it as authorsNote, only one authorsNote at a time.\r\n  'd': addDescription, // [d] adds the first sentence of the entry as a short, parenthesized descriptor to the last mention of the revelant keyword(s) e.g John (a business man)\r\n  'f': () => { }, // [e] filters and limits the amount of simultaneous attribute activations.\r\n  'i': () => { }, // [i] Ignores the entry if present.\r\n  'l': () => { },\r\n  'm': addMemoryEntry,\r\n  'p': addPositionalEntry, // Inserts the <entry> <value> amount of lines into context, e.g [p=1] inserts it one line into context.\r\n  'r': () => { }, // [r] picks randomly between entries with the same matching keys. e.g 'you.*catch#[rp=1]' and 'you.*catch#[rd]' has 50% each to be picked.\r\n  's': showWorldEntry, // [r] reveals the entry once mentioned, used in conjuction with [e] to only reveal if all keywords are mentioned at once.\r\n  't': addTrailingEntry, // [t] adds the entry at a line relative to the activator in context. [t=2] will trail context two lines behind the activating word.\r\n  'w': () => { }, // [w] assigns the weight attribute, the higher value the more recent/relevant it will be in context/frontMemory/intermediateMemory etc.\r\n  'x': () => { }, // [x] ignores the entry if not X amount of rounds have processed.\r\n  'australiankangaroo': addAustralianKangaroo\r\n}\r\n\r\nconst getWhitelist = () => { const index = getEntryIndex('_whitelist.'); return index >= 0 ? worldInfo[index][\"entry\"].split(/,|\\n/g).map(e => e.trim()) : [] }\r\nconst getWildcard = (display, offset = 0) => { const wildcard = display.split('.').slice(offset != 0 ? 0 : 1).join('.'); const list = display.split('.'); const index = list.indexOf(wildcard.slice(wildcard.lastIndexOf('.') + 1)); return [list[index].replace(wildcardPath, ''), index + offset] }\r\nconst getPlaceholder = (value) => typeof value == 'string' ? value.replace(Expressions[\"placeholder\"], match => dataStorage[libraryPath][match.replace(/\\$\\{|\\}/g, '')]) : value\r\nconst updateListener = (value, display, visited) => {\r\n  // Check if it has previously qualified in 'visited' instead of running regExMatch on each node.\r\n  const qualified = visited.some(e => e.includes(display.split('.')[0]));\r\n  if (qualified) {\r\n    const array = value.split(/(?<!\\\\),/g)\r\n    const result = array.map(e => {\r\n      const find = e.match(/(?<=<l=)[^>]*(?=>)/g)\r\n      if (find) {\r\n        const expression = getPlaceholder(find[0])\r\n        const match = regExMatch(`${expression}`)\r\n        if (Boolean(match[0])) { return e.replace(/(?<=>)[^<]*(?=<)/g, match[0][0]) }\r\n        else { return e }\r\n\r\n      }\r\n      else { return e }\r\n    })\r\n\r\n    const keys = display.toLowerCase().trim()\r\n    const setKeys = display.includes('.') ? keys : `${keys}.`;\r\n    const setValue = result.join(',')\r\n    const index = getEntryIndex(setKeys);\r\n    index >= 0 ? updateWorldEntry(index, setKeys, setValue, hidden = false) : addWorldEntry(setKeys, setValue, hidden = false)\r\n\r\n  }\r\n}\r\n\r\nconst globalReplacer = () => {\r\n\r\n  const paths = [];\r\n  const search = lines.join('\\n')\r\n  // Toggle the wildcard state to search down full path.\r\n  // If the current path does not include the wildcard path, toggle it to false.\r\n  let wildcards = [];\r\n  const visited = [];\r\n  const whitelist = getWhitelist().map(e => {\r\n    if (e.includes(wildcardPath)) { wildcards.push(getWildcard(e, 1)); return e.replace(wildcardPath, ''); }\r\n    else { return e.split('.') }\r\n  }).flat();\r\n\r\n\r\n  //console.log(`Wildcards: ${wildcards}`)\r\n  function replacer(replace) {\r\n    let m = new Map();\r\n    return function (key, value) {\r\n      let path = m.get(this) + (Array.isArray(this) ? `[${key}]` : '.' + key);\r\n      let display = path.replace(/undefined\\.\\.?/, '')\r\n      const root = display.split('.')[0]\r\n\r\n      // Find and store whether the Object qualifies to avoid repeated calls to regExMatch.\r\n      // Without this, it'll call regExMatch for each node. While with this one may run:\r\n      // visited.some(e => e.includes(node))\r\n      if (dataStorage.hasOwnProperty(root) && dataStorage[root].hasOwnProperty(synonymsPath) && !visited.some(e => e[0].includes(root))) {\r\n        const match = regExMatch(getPlaceholder(dataStorage[root][synonymsPath]))\r\n\r\n        if (Boolean(match[0])) { visited.push([root, match[0][0]]) }\r\n      }\r\n\r\n      if (value === Object(value)) { m.set(value, path); }\r\n\r\n      const final = replace.call(this, key, value, display);\r\n      let current;\r\n\r\n      if (Boolean(key) && (whitelist.includes(key))) {\r\n        if (typeof value == 'string' && value.includes(closeListener)) { updateListener(value, display, visited); }\r\n      }\r\n\r\n      else if (typeof value == 'string') {\r\n        // Only match paths in `_synonyms`.\r\n        const match = display.startsWith(synonymsPath) ? regExMatch(getPlaceholder(value)) : undefined;\r\n        if (value.includes(closeListener)) { updateListener(value, display, visited); }\r\n        // Key is a wildcard and its value qualifies the regEx match.\r\n        if (key.includes(wildcardPath) && Boolean(value) && Boolean(match[0])) { wildcards.push(getWildcard(display)) }\r\n        // The current path contains one of the wildcards.\r\n        else if (wildcards.some(e => { if (display.split('.')[e[1]] == e[0]) { current = e[0]; return true } })) {\r\n          const array = display.split('.');\r\n          paths.push([array, 0]);\r\n        }\r\n        else if (display.startsWith(synonymsPath) && Boolean(value) && Boolean(match[0])) { paths.push([display.split('.'), lines.join('\\n').lastIndexOf(match[0][match[0].length - 1])]); }\r\n\r\n      }\r\n      return final;\r\n    }\r\n  }\r\n\r\n\r\n  JSON.stringify(dataStorage, replacer(function (key, value, path) { return value; }));\r\n  return [...new Set([...whitelist, ...paths.sort((a, b) => a[1] - b[1]).map(e => e[0]).flat()])].filter(e => !Paths.includes(e)).map(e => e.replace(wildcardPath, ''))\r\n}\r\n\r\n// globalWhitelist - Should only make one call to it per turn in context modifiers. Other modifiers access it via state.\r\nconst getGlobalWhitelist = () => state.settings.globalWhitelist = globalReplacer();\r\nconst setProperty = (keys, value, obj) => { const property = keys.split('.').pop(); const path = keys.split('.')[1] ? keys.split('.').slice(0, -1).join('.') : keys.replace('.', ''); if (property[1]) { getKey(path, obj)[property] = value ? value : null; } else { dataStorage[path] = value; } }\r\nconst getKey = (keys, obj) => { return keys.split('.').reduce((a, b) => { if (typeof a[b] != \"object\" || a[b] == null) { a[b] = {} } if (!a.hasOwnProperty(b)) { a[b] = {} } return a && a[b] }, obj) }\r\n\r\nconst buildObjects = () => {\r\n\r\n  // Consume and process entries whose keys start with '!' or contains '.' and does not contain a '#'.\r\n  const regEx = /(^!|\\.)(?!.*#)/\r\n  worldInfo.filter(wEntry => regEx.test(wEntry[\"keys\"])).forEach(wEntry => {\r\n    if (wEntry[\"keys\"].startsWith('!')) {\r\n      const root = wEntry[\"keys\"].match(/(?<=!)[^.]*/)[0];\r\n      try {\r\n        // Parse the contents into an Object.\r\n        const object = JSON.parse(wEntry[\"entry\"].match(/{.*}/)[0]);\r\n        // Remove the parsed entry to prevent further executions of this process.\r\n        removeWorldEntry(worldInfo.indexOf(wEntry));\r\n        // Build individual entries of the Object into worldEntries.\r\n        worldEntriesFromObject(object, root);\r\n        // Re-process entries that begin with the exact root path.\r\n        state.message = `Built Objects from !${root}.`\r\n        worldInfo.filter(e => e[\"keys\"].split('.')[0] == root).forEach(wEntry => setProperty(wEntry[\"keys\"].split(',').filter(e => e.includes('.')).map(e => e.trim()).join(''), wEntry[\"entry\"], dataStorage))\r\n      }\r\n      catch (error) {\r\n        console.log(error);\r\n        state.message = `Failed to parse implicit conversion of !${root}. Verify the entry's format!`\r\n      }\r\n    }\r\n    else { setProperty(wEntry[\"keys\"].split(',').filter(e => e.includes('.')).map(e => e.trim()).join(''), wEntry[\"entry\"], dataStorage); }\r\n\r\n  })\r\n}\r\n\r\nconst sanitizeWhitelist = () => { const index = worldInfo.findIndex(e => e[\"keys\"].includes(whitelistPath)); if (index >= 0) { worldInfo[index][\"keys\"] = whitelistPath + '.'; } }\r\nconst trackRoots = () => { const list = Object.keys(dataStorage); const index = worldInfo.findIndex(e => e[\"keys\"] == 'rootList'); if (index < 0) { addWorldEntry('rootList', list, hidden = false) } else { updateWorldEntry(index, 'rootList', list, hidden = false) } }\r\n\r\n// spliceContext takes a position to insert a line into the full context (memoryLines and lines combined) then reconstructs it with 'memory' taking priority.\r\n// TODO: Sanitize and add counter, verify whether memory having priority is detrimental to the structure - 'Remember' should never be at risk of ommitance.\r\nconst spliceContext = (pos, string) => {\r\n\r\n  const linesLength = lines.join('\\n').length\r\n  const memoryLength = memoryLines.join('\\n').length\r\n\r\n  let adjustedLines = 0;\r\n  if ((linesLength + memoryLength) + string.length > info.maxChars && false) {\r\n    const adjustor = lines.join('\\n').slice(string.length).split('\\n');\r\n    adjustedLines = lines.length - adjustor.length;\r\n    lines = adjustor;\r\n  }\r\n\r\n  lines.splice(pos ? pos : 0, 0, string);\r\n  //lines.splice(pos - adjustedLines >= 0 ? pos - adjustedLines : pos, 0, string)\r\n  return\r\n}\r\n\r\nconst spliceMemory = (pos, string) => {\r\n  contextMemoryLength += string.length;\r\n  memoryLines.splice(pos, 0, string);\r\n  return\r\n\r\n}\r\n\r\nconst cleanString = (string) => string.replace(/\\\\/g, ' ').replace(Expressions[\"listener\"], '').replace(Expressions[\"invalid\"], '').replace(Expressions[\"clean\"], '');\r\nconst insertJSON = () => {\r\n\r\n  // Cleanup edge-cases of empty Objects in the presented string.\r\n  const { globalWhitelist } = state.settings;\r\n  console.log(`Global Whitelist: ${globalWhitelist}`)\r\n\r\n  const list = []\r\n  for (const data in dataStorage) {\r\n\r\n    if (typeof dataStorage[data] == 'object') {\r\n      if (!dataStorage[data].hasOwnProperty(synonymsPath)) { dataStorage[data][synonymsPath] = `${data}#[t]` }\r\n      let string = cleanString(JSON.stringify(dataStorage[data], globalWhitelist));\r\n      if (state.settings[\"filter\"]) { string = string.replace(/\"|{|}/g, ''); }\r\n      if (string.length > 4) {\r\n        const object = { \"keys\": dataStorage[data][synonymsPath].split('\\n').map(e => !e.includes('#') ? e + '#[t]' : e).join('\\n'), \"entry\": `[${string}]`, \"metadata\": { \"isObject\": true } }\r\n        list.push(object)\r\n      }\r\n    }\r\n  }\r\n  if (list.length > 0) { preprocess(list) };\r\n}\r\n\r\nconst getEWI = () => { return worldInfo.filter(e => Expressions[\"EWI\"].test(e[\"keys\"])) }\r\nconst processEWI = () => preprocess(getEWI());\r\nconst execAttributes = (object) => {\r\n\r\n  const { attributes } = object.metadata;\r\n  const ignore = attributes.find(e => e[0] == 'x');\r\n  if (((ignore ? ignore[1] < history.length : true) && attributes.length > 0) && (object.metadata.hasOwnProperty('ignore') ? object.metadata.ignore.count > 0 : true)) {\r\n\r\n    try { attributes.forEach(pair => { Attributes[pair[0]](object, pair[1]) }) }\r\n    catch (error) { console.log(`${error.name}: ${error.message}`) }\r\n  }\r\n}\r\n\r\n// Sort all Objects/entries by the order of most-recent mention before processing.\r\n// expects sortList to be populated by Objects with properties {\"key\": string, \"entry\": string}\r\nconst preprocess = (list) => {\r\n  const search = copyLines.join('\\n');\r\n  const attributed = list.map(e => {\r\n    const match = regExMatch(getPlaceholder(e[\"keys\"]));\r\n    if (!e.hasOwnProperty('metadata')) { e.metadata = {}; };\r\n    if (Boolean(match[0])) {\r\n      e.metadata.index = search.lastIndexOf(match[0][match[0].length - 1]);\r\n      e.metadata.qualifier = match[1];\r\n      e.metadata.matches = match[0];\r\n      e.metadata.attributes = getAttributes(match[1]).filter(a => { if (Attributes.hasOwnProperty(a[0])) { return true } else { state.message += `[${a[0]}] is an invalid attribute!\\n`; return false } });\r\n      const ignore = e.metadata.attributes.find(a => a[0] == 'i');\r\n      if (ignore) {\r\n        if (!e.metadata.hasOwnProperty('ignore')) {\r\n          e.metadata.ignore = { \"original\": ignore[1], \"count\": ignore[1], \"turn\": [] }\r\n        }\r\n\r\n        if (ignore[1] != e.metadata.ignore.original) {\r\n          e.metadata.ignore.original == ignore[1];\r\n          e.metadata.ignore.count = ignore[1];\r\n        }\r\n\r\n        if (!(e.metadata.ignore.turn.some(t => t == info.actionCount)) && getHistoryString(-1).includes(e.metadata.matches[0])) {\r\n          e.metadata.ignore.count--;\r\n          e.metadata.ignore.turn.push(info.actionCount);\r\n        }\r\n\r\n        if (e.metadata.ignore.turn.some(t => t > info.actionCount)) {\r\n          const refund = e.metadata.ignore.turn.filter(t => t > info.actionCount);\r\n          e.metadata.ignore.count += refund.length;\r\n          refund.forEach(t => e.metadata.ignore.turn.splice(e.metadata.ignore.turn.indexOf(t), 1));\r\n        }\r\n      }\r\n      e.metadata.lastSeen = info.actionCount;\r\n      return e;\r\n    }\r\n\r\n  }).filter(Boolean)\r\n\r\n  // TODO: Optimize this section.\r\n  const randomized = getRandomObjects(attributed).filter(e => Expressions[\"EWI\"].test(e.metadata.qualifier));\r\n  const sorted = randomized.sort((a, b) => b.metadata.index - a.metadata.index);\r\n  const filtered = filter(sorted, Object.keys(Attributes).filter(a => Attributes[a].toString() != '() => {}'), 'f').flat();\r\n  filtered.forEach(e => { execAttributes(e); });\r\n}\r\n\r\n/*  Cross Lines pulls eligble World Information if its keywords are found within a JSON-line that is present in the context. \r\n    Insertions are done strictly through the memoryLines section of the context.\r\n    TODO: Enable attributes for the EWI entries.\r\n*/\r\nconst crossLines = () => {\r\n  const JSONLines = lines.filter(line => /\\[\\{.*\\}\\]/.test(line));\r\n  const JSONString = JSONLines.join('\\n');\r\n  worldInfo.forEach(e => {\r\n    if (!Object.keys(dataStorage).includes(e[\"keys\"].split('.')[0]) && !e[\"keys\"].startsWith('!')) // Handle regular entries - EWI likely fails test.\r\n    {\r\n      if (Boolean(regExMatch(e[\"keys\"], JSONString)[0]) && !text.includes(e[\"entry\"])) {\r\n        if (info.memoryLength + contextMemoryLength + e[\"entry\"].length <= info.maxChars / 2) {\r\n          spliceMemory(memoryLines.length - 1, e[\"entry\"]);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nconst parseAsRoot = (text, root) => {\r\n  const toParse = text.match(/{.*}/g);\r\n  if (toParse) {\r\n    toParse.forEach(string => {\r\n      const obj = JSON.parse(string);\r\n      worldEntriesFromObject(obj, root);\r\n      text = text.replace(string, '');\r\n    });\r\n  }\r\n}\r\n\r\nconst getEntryIndex = (keys) => worldInfo.findIndex(e => e[\"keys\"].toLowerCase() == keys.toLowerCase());\r\nconst updateHUD = () => {\r\n  const { globalWhitelist } = state.settings;\r\n  state.displayStats.forEach((e, i) => {\r\n    if (dataStorage.hasOwnProperty(e[\"key\"].trim())) {\r\n      state.displayStats[i] = {\r\n        \"key\": `${e[\"key\"].trim()}`,\r\n        \"value\": `${cleanString(JSON.stringify(dataStorage[e[\"key\"].trim()], globalWhitelist)).replace(/\\{|\\}/g, '')}    `\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nstate.commandList = {\r\n  scenarioHelp: {\r\n    name: \"scenarioHelp\",\r\n    description: \"Prints a list of commands\",\r\n    args: false,\r\n    usage: `Really? You need help with the help command and expected this to work? I don't blame you. Hit me at AIDcord for help.`,\r\n    execute: (args) => {\r\n      console.log(`Begin help command.`);\r\n      let availableCommands = '';\r\n      Object.keys(state.commandList).forEach(key => {\r\n        availableCommands += ` ${state.commandList[key].name}`\r\n      });\r\n\r\n      availableCommands = availableCommands.trim().replace(/\\s/g, ', ');\r\n      console.log(`Begin help command.`);\r\n      if (args == '') {\r\n        state.message = `List of available commands: ${availableCommands}`;\r\n      } else if ((!(args in commandList))) {\r\n        state.message = `This command was not found. List of available commands: ${availableCommands}`;\r\n      } else {\r\n        let cmd = commandList[args];\r\n        state.message = `Example: /${cmd.name} ${cmd.usage}\\n${cmd.description}`;\r\n      }\r\n\r\n      console.log(`End help command.`);\r\n    }\r\n  },\r\n  ewiSet: {\r\n    name: 'ewiSet',\r\n    description: \"Sets or updates a World Entry's keys and entry to the arguments given in addition to directly updating the object.\",\r\n    args: true,\r\n    usage: '<root>.<property> <value>',\r\n    execute: (args) => {\r\n      const keys = args[0].trim()\r\n      const setKeys = keys.includes('.') ? keys : `${keys}.`;\r\n      const setValue = args.slice(1).join(' ');\r\n      const index = getEntryIndex(setKeys);\r\n\r\n      index >= 0 ? updateWorldEntry(index, setKeys, setValue, hidden = false) : addWorldEntry(setKeys, setValue, hidden = false)\r\n      state.message = `Set ${setKeys} to ${setValue}!`\r\n      if (state.displayStats) { updateHUD(); }\r\n      return\r\n    }\r\n  },\r\n  ewiGet: {\r\n    name: 'ewiGet',\r\n    description: \"Fetches and displays the properties of an object.\",\r\n    args: true,\r\n    usage: '<root> or <root>.<property>',\r\n    execute: (args) => {\r\n      const path = args.join('').trim();\r\n      if (dataStorage && dataStorage.hasOwnProperty(args[0].split('.')[0].trim())) {\r\n        state.message = `Data Sheet for ${path}:\\n${JSON.stringify(lens(dataStorage, path), null)}`;\r\n      } else {\r\n        state.message = `${path} was invalid!`;\r\n      }\r\n\r\n      return;\r\n    }\r\n  },\r\n  ewiDelete: {\r\n    name: 'ewiDelete',\r\n    description: 'Deletes all dot-separated entries that match the provided argument.',\r\n    args: true,\r\n    usage: '<root> or <root>.<path>',\r\n    execute: (args) => {\r\n      const keys = args[0].toLowerCase().trim();\r\n      const setKeys = keys.includes('.') ? keys : `${keys}.`;\r\n      worldInfo.filter(e => e[\"keys\"].toLowerCase().startsWith(setKeys)).forEach(e => removeWorldEntry(worldInfo.indexOf(e)))\r\n      state.message = `Deleted all entries matching: ${keys}`;\r\n    }\r\n  },\r\n  ewiShow: {\r\n    name: 'ewiShow',\r\n    description: \"Shows entries starting with the provided argument in World Information.\",\r\n    args: true,\r\n    usage: '<root> or <root>.<property>',\r\n    execute: (args) => {\r\n      const keys = args[0].toLowerCase()\r\n      worldInfo.forEach(e => {\r\n        if (e[\"keys\"].toLowerCase().startsWith(keys)) {\r\n          e[\"hidden\"] = false;\r\n        }\r\n      });\r\n\r\n      state.message = `Showing all entries starting with ${keys} in World Information!`;\r\n      return\r\n    }\r\n  },\r\n  ewiHide: {\r\n    name: 'ewiHide',\r\n    description: \"Hides entries starting with the provided argument in World Information.\",\r\n    args: true,\r\n    usage: '<root> or <root>.<property>',\r\n    execute: (args) => {\r\n      const keys = args[0].toLowerCase()\r\n      worldInfo.forEach(e => {\r\n        if (e[\"keys\"].toLowerCase().startsWith(keys)) {\r\n          e[\"hidden\"] = true;\r\n        }\r\n      })\r\n\r\n      state.message = `Hiding all entries starting with ${keys} in World Information!`;\r\n      return\r\n    }\r\n  },\r\n  ewiCross: {\r\n    name: 'ewiCross',\r\n    description: `Toggles fetching of World Information from JSON Lines: ${state.settings[\"cross\"]}`,\r\n    args: false,\r\n    execute: (args) => {\r\n      state.settings[\"cross\"] = !state.settings[\"cross\"];\r\n      state.message = `World Information from JSON Lines: ${state.settings[\"cross\"]}`\r\n      return\r\n    }\r\n  },\r\n  ewiFilter: {\r\n    name: 'ewiFilter',\r\n    description: `Toggles the filtering of quotation and curly-brackets within JSON lines: ${state.settings[\"filter\"]}\\nSaves character count, but may have detrimental effects.`,\r\n    args: false,\r\n    execute: (args) => {\r\n      state.settings[\"filter\"] = !state.settings[\"filter\"];\r\n      state.message = `'\"{}' filter set to ${state.settings[\"filter\"]}`\r\n      return\r\n    }\r\n  },\r\n  ewiFrom: {\r\n    name: \"ewiFrom\",\r\n    description: 'Creates an Object with the given root from the passed JSON- line.',\r\n    args: true,\r\n    usage: '<root> <JSON- Line/Object>',\r\n    execute: (args) => {\r\n      const obj = args.slice(1).join(' ')\r\n      const root = args[0]\r\n      parseAsRoot(obj, root)\r\n      state.message = `Created Object '${root}' from ${obj}!`\r\n    }\r\n  },\r\n  ewiHud: {\r\n    name: \"ewiHud\",\r\n    description: \"Tracks the Object in the HUD\",\r\n    args: true,\r\n    usage: '<root>',\r\n    execute: (args) => {\r\n      if (!state.displayStats) {\r\n        state.displayStats = []\r\n      }\r\n\r\n      const { globalWhitelist } = state.settings;\r\n      const root = args[0].trim();\r\n      const index = state.displayStats.findIndex(e => e[\"key\"].trim() == root)\r\n      if (dataStorage.hasOwnProperty(root)) {\r\n        const object = {\r\n          \"key\": root,\r\n          \"value\": `${cleanString(JSON.stringify(dataStorage[root], globalWhitelist).replace(/\\{|\\}/g, '')).replace(/\\{|\\}/g, '')}    `\r\n        }\r\n\r\n        if (index >= 0) {\r\n          state.displayStats.splice(index, 1)\r\n        } else {\r\n          state.displayStats.push(object)\r\n        }\r\n      }\r\n    }\r\n  },\r\n  ewiMode: {\r\n    name: \"ewiMode\",\r\n    description: \"Switches between actions (true) or lines (false) for conditions.\",\r\n    args: false,\r\n    usage: '',\r\n    execute: (args) => {\r\n      state.settings.mode = !state.settings.mode\r\n      state.message = `Conditions now search amount of ${state.settings.mode == true ? 'actions' : 'lines'}.`\r\n    }\r\n  },\r\n  invAdd: {\r\n    name: \"invAdd\",\r\n    description: \"Adds objects to the player's inventory\",\r\n    args: true,\r\n    usage: '<object name> <quantity>',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory add.`);\r\n        const itemName = args.replace(LETTER_REGEX, '').trim();\r\n        const itemQuantity = Number.isNaN(parseInt(args.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(args.replace(DIGIT_REGEX, '').trim());\r\n\r\n        if (itemQuantity >= 1) {\r\n          state.message = `${addToInventory(itemName, itemQuantity)}`;\r\n        } else {\r\n          state.message = `You cannot add less than 1 unit of an item to your inventory.`;\r\n        }\r\n\r\n        console.log(`End inventory add.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invRemove: {\r\n    name: \"invRemove\",\r\n    description: \"Removes objects from the player's inventory\",\r\n    args: true,\r\n    usage: '<object name> <quantity>',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory remove.`);\r\n        const itemName = args.replace(LETTER_REGEX, '').trim();\r\n        const itemQuantity = Number.isNaN(parseInt(args.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(args.replace(DIGIT_REGEX, '').trim());\r\n\r\n        if (itemQuantity >= 1) {\r\n          state.message = `${removeFromInventory(itemName, itemQuantity)}`;\r\n        } else {\r\n          state.message = `You cannot remove less than 1 unit of an item from your inventory.`;\r\n        }\r\n\r\n        console.log(`End inventory remove.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invEquip: {\r\n    name: \"invEquip\",\r\n    description: \"Equips objects from the player's inventory\",\r\n    args: true,\r\n    usage: '<object name>',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory equip.`);\r\n        const itemName = args.replace(LETTER_REGEX, '').trim();\r\n        state.message = `${equipItem(itemName)}`;\r\n        console.log(`End inventory equip.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invCheck: {\r\n    name: \"invCheck\",\r\n    description: \"Checks the player's inventory\",\r\n    args: false,\r\n    usage: '',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory check.`);\r\n        state.message = `${checkInventory()}`;\r\n        console.log(`End inventory check.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invDebug: {\r\n    name: \"invDebug\",\r\n    description: \"Debugs player's inventory\",\r\n    args: false,\r\n    usage: '',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory debug.`);\r\n        debugInventory();\r\n        state.message = `Your inventory and player WI have been debugged.`;\r\n        console.log(`End inventory debug.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invMechanics: {\r\n    name: \"invMechanics\",\r\n    description: \"Toggles inventory system mechanics\",\r\n    args: false,\r\n    usage: '<enable or disable>',\r\n    execute: (args) => {\r\n      console.log(`Begin inventory toggle.`);\r\n      if (args != '') {\r\n        if (args == 'disable') {\r\n          state.enableInventory = false;\r\n          state.message = 'You have disabled the inventory system mechanics.';\r\n          console.log(`Disabled inventory mechanics toggle.`);\r\n        } else if (args == 'enable') {\r\n          state.enableInventory = true;\r\n          state.message = 'You have enabled the inventory system mechanics.';\r\n          console.log(`Enabled inventory mechanics toggle.`);\r\n        } else {\r\n          console.log('Wrong rpg mechanic toggle arg supplied.');\r\n          state.message = 'Invalid agument. Usage: /invMechanics <enable or disable>.';\r\n        }\r\n      } else {\r\n        console.log(`Checking inventory mechanics state.`);\r\n        state.message = `Inventory system mechanics are ${state.enableInventory ? 'enabled' : 'disabled'}`;\r\n      }\r\n\r\n      console.log(`End inventory toggle.`);\r\n    }\r\n  }\r\n};",
                        "onModelContext": "state.data = {} // When processing context, rebuild data. Input modifier interacts with \"cached\" version.\r\ndataStorage = state.data;\r\ndelete state.message\r\nlet contextMemory = getMemory(text);\r\nlet context = getContext(text);\r\nlet lines = context.split('\\n');\r\nconst linesLength = context.length;\r\nlet memoryLines = contextMemory.split('\\n');\r\n\r\nlet modifiedText = text.toLowerCase();\r\nlet modifiedContext = context.toLowerCase();\r\nlet memoryLinesLength = memoryLines.length\r\n\r\nlet copyLines = [...lines];\r\nlet copyMemoryLines = [...memoryLines];\r\n\r\nconst modifier = (text) => {\r\n  const lowered = text.toLowerCase();\r\n  let stop = false;\r\n\r\n  // BEGIN Encounters\r\n  // for mashing with other context scripts, keep this codeblock before 'const contextMemory'\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    memoryLoop:\r\n    for (encounterMemory of state.encounterMemories) {\r\n      // take care to not overload memory, unless forced:\r\n      if (!encounterMemory.memoryGreed && (encounterMemory.memoryText.length + memory.length) > 1000) {\r\n        console.log(`Non-greedy encounterMemory too long, not inserting it!`)\r\n        continue memoryLoop\r\n      }\r\n      state.memory.context = memory\r\n      if (encounterMemory.memoryLocation == 'bottom') {\r\n        state.memory.context = `${state.memory.context}\\n${encounterMemory.memoryText}`\r\n      } else if (encounterMemory.memoryLocation == 'top') {\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      } else {\r\n        console.log(`No memoryLocation defined for '${encounterMemory.memoryText}', defaulting to 'top'.`)\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (typeof (state.currentEncounter) !== 'undefined') { // if there's an event...\r\n    lines.splice(-3, 0, state.encounterNote) // ...put it right below AN, so AI knows what's up\r\n  }\r\n  // END Encounters\r\n\r\n  // BEGIN EWIJSON\r\n  const execute = {\r\n\r\n    \"Sanitize the whitelist.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": sanitizeWhitelist\r\n    },\r\n    \"Build qualified entries as Objects in dataStorage.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": buildObjects\r\n    },\r\n\r\n    \"Ensure _synonyms is handled first when creating the globalWhitelist.\":\r\n    {\r\n      \"req\": Object.keys(dataStorage)[1] != synonymsPath || Object.keys(dataStorage)[0] != whitelistPath,\r\n      \"args\": null,\r\n      \"exec\": fixOrder\r\n    },\r\n    \"Build a global whitelist based on context and wildcards.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": getGlobalWhitelist\r\n    },\r\n    \"Sort and execute the Object entries.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": insertJSON\r\n    },\r\n    \"Sort and execute the EWI Attribute entries.\":\r\n    {\r\n      \"req\": worldInfo.length > 0,\r\n      \"args\": null,\r\n      \"exec\": processEWI\r\n    },\r\n    \"Check the inserted JSON- lines for the presence of worldInfo keywords.\":\r\n    {\r\n      \"req\": state.settings[\"cross\"],\r\n      \"args\": null,\r\n      \"exec\": crossLines\r\n    },\r\n    /*  \"Add the Stacks\":\r\n     {\r\n         \"req\": Stacks,\r\n         \"args\": null,\r\n         \"exec\": addStacks\r\n     }, */\r\n    \"Create an always visible entry that displays all created roots for Objects.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": trackRoots\r\n    },\r\n    \"Refresh the variables presented in the HUD.\":\r\n    {\r\n      \"req\": state.displayStats,\r\n      \"args\": null,\r\n      \"exec\": updateHUD\r\n    }\r\n\r\n  }\r\n\r\n  for (let action in execute) { if (execute[action][\"req\"]) { execute[action][\"exec\"](execute[action][\"args\"]) } }\r\n\r\n  let combinedMemory = memoryLines.join('\\n')\r\n  let combinedLines = lines.join('\\n').slice(-(info.maxChars - combinedMemory.length - 1));\r\n  const finalText = [combinedMemory, combinedLines].join(\"\");\r\n\r\n  // Debug to check if the context is intact and properly utilized, optimally the numbers should always match\r\n  console.log(`Final Text: ${finalText.length}`, `Max Text: ${info.maxChars}`, `MemoryLength: ${info.memoryLength}`, `Total Memory: ${info.memoryLength + contextMemoryLength}`)\r\n  // END EWIJSON\r\n\r\n  return { text: finalText, stop: stop };\r\n}\r\n\r\nmodifier(text);"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        },
        {
                "id": "1720306",
                "publicId": "f32f69a0-a0a9-11eb-bd0f-e1a6a438fcde",
                "published": false,
                "title": "Custom prompt",
                "description": "This is a scenario that lets you create your own character and use a custom prompt. You may start wherever you want. Be mindful of World Info, and only start in major cities so they actually work. Use only second person to play this scenario, or else it will break.",
                "tags": [],
                "createdAt": "2021-04-19T00:55:35.482Z",
                "updatedAt": "2021-04-19T15:30:45.128Z",
                "memory": "",
                "authorsNote": "[Genre: fantasy] [Writing style: narrative, roleplaying, gothic]",
                "mode": "creative",
                "prompt": "Your name is [${character.name}], and you are a [${Enter your character's gender...}] [${Choose a race: Altmer (High Elf), Bosmer (Wood Elf), Dunmer (Dark Elf), Orsimer (Orc), Nord, Imperial, Breton, Khajiit, Argonian or Redguard}] [${Choose a class: Mage, Warrior, Ranger, Peasant, Thief, Assassin}]. You are [${Enter your age...}] years old, and your personality traits are: [${Enter your personality traits separated by commas...}]. You eyes are [${Enter your eye color...}], and your hair is of the style [${Enter your hair style...}] and of color [${Enter your hair color...}]. You are [${Enter your height in centimeters...}] centimeters tall, and you weigh [${Enter your weight in kilos...}] kg. Your physical features are: [${Enter your physical features...}].\n\n${Type a prompt to start the game. For example: \"You are a knight in the city of Whiterun, coming here for work....}",
                "quests": [],
                "worldInfo": [
                        {
                                "id": "1.1",
                                "keys": "Katariah|(|the )emp(ress|eror)#[t=5l=5f=2S=2]",
                                "entry": "The Dunmer are the dark elves of Morrowind. They value magic and honor, and follow the gods of the Tribunal.\n<< Katariah ♀ dunmer age 40y 170cm height 45kg slim slender>>>>\n<< Katariah dark grey skin, red eyes, long black hair>>>>\n<< Katariah just smart clever fair, empress of tamriel>>>>",
                                "hidden": false,
                                "worldInfoId": "224060025"
                        },
                        {
                                "id": "1.2",
                                "keys": "Katariah|(|the )emp(ress|eror)#[t=6l=5f=2S=2]",
                                "entry": "<< Katariah coarse calm voice, sweet talking>>>>\n<< Katariah wear linen dress gold earrings gold rings jewlery>>>>",
                                "hidden": false,
                                "worldInfoId": "224060026"
                        },
                        {
                                "id": "1.3",
                                "keys": "Vrage(|the Gifted)|(|High )King of Skyrim|(Ruler|Jarl) of (Solitude|Haafingar|Skyrim)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Vrage ♂ nord 42y 170cm 45kg fair brown hair muscular skin dark brown eyes deepvoice thick nord accent>>>>\n<< Vrage high king of skyrim, good leader, loyal, full beard>>>>\n<< Vrage wear fur coat jewelery linen shirt leather boots>>>>",
                                "hidden": false,
                                "worldInfoId": "224060027"
                        },
                        {
                                "id": "1.4",
                                "keys": "Ungvid|(Ruler|Jarl) of Winterhold#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Ungvid nord ♂ 62yearsold 179cm height 65kg, jarl of winterhold>>>>\n<< Ungvid harsh deep voice, arrogant pretentious stubborn serious>>>>\n<< Ungvid slim slender full beard long dark blonde hair>>>>\n<< Ungvid wear fur clothing leather boots steel sword>>>>",
                                "hidden": false,
                                "worldInfoId": "224060028"
                        },
                        {
                                "id": "1.5",
                                "keys": "Yolanda|(Ruler|Jarl) of Whiterun#[t=5l=5f=2S=2]",
                                "entry": "<< Yolanda ♀ nord 30y age 178cm height 50kg slim tall fair skin blue eyes long blonde hair>>>>\n<< Yolanda jarl of whiterun, sweet voice naughty dirty manipulative, fools around loves nightlife party animal>>>>",
                                "hidden": false,
                                "worldInfoId": "224060029"
                        },
                        {
                                "id": "1.6",
                                "keys": "Yolanda|(Ruler|Jarl) of Whiterun#[t=6l=5f=2S=2]",
                                "entry": "<< Yolanda wear jewlery noble clothes ring earring>>>>\n<< Yolanda pink lips small breasts round butt gorgeous>>>>",
                                "hidden": false,
                                "worldInfoId": "224060033"
                        },
                        {
                                "id": "1.7",
                                "keys": "Argo|(Ruler|Jarl) of (|the) Rift(|en)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Argo ♂ nord 57y age 180cm height 90kg slim shaved head& beard, jarl of the rift>>>>\n<< Argo arrogant pedantic self-righteous uptight>>>>",
                                "hidden": false,
                                "worldInfoId": "224060034"
                        },
                        {
                                "id": "1.8",
                                "keys": "Argo|(Ruler|Jarl) of (|the) Rift(|en)#[t=6l=5f=2S=2]",
                                "entry": "<< Argo harsh deep voice wear noble clothes leather boots>>>>\n<< Argo dislike thief hate thieves guild love drinking mead>>>> ",
                                "hidden": false,
                                "worldInfoId": "224060038"
                        },
                        {
                                "id": "1.9",
                                "keys": "Uror|(Ruler|Jarl) of Falkreath#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Uror ♂ nord 55y age 180cm height 75kg muscular, jarl of falkreath>>>>\n<< Uror red hair full beard, optimistic intelligent talkative stubborn good humored brave>>>>",
                                "hidden": false,
                                "worldInfoId": "224060039"
                        },
                        {
                                "id": "1.10",
                                "keys": "Uror|(Ruler|Jarl) of Falkreath#[t=6l=5f=2S=2]",
                                "entry": "<< Uror wear fur clothes long bow, is hunter knows the woods>>>>\n<< Uror thick colovian accent deep voice menacing tone>>>>",
                                "hidden": false,
                                "worldInfoId": "224060042"
                        },
                        {
                                "id": "1.11",
                                "keys": "Atmor|(Ruler|Jarl) of (Windhelm|Eastmarch)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Atmor ♂ nord 48y age 180cm height 75kg muscular fit short dark blond hair>>>>\n<< Atmor full beard grumpy sarcastic hopeful, jarl of eastmarch>>>>",
                                "hidden": false,
                                "worldInfoId": "224060041"
                        },
                        {
                                "id": "1.12",
                                "keys": "Atmor|(Ruler|Jarl) of (Windhelm|Eastmarch)#[t=6l=5f=2S=2]",
                                "entry": "<< Atmor wear noble fur clothes jewelery steel greatsword>>>>\n<< Atmor thich nord accent harsh command voice tone>>>>\n<< Atmor scar left eye>>>>",
                                "hidden": false,
                                "worldInfoId": "224060046"
                        },
                        {
                                "id": "1.13",
                                "keys": "Bolgeir|Ruler of Markarth|Jarl of Markarth|Ruler of the Reach|Jarl of the Reach#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Bolgeir ♂ nord 174cm height 70kg muscular reddish hair beard, jarl of the reach>>>>\n<< Bolgeir very brave and bold arrogant natural leader>>>>",
                                "hidden": false,
                                "worldInfoId": "224060048"
                        },
                        {
                                "id": "1.14",
                                "keys": "Bolgeir|Ruler of Markarth|Jarl of Markarth|Ruler of the Reach|Jarl of the Reach#[t=6l=5f=2S=2]",
                                "entry": "<< Bolgeir wear noble linen clothes jewelery, thick nord accent deep voice>>>>\n<< Bolgeir worship nord pantheon shor kyne dislikes imperial divines>>>>",
                                "hidden": false,
                                "worldInfoId": "224060049"
                        },
                        {
                                "id": "1.15",
                                "keys": "Dagny|(Ruler|Jarl) of the (Dawnstar|Pale)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Dagny ♀ nord 58y age 159cm height 40kg tall thin fit short dark blonde hair>>>>",
                                "hidden": false,
                                "worldInfoId": "224060053"
                        },
                        {
                                "id": "1.16",
                                "keys": "Dagny|(Ruler|Jarl) of the (Dawnstar|Pale)#[t=6l=5f=2S=2]",
                                "entry": "<< Dagny corageous fearless friendly determined optimistic, jarl of the pale>>>>\n<< Dagny thick northern accent wear noble clothes steel dagger>>>>",
                                "hidden": false,
                                "worldInfoId": "224060055"
                        },
                        {
                                "id": "1.17",
                                "keys": "Thora|(Ruler|Jarl) of (Morthal|Hjaalmarch)#[t=5l=5f=2S=2]",
                                "entry": "Nords are the sturdy people of Skyrim. They value strength and valor, and go to Sovngarde after death.\n<< Thora ♂ nord 58y age 185cm height 62kg muscular tall athletic blonde hair>>>>\n<< Thora jarl of hjaalmarch, courageous brave strong-willed fearless determined>>>>",
                                "hidden": false,
                                "worldInfoId": "224060058"
                        },
                        {
                                "id": "1.18",
                                "keys": "Thora|(Ruler|Jarl) of (Morthal|Hjaalmarch)#[t=6l=5f=2S=2]",
                                "entry": "<< Thora sweet voice thick accent love warm weather love hunting>>>>\n<< Thora wear noble clothes fur scarf steel sword>>>>",
                                "hidden": false,
                                "worldInfoId": "224060060"
                        },
                        {
                                "id": "2.1",
                                "keys": "(white( |)run)#[t=5l=5f=2S=2]",
                                "entry": "[ Whiterun description:< city state in central Skyrim>/< hold≡ Whiterun>/< kingdom≡ Western Skyrim>. Whiterun climate:< warm& breeze>. Whiterun culture:< economical power& hunting& smithing>. Whiterun ruler:< jarl≡ Yolanda>/< palace≡ Dragonsreach>. Whiterun features:< built on top of hill& dragonsreach& jorrvaskr& temple of kynareth& capital city of Whiterun>.]",
                                "hidden": false,
                                "worldInfoId": "224060061"
                        },
                        {
                                "id": "2.2",
                                "keys": "riften#[t=5l=5f=2S=2]",
                                "entry": "[ Riften description:< city state in southeastern Skyrim>/< hold≡ Haafingar>/< kingdom≡ Eastern Skyrim>/<rival city≡ Windhelm>. Riften climate:< warm& breeze>. Riften culture:< hunting& fishing& corruption& capital city>. Riften ruler:< king≡ Argo>/ <palace≡ Mistveil Keep>. Riften features:< built next to honrich lake& capital city of the rift>.]",
                                "hidden": false,
                                "worldInfoId": "224060064"
                        },
                        {
                                "id": "2.3",
                                "keys": "(winter( |)hold)#[t=5l=5f=2S=2]",
                                "entry": "[ Winterhold description:< city state in northeastern Skyrim>/< hold≡ Winterhold>/< kingdom≡ Eastern Skyrim>/<rival city≡ Windhelm>. Winterhold climate:< snowy&freezing>. Winterhold culture:< nord& magic& fishing& sea trading>. Winterhold ruler:< jarl≡ Ungvid>. Winterhold features:< college of winterhold& port city& capital city of winterhold>.]",
                                "hidden": false,
                                "worldInfoId": "224060063"
                        },
                        {
                                "id": "2.4",
                                "keys": "Falkreath#[t=5l=5f=2S=2]",
                                "entry": "[ Falkreath description:< city state in southern Skyrim>/< hold≡ Falkreath>/< kingdom≡ Western Skyrim>. Falkreath climate:< warm& breeze>. Falkreath culture:< fishing& hunting& leatherwork& pelts>. Falkreath ruler:< jarl≡ Uror>. Falkreath features:< city in the middle of the woods& border with Cyrodiil& capital city of Falkreath Hold>.]",
                                "hidden": false,
                                "worldInfoId": "224060068"
                        },
                        {
                                "id": "2.5",
                                "keys": "markarth|city of stone#[t=5l=5f=2S=2]",
                                "entry": "[ Markarth description:< city state in western Skyrim>/< hold≡ The Reach>/< kingdom≡ The Reach>. Markarth climate:< warm& hot& breeze>. Markarth culture:< reachmen culture& ruled by an Ard& capital city>. Markarth ruler:< Ard≡ Dorach>/ <palace≡ Understone Keep>. Markarth features:< built inside of a mountain& dwemer stone and brass architecture& capital city of the reach>.]",
                                "hidden": false,
                                "worldInfoId": "224060070"
                        },
                        {
                                "id": "2.6",
                                "keys": "markarth|city of stone#[t=6l=5f=2S=2]",
                                "entry": "[ Markarth culture:< silver mining& fishing& hunting>. Markarth features:< temple of hircine& silver mine& smithing]",
                                "hidden": false,
                                "worldInfoId": "224060071"
                        },
                        {
                                "id": "2.7",
                                "keys": "dawnstar#[t=5l=5f=2S=2]",
                                "entry": "[ Dawnstar description:< city state in northern Skyrim>/< hold≡ The Pale>/< kingdom≡ Western Skyrim>/<rival city≡ Whiterun& Winterhold>. Dawnstar climate:< snowy&freezing>. Dawnstar culture:< fishing& hunting& capital city>. Dawnstar ruler:< queen≡ Dagny>. Dawnstar features:< wooden houses& port city& sea trading& capital city of the pale>.]",
                                "hidden": false,
                                "worldInfoId": "224060072"
                        },
                        {
                                "id": "2.8",
                                "keys": "morthal#[t=5l=5f=2S=2]",
                                "entry": "[ Morthal description:< city state in northwestern Skyrim>/< hold≡ Hjaalmarch>/< kingdom≡ Western Skyrim>/<rival city≡ Dawnstar>. Morthal climate:< warm& hot>. Morthal geography:< swamp& marsh>. Morthal culture:< nord& capital city>. Morthal ruler:< king≡ Thora>. Morthal features:< capital city of Hjaalmarch& swamps>.]",
                                "hidden": false,
                                "worldInfoId": "224060076"
                        },
                        {
                                "id": "2.9",
                                "keys": "windhelm#[t=5l=5f=2S=2]",
                                "entry": "[ Windhelm description:< city state in eastern Skyrim>/< hold≡ Eastmarch>/< kingdom≡ Eastern Skyrim>/< rival city≡ Riften& Winterhold>. Windhelm climate:< north≡ snowy& freezing>/< south≡ temperate& warm>. Windhelm culture:< nord& wooden constructions& sea trading& capital city>. Windhelm ruler:< king≡ Atmor>/< palace≡ Palace of Kings>. Windhelm features:< palace made of stone& hardwood houses& capital city of eastern skyrim>.]",
                                "hidden": false,
                                "worldInfoId": "224060078"
                        },
                        {
                                "id": "2.10",
                                "keys": "windhelm#[t=6l=5f=2S=2]",
                                "entry": "[ Windhelm features:< big inn made of stone& temple of talos& fighting arena>. Windhelm culture:< port city& smithing& fishing>.]",
                                "hidden": false,
                                "worldInfoId": "224060077"
                        },
                        {
                                "id": "2.11",
                                "keys": "solitude#[t=5l=5f=2S=2]",
                                "entry": "[ Solitude description:< city state in western Skyrim>/< hold≡ Haafingar>/< kingdom≡ Western Skyrim>/<rival city≡ Snowhawk>. Solitude climate:< north≡ snowy&freezing>/< south≡ warm>. Solitide culture:< economical power&capital city>. Solitude ruler:< king≡ Vrage>/ < palace≡ Blue Palace>. Solitude features:< built on top of stone arch& capital city of western skyrim>.]",
                                "hidden": false,
                                "worldInfoId": "224060079"
                        },
                        {
                                "id": "2.12",
                                "keys": "solitude#[t=6l=5f=2S=2]",
                                "entry": "[ Solitude features:< bards college& antiquarian circle& east empire company& rich city& castle dour& blue palace>. Solitude culture:< nord& brick constructions>/< fishing&sea trading& port city& arts>.]",
                                "hidden": false,
                                "worldInfoId": "224060084"
                        },
                        {
                                "id": "2.13",
                                "keys": "(snow( |)hawk)#[t=5l=5f=2S=2]",
                                "entry": "[ Snowhawk description:< city state in northwestern Skyrim>/< hold≡ Hjaalmarch>/< kingdom≡ Snowhawk>/<rival city≡ Solitude>. Snowhawk climate:< warm& hot>. Snowhawk geography:< swamp& marsh>. Snowhawk ruler:< king≡ Arnbjorn>. Snowhawk features:< capital city of Snowhawk& rivals with Solitude>.]",
                                "hidden": false,
                                "worldInfoId": "224060086"
                        },
                        {
                                "id": "3.1",
                                "keys": "Whiterun Hold#[t=5l=3f=2S=2]",
                                "entry": "[ Whiterun Hold description:< hold in central Skyrim>/< capital city≡ Whiterun>/< kingdom≡ Western Skyrim>.  Whiterun Hold climate:< warm& breeze>. Whiterun Hold geography:< farmland& fertile& grasslands& open fields& white river>. Whiterun Hold ruler:< jarl≡ Yolanda>.]",
                                "hidden": false,
                                "worldInfoId": "224060087"
                        },
                        {
                                "id": "3.2",
                                "keys": "Whiterun Hold#[t=6l=3f=2S=2]",
                                "entry": "[ Whiterun Hold culture:< nord& wooden houses& farms>. Whiterun Hold features:< white river& giants& mammoths>. Whiterun Hold towns:< Riverwood& Honeywood>.]",
                                "hidden": false,
                                "worldInfoId": "224060090"
                        },
                        {
                                "id": "3.3",
                                "keys": "(|the) rift#[t=5l=3f=2S=2]",
                                "entry": "[ The Rift description:< hold in southeastern Skyrim>/< capital city≡ Riften>/< kingdom≡ Eastern Skyrim>. The Rift climate:< warm& breeze>. The Rift geography:< farmland& Lake Honrich& fishing& fertile& mountainous& Snow Throat>. The Rift ruler:< jarl≡ Argo>.]",
                                "hidden": false,
                                "worldInfoId": "224060089"
                        },
                        {
                                "id": "3.4",
                                "keys": "(|the) rift#[t=6l=3f=2S=2]",
                                "entry": "[ The Rift culture:< nord& farm& fishing& hunting& mills>. The Rift features:< Lake Honrich& bears& wolves& deer>. The Rift towns:< Shor's Stone& Vernim& Ivarstead>.]",
                                "hidden": false,
                                "worldInfoId": "224060091"
                        },
                        {
                                "id": "3.5",
                                "keys": "(winter( |)hold hold)#[t=5l=3f=2S=2]",
                                "entry": "[ Winterhold Hold description:< hold in northeastern Skyrim>/< capital city≡ Winterhold>/< kingdom≡ Eastern Skyrim>. Winterhold Hold climate:< cold& snowy& freezing>. Winterhold Hold geography:< mountainous& snowy hills& cliffs>. Winterhold Hold ruler:< jarl≡ Ungvid>.]",
                                "hidden": false,
                                "worldInfoId": "224060094"
                        },
                        {
                                "id": "3.6",
                                "keys": "(winter( |)hold hold)#[t=6l=3f=2S=2]",
                                "entry": "[ Winterhold Hold culture:< nord& wooden houses& magic>. Winterhold Hold features:< college of winterhold& horker& ice wolf& polar bear>.]",
                                "hidden": false,
                                "worldInfoId": "224060097"
                        },
                        {
                                "id": "3.7",
                                "keys": "(falkreath)#[t=5l=3f=2S=2]",
                                "entry": "[ Falkreath Hold description:< hold in southern Skyrim>/< capital city≡ Falkreath>/< kingdom≡ Falkreath>. Falkreath Hold climate:< warm& breeze>. Falkreath Hold geography:< rainforest& Lake Ilinalta& White River& mountainous& lush woods>. Falkreath Hold ruler:< king≡ Uror>.]",
                                "hidden": false,
                                "worldInfoId": "224060098"
                        },
                        {
                                "id": "3.8",
                                "keys": "(falkreath)#[t=6l=3f=2S=2]",
                                "entry": "[ Falkreath Hold culture:< nord& fishing& hunting& lumber& leatherwork& pelts>. Falkreath Hold features:< fishing& lumber& Lake Ilinalta& White River& wolves& bears& sabre cat>. Falkreath Hold towns:< Helgen>.]",
                                "hidden": false,
                                "worldInfoId": "224060099"
                        },
                        {
                                "id": "3.9",
                                "keys": "the reach#[t=5l=3f=2S=2]",
                                "entry": "[ The Reach description:< reachmen culture& hold in western Skyrim& ruled by an Ard>/< capital city≡ Markarth>/< kingdom≡ The Reach>. The Reach climate:< warm& hot& breeze>. The Reach geography:< mountainous& grasslands& Karth River>. The Reach ruler:< Ard≡ Dorach>/ <palace≡ Understone Keep>.]",
                                "hidden": false,
                                "worldInfoId": "224060103"
                        },
                        {
                                "id": "3.10",
                                "keys": "the reach#[t=6l=3f=2S=2]",
                                "entry": "[ The Reach culture:< ruled by an Ard& reachmen& wooden houses& mining>. The Reach features:< Karth River& Sky Haven Temple& silver mines& fishing>. The Reach towns:< Karthwasten& Hroldan>.]",
                                "hidden": false,
                                "worldInfoId": "224060104"
                        },
                        {
                                "id": "3.11",
                                "keys": "the pale#[t=5l=3f=2S=2]",
                                "entry": "[ The Pale description:< hold in northern Skyrim& part of the kingdom of Eastern Skyrim>/< capital city≡ Dawnstar>/< kingdom≡ Eastern Skyrim>. The Pale climate:< cold& snowy>. The Pale geography:< grasslands& waterfall& mountainous>. The Pale ruler:< jarl≡ Dagny>.]",
                                "hidden": false,
                                "worldInfoId": "224060105"
                        },
                        {
                                "id": "3.12",
                                "keys": "the pale#[t=6l=3f=2S=2]",
                                "entry": "[ The Pale culture:<nord& wooden constructions& fishing& port city>. The Pale features:< iron mining& quicksilver mining>. The Pale towns:< Heljarchen>.]",
                                "hidden": false,
                                "worldInfoId": "224060106"
                        },
                        {
                                "id": "3.13",
                                "keys": "Hjaalmarch#[t=5l=3f=2S=2]",
                                "entry": "[ Hjaalmarch description:< hold in northwestern Skyrim& part of the Kingdom of Western Skyrim>/< capital city≡ Morthal>/< kingdom≡ Western Skyrim>. Hjaalmarch climate:< warm& hot>. Hjaalmarch geography:< marsh& swamp& Hjaal River& Karth River>. Hjaalmarch ruler:< jarl≡ Thora>.]",
                                "hidden": false,
                                "worldInfoId": "224060108"
                        },
                        {
                                "id": "3.14",
                                "keys": "Hjaalmarch#[t=6l=3f=2S=2]",
                                "entry": "[ Hjaalmarch culture:< nord& wooden constructions& mining& hunting>. Hjaalmarch features:< mining& hunting& swamp& Hjaal River& Karth River>. Hjaalmarch towns:< Stonehills>.]",
                                "hidden": false,
                                "worldInfoId": "224060109"
                        },
                        {
                                "id": "3.15",
                                "keys": "eastmarch#[t=5l=3f=2S=2]",
                                "entry": "[ Eastmarch description:< hold in Eastern Skyrim>/< capital city≡ Windhelm>/< kingdom≡ Eastern Skyrim>. Eastmarch climate:< north≡ snowy& freezing>/< south≡ temperate& warm>. Eastmarch geography:< White River>/< north≡ cliff& mountain& windy& snowy>/< south≡ hot water springs>. Eastmarch ruler:< king≡ Atmor>/< palace≡ Palace of Kings>.]",
                                "hidden": false,
                                "worldInfoId": "224060112"
                        },
                        {
                                "id": "3.16",
                                "keys": "eastmarch#[t=6l=3f=2S=2]",
                                "entry": "[ Eastmarch culture:< nord& fishing& port city& smithing>. Eastmarch features:< frozen water& hot water springs& White River>. Eastmarch towns:< Pargran& Kynesgrove>.]",
                                "hidden": false,
                                "worldInfoId": "224060113"
                        },
                        {
                                "id": "3.17",
                                "keys": "Haafingar#[t=5l=3f=2S=2]",
                                "entry": "[ Haafingar description:< hold in Western Skyrim>/< capital city≡ Solitude>/< kingdom≡ Western Skyrim>. Haafingar climate:< north≡ snowy& freezing>/< south≡ warm>. Haafingar geography:< Karth River& Sea of Ghosts& mountain& farmland& fertile& mills>. Haafingar ruler:< king≡ Vrage>.]",
                                "hidden": false,
                                "worldInfoId": "224060116"
                        },
                        {
                                "id": "3.18",
                                "keys": "Haafingar#[t=6l=3f=2S=2]",
                                "entry": "[ Haafingar culture:< nord& fishing& sea trading& port& arts>. Haafingar features:< Karth River& Kilkreath Temple& wolves& trolls& bears>. Haafingar towns:< Dragon Bridge>.]",
                                "hidden": false,
                                "worldInfoId": "224060117"
                        },
                        {
                                "id": "4.1",
                                "keys": "Honeywood#[t=5l=5f=2S=2]",
                                "entry": "[ Honeywood description:< Honeywood small village& few people>/< hold≡ Whiterun>/< kingdom≡ Western Skyrim>. Honeywood climate:< warm& breeze>. Honeywood culture:< nord& small village& ancient nord pantheon>. Honeywood features:< small lake in center& small houses wooden hay>/< people are not self-aware>.]",
                                "hidden": false,
                                "worldInfoId": "224060118"
                        },
                        {
                                "id": "4.2",
                                "keys": "Dragon Bridge#[t=5l=5f=2S=2]",
                                "entry": "[ Dragon Bridge description:< has this name because of the bridge with a statue of a dragon in each end>/< hold≡ Haafingar>/< kingdom≡ Western Skyrim>. Dragon Bridge summary:< small town& few people& part of Haafingar hold& part of Kingdom of Western Skyrim& border with The Reach& town in the banks of Karth River>. Dragon Bridge climate:< warm& breeze>. Dragon Bridge culture:< nord& fishing& hunting>. Dragon Bridge features:< bridge with a statue of a dragon in each end>/< small wooden houses& tavern& blacksmith>/< is in the border of Haafingar and The Reach>.]",
                                "hidden": false,
                                "worldInfoId": "224060119"
                        },
                        {
                                "id": "4.3",
                                "keys": "(Ivar(| )stead)#[t=5l=5f=2S=2]",
                                "entry": "[ Ivarstead description:< small town in the eastern base of the Snow Throat mountain>/< hold≡ The Rift>/< kingdom≡ Eastern Skyrim>. Ivarstead summary:< few people& farming& fertile& fishing& hunting& milling>. Ivarstead climate:< warm& breeze>. Ivarstead culture:< nord& farming& hunting& sheep>. Ivarstead features:< the famous 7000 steps of the Snow Throat mountain begin here& well visit town& inn& tavern>.]",
                                "hidden": false,
                                "worldInfoId": "224060124"
                        },
                        {
                                "id": "4.4",
                                "keys": "(Rorik(| )stead)#[t=5l=5f=2S=2]",
                                "entry": "[ Rorikstead description:< small town& western plains of Whiterun Hold>/< hold≡ Whiterun>/< kingdom≡ Western Skyrim>. Rorikstead summary:< farmland& fertile& hunting& sheep& goat& cattle>/< part of the Kingdom of Western Skyrim>. Rorikstead climate:< warm& breeze& hot>. Rorikstead culture:< nord& farming& ancient nord pantheon>. Rorikstead features:< inn& tavern& friendly giants live near the town>.]",
                                "hidden": false,
                                "worldInfoId": "224060125"
                        },
                        {
                                "id": "4.5",
                                "keys": "(Hel(j|)archen)#[t=5l=5f=2S=2]",
                                "entry": "[ Heljarchen description:< name≡ Heljarchen& Helarchen>/< small town& border of The Pale and Whiterun Hold& just north of the City of Whiterun>/< hold≡ The Pale>/< kingdom≡ Eastern Skyrim>. Heljarchen summary:< hunting& goats& sheep& between the warm and the cold parts of Skyrim>. Heljarchen climate:< cold& breeze>. Heljarchen culture:< nord& imperial divines religion& herding>. Heljarchen features:< small town& few people& inn& tavern>.]",
                                "hidden": false,
                                "worldInfoId": "224060128"
                        },
                        {
                                "id": "4.6",
                                "keys": "Kyne(s|'s )grove#[t=5l=5f=2S=2]",
                                "entry": "[ Kynesgrove description:< name≡ Kynesgrove& Kyne's Grove>/< small town& just south of Windhelm>/< hold≡ Eastmarch>/< kingdom≡ Eastern Skyrim>. Kynesgrove summary:< hunting& goats& sheep& fishing>. Kynesgrove climate:< cold& snowy& breeze>. Kynesgrove culture:< nord& ancient nord religion& wooden houses>. Kynesgrove features:< mill& cattle& White River& inn& tavern>.]",
                                "hidden": false,
                                "worldInfoId": "224060129"
                        },
                        {
                                "id": "4.7",
                                "keys": "Shor's Stone#[t=5l=5f=2S=2]",
                                "entry": "Shor's Stone:[DESC:Shor's Stone is a small town in the Rift named after ancient Nordic god Shor, the leader of the Nord Pantheon;Shor's Stone.SUMM:named after god Shor/relies on hunting, milling, blacksmith;EXIT:<S⇒Riften>,<N⇒Kynesgrove>;Shor's Stone.CULTURE:nord/ancient nord religion;FEATURES:wooden houses/few people/blacksmith/mill/cattle;]",
                                "hidden": false,
                                "worldInfoId": "224060130"
                        },
                        {
                                "id": "4.8",
                                "keys": "(River(| )wood)#[t=5l=5f=2S=2]",
                                "entry": "[ Riverwood description:< name≡ Riverwood>/< small town& border of Whiterun Hold and Falkreath Hold>/< hold≡ Whiterun Hold>/< kingdom≡ Western Skyrim>. Riverwood summary:< hunting& goats& sheep& fishing& smithing& milling>. Riverwood climate:< warm& breeze>. Riverwood culture:< nord& imperial religion& wooden houses>. Riverwood features:< shores of White River& east of Bleak Falls Barrow& west of the Throat of the World>.]",
                                "hidden": false,
                                "worldInfoId": "224060131"
                        },
                        {
                                "id": "4.9",
                                "keys": "Helgen#[t=5l=5f=2S=2]",
                                "entry": "[ Helgen description:< name≡ Helgen>/< small town& border of Falkreath Hold and Whiterun Hold>/< hold≡ Falkreath Hold>/< kingdom≡ Western Skyrim>. Helgen summary:< hunting& goats& sheep& smithing& imperial keep>. Helgen climate:< warm& breeze>. Helgen culture:< nord& imperial religion& wooden houses>. Helgen features:< close to the border with Cyrodiil& >.]",
                                "hidden": false,
                                "worldInfoId": "224060132"
                        },
                        {
                                "id": "4.11",
                                "keys": "Karthwasten#[t=5l=5f=2S=2]",
                                "entry": "[ Karthwasten description:< name≡ Karthwasten>/< small town in the Reach>/< hold≡ The Reach>. Karthwasten summary:< hunting& fishing& mining>. Karthwasten climate:< warm& breeze>. Karthwasten culture:< reachmen& wooden houses>/< religion≡ Hircine& Namira& Paryite>. Karthwasten features:< near the banks of the Karth River>.]",
                                "hidden": false,
                                "worldInfoId": "224060134"
                        },
                        {
                                "id": "4.12",
                                "keys": "Stone( H|h)ills#[t=5l=5f=2S=2]",
                                "entry": "[ Stonehills description:< name≡ Stonehills>/< small community in Hjaalmarch>/< hold≡ Hjaalmarch>/< kingdom≡ Western Skyrim>. Stonehills summary:< hunting& iron mining>. Stonehills climate:< snowy& cold>. Stonehills culture:< nord& wooden houses>/< religion≡ Ancient Nordic Pantheon>. Stonehills features:< iron mine& wolves& sabre cat>.]",
                                "hidden": false,
                                "worldInfoId": "224060136"
                        },
                        {
                                "id": "4.13",
                                "keys": "Vernim#[t=5l=5f=2S=2]",
                                "entry": "[ Vernim description:< name≡ Vernim>/< small town in the Rift>/< hold≡ The Rift>/< kingdom≡ Eastern Skyrim>. Vernim summary:< hunting& fishing>. Vernim climate:< warm& breeze>. Vernim culture:< nord& small wooden houses>/< religion≡ Ancient Nordic Pantheon>. Vernim features:< bears& wolves& sabre cat>.]",
                                "hidden": false,
                                "worldInfoId": "224060140"
                        },
                        {
                                "id": "4.14",
                                "keys": "Nimalten#[t=5l=5f=2S=2]",
                                "entry": "[ Nimalten description:< name≡ Nimalten>/< small town>/< hold≡ The Rift>/< kingdom≡ Eastern Skyrim>. Nimalten summary:< ruler≡ Thane Armjor>/< hunting& fishing& smithing>. Nimalten climate:< warm& breeze>. Nimalten culture:< nord& small wooden houses>/< religion≡ Ancient Nordic Pantheon>. Nimalten features:< bears& wolves& sabre cat& deer& close to Treva River& big mansion where Thane Armjor lives>.]",
                                "hidden": false,
                                "worldInfoId": "224060142"
                        },
                        {
                                "id": "4.17",
                                "keys": "Pargran#[t=5l=5f=2S=2]",
                                "entry": "[ Pargran description:< name≡ Pargran>/< small town>/< hold≡ Eastmarch>/< kingdom≡ Western Skyrim>. Pargran summary:< hunting& fishing& silver mining>. Pargran climate:< snowy& cold>. Pargran culture:< nord& small wooden houses>/< religion≡ Ancient Nordic Pantheon>. Pargran features:< inn& small houses& simple folk>.]",
                                "hidden": false,
                                "worldInfoId": "224060145"
                        },
                        {
                                "id": "5.1",
                                "keys": "skyrim#[t=5l=2f=2]",
                                "entry": "<< Skyrim home the nords, northern province of the empire, vrage current king>>>>\n<< Skyrim harsh cold snowy north, temperate warm south, grasslands west, deep lush woods south>>>>\n<< Skyrim mountainous many valleys forests wildlife rivers woods lakes>>>>\n<< Skyrim divided nine holds, each hold ruled by jarl>>>>",
                                "hidden": false,
                                "worldInfoId": "224060148"
                        },
                        {
                                "id": "5.2",
                                "keys": "(cyrodi(|i)l)#[t=5l=2f=2]",
                                "entry": "<< Cyrodiil capital empire center continent known as Heartlands land of the Imperials>>>>\n<< Cyrodiil north snowy freezing, south east west lush forests green grasslands>>>>",
                                "hidden": false,
                                "worldInfoId": "224060149"
                        },
                        {
                                "id": "5.3",
                                "keys": "(cyrodi(|i)l)#[t=6l=1f=2]",
                                "entry": "<< Cyrodiil White-Gold tower Imperial City capital of Cyrodiil>>>>\n<< Cyrodiil west called Colovia, east called Nibenay>>>>",
                                "hidden": false,
                                "worldInfoId": "224060150"
                        },
                        {
                                "id": "5.4",
                                "keys": "(argonia|black marsh)#[t=5l=2f=2]",
                                "entry": "<< Argonia dense swampland land of the argonians also called Black Marsh>>>>\n<< Argonia natives do not like the name Black Marsh, located southeast Tamriel>>>>\n<< Argonia poisonous lands to non-argonians>>>>",
                                "hidden": false,
                                "worldInfoId": "224060154"
                        },
                        {
                                "id": "5.5",
                                "keys": "high rock#[t=5l=2f=2]",
                                "entry": "<< High Rock northwestern province empire, land of the bretons>>>>\n<< High Rock feudal kingdoms city-states, good trade, rich art music classy people>>>>\n<< High Rock monarchy kings counts dukes, bretons worship the nine divines>>>>",
                                "hidden": false,
                                "worldInfoId": "224060155"
                        },
                        {
                                "id": "5.6",
                                "keys": "high rock#[t=6l=1f=2]",
                                "entry": "<< High Rock regions illiac bay& glenumbra& stormhaven& wrothgar& rivenspire& bangkorai>>>>\n<< High rock wrothgar freezing cold, bangkorai glenumbra illiac bay warm hot weather nice beaches>>>>\n<< High Rock rivenspire moors dead trees dry land, stormhaven lush green forests Direnni Tower green trees>>>>",
                                "hidden": false,
                                "worldInfoId": "224060157"
                        },
                        {
                                "id": "5.7",
                                "keys": "hammerfell#[t=5l=2f=2]",
                                "entry": "<< Hammerfell west Tamriel, home of the redguards, vast deserts warm hot weather>>>>\n<< Hammerfell great ports big trade cities illiac bay many pirates sea life important ports>>>>\n<< Hammerfell six regions alik'r desert bangkorai craglorn sunforge hew's bane khefrem>>>>\n<< Hammerfell two islands stros m'kai and the chain>>>>",
                                "hidden": false,
                                "worldInfoId": "224060158"
                        },
                        {
                                "id": "5.8",
                                "keys": "(summerset( isle(s|)|))#[t=5l=2f=2]",
                                "entry": "<< Summerset province southwest Tamriel, home of the altmer>>>>\n<< Summerset beautiful place good weather colorfour lush forests>>>>\n<< Summerset magic strong Crystal Tower, Alinor capital great city>>>>\n<< Summerset two islands called summerset and auridon>>>>",
                                "hidden": false,
                                "worldInfoId": "224060159"
                        },
                        {
                                "id": "5.9",
                                "keys": "valenwood#[t=5l=2f=2]",
                                "entry": "<< Valenwood southwest Tamriel dense lush forest the green pact, home of the bosmer>>>>\n<< Valenwood migratory live trees, varied fauna many animals>>>>\n<< Valenwood four regions grahtwood& malabal tor& reaper's march& greenshade>>>>",
                                "hidden": false,
                                "worldInfoId": "224060162"
                        },
                        {
                                "id": "5.10",
                                "keys": "(morrowind|resdayn)#[t=5l=2f=2]",
                                "entry": "<< Morrowind eastern province empire, land of the dunmer>>>>\n<< Morrowind large island Vvardenfell in middle, large mainland, borders skyrim& cyrodiil& argonia>>>>\n<< Morrowind ashen lands volcanoes molten lava near vvardenfell, lush green forests south and west>>>>",
                                "hidden": false,
                                "worldInfoId": "224060163"
                        },
                        {
                                "id": "5.11",
                                "keys": "(morrowind|resdayn)#[t=6l=1f=2]",
                                "entry": "<< Morrowind divided regions bal foyen& deshaan& vvardenfell& stonefalls& soltheim>>>>\n<< Morrowind worship the tribunal, tribunal also called almsivi or triune>>>>\n<< Morrowind tribunal consist vivec& almalexia& sotha sil, three living gods>>>>",
                                "hidden": false,
                                "worldInfoId": "224060166"
                        },
                        {
                                "id": "5.12",
                                "keys": "((confederation of |)elsweyr)#[t=5l=3f=2S=2]",
                                "entry": "<< Elsweyr south province, home of the khajiit>>>>\n<< Elsweyr two regions anequina in north& pellitine in south>>>>\n<< Elsweyr kingdom capital rimmen, mane spiritual leader city of torval>>>>",
                                "hidden": false,
                                "worldInfoId": "224060168"
                        },
                        {
                                "id": "5.13",
                                "keys": "((confederation of |)elsweyr)#[t=5l=3f=2S=2]",
                                "entry": "<< Elsweyr anequina lush forests& sandy canyons, capital rimmen>>>>\n<< Elsweyr pellitine jungles rainforests, capital torval, torval seat of mane>>>>",
                                "hidden": false,
                                "worldInfoId": "224060169"
                        },
                        {
                                "id": "6.1#[t=5l=3f=1S=2]",
                                "keys": "(riften (inn|tavern)|mad mammoth)",
                                "entry": "The Mad Mammoth:[TYPE<The Mad Mammoth>:inn/bar/pub/tavern;OWNER<The Mad Mammoth>:andkvar;INHABITANTS<The Mad Mammoth>:Andkvar/Narca/Bujela/Freyte/Torbndir;LOCATION<The Mad Mammoth>:Riften;CITY<The Mad Mammoth>:Riften;DESC<The Mad Mammoth>:the mad mammoth is the local inn and tavern in riften/it is owned by andkvar/has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/andkvar lives here/narca lives here/bujela lives here/freyte lives here/torbndir lives here/five people live here;EXIT<The Mad Mammoth>:one exit goes out to riften in the market square/one exit goes to riften in the entrance bridge.]",
                                "hidden": false,
                                "worldInfoId": "224060170"
                        },
                        {
                                "id": "6.2#[t=5l=3f=1S=2]",
                                "keys": "(winterhold (inn|tavern)|frozen hearth)",
                                "entry": "The Frozen Hearth:[TYPE<The Frozen Hearth>:inn/bar/pub/tavern;OWNER<The Frozen Hearth>:Bjormar;INHABITANTS<The Frozen Hearth>:Bjormar/Astrid/Aengvir/Balor;LOCATION<The Frozen Hearth>:Winterhold;CITY<The Frozen Hearth>:Winterhold;DESC<The Frozen Hearth>:the frozen hearth is the local inn and tavern in winterhold/it is owned by Bjormar/it has rooms for rent/there are 10 rooms/there's a big fireplace in the center of the hall/balor lives here/Bjormar owns the place/astrid lives here/aengvir lives here/there are four people here/balor lives here;EXIT<The Frozen Hearth>:exit that goes out to the city of winterhold.]",
                                "hidden": false,
                                "worldInfoId": "224060173"
                        },
                        {
                                "id": "6.3#[t=5l=3f=1S=2]",
                                "keys": "(whiterun (inn|tavern)|bloated goat)",
                                "entry": "The Bloated Goat:[TYPE<The Bloated Goat>:inn/bar/pub/tavern;OWNER<The Bloated Goat>:Isekaid;INHABITANTS<The Bloated Goat>:Isekaid/Sigrid;LOCATION<The Bloated Goat>:whiterun/city of whiterun;CITY<The Bloated Goat>:whiterun/city of whiterun;DESC<The Bloated Goat>:The Bloated Goat is the inn and tavern in the city of Whiterun/owned by Isekaid and his wife Sigrid. They both live at the inn/in their private room in the ground floor. The inn is a two story building with 10 rooms for rent.;EXIT<The Bloated Goat>:One main exit goes out to the Whiterun market square/located in the Plains District..]",
                                "hidden": false,
                                "worldInfoId": "224060175"
                        },
                        {
                                "id": "6.4#[t=5l=3f=1S=2]",
                                "keys": "temple of kyne",
                                "entry": "Temple of Kyne:[TYPE<Temple of Kyne>:temple/church/cathedral;INHABITANTS<Temple of Kyne>:Irene/Mauricius/Nonnata;LOCATION<Temple of Kyne>:whiterun/city of whiterun;CITY<Temple of Kyne>:whiterun/city of whiterun;DESC<Temple of Kyne>:Temple dedicated to Kyne/the goddess of wind and air. It's the main temple to Kyne in Skyrim/located in the Winds District.;EXIT<Temple of Kyne>:One main exit goes out to the Whiterun tree square/located in the Winds District.]",
                                "hidden": false,
                                "worldInfoId": "224060177"
                        },
                        {
                                "id": "7.1",
                                "keys": "Karth River#[t=5l=5f=2S=2]",
                                "entry": "<< Karth River begins in The Reach ends in Haafingar, big river, empties into the Sea of Ghosts>>>> << Karth River known violent rapids, dangerous terrains, sharp stones>>>> << Karth River important fishing life support people in The Reach>>>>",
                                "hidden": false,
                                "worldInfoId": "224060179"
                        },
                        {
                                "id": "7.2",
                                "keys": "White River#[t=5l=5f=2S=2]",
                                "entry": "<< White River begins in Lake Illinalta in Falkreath Hold, passes by Whiterun Hold and Eastmarch>>>> << White River ends in Sea of Ghosts northeastern Skyrim near Windhelm>>>> << White River fishing villages, life support, dangerous currents>>>>",
                                "hidden": false,
                                "worldInfoId": "224060182"
                        },
                        {
                                "id": "7.3",
                                "keys": "Lake Geir#[t=5l=5f=2S=2]",
                                "entry": "<< Lake Geir lake western Rift, town Ivarstead built its western shores>>>> << Lake Geir fed by Treva River, drained by Darkwater River>>>> << Lake Geir named after Archmage Geirmund, Geirmund's tomb on largest island in middle lake>>>>",
                                "hidden": false,
                                "worldInfoId": "224060184"
                        },
                        {
                                "id": "7.4",
                                "keys": "Lake Ilinalta#[t=5l=5f=2S=2]",
                                "entry": "<< Lake Ilinalta source of White River, located central Falkreath Hold, middle Skyrim's pine forest>>>> << Lake Ilinalta notable Skyrim landmark, life support Falkreath city, important fishing hunting>>>>",
                                "hidden": false,
                                "worldInfoId": "224060186"
                        },
                        {
                                "id": "7.5",
                                "keys": "Lake Yorgrim#[t=5l=5f=2S=2]",
                                "entry": "<< Lake Yogrim source of river with same name, located in eastern Pale, just west of Windhelm>>>> << Lake Yogrim fishing The Pale and Eastmarch beautiful>>>> << Lake Yogrim burial site of dragon Viinturuth, Viinturuth died in the Merethic Era durin Dragon War>>>>",
                                "hidden": false,
                                "worldInfoId": "224060189"
                        },
                        {
                                "id": "7.6",
                                "keys": "Darkwater River#[t=5l=5f=2S=2]",
                                "entry": "<< Darkwater River eastern skyrim, connects Lake Geir to White River>>>> << Ends between The Rift and Eastmarch marks the border between the holds>>>> << good fishing important river Eastern Skyrim>>>>",
                                "hidden": false,
                                "worldInfoId": "224060190"
                        },
                        {
                                "id": "7.7",
                                "keys": "River Hjaal#[t=5l=5f=2S=2]",
                                "entry": "<< River Hjaal northwestern Skyrim, located in Hjaalmarch>>>> << River Hjaal located in Hjaalmarch, near border with Whiterun, near city of Mortal>>>> << River Hjaal drains into Karth River, ends in Sea of Ghosts, wide range fish>>>>",
                                "hidden": false,
                                "worldInfoId": "224060191"
                        },
                        {
                                "id": "7.8",
                                "keys": "River Yorgrim#[t=5l=5f=2S=2]",
                                "entry": "<< River Yogrim is short tributary, connects Lake Yogrim to White River>>>> << River Yogrim starts in eponymous lake in The Pale, ends in Eastmarch into White River>>>> << River Yogrim many waterfalls, many fish>>>>",
                                "hidden": false,
                                "worldInfoId": "224060193"
                        },
                        {
                                "id": "7.9",
                                "keys": "Treva River#[t=5l=5f=2S=2]",
                                "entry": "<< Treva River small river center of The Rift>>>> << Treva River starts in Lake Honrich ends in Lake Geir>>>> << Treva River many fish important river The Rift>>>>",
                                "hidden": false,
                                "worldInfoId": "224060195"
                        },
                        {
                                "id": "7.10",
                                "keys": "(Jerall(s| Mountains))#[t=5l=5f=2S=2]",
                                "entry": "<< Jerall Mountains also known Jeralls, mountain range southern Skyrim border with Cyrodiil>>>> << Jerall Mountains rugged steep inhospitable, location of Pale Pass in southern Skyrim>>>>",
                                "hidden": false,
                                "worldInfoId": "224060200"
                        },
                        {
                                "id": "7.11",
                                "keys": "Valus Mountains#[t=5l=5f=2S=2]",
                                "entry": "<< Valus Mountains mountain range southeastern Skyrim, border Morrowind and Cyrodiil>>>> << Valus Mountains southeastern Rift border Morrowind>>>>",
                                "hidden": false,
                                "worldInfoId": "224060201"
                        },
                        {
                                "id": "7.12",
                                "keys": "Dragon('s |)tail Mountains#[t=2l=5f=2S=2]",
                                "entry": "<< Dragon's Tail Mountains mountain range western Skyrim, border Hammerfell>>>>",
                                "hidden": false,
                                "worldInfoId": "224060202"
                        },
                        {
                                "id": "7.13",
                                "keys": "Dragon's Teeth Mountains#[t=5l=5f=2S=2]",
                                "entry": "<< Dragon's Teeth Mountains expansive mountain range western Skyrim, High Rock border>>>> << Dragon's Teeth Mountains provinces Cyrodiil High Rock Hammerfell Skyrim>>>>",
                                "hidden": false,
                                "worldInfoId": "224060205"
                        },
                        {
                                "id": "7.14",
                                "keys": "Druadach Mountains#[t=3l=5f=2S=2]",
                                "entry": "<< Druadach Mountains mountain range border Skyrim with High Rock, border Skyrim with Hammerfell>>>> << Druadach Mountains is Markarth, near Karth River, end in Solitude>>>>",
                                "hidden": false,
                                "worldInfoId": "224060206"
                        },
                        {
                                "id": "7.15",
                                "keys": "Druadach Mountains#[t=4l=5f=2S=2]",
                                "entry": "<< Druadach Mountains regions of Wrothgar Bangkorai in High Rock>>>>",
                                "hidden": false,
                                "worldInfoId": "224060208"
                        },
                        {
                                "id": "7.16",
                                "keys": "Velothi Mountains#[t=5l=5f=2S=2]",
                                "entry": "<< Velothi Mountains eastern Skyrim, border with Morrowind>>>> << Velothi Mountains named after prophet Veloth patron saint of Morrowind>>>>",
                                "hidden": false,
                                "worldInfoId": "224060211"
                        },
                        {
                                "id": "7.17",
                                "keys": "(Throat of the World|Snow Throat)#[t=4l=5f=2S=2]",
                                "entry": "<< Snow Throat also known Throat of the World, highest peak in Skyrim>>>> << Snow Throat located central Skyrim between Whiterun Hold and The Rift>>>>",
                                "hidden": false,
                                "worldInfoId": "224060212"
                        },
                        {
                                "id": "7.18",
                                "keys": "(Throat of the World|Snow Throat)#[t=5l=5f=2S=2]",
                                "entry": "<< Snow Throat climb seven thousand steps starting in Ivarstead, High Hrothgar on top of mountain>>>> << Snow Throat home of the monastic order Greybeards>>>>",
                                "hidden": false,
                                "worldInfoId": "224060216"
                        },
                        {
                                "id": "7.19",
                                "keys": "Jorrvaskr#[t=3l=5f=2S=2]",
                                "entry": "<< Jorrvaskr meadhall in Whiterun, home of the Companions>>>> << Jorrvaskr ancient meadhall made from boat of Ysgramor>>>> << Jorrvaskr one of oldest places in Skyrim>>>> << Jorrvaskr is a ship turned into a manor>>>>",
                                "hidden": false,
                                "worldInfoId": "224060217"
                        },
                        {
                                "id": "7.20",
                                "keys": "Skyforge#[t=4l=5f=2S=2]",
                                "entry": "[ Skyforge description:< ancient forge in Whiterun& located in Jorrvaskr backyard>/< believed to be blessed by Kyne herself>. Skyforge summary:< huge iron hawk statue on top>/< only the Companions blacksmith is allowed to use>.]",
                                "hidden": false,
                                "worldInfoId": "224060218"
                        },
                        {
                                "id": "7.21",
                                "keys": "(Dragonsreach)#[t=4l=5f=2S=2]",
                                "entry": "<< Dragonsreach is palace of Jarl of Whiterun, huge castle top of hill in city of Whiterun>>>> << Dragonsreach built to trap dragons during dragon war in Merethic Era>>>> << Dragonsreach Numinex was trapped there by High King Olaf One-Eye in First Era>>>> << Dragonsreach skull of Numinex above Jarl's throne>>>>",
                                "hidden": false,
                                "worldInfoId": "224060220"
                        },
                        {
                                "id": "7.22",
                                "keys": "Understone Keep#[t=5l=5f=2S=2]",
                                "entry": "<< Understone Keep seat of power The Reach, located city Markarth>>> << Understone Keep throne of the Ard of The Reach, Ard is title of ruler of The Reach>>>> << Understone Keep built inside mountain, used to be called Nchuand-Zel>>>>",
                                "hidden": false,
                                "worldInfoId": "224060223"
                        },
                        {
                                "id": "7.23",
                                "keys": "(Palace of (the |)Kings)#[t=5l=5f=2S=2]",
                                "entry": "<< Palace of Kings oldest building in Tamriel, built by ancient Nords>>>> << Palace of Kings seat of power of the Kingdom of Eastern Skyrim>>>> << Palace of Kings made of stone, located in city of Windhelm>>>> << Palace of Kings also known Palace of Ysgramor>>>>",
                                "hidden": false,
                                "worldInfoId": "224060226"
                        },
                        {
                                "id": "7.24",
                                "keys": "Blue Palace#[t=5l=5f=2S=2]",
                                "entry": "<< Blue Palace seat of power kingdom Western Skyrim& located in city Solitude>>>> << Blue Palace dark blue roof, stone walls, big courtyard with garden>>>>",
                                "hidden": false,
                                "worldInfoId": "224060229"
                        },
                        {
                                "id": "7.25",
                                "keys": "Kilkreath Temple#[t=5l=5f=2S=2]",
                                "entry": "<< Kilkreath Temple dedicated to Meridia, huge Meridia statue in the courtyard>>>> << Kilkreath Temple inner temple subterrain, door behind the statue>>>>",
                                "hidden": false,
                                "worldInfoId": "224060230"
                        },
                        {
                                "id": "7.26",
                                "keys": "(Winds District|Statue of Talos|Talos Statue)#[t=5l=5f=2S=2]",
                                "entry": "<< Statue of Talos image of Tiber Septim, altar shrine pray, stone statue Winds District of Whiterun>>>> << Statue of Talos looking heroic, stepping on big snake, sword in hand>>>>",
                                "hidden": false,
                                "worldInfoId": "224060232"
                        },
                        {
                                "id": "7.27",
                                "keys": "Deep Folk Crossing#[t=5l=5f=2S=2]",
                                "entry": "<< Deep Folk Crossing ancient Dwemer bridge in northern Reach>>>><< Deep Folk Crossing landmark, made of gray smooth stone with Dwemer brass metal roof>>>><< Deep Folk Crossing made in Dwemer style architecture>>>>",
                                "hidden": false,
                                "worldInfoId": "224060233"
                        },
                        {
                                "id": "7.28",
                                "keys": "(Azura Statue|Statue of Azura)#[t=5l=5f=2S=2]",
                                "entry": "<< Statue of Azura top of mountain in Winterhold region>>>><< Statue of Azura can be seen from kilometers away>>>><< Statue of Azura shrine altar, hundred feet tall, holds her hands high, holds moon right hand, holds sun left hand>>>>",
                                "hidden": false,
                                "worldInfoId": "224060235"
                        },
                        {
                                "id": "7.29",
                                "keys": "Gjukar's Monument#[t=5l=5f=2S=2]",
                                "entry": "<< Gjukar's Monument ancient stone monument south of Rorikstead>>>> << Gjukar's Monument commemorates an ancient battle that happened here>>> << Gjukar's Monument monument is the head of a hawk>>>>",
                                "hidden": false,
                                "worldInfoId": "224060237"
                        },
                        {
                                "id": "7.30",
                                "keys": "Sundered Towers#[t=5l=5f=2S=2]",
                                "entry": "<< Sundered Towers entire construction extremly good condition, beautiful sight>>>> << Sundered Towers big staircases to ancient Nord ruin leading to the towers>>>> << Sundered Towers two Nordic style ancient towers surrounded by tall pillars with hawk heads>>>>",
                                "hidden": false,
                                "worldInfoId": "224060239"
                        },
                        {
                                "id": "7.31",
                                "keys": "Reachwind Eyrie#[t=5l=5f=2S=2]",
                                "entry": "<<●Reachwind Eyrie ancient small Dwemer tower The Reach, built in Dwemer style architecture>>>> <<●Reachwind Eyrie made of smooth dark gray stone, brass roof>>>>",
                                "hidden": false,
                                "worldInfoId": "224060242"
                        },
                        {
                                "id": "8.1",
                                "keys": "(nord(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Nord native to skyrim, tall, blonde, strong>>>>\n<< Nord used to harsh environments, used to cold>>>>\n<< Nord go to sovngarde after death, value strength and courage>>>>",
                                "hidden": false,
                                "worldInfoId": "224060243"
                        },
                        {
                                "id": "8.2",
                                "keys": "(nord(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Nord call people they don't like \"milk-drinker\" and \"coward\">>>>\n<< Nord short-tempered hot-headed stubborn dislike magic>>>>",
                                "hidden": false,
                                "worldInfoId": "224060246"
                        },
                        {
                                "id": "8.3",
                                "keys": "khajiit#[t=4l=3f=2S=2]",
                                "entry": "[ Khajiit description:< speak in third person&& refer to themselves \"this one\">/< natives of Elsweyr>/< seen as thieves by the other races>. Khajiit appearance:< catlike-humanoids>/< furry body& tail& claws& cat ears>. Khajiit speech:< speak in third person&& refer to themselves \"this one\">.]",
                                "hidden": false,
                                "worldInfoId": "224060248"
                        },
                        {
                                "id": "8.4",
                                "keys": "khajiit#[t=5l=3f=2S=2]",
                                "entry": "[ Khajiit speech:< use \"wafiit\" and \"oviit\" as slur terms& use \"trevan\" as a friendly term>.]",
                                "hidden": false,
                                "worldInfoId": "224060250"
                        },
                        {
                                "id": "8.5",
                                "keys": "(dunmer|dark el(f|ves))#[t=4l=3f=2S=2]",
                                "entry": "<< Dunmer moniker dark elf native to morrowind>>>>\n<< Dunmer call people who are not dunmer \"n'wah\" if they don't like them, use \"s'wit\" and \"fetcher\" as slur terms>>>>",
                                "hidden": false,
                                "worldInfoId": "224060252"
                        },
                        {
                                "id": "8.6",
                                "keys": "(dunmer|dark el(f|ves))#[t=5l=3f=2S=2]",
                                "entry": "<< Dunmer call people \"sera\" and \"muthsera\" when they like or respect the people they're talking to>>>>\n<< Dunmer hot-headed dark grey skin red eyes pointy ears>>>>\n<< Dunmer affinity with magic very powerful strong-willed>>>>",
                                "hidden": false,
                                "worldInfoId": "224060254"
                        },
                        {
                                "id": "8.7",
                                "keys": "(altmer|high el(f|ves))#[t=4l=3f=2S=2]",
                                "entry": "<< Altmer moniker high elf native to summerset isles>>>>\n<< Altmer tall thin golden skin clear eyes brownish hair>>>>\n<< Altmer arrogant pedantic prepotent self-righteous perfectionist>>>>",
                                "hidden": false,
                                "worldInfoId": "224060255"
                        },
                        {
                                "id": "8.8",
                                "keys": "(altmer|high el(f|ves))#[t=5l=3f=2S=2]",
                                "entry": "<< Altmer call people \"ceruval\" and \"cerum\" when they like or respect the people they're talking to>>>>\n<< Altmer affinity with magic very powerful strong-willed>>>>\n<< Altmer call people who are not dunmer \"ephem\" if they don't like them, use \"ephem\" and \"de'nt\" as slur terms>>>>",
                                "hidden": false,
                                "worldInfoId": "224060258"
                        },
                        {
                                "id": "8.9",
                                "keys": "(or(c|cs|simer))#[t=4l=3f=2S=2]",
                                "entry": "<< Orsimer moniker orc, have tusks pointy ears brownish-green skin>>>>\n<< Orsimer muscular build violent short-tempered worship malacath>>>>\n<< Orsimer strong stubborn fight-lover tribal primitive>>>>",
                                "hidden": false,
                                "worldInfoId": "224060260"
                        },
                        {
                                "id": "8.10",
                                "keys": "(bosmer|wood el(f|ves))#[t=4l=3f=2S=2]",
                                "entry": "<< Bosmer moniker wood elf native to valenwood>>>>\n<< Bosmer short pointy ears light-brown or tan skin big eyes sometimes horns>>>>\n<< Bosmer live trees cannot kill trees and vegetation because of green pact can only eat meat>>>>",
                                "hidden": false,
                                "worldInfoId": "224060261"
                        },
                        {
                                "id": "8.11",
                                "keys": "(bosmer|wood el(f|ves))#[t=5l=3f=2S=2]",
                                "entry": "<< Bosmer in war eat the flesh of enemies ruthless enemies in war>>>>\n<< Bosmer green pact worship y'ffre friend of the woods love animals love vegetation care about environment>>>>",
                                "hidden": false,
                                "worldInfoId": "224060264"
                        },
                        {
                                "id": "8.12",
                                "keys": "(argonian(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Argonian native to black marsh lizard-like race scaly>>>>\n<< Argonian worship sithis worship hist hate dunmer enslaved by dunmer>>>>\n<< Argonian other races do not like argonians>>>>",
                                "hidden": false,
                                "worldInfoId": "224060266"
                        },
                        {
                                "id": "8.13",
                                "keys": "(imperial(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Imperial native to cyrodiil human race cosmopolitan cultured fair skin>>>>\n<< Imperial human medium height sturdy strong diplomatic>>>>\n<< Imperial main race in empire good with commerce and trade>>>>",
                                "hidden": false,
                                "worldInfoId": "224060268"
                        },
                        {
                                "id": "8.14",
                                "keys": "(redguard(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Redguard human native to hammerfell dark brown skin sturdy strong>>>>\n<< Redguard diplomatic but strong in war courageous fearless>>>>\n<< Redguard many pirates illiac bay strong trade with high-rock>>>>",
                                "hidden": false,
                                "worldInfoId": "224060269"
                        },
                        {
                                "id": "8.15",
                                "keys": "(breton(s|))#[t=4l=3f=2S=2]",
                                "entry": "<< Breton human native to high rock fair skin short stature slightly pointy ears>>>>\n<< Breton mix of human and elf, good with magic good with trade>>>>\n<< Breton highly cultured arts trade many pirates illiac bay>>>>",
                                "hidden": false,
                                "worldInfoId": "224060271"
                        },
                        {
                                "id": "8.16",
                                "keys": "khajiit#[t=1l=3f=2S=2]",
                                "entry": "Khajiit talk in third person, call themselves \"this one\".",
                                "hidden": false,
                                "worldInfoId": "224060272"
                        },
                        {
                                "id": "9.1",
                                "keys": "(sigrid)#[t=5l=5f=2S=2]",
                                "entry": "<< Sigrid nord ♀ 38y age, 45kg eight, 169cm height>>>> << Sigrid fine skin blue eyes beautiful, long blonde hair>>>> << Sigrid innkeeper of the Bloated Goat, good humored solidary funny polite>>>>",
                                "hidden": false,
                                "worldInfoId": "224060273"
                        },
                        {
                                "id": "9.2",
                                "keys": "(isekaid|(innkeeper of the |)bloated goat( innkeeper|))#[t=5l=5f=2S=2]",
                                "entry": "<< Isekaid nord ♂ 40y age, 80kg weight, 175cm height>>>> << Isekaid full beard long blonde hair blue eyes>>>> << Isekaid innkeeper of the Bloated Goat, good humored solidary funny>>>>",
                                "hidden": false,
                                "worldInfoId": "224060276"
                        },
                        {
                                "id": "9.3",
                                "keys": "(m(é|e)lanie( sindeaux|)|arch(-| |)mage)#[t=5l=5f=2S=2]",
                                "entry": "Mélanie:[ Mélanie description:< born in Daggerfall& ♀& 60y>/< race≡ Breton>/< weight≡ 40kg>/< height≡ 165cm>. Mélanie appearance:< fine smooth skin& stunningly beautiful& looks younger than actually is>. Mélanie mental:< serious&intelligent& strategic& technical>. Mélanie wearing:< noble fine clothes& jewlery>. Mélanie occupation:< Archmage of the College of Winterhold>.]",
                                "hidden": false,
                                "worldInfoId": "224060277"
                        },
                        {
                                "id": "9.4",
                                "keys": "((dean |)desir(é|e)e( beauclair|))#[t=5l=5f=2S=2]",
                                "entry": "Desirée:[ Desirée description:< born in Camlorn& ♀& 39y>/< race≡ Breton>/< weight≡ 50kg>/< height≡ 172cm>. Desirée appearance:< thin& slender& green eyes>/< hair≡ dark brown& straight& short>. Desirée mental:< funny& intelligent& knowledgeable>. Desirée wearing:< noble fine clothes>. Desirée occupation:< Dean of the Antiquarian Circle>.]",
                                "hidden": false,
                                "worldInfoId": "224060278"
                        },
                        {
                                "id": "9.5",
                                "keys": "(grand( |-|)master |)armilion#[t=5l=5f=2S=2]",
                                "entry": "Armilion:[ Armilion description:< born in Vulkhel Guard& ♂& 95y>/< race≡ Altmer>/< weight≡ 90kg>/< height≡ 200cm>. Armilion appearance:< thin& slender& yellow eyes>/< hair≡ golden& straight& long>. Armilion mental:< pedantic& intelligent& good singer& good writer>. Armilion wearing:< noble fine clothes>. Armilion occupation:< Grandmaster of the Bards College>.]",
                                "hidden": false,
                                "worldInfoId": "224060280"
                        },
                        {
                                "id": "9.6",
                                "keys": "(gray fox|)#[t=5l=5f=2S=2]",
                                "entry": "<< Gray Fox mysteryous, no one knows who he is, no one knows his name, wears the Gray Cowl of Nocturnal, is the leader of the Thieves Guild, face hidden by the cowl>>>>",
                                "hidden": false,
                                "worldInfoId": "224060283"
                        },
                        {
                                "id": "10.1",
                                "keys": "((college of |)bards( college|))#[t=5l=5f=2S=2]",
                                "entry": "<< Bards College ancient school of the bardic arts, one of most prestigious in all of Tamriel>>>> << Bards College founded some time in the First Era, bard school art school>>>>",
                                "hidden": false,
                                "worldInfoId": "224060284"
                        },
                        {
                                "id": "10.2",
                                "keys": "((college of |)bards( college|))#[t=6l=5f=2S=2]",
                                "entry": "<< Bards College current leader Grandmaster Armilion>>>> << Bards College most of the best bards in Tamriel graduated here>>>> << Bards College located in the city of Solitude>>>>",
                                "hidden": false,
                                "worldInfoId": "224060285"
                        },
                        {
                                "id": "10.3",
                                "keys": "(antiquarian(s|) circle)#[t=5l=5f=2S=2]",
                                "entry": "<< Antiquarian Circle school of archaeology paleontology history, located in city of Solitude>>>> << Antiquarian Circle is a branch of Gwyllim University>> << Antiquarian Circle current leader breton she Dean Desirée Beauclair>>>>",
                                "hidden": false,
                                "worldInfoId": "224060286"
                        },
                        {
                                "id": "10.4",
                                "keys": "(antiquarian(s|) circle)#[t=6l=5f=2S=2]",
                                "entry": "<< Antiquarian Circle many of the best historians and archaeologists have graduated here>>>> << Antiquarian Circle founded some time in the First Era>>>>",
                                "hidden": false,
                                "worldInfoId": "224060289"
                        },
                        {
                                "id": "10.5",
                                "keys": "college of winterhold#[t=5l=5f=2S=2]",
                                "entry": "<< College of Winterhold school of magic, located in city of Winterhold>>>> << College of Winterhold current leader she breton Arch-Mage Mélanie Sindeaux>>>>",
                                "hidden": false,
                                "worldInfoId": "224060290"
                        },
                        {
                                "id": "10.6",
                                "keys": "college of winterhold#[t=6l=5f=2S=2]",
                                "entry": "<< College of Winterhold founded in First Era by Shalidor>>>> << College of Winterhold many powerful mages graduated here>>>>",
                                "hidden": false,
                                "worldInfoId": "224060291"
                        },
                        {
                                "id": "10.7",
                                "keys": "Companions#[t=5l=5f=2S=2]",
                                "entry": "<< Companions ancient group of fighters, headquarter in meadhall called Jorrvaskr, do jobs for money>>>> << Companions protect citizens, current leader Harbinger Isenor Argonsson>>>>",
                                "hidden": false,
                                "worldInfoId": "224060292"
                        },
                        {
                                "id": "10.8",
                                "keys": "Thieves Guild#[t=5l=5f=2S=2]",
                                "entry": "<< Thieves Guild organization in favor of thieves, worship Nocturnal, leader is the Gray Fox>>>> << Thieves Guild located The Ratways in Riften, steals from rich gives to poor, helps beggars>>>>",
                                "hidden": false,
                                "worldInfoId": "224060293"
                        },
                        {
                                "id": "11.1",
                                "keys": "((the |)gods|(nine |eight |)divines)gods#[t=5l=3f=1S=2]",
                                "entry": "The Nine Divines:[TYPE<The Nine Divines>:religion;DESC<The Nine Divines>:the eight divines is the official pantheon of the empire. it worships the eight gods related to creation. these gods are  Akatosh/Arkay/Dibella/Julianos/Kynareth/Mara/Stendarr/Talos/and Zenithar..]",
                                "hidden": false,
                                "worldInfoId": "224060294"
                        },
                        {
                                "id": "11.2",
                                "keys": "(a(kat|lk)osh|auri(-|)el)#[t=5l=3f=1S=2]",
                                "entry": "[ Akatosh description:< name ≡ Akatosh/ Alkosh/ Auri-El>/< age ≡ as old as time>/< gender ≡ genderless>.  Akatosh appearance:< body ≡ scaly/ big dragon>.  Akatosh mental:< benevolent& good& cryptic& mystic& insane>.  Akatosh occupation:< god of time/ chief god of the divines/ chief god of the imperial pantheon>.  Akatosh SUMM:< Akatosh is the dragon god of time, and the chief god in the Imperial Pantheon of the Divines. He is an Aedra. He is usually depicted as a dragon, and appears in all Tamrielic religions, though sometimes with different names>.]",
                                "hidden": false,
                                "worldInfoId": "224060295"
                        },
                        {
                                "id": "11.3",
                                "keys": "(Ark('|)ay)#[t=5l=3f=1S=2]",
                                "entry": "Arkay:[TYPE<Arkay>:god;SPHERE<Arkay>:life and death/burials and funerals;DESC<Arkay>:Arkay is the god of burials and funeral rites/and is generally associated with cyclical occasions/such as the seasons and life and death. His priests are staunch opponents of necromancy and all forms of the undead/and are empowered to bestow Arkay's blessings which prevent the forceful misuse of a mortal soul. Thus/any body properly buried by a priest observing the proper rituals is protected by Arkay's Law from being raised as undead.Therefore/necromancers view Arkay as their ultimate enemy/and make covert efforts to undermine his worship throughout Tamriel. Because of this association with/and protection of/mortality/he is sometimes called the Mortals' God..]",
                                "hidden": false,
                                "worldInfoId": "224060296"
                        },
                        {
                                "id": "11.4",
                                "keys": "Dibella|Our Blessed Lady#[t=5l=3f=1S=2]",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/love and affection;DESC<Dibella>:Dibella is the Goddess of Beauty/Love/and Affection. She is also acclaimed as the Lady of Love/Beauty/Art/and Music. Dibella is the Queen of Heaven/and is one of the Divines..]",
                                "hidden": false,
                                "worldInfoId": "224060297"
                        },
                        {
                                "id": "11.5",
                                "keys": "Julianos#[t=5l=3f=1S=2]",
                                "entry": "Julianos:[TYPE<Julianos>:god;SPHERE<Julianos>:wisdom and logic;DESC<Julianos>:Julianos is one of the Divines/governing the realms of literature/law/history/and contradiction. He is usually associated with magic/and thus is often revered by wizards..]",
                                "hidden": false,
                                "worldInfoId": "224060298"
                        },
                        {
                                "id": "11.6",
                                "keys": "Kynareth#[t=5l=3f=1S=2]",
                                "entry": "Kynareth :[TYPE<Kynareth >:god;SPHERE<Kynareth >:heavens/the winds/the elements/and the unseen spirits of the air;DESC<Kynareth >:Kynareth is the goddess of the heavens/the winds/the elements/and the unseen spirits of the air. She is a member of the Divines and Patron of sailors and travelers. Kynareth is often invoked for auspicious stars at birth and for good fortune in daily life. In some legends/she is the first to agree to Lorkhan's divine plan to create the mortal plane/and provides the space in the void for its creation. Furthermore/she is associated with rain/a phenomenon that is said not to have occurred before the removal of Lorkhan's divine spark..]",
                                "hidden": false,
                                "worldInfoId": "224060299"
                        },
                        {
                                "id": "11.7",
                                "keys": "Mara#[t=5l=3f=1S=2]",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love/fertility/compassion and agriculture;DESC<Mara>:Mara/also known as Mother Mara/Mother Mild/and the Divine Mother/is the Goddess of Love/Fertility/Agriculture/and Compassion. She is also acclaimed as the Mother-Goddess/and is one of the Divines..]",
                                "hidden": false,
                                "worldInfoId": "224060300"
                        },
                        {
                                "id": "11.8",
                                "keys": "S(t|('|)r)endarr#[t=5l=3f=1S=2]",
                                "entry": "Stendarr:[TYPE<Stendarr>:god;SPHERE<Stendarr>:mercy/charity/luck;DESC<Stendarr>:Stendarr/also known as Stendarr the Steadfast/is the God of Mercy/Charity/Well-Earned Luck/and Justice. He is also acclaimed as the God of Compassion/and Righteous Rule by Might and Merciful Forbearance. Stendarr is the Apologist of Men/patron of the Imperial Legion/magistrates/rulers/and knights errant/and one of the Divines..]",
                                "hidden": false,
                                "worldInfoId": "224060301"
                        },
                        {
                                "id": "11.9",
                                "keys": "(Zenithar|Z'en)#[t=5l=3f=1S=2]",
                                "entry": "Zenithar:[TYPE<Zenithar>:god;SPHERE<Zenithar>:Work and Commerce;DESC<Zenithar>:Zenithar/the God of Work and Commerce/the Provider of our Ease/is one of the Divines. The Trader God is frequently seen as the same deity as the Bosmeri god Z'en. In the Empire/however/Zenithar is considered a more cultivated god of merchants and middle nobility/being the deity of wealth/labor/commerce and communication..]",
                                "hidden": false,
                                "worldInfoId": "224060302"
                        },
                        {
                                "id": "11.10",
                                "keys": "(Talos|Stormcrown|Ysmir|Dragon of the North)#[t=5l=3f=1S=2]",
                                "entry": "Talos:[TYPE<Talos>:god;SPHERE<Talos>:mankind/war/strength;DESC<Talos>:Talos is the most important hero-god of Mankind. In his mortal form/known as Tiber Septim/he conquered all of Tamriel and ushered in the Third Era (and the Third Empire). After death/his spirit ascended to the heavens to become the ninth and youngest divine/under the name given to him by the Nords: Talos. Also called Ysmir/'Dragon of the North'. One of the Nine Divines. Less prominent sects/such as the Talos Cult/have been inspired by his apotheosis..]",
                                "hidden": false,
                                "worldInfoId": "224060303"
                        },
                        {
                                "id": "12.1",
                                "keys": "(herma(eus|)( |-)mora|hermorah)#[t=5l=3f=1S=2]",
                                "entry": "[ Hermaeus Mora description:< name≡ Hermaeus Mora/ Herma-Mora/ Hermorah>/< age≡ unknown>/< genderless>. Hermaeus Mora summ:< Usually referred to as a male, his plane of Oblivion is Apocrypha>. Hermaeus Mora appearance:< body≡ tentacles/ many eyes/ floating monster/ wretched abyss/ dark purple vortex>. Hermaeus Mora mental:< smart& intelligent& knows all& possessive& manipulative& arrogant& deceiver>. Hermaeus Mora occupation:< god of knowledge/ daedric prince of knowledge>. Hermaeus Mora traits:< arrogant/ prepotent/ manipulative>. Hermaeus Mora speech:< telepathy>. Hermaeus Mora abilities:< knowing all>/< manipulation>/< mind puppeteer>/< controlling people>.]",
                                "hidden": false,
                                "worldInfoId": "224060304"
                        },
                        {
                                "id": "12.2",
                                "keys": "(sheogorath|(daedric|god) prince of madness|mad( |)god)#[t=5l=3f=1S=2]",
                                "entry": "[ Sheogorath description:< name≡ Sheogorath>/ < age≡ old as time>. Sheogorath summ:< Usually referred to as a male, his plane of Oblivion is the Shivering Isles>. Sheogorath appearance:< body≡ 162cm_height/ 60kg_weight/ slim/ thin/ hair< greying& short>/ eyes< cat-like& light brown>/ full greying beard>. Sheogorath mental:< crazy/ insane/ funny/ jokester/ sarcastic/ mad>. Sheogorath moniker:< Daedric Prince of Madness/ God of Madness>. Sheogorath traits:< sarcastic& crazy>. Sheogorath speech:< thick accent>.]",
                                "hidden": false,
                                "worldInfoId": "224060305"
                        },
                        {
                                "id": "12.3",
                                "keys": "(azura(h|))#[t=5l=3f=1S=2]",
                                "entry": "[ Azura description:< name≡ Azura& Azurah& Moonshadow>/< age≡ primeval>. Azura summary:< appears≡ female>/< location≡ Moonshadow>. Azura appearance:< height≡ 159cm>/< weight≡ 40kg& slim& thin>/< hair≡ long& black>/< eyes≡ red>/< skin≡ dark grey>. Azura wearing:< long, light blue dress>. Azura mental:< benevolent& self-love& love her followers>. Azura occupation:< Daedric Prince of Dusk and Dawn, Fate and Prophecy/ God of Dusk and Dawn, Fate and Prophecy>. Azura speech:< sweet>.]",
                                "hidden": false,
                                "worldInfoId": "224060306"
                        },
                        {
                                "id": "12.4",
                                "keys": "(boethia(h|)|boethra)#[t=5l=3f=1S=2]",
                                "entry": "[ Boethiah description:< name≡ Boethiah& Boethia& Boethra>/< age≡ primeval>. Boethiah summary:< appears≡ female>/< location≡ Realm of Boethia>. Boethiah appearance:< any form she wants>. Boethiah mental:< arrogant& prepotent& bossy& pedantic& sarcastic>. Boethiah occupation:< Daedric Prince of Plots/ God of Plots>. Boethiah speech:< commanding>.]",
                                "hidden": false,
                                "worldInfoId": "224060307"
                        },
                        {
                                "id": "12.5",
                                "keys": "clavicus vile#[t=5l=3f=1S=2]",
                                "entry": "[ Clavicus Vile description:< name≡ Clavicus Vile& Vile>/< age≡ primeval>. Clavicus Vile summary:< appears≡ male>/< location≡ The Fields of Regret>/< almost always with his hound Barbas by his side>. Clavicus Vile appearance:< skin≡ yellow>/< long black horns>/< eyes≡ red>. Clavicus Vile mental:< jokester& sarcastic& trickster& manipulative>. Clavicus Vile occupation:< Daedric Prince of Trickery and Bargains/ God of Trickery and Bargains>. Clavicus Vile speech:< mocking tone>.]",
                                "hidden": false,
                                "worldInfoId": "224060308"
                        },
                        {
                                "id": "12.6",
                                "keys": "barbas|hound of clavicus vile#[t=5l=3f=1S=2]",
                                "entry": "[ Barbas description:< name≡ Barbas>/< age≡ primeval>. Barbas summary:< appears≡ male>/< location≡ The Fields of Regret>/< almost always with his owner Clavicus Vile>. Barbas appearance:< skin≡ yellow>/< long black horns>/< eyes≡ red>/< most times appears in the form of a dog>. Barbas mental:< jokester& sarcastic& trickster& manipulative>. Barbas occupation:< Hound of Clavicus Vile>. Barbas speech:< mocking tone>.]",
                                "hidden": false,
                                "worldInfoId": "224060309"
                        },
                        {
                                "id": "12.7",
                                "keys": "meridia|merid-nunda#[t=5l=3f=1S=2]",
                                "entry": "[ Meridia description:< name≡ Meridia& Merid-Nunda>/< age≡ primeval>. Meridia summary:< appears≡ female>/< location≡ The Colored Rooms>/< considers the undead and such aberrations>. Meridia appearance:< height≡ 162cm>/< weight≡ 60kg& slim& thin>/< skin≡ pale>/< hair≡ shoulder_length& dark brown>/< eyes≡ dark brown>. Meridia mental:< arrogant& pedantic& bossy>. Meridia occupation:< Daedric Prince of Light and Life>. Meridia speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224060310"
                        },
                        {
                                "id": "12.8",
                                "keys": "mehrunes|dagon|merrunz#[t=5l=3f=1S=2]",
                                "entry": "[ Mehrunes Dagon description:< name≡ Mehrunes Dagon& Merrunz& Dagon& Mehrunes>/< age≡ primeval>. Mehrunes Dagon summary:< appears≡ male>/< location≡ The Deadlands>. Mehrunes Dagon appearance:< skin≡ red>/< hair≡ shaved>/< eyes≡ red>/< gigantic form with four arms and muscular figure>. Mehrunes Dagon mental:< arrogant& pedantic& violent>. Mehrunes Dagon occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Mehrunes Dagon speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224060311"
                        },
                        {
                                "id": "12.9",
                                "keys": "sanguine#[t=5l=3f=1S=2]",
                                "entry": "[ Sanguine description:< name≡ Sanguine>/< age≡ primeval>. Sanguine summary:< appears≡ male>/< location≡ The Deadlands>. Sanguine appearance:< skin≡ jet_black>/< hair≡ black& long>/< eyes≡ black>/< long black horns& pointed ears>. Sanguine mental:< nice& drunk& funny>. Sanguine occupation:< Daedric Prince of Revelry and Debauchery>. Sanguine speech:< drunk& nice>.]",
                                "hidden": false,
                                "worldInfoId": "224060312"
                        },
                        {
                                "id": "12.10",
                                "keys": "molag bal#[t=5l=3f=1S=2]",
                                "entry": "[ Molag Bal description:< name≡ Molag Bal& Bal>/< age≡ primeval>. Molag Bal summary:< appears≡ male>/< location≡ Coldharbour>/< almost always wielding his mace>. Molag Bal appearance:< skin≡ blue-grey>/< hair≡ shaved>/< eyes≡ neon blue>/< body≡ extremely muscular>/< horns coming out of his ears>. Molag Bal mental:< arrogant& pedantic& violent& sadistic>. Molag Bal occupation:< Daedric Prince of Domination and Enslavement>. Molag Bal speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224060313"
                        },
                        {
                                "id": "12.11",
                                "keys": "mephala|mafala#[t=5l=3f=1S=2]",
                                "entry": "[ Mephala description:< name≡ Mephala& Mafala>/< age≡ primeval>. Mephala summary:< appears≡ female>/< location≡ Spiral Skein>. Mephala appearance:< skin≡ dark grey>/< hair≡ long& black>/< eyes≡ red>/< she may also take the form of a spider>. Mephala mental:< arrogant& pedantic& belittling>. Mephala occupation:< Daedric Prince of Duality, Sex and Murder, Truth and Falsehood>. Mephala speech:< commanding&belittling tone>.]",
                                "hidden": false,
                                "worldInfoId": "224060314"
                        },
                        {
                                "id": "12.12",
                                "keys": "Malacath|Malauch|Mauloch|Malak|Orkey|Orkha|Malooc#[t=5l=3f=1S=2]",
                                "entry": "[ Malacath description:< name≡ Malacath& Malauch& Mauloch& Malak& Orkey& Orkha& Malooc>/< age≡ primeval>. Malacath summary:< appears≡ male>/< location≡ Ashpit>. Malacath appearance:< skin≡ grayish-green>/< hair≡ shaved>/< body≡ extremely muscular/ looks like an orc>. Malacath mental:< stubborn& arrogant& violent>. Malacath occupation:< Daedric Prince of the Bloody Oath, Flesh and Bone>. Malacath speech:< commanding>.]",
                                "hidden": false,
                                "worldInfoId": "224060315"
                        },
                        {
                                "id": "12.13",
                                "keys": "hircine#[t=5l=3f=1S=2]",
                                "entry": "[ Hircine description:< name≡ Hircine>/< age≡ primeval>. Hircine summary:< appears≡ male>/< location≡ Hunting Grounds>. Hircine appearance:< skin≡ pale>/< eyes≡ red>/< has the head of a horned elk>. Hircine mental:< values hunters and bravery& >. Hircine occupation:< Daedric Prince of the Hunt>. Hircine speech:< commanding tone>.]",
                                "hidden": false,
                                "worldInfoId": "224060316"
                        },
                        {
                                "id": "12.14",
                                "keys": "na(e|)mi(i|)ra#[t=5l=3f=1S=2]",
                                "entry": "[ Namira description:< name≡ Namira& Naemira& Namiira& The Void>/< age≡ primeval>. Namira summary:< appears≡ female>/< location≡ Scuttling Void>. Namira appearance:< she has the form of a woman, but she's black as void and has no body features>. Namira mental:< arrogant>. Namira occupation:< Daedric Prince of Decay and Ancient Darkness>. Namira speech:< commandin tone>.]",
                                "hidden": false,
                                "worldInfoId": "224060317"
                        },
                        {
                                "id": "12.15",
                                "keys": "nocturnal|noctra#[t=5l=3f=1S=2]",
                                "entry": "[ Nocturnal description:< name≡ Nocturnal& Noctra >/< age≡ primeval>. Nocturnal summary:< appears≡ female>/< location≡ Evergloam>. Nocturnal appearance:< skin≡ pale>/< hair≡ long& black>. Nocturnal wearing:< long dark blue dress with cleavage and a hood>. Nocturnal mental:< arrogant& pedantic>. Nocturnal occupation:< Daedric Prince of Destruction, Blood, Flames, Disaster and Ambition>. Nocturnal speech:< pretentious& arrogant>.]",
                                "hidden": false,
                                "worldInfoId": "224060318"
                        },
                        {
                                "id": "12.16",
                                "keys": "peryite#[t=5l=3f=1S=2]",
                                "entry": "[ Peryite description:< name≡ Peryite& Taskmaster>/< age≡ primeval>. Peryite summary:< appears≡ male>/< location≡ Realm of Peryite>. Peryite appearance:< usually takes the form of a four-legged dragon>. Peryite mental:< sadistic& pestilent>. Peryite occupation:< Daedric Prince of Pestilence>.]",
                                "hidden": false,
                                "worldInfoId": "224060319"
                        },
                        {
                                "id": "12.17",
                                "keys": "jyggalag#[t=5l=3f=1S=2]",
                                "entry": "[ Jyggalag description:< name≡ Jyggalag>/< age≡ primeval>. Jyggalag summary:< appears≡ male>/< location≡ Jyggalag's Realm>/< is the antithesis of Sheogorath>. Jyggalag appearance:< has the form of a humanoid made of shiny silver crystals>. Jyggalag mental:< arrogant& obsessive& pretentious>. Jyggalag occupation:< Daedric Prince of Order>.]",
                                "hidden": false,
                                "worldInfoId": "224060320"
                        },
                        {
                                "id": "13.1",
                                "keys": "((ancient |)nord|) religion#[t=5l=3f=1S=2]",
                                "entry": "Nord Religion:[TYPE<Nord Religion>:religion;DESC<Nord Religion>:The Ancient Nords worshiped Totems/that became gods with their own names after Ysgramor came back to Skyrim. Each of these Totems became a god of the nord pantheon. These animals were there the Snake/the Hawk/the Dragon/the Fox/the Whale/the Owl/the Bear/the Wolf and the Moth. Just by listening to which animals the nords worshiped/you might be able to guess which gods they represent..]",
                                "hidden": false,
                                "worldInfoId": "224060321"
                        },
                        {
                                "id": "13.2",
                                "keys": "jhunal#[t=5l=3f=1S=2]",
                                "entry": "Jhunal:[TYPE<Jhunal>:god;SPHERE<Jhunal>:knowledge/widsom/mathematics;DESC<Jhunal>:Jhunal is represented by the Owl. He is the Rune God/and represents language/mathematics/knowledge and wisdom. He became Julianos in the Imperial Pantheon/and orders dedicated to him became keepers of the Elder Scrolls..]",
                                "hidden": false,
                                "worldInfoId": "224060322"
                        },
                        {
                                "id": "13.3",
                                "keys": "kyne#[t=5l=3f=1S=2]",
                                "entry": "Kyne:[TYPE<Kyne>:god;SPHERE<Kyne>:storms/mother god/wind;DESC<Kyne>:Kyne is the Hawk/and is out goddess of storms/the mother of all Nords. Kyne created the Nords atop the Snow Throat/and sent us to Altmora to fight against the elves. She is the wife of Shor/the nord Chief of Gods. With her aid/the Nords of old managed to learn to speak as dragons The Tongues and the Greybeards were created with her and because of her/to fight against the tyranny of Alduin. The Thu'um spoken by the dragons is roughly translated to Tamrielic as \"Storm Voice\"/in a reference to her. | Even the dragons acknowledge her/and call her Kaan. When Nords die/Kyne leads us to rest in Sovngarde..]",
                                "hidden": false,
                                "worldInfoId": "224060323"
                        },
                        {
                                "id": "13.4",
                                "keys": "orkey#[t=5l=3f=1S=2]",
                                "entry": "Orkey:[TYPE<Orkey>:god;SPHERE<Orkey>:death;DESC<Orkey>:Orkey is the Snake/and is the God of Death. He is a Testing God. Nords used to live as long as elves in the times of old. Orkey summoned Alduin/and the lifespan of the nords was eaten down to six years old/or \"bound them to the count of winters\" as the saying goes. High King Ysmir Wulfharth/who was turned into a boy/pleaded to Shor for help. Shor fought Alduin in Sovngarde/just as he did before Time had begun/and won the battle. | Most of the curse was thrown onto the nearby Orcs who worshiped Orkey as their patron. It was during this battle that Ysmir learned to use the Thu'um. Unfortunately/this battle cost his life. | In the Imperial Pantheon/Orkey became Arkay/the God of Life..]",
                                "hidden": false,
                                "worldInfoId": "224060324"
                        },
                        {
                                "id": "13.5",
                                "keys": "shor#[t=5l=3f=1S=2]",
                                "entry": "Shor:[TYPE<Shor>:god;SPHERE<Shor>:humankind/chief god;DESC<Shor>:Shor is the Fox/and is the Chief God of the nord pantheon. He's the husband of Kyne/and is the patron of mankind. The old Imperial religion knows him as Shezarr/while Bretons call him Sheor. He might also be known as Doom Drum/Sep/Lorkhan/Lorkh and Lorkhaj by other races. Shor/Stuhn and Tsun led the Nords against the elven armies of Auri-El and Trinimac in Atmora/in a war known as the War of Manifest Metaphors. After the war ended/the Nords settled there. This led to the death of Shor and Tsun. Trinimac tore out Shor's heart and hid it from the Nords/so the nords would never get their Chief God back..]",
                                "hidden": false,
                                "worldInfoId": "224060325"
                        },
                        {
                                "id": "13.6",
                                "keys": "mara#[t=5l=3f=1S=2]",
                                "entry": "Mara:[TYPE<Mara>:god;SPHERE<Mara>:love;DESC<Mara>:Mara is the Wolf. She's the goddess of love/and is the handmaiden of Kyne. When Alessia took the Nord Pantheon and modified it/she kept Mara as the goddess of love. But for the Empire/she is a matron goddess. The Nords know her as Kyne's handmaiden..]",
                                "hidden": false,
                                "worldInfoId": "224060326"
                        },
                        {
                                "id": "13.7",
                                "keys": "dibella#[t=5l=3f=1S=2]",
                                "entry": "Dibella:[TYPE<Dibella>:god;SPHERE<Dibella>:beauty/art/music;DESC<Dibella>:Dibella is the Moth/and she represents beauty/art and music. Some claim she was the mistress of Shor/but some believe that to be heresy. She is still worshiped in the Empire/but some places think her cult to be vulgar and inappropriate. That is also heresy to some..]",
                                "hidden": false,
                                "worldInfoId": "224060328"
                        },
                        {
                                "id": "13.8",
                                "keys": "tsun#[t=5l=3f=1S=2]",
                                "entry": "Tsun:[TYPE<Tsun>:god;SPHERE<Tsun>:adversity;DESC<Tsun>:Tsun is the Bear/and is the God of Adversity. He died during the War of Manifest Metaphors while protecting Shor/and his death is remembered as the beginning of the current world. He guards the Whalebone Bridge in Sovngarde/and only lets those worthy to pass the bridge and go into the Hall of Valor. He had great respect for magic/and was a master of the Voice..]",
                                "hidden": false,
                                "worldInfoId": "224060327"
                        },
                        {
                                "id": "13.9",
                                "keys": "Stuhn#[t=5l=3f=1S=2]",
                                "entry": "Stuhn:[TYPE<Stuhn>:god;SPHERE<Stuhn>:random/justice;DESC<Stuhn>:Stuhn is the Whale/and is the God of Ransom and Justice. He was the shield-thane of Shor/and brother of Tsun. He fought in the war against the ancient elves in Altmora/but lost his brother Tsun in the process. In the Imperial Pantheon/he became Stendarr..]",
                                "hidden": false,
                                "worldInfoId": "224060329"
                        },
                        {
                                "id": "14.1",
                                "keys": "(you).*(look|examine|inspect||appearance|stare).*#[t=0f=3l=3]",
                                "entry": "<< As you look, you focus on appearance noticing prominent features and details>>>>",
                                "hidden": false,
                                "worldInfoId": "224060330"
                        },
                        {
                                "id": "14.2",
                                "keys": "(You).*(loot|burgle|raid|despoil|divvy|ransack|pillage|steal).*[t=0l=3f=3]",
                                "entry": "<< Following detailed elaborate description, objects acquired>>>> << Item quality and type usual for circumstance>>>>",
                                "hidden": false,
                                "worldInfoId": "224060331"
                        }
                ],
                "gameCode": {
                        "onInput": "const { commandList } = state;\r\nconst { prefix, prefixSymbol } = state.config;\r\nconst modifier = (text) => {\r\n  let stop = false;\r\n  let modifiedText = nameReplace(text);\r\n  const lowered = modifiedText.toLowerCase();\r\n\r\n  if (!state.init && info.actionCount < 1) {\r\n    parseAsRoot(modifiedText, 'you');\r\n    grabAllBrackets(modifiedText);\r\n    state.character = {\r\n      name: state.placeholders[0].trim(),\r\n      gender: state.placeholders[1].trim(),\r\n      race: state.placeholders[2].trim(),\r\n      class: state.placeholders[3].trim(),\r\n      age: state.placeholders[4].trim(),\r\n      personality: limitCharacterDetails(state.placeholders[5]),\r\n      eyes: {\r\n        eyeColor: state.placeholders[6].trim()\r\n      },\r\n      hair: {\r\n        hairStyle: state.placeholders[7].trim(),\r\n        hairColor: state.placeholders[8].trim(),\r\n      },\r\n      appearance: {\r\n        height: state.placeholders[9].replace(DIGIT_REGEX, ''),\r\n        weight: state.placeholders[10].replace(DIGIT_REGEX, ''),\r\n        features: limitCharacterDetails(state.placeholders[11])\r\n      }\r\n    };\r\n\r\n    playerSheetWorldInfo = {\r\n      keys: `(${state.character.name}|you)#[t=0l=2f=2S=1]`,\r\n      hidden: true,\r\n      entry: 'you:['\r\n        + `NAME:${state.character.name}; `\r\n        + `SUMM:age<${state.character.age}y>/race<${state.character.race}>/${state.character.appearance.height}cm&${state.character.appearance.weight}kg; `\r\n        + `APPE<you>:${state.character.appearance.features}/eyes<${state.character.eyes.eyeColor}>/hair<${state.character.hair.hairStyle}&${state.character.hair.hairColor}>; `\r\n        + `MIND:${state.character.personality}.`\r\n        + ']'\r\n    };\r\n\r\n    playerInventoryWorldInfo = {\r\n      keys: `(${state.character.name}|you)#[t=1l=2f=2S=1]`,\r\n      hidden: true,\r\n      entry: 'you:['\r\n        + `WORN<you>:nothing; `\r\n        + `INV<you>:nothing.`\r\n        + ']'\r\n    };\r\n\r\n    addWorldEntry(playerInventoryWorldInfo.keys, playerInventoryWorldInfo.entry, false);\r\n    addWorldEntry(playerSheetWorldInfo.keys, playerSheetWorldInfo.entry, false);\r\n\r\n    getInventory();\r\n    parseRace(state.character);\r\n    parseClass(state.character);\r\n\r\n    state.enableInventory = true;\r\n    state.init = true;\r\n    modifiedText = modifiedText.replace(BRACKETS, '').replace(/You are.*\\n\\n/g, '');\r\n    delete state.placeholders;\r\n  }\r\n\r\n  const commandMatcher = modifiedText.match(prefix);\r\n  if (commandMatcher) {\r\n    console.log(`Command detected`);\r\n    console.log(commandMatcher);\r\n\r\n    stop = true;\r\n    modifiedText = '';\r\n\r\n    const commandName = commandMatcher[1].split(' ')[0];\r\n    const args = commandMatcher[1].replace(commandName, '') != null ? commandMatcher[1].replace(commandName, '').trim() : '';\r\n    if (!(commandName in commandList)) {\r\n      state.message = `Invalid command! Type ${prefixSymbol}scenarioHelp for a list of commands and ${prefixSymbol}scenarioHelp <command> for instructions on a specific command.`;\r\n      return { text: modifiedText, stop: stop };\r\n    }\r\n\r\n    const command = commandList[commandName];\r\n    if (command.args && !args.length) {\r\n      let reply = `You didn't provide any arguments!\\n`;\r\n      if (command.usage) {\r\n        reply += `Example: ${prefixSymbol}${command.name} ${command.usage}\\n`;\r\n      }\r\n\r\n      if (command.description) {\r\n        reply += `${command.description}`;\r\n      }\r\n\r\n      state.message = reply;\r\n      return { text: modifiedText, stop: stop };\r\n    }\r\n\r\n    try {\r\n      command.execute(args);\r\n      return { text: modifiedText, stop: stop };\r\n    } catch (error) {\r\n      state.message = `There was an error. Stacktrace:\\n${error}`;\r\n      console.log(`There was an error. Stacktrace:${error}`);\r\n    }\r\n  }\r\n\r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      if (encounterDB[encounter].inputLock) {\r\n        console.log(`Input checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      //for outputMod:\r\n      /*\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(`Output checking disabled on '${encounter}'.`)\r\n        continue globalLoop\r\n      }\r\n      */\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          // for outputs:\r\n          // modifiedText += ` ${curTextNote}`\r\n          modifiedText += `\\n${curTextNote}`\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      // if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n      if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      // modifiedText += ` ${curTextNote}`\r\n                      modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText, stop: stop };\r\n}\r\n\r\nmodifier(text);",
                        "onOutput": "const modifier = (text) => {\r\n  let modifiedText = text\r\n  const lowered = text.toLowerCase()\r\n  // BEGIN EWIJSON\r\n  if (state.generate.process) { parseGen(text); return { text: '' }; }\r\n  // END EWIJSON\r\n  \r\n  // BEGIN Encounters\r\n\r\n  // Debugging action counter: (uncomment to better check global timer-only encounters)\r\n  // state.displayStats = [{key:'Actions', value: `${info.actionCount}`}]\r\n\r\n  // encounter trigger processing\r\n  if (!state.currentEncounter) {\r\n    globalLoop:\r\n    for (encounter in encounterDB) { // go through encounters\r\n      console.log(`Global checking '${encounter}'...`)\r\n      /*\r\n      if (encounterDB[encounter].inputLock) {\r\n          console.log(\"Input checking disabled on this encounter.\")\r\n          continue globalLoop\r\n      }\r\n      */\r\n      //for outputMod:\r\n      if (encounterDB[encounter].outputLock) {\r\n        console.log(\"Output checking disabled on this encounter.\")\r\n        continue globalLoop\r\n      }\r\n\r\n      // limiting encounter recurrence:\r\n      if (state.limitedEncounters) {\r\n        limitLoop:\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == encounter) {\r\n            console.log(`'${encounter}' recurrence has an active limit.`)\r\n            if (limiter[1] > 0) {\r\n              console.log(`'${limiter[0]}' can still happen ${limiter[1]} times.`)\r\n              break limitLoop\r\n            } else {\r\n              console.log(`'${limiter[0]}' can't happen anymore.`)\r\n              continue globalLoop\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (typeof (state.cooldownEncounters) !== 'undefined') {\r\n        cooldownLoop:\r\n        for (cooldown of state.cooldownEncounters) {\r\n          if (cooldown[0] == encounter) {\r\n            console.log(`'${encounter}' has an active cooldown.`)\r\n            continue globalLoop\r\n          }\r\n        }\r\n      }\r\n      if (typeof (encounterDB[encounter].globalActionDelay) == 'undefined') {\r\n        console.log(`No global delay on '${encounterDB[encounter].encounterID}'!`)\r\n        globalActionDelay = 0\r\n      } else {\r\n        globalActionDelay = encounterDB[encounter].globalActionDelay\r\n      }\r\n      if (info.actionCount < globalActionDelay) {\r\n        console.log(`It's too early for '${encounterDB[encounter].encounterID}'.`)\r\n        continue globalLoop\r\n      }\r\n      console.log(`Hit more then ${globalActionDelay} total actions, allowing '${encounter}'!`)\r\n      if (encounterDB[encounter].triggers) {\r\n        console.log(`'${encounterDB[encounter].encounterID}' has triggers!`)\r\n        triggerLoop:\r\n        for (triggerStr of encounterDB[encounter].triggers) {\r\n          // console.log(triggerStr)\r\n          triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n          caughtTrigger = text.match(triggerRegEx)\r\n          if (caughtTrigger) {\r\n            console.log(`Caught '${caughtTrigger}', checking '${encounter}' chance...`)\r\n            if (!encounterDB[encounter].chance) {\r\n              console.log(`No chance on triggered '${encounterDB[encounter].encounterID}' detected, this is probably an error!`)\r\n            } else {\r\n              console.log(`${encounterDB[encounter].chance}% chance detected!`)\r\n              if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n                console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n                updateCurrentEncounter(encounter)\r\n                break globalLoop\r\n              } else {\r\n                console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        console.log(`None of the triggers of '${encounterDB[encounter].encounterID}' detected in (text), moving on.`)\r\n      } else {\r\n        console.log(`No triggers for '${encounter}' found, check chance...`)\r\n        if (encounterDB[encounter].chance) {\r\n          console.log(`${encounterDB[encounter].chance}% chance for '${encounter}' detected!`)\r\n          if (getRndInteger(1, 100) <= encounterDB[encounter].chance) {\r\n            console.log(`Rolled below ${encounterDB[encounter].chance} chance, running '${encounter}'!`)\r\n            updateCurrentEncounter(encounter)\r\n            break globalLoop\r\n          } else {\r\n            console.log(`Rolled above ${encounterDB[encounter].chance} chance, so no '${encounter}'!`)\r\n          }\r\n        } else {\r\n          console.log(`No chance on '${encounterDB[encounter].encounterID}' detected, so it's probably a chain-only encounter!`)\r\n          continue globalLoop\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // current encounter processing:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.activationDelay) {\r\n      console.log(`Delaying by ${state.currentEncounter.activationDelay} actions before running '${state.currentEncounter.encounterID}'!`)\r\n      state.currentEncounter.activationDelay -= 1\r\n    } else {\r\n      console.log(`No delay, running '${state.currentEncounter.encounterID}'!`)\r\n      // activating encounters:\r\n      updateCurrentEffects()\r\n      if (!state.currentEncounter.memoryAdded && state.currentEncounter.memoryAdd) {\r\n        if (!state.encounterMemories) {\r\n          state.encounterMemories = []\r\n        }\r\n        state.encounterMemories.push(state.currentEncounter.memoryAdd)\r\n        state.currentEncounter.memoryAdded = true\r\n      }\r\n\r\n      if (!state.currentEncounter.textInserted && state.currentEncounter.textNotes) {\r\n        curTextNote = getRndFromList(state.currentEncounter.textNotes)\r\n        // random wordlist inserts:\r\n        if (typeof (curTextNote) !== 'undefined') {\r\n          curTextNote = fillPlaceholders(curTextNote)\r\n          // for outputs:\r\n          modifiedText += ` ${curTextNote}`\r\n          // modifiedText += `\\n${curTextNote}`\r\n          state.currentEncounter.textInserted = true\r\n        }\r\n      }\r\n\r\n      if (!state.currentEncounter.WIadded && state.currentEncounter.addWI) {\r\n        for (WIentry in state.currentEncounter.addWI) {\r\n          console.log(`Adding '${state.currentEncounter.addWI[WIentry].keys}' WI entry.`)\r\n          addWorldEntry(state.currentEncounter.addWI[WIentry].keys, state.currentEncounter.addWI[WIentry].entry, state.currentEncounter.addWI[WIentry].hidden)\r\n        }\r\n        state.currentEncounter.WIadded = true\r\n      }\r\n\r\n      // branching encounters:\r\n      // for outputMod:\r\n      if (state.currentEncounter.branches && !state.currentEncounter.outputLock) {\r\n        // if (state.currentEncounter.branches && !state.currentEncounter.inputLock) {\r\n        branchLoop:\r\n        for (chkBranch of state.currentEncounter.branches) {\r\n          console.log(`Checking '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}'...`)\r\n\r\n          if (!chkBranch.branchChance) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chance, this is most likely an error!`)\r\n            continue branchLoop\r\n          }\r\n\r\n          if (chkBranch.branchTriggers) {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has triggers!`)\r\n            branchTriggerLoop:\r\n            for (triggerStr of chkBranch.branchTriggers) {\r\n              triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n              caughtTrigger = text.match(triggerRegEx)\r\n              if (caughtTrigger) {\r\n                console.log(`Caught trigger '${caughtTrigger}' for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', checking chance...`)\r\n                if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n                  console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n\r\n                  if (chkBranch.branchTextNotes) {\r\n                    curTextNote = getRndFromList(chkBranch.branchTextNotes)\r\n                    // random wordlist inserts:\r\n                    if (typeof (curTextNote) !== 'undefined') {\r\n                      curTextNote = fillPlaceholders(curTextNote)\r\n                      // for outputs:\r\n                      modifiedText += ` ${curTextNote}`\r\n                      // modifiedText += `\\n${curTextNote}`\r\n                      // state.currentEncounter.textInserted = true\r\n                    }\r\n                  }\r\n\r\n                  if (chkBranch.branchChained) {\r\n                    updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                    break branchLoop\r\n                  } else {\r\n                    console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no triggers, using pure chance!`)\r\n            if (getRndInteger(1, 100) <= chkBranch.branchChance) {\r\n              console.log(`Rolled below ${chkBranch.branchChance} chance for '${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}', branching!`)\r\n              if (chkBranch.branchTextNotes) {\r\n                modifiedText += ` ${getRndFromList(chkBranch.branchTextNotes)}`\r\n              }\r\n              if (chkBranch.branchChained) {\r\n                updateCurrentEncounter(getRndFromList(chkBranch.branchChained))\r\n                break branchLoop\r\n              } else {\r\n                console.log(`'${state.currentEncounter.encounterID}' branch '${chkBranch.branchID}' has no chained encounter, but this might be intentional.`)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // ending encounters:\r\n      if (typeof (state.currentEncounter) == 'undefined') {\r\n        console.log(`state.currentEncounter doesn't exist! This can happen due to branching.`)\r\n      } else {\r\n        if (state.currentEncounter.endTriggers) {\r\n          console.log(`${state.currentEncounter.encounterID} has end triggers!`)\r\n          for (triggerStr of state.currentEncounter.endTriggers) {\r\n            triggerRegEx = new RegExp(triggerStr, \"gi\")\r\n            caughtTrigger = text.match(triggerRegEx)\r\n            if (caughtTrigger) {\r\n              console.log(`Caught ${caughtTrigger}, ending '${state.currentEncounter.encounterID}'!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (typeof (state.currentEncounter) !== 'undefined') {\r\n          if (typeof (state.currentEncounter.duration) !== 'undefined') {\r\n            if (state.currentEncounter.duration > 0) {\r\n              console.log(`Keeping up ${state.currentEncounter.encounterID} for ${state.currentEncounter.duration} more actions!`)\r\n              state.currentEncounter.duration -= 1\r\n            } else {\r\n              console.log(`Duration of ${state.currentEncounter.encounterID} over!`)\r\n              if (state.currentEncounter.chained) {\r\n                console.log(`Detected chained encounter(s) on ${state.currentEncounter.encounterID}!`)\r\n                delete state.message\r\n                delete state.encounterNote\r\n                updateCurrentEncounter(getRndFromList(state.currentEncounter.chained))\r\n              } else {\r\n                updateCurrentEncounter()\r\n                updateCurrentEffects()\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No duration on ${state.currentEncounter.encounterID}, keeping it up infinitely!`)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    for (encounterMemory of state.encounterMemories) {\r\n      if (encounterMemory.memoryLingerDuration >= 1) {\r\n        console.log(`'${encounterMemory.memoryText}' will stay in memory for ${encounterMemory.memoryLingerDuration} more actions.`)\r\n        encounterMemory.memoryLingerDuration -= 1\r\n      } else {\r\n        console.log(`'${encounterMemory.memoryText}' will no longer stay in memory.`)\r\n        state.encounterMemories.splice(state.encounterMemories.indexOf(encounterMemory), 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (state.cooldownEncounters) {\r\n    console.log(`Cooldowns detected!`)\r\n    cooldownLoop:\r\n    for (cooldown in state.cooldownEncounters) {\r\n      if (state.cooldownEncounters[cooldown] == null) { // safety/legacy...\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n        continue cooldownLoop\r\n      }\r\n      console.log(`'${state.cooldownEncounters[cooldown][0]}' (${cooldown}) cooldown: ${state.cooldownEncounters[cooldown][1]}.`)\r\n      state.cooldownEncounters[cooldown][1] -= 1\r\n      if (state.cooldownEncounters[cooldown][1] <= 0) {\r\n        console.log(`${state.cooldownEncounters[cooldown][0]} cooldown over, removing.`)\r\n        state.cooldownEncounters.splice(cooldown, 1)\r\n      }\r\n    }\r\n    if (state.cooldownEncounters[0] == null) {\r\n      console.log(`No more cooldowns, removing array.`)\r\n      delete state.cooldownEncounters\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  return { text: modifiedText }\r\n}\r\n\r\n// Don't modify this part\r\nmodifier(text)\r\n",
                        "sharedLibrary": "const BRACKETED = /\\[(.*?)\\]/g;\r\nconst BRACKETS = /\\[|\\]/g;\r\nconst DIGIT_REGEX = /\\D/g;\r\nconst LETTER_REGEX = /[0-9]/g;\r\nconst PUNCTUATION_REMOVE = /[^\\w\\s]/gi;\r\nconst WEAPON_REGEX = new RegExp(/(crossbow|bow)/i);\r\nconst WORN_REGEX = new RegExp(`(?<=WORN<you>:)(.*)(?=;)`);\r\nconst INVENTORY_REGEX = new RegExp(`(?<=INV<you>:)(.*)(?=.)`);\r\n\r\nconst WEAPONS = [\r\n  \"dagger\", \"knife\", \"shuriken\", \"chakhram\", \"sword\", \"claymore\", \"zweihander\", \"rapier\",\r\n  \"epee\", \"kukri\", \"trident\", \"katana\", \"cutlass\", \"scimitar\", \"nodachi\", \"tanto\", \"naginata\",\r\n  \"spear\", \"pike\", \"axe\", \"halberd\", \"mace\", \"flail\", \"hammer\", \"pickaxe\", \"stiletto\", \"bow\"\r\n];\r\n\r\nconst CLOTHING = [\r\n  \"tunic\", \"breeches\", \"loincloth\", \"doublet\", \"cloak\", \"robe\", \"surcoat\", \"tabard\",\r\n  \"trousers\", \"skirt\", \"dress\", \"gown\", \"socks\", \"gloves\", \"top hat\", \"waistcoat\", \"kilt\",\r\n  \"cummerbund\", \"bowtie\", \"necktie\", \"tuxedo\", \"kimono\", \"karate gi\", \"toe socks\", \"sarong\",\r\n  \"scarf\", \"legwarmers\", \"trenchcoat\", \"jacket\", \"shorts\", \"leggings\", \"blouse\", \"sweater\",\r\n  \"cardigan\", \"wizard's hat\", \"feathered hat\", \"tutu\", \"rags\", \"armor\", \"jerkin\", \"shirt\",\r\n  \"clothes\", \"leathers\", \"hood\", \"cuirass\", \"chainmail\", \"gauntlets\", \"vambraces\", \"bracers\", \"tights\"\r\n];\r\n\r\n/**\r\n * Function that parses the character's race when they're created. This determines the innkeeper's behavior towards the player.\r\n * \r\n * @param {object} character\r\n */\r\nconst parseClass = (character) => {\r\n  let charClass = character.class.toLowerCase();\r\n  switch (charClass) {\r\n    case 'mage':\r\n      addToInventory('Apprentice Mage Robes', 1);\r\n      equipItem('Apprentice Mage Robes');\r\n      break;\r\n    case 'warrior':\r\n      addToInventory('Rusty Iron Sword', 1);\r\n      addToInventory('Rusty Iron Armor', 1);\r\n      equipItem('Rusty Iron Sword');\r\n      equipItem('Rusty Iron Armor');\r\n      break;\r\n    case 'ranger':\r\n      addToInventory('Wooden Bow', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Wooden Bow');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    case 'peasant':\r\n      addToInventory('White Jerkin', 1);\r\n      addToInventory('Brown Breeches', 1);\r\n      equipItem('White Jerkin');\r\n      equipItem('Brown Breeches');\r\n      break;\r\n    case 'thief':\r\n      addToInventory('Rusty Iron Dagger', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Rusty Iron Dagger');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    case 'assassin':\r\n      addToInventory('Rusty Iron Dagger', 1);\r\n      addToInventory('Leather Tights', 1);\r\n      equipItem('Rusty Iron Dagger');\r\n      equipItem('Leather Tights');\r\n      break;\r\n    default:\r\n      state.message = 'You have chosen a class that is not one of the options. You have no items.';\r\n      console.log('No valid class selected.');\r\n      break;\r\n  }\r\n}\r\n\r\n/**\r\n * Function that parses the character's race when they're created. This determines the innkeeper's behavior towards the player.\r\n * \r\n * @param {object} character\r\n */\r\nconst parseRace = (character) => {\r\n\r\n  let race = character.race.toLowerCase();\r\n  if (race.includes(\"orsimer\") || race.includes(\"orc\")) {\r\n    race = 'Orsimer/Orc';\r\n  } else if (race.includes(\"altmer\") || race.includes(\"high elf\")) {\r\n    race = 'Altmer/High Elf';\r\n  } else if (race.includes(\"dunmer\") || race.includes(\"dark elf\")) {\r\n    race = 'Dunmer/Dark Elf';\r\n  } else if (race.includes(\"bosmer\") || race.includes(\"wood elf\")) {\r\n    race = 'Bosmer/Wood Elf';\r\n  }\r\n}\r\n\r\n/**\r\n * Simple frunction to capitalize the first letter of a string\r\n * \r\n * @param {string} string \r\n */\r\nconst capitalize = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Limits player details provided in prompt to only three items\r\n * \r\n * @param {string} text \r\n */\r\nfunction limitCharacterDetails(text) {\r\n  console.log(`START limitCharacterDetails(): parsing character details: ${text}`);\r\n  return text.replace(/, /g, ',').split(',').slice(0, 3).join('/').trim();\r\n}\r\n\r\n/**\r\n * Finds an item in the player's inventory\r\n * @param {string} itemName \r\n */\r\nconst findItemInInventory = (itemName) => {\r\n  console.log(`START findItemInInventory(): Looking for item \"${itemName}\" in player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let itemFound = getInventory().find((item) => {\r\n    return item.name == loweredName;\r\n  });\r\n\r\n  if (typeof itemFound != 'undefined') {\r\n    console.log(`END findItemInInventory(): Item \"${itemName}\" found. Returning it.`);\r\n    return itemFound;\r\n  }\r\n\r\n  console.log(`END findItemInInventory(): Item \"${itemName}\" not found in inventory.`);\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Removes an item from player's inventory\r\n * \r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst removeFromInventory = (itemName, itemQuantity) => {\r\n  console.log(`START removeFromInventory(): Removing ${itemQuantity} instances of \"${itemName}\" from player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (!(item.quantity == itemQuantity) && (item.quantity > 1 && item.quantity >= itemQuantity)) {\r\n    console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n    item.quantity -= itemQuantity;\r\n    return `\\nYou have removed ${itemQuantity} ${loweredName} from your inventory.`;\r\n  }\r\n\r\n  let index = getInventory().indexOf(item);\r\n  getInventory().splice(index, 1);\r\n  updateInventory();\r\n  console.log(`END removeFromInventory(): Found ${item.quantity} instances of \"${itemName}\" in player's inventory. Removing ${itemQuantity} instances of it.`);\r\n  return `\\nYou have removed all ${loweredName} from your inventory.`;\r\n}\r\n\r\n/**\r\n * Checks player's inventory and returns what's inside\r\n */\r\nconst checkInventory = () => {\r\n\r\n  console.log(`START checkInventory(): Checking player's inventory.`);\r\n  if (getInventory().length > 0) {\r\n    let items = getInventory().map((item) => item.name).join(', ');\r\n    let itemsWorn = getInventory().filter((item) => item.status == 'worn').map((item) => item.name).join(', ');\r\n    console.log(`END checkInventory(): Player's inventory contains: ${items}.`);\r\n    return `\\nYour inventory contains: ${items}. Items equipped: ${itemsWorn}.`;\r\n  }\r\n\r\n  console.log(`END checkInventory(): Player's inventory is empty.`);\r\n  return `\\nYour inventory is empty.`;\r\n}\r\n\r\n/**\r\n * Returns player's inventory. If the array in undefined, define it\r\n */\r\nconst getInventory = () => {\r\n  console.log(`START getInventory(): verifying player's inventory.`);\r\n  if (typeof state.inventory == 'undefined') {\r\n    console.log(`INSIDE getInventory(): Inventory array is undefined. Declaring it with an empty array.`);\r\n    state.inventory = [];\r\n  }\r\n\r\n  console.log(`END getInventory(): player's inventory exists. Returning its contents.`);\r\n  return state.inventory;\r\n}\r\n\r\n/**\r\n * Adds item to player's inventory\r\n * @param {string} itemName \r\n * @param {integer} itemQuantity \r\n */\r\nconst addToInventory = (itemName, itemQuantity) => {\r\n\r\n  console.log(`START addToInventory(): adding ${itemQuantity} instances of \"${itemName}\" to player's inventory.`);\r\n  let loweredName = itemName.toLowerCase().replace(PUNCTUATION_REMOVE, '');\r\n  let item = findItemInInventory(loweredName);\r\n  if (typeof item == 'undefined') {\r\n    console.log(`INSIDE addToInventory(): Player has no other instances of this item in their inventory. Adding these.`);\r\n    item = {\r\n      name: loweredName,\r\n      quantity: itemQuantity,\r\n      status: 'in inventory',\r\n      type: getType(itemName)\r\n    };\r\n\r\n    state.inventory.push(item);\r\n  } else {\r\n    console.log(`INSIDE addToInventory(): Player already has other instances of this item in their inventory. Incrementing the quantity by ${itemQuantity}.`);\r\n    item.quantity = item.quantity + itemQuantity;\r\n  }\r\n\r\n  updateInventory();\r\n  console.log(`END addToInventory(): ${itemQuantity} instances of \"${itemName}\" added to player's inventory.`);\r\n  return `\\nYou have added ${itemQuantity} ${loweredName} to your inventory.`;\r\n}\r\n\r\n/**\r\n * Simple function to make the player equip something.\r\n * \r\n * @param {string} itemName \r\n */\r\nconst equipItem = (itemName) => {\r\n  console.log(`START equipItem(): equipping ${itemName}`);\r\n  const itemNameLowerCase = itemName.toLowerCase();\r\n  let itemToBeEquipped = findItemInInventory(itemNameLowerCase);\r\n  if (typeof itemToBeEquipped != 'undefined') {\r\n    const itemToBeEquippedIndex = state.inventory.findIndex(x => x.name == itemToBeEquipped.name);\r\n    console.log(`INSIDE equipItem(): ${itemName} exists in player's inventory`);\r\n    if (itemToBeEquipped.type != 'weapon' && itemToBeEquipped.type != 'clothing') {\r\n      console.log(`END equipItem(): item is not equippable.`);\r\n      return `\\n${capitalize(itemNameLowerCase)} is not an equippable item.`;\r\n    }\r\n\r\n    let playerWorldInfo = worldEntries.find(x => x.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n    let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n    let oldItem = getInventory().find(oldItem => oldItem.status == 'worn' && oldItem.type == itemToBeEquipped.type);\r\n    if (typeof oldItem != 'undefined') {\r\n      const oldItemIndex = state.inventory.findIndex(x => x.name == oldItem.name);\r\n      console.log(`INSIDE equipItem(): Player has another item of the same type equipped. Unequipping old item.`);\r\n      itemsWorn.replace(oldItem.name.toLowerCase(), '');\r\n      console.log(`INSIDE equipItem(): Removing worn status from ${oldItem.name}.`);\r\n      oldItem.status = 'in inventory';\r\n      state.inventory[oldItemIndex] = oldItem;\r\n    }\r\n\r\n    itemToBeEquipped.status = 'worn';\r\n    state.inventory[itemToBeEquippedIndex] = itemToBeEquipped;\r\n    itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n      .map((k) => {\r\n        console.log(`INSIDE equipItem(): worn item found in inventory -> ${k.name}`);\r\n        return k.name;\r\n      }).join('/');\r\n\r\n    console.log(`INSIDE equipItem(): finished building new WORN string -> ${itemsWorn}`);\r\n    playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n\r\n    console.log(`END equipItem(): ${itemToBeEquipped.name} has been equipped.`);\r\n    return `\\nYou are now ${itemToBeEquipped.type == 'weapon' ? 'wielding' : 'wearing'} ${itemToBeEquipped.name}.`;\r\n  }\r\n\r\n  console.log(`END equipItem(): Player does not have \"${itemNameLowerCase}\" in their inventory.`);\r\n  return `\\nYou do not have \"${itemNameLowerCase}\" in your inventory.`;\r\n}\r\n\r\n/**\r\n * Debugs your inventory and corrects the player's WI in case it fails\r\n */\r\nconst debugInventory = () => {\r\n  console.log(`START debugInventory(): debugging player's inventory`);\r\n  state.worldInfoIndex = worldEntries.findIndex(wi => wi.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n\r\n  let itemsWorn = playerWorldInfo.entry.match(WORN_REGEX)[0];\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n\r\n  itemsWorn = getInventory().filter((x) => x.status == 'worn')\r\n    .map((k) => {\r\n      console.log(`INSIDE debugInventory(): Updating player WI with worn items`);\r\n      return k.name;\r\n    }).join('/');\r\n\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE debugInventory(): Updating player WI with inventory items`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(WORN_REGEX, itemsWorn);\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n\r\n  console.log(\"INSIDE debugInventory(): Fixed player WI with inventory's items.\");\r\n  console.log(`END debugInventory(): Player's WI saved at index ${state.worldInfoIndex}.`);\r\n}\r\n\r\n/**\r\n * Updates the player's inventory and corrects the WI\r\n */\r\nconst updateInventory = () => {\r\n  console.log(`START updateInventory(): updating player's inventory and WI with current items`);\r\n  let playerWorldInfo = worldEntries.find(x => x.keys.includes('you)#[t=1l=2f=2S=1]'));\r\n  let itemsInInventory = playerWorldInfo.entry.match(INVENTORY_REGEX)[0];\r\n  itemsInInventory = getInventory().map((k) => {\r\n    console.log(`INSIDE updateInventory(): Sorting inventory items and quantities into player WI`);\r\n    return `${k.name}< quantity: ${k.quantity}>`;\r\n  }).join('/');\r\n\r\n  playerWorldInfo.entry = playerWorldInfo.entry.replace(INVENTORY_REGEX, itemsInInventory);\r\n  console.log(`END updateInventory(): updated player's inventory and WI with current items`);\r\n}\r\n\r\n/**\r\n * Function to determine item type\r\n * \r\n * @param {string} itemType\r\n */\r\nconst getType = (itemName) => {\r\n  const checker = (input) => {\r\n    return WEAPONS.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'weapon' :\r\n      CLOTHING.some(word => input.toLowerCase().includes(word.toLowerCase())) ? 'clothing' : 'misc';\r\n  }\r\n\r\n  return checker(itemName);\r\n}\r\n\r\n/**************************************************************************\r\n***************************************************************************\r\n***************************************************************************\r\n*********************** FUNCTIONS MADE BY OTHER DEVS **********************\r\n***************************************************************************\r\n***************************************************************************\r\n**************************************************************************/\r\n\r\n/**\r\n * Bracket handler by Gnurro.\r\n * \r\n * Removes backets from input text to handle them as placeholders\r\n * \r\n * @param {string} text\r\n */\r\nconst grabAllBrackets = (text) => {\r\n  for (entry of text.match(BRACKETED)) {\r\n    entry = entry.replace(BRACKETS, '');\r\n    if (!state.placeholders) {\r\n      state.placeholders = new Array();\r\n    }\r\n\r\n    state.placeholders.push(entry);\r\n  }\r\n\r\n  console.log(state.placeholders);\r\n}\r\n\r\n/**\r\n * Encounters by Gnurro.\r\n * \r\n * Makes random encounters possible in-game\r\n */\r\nencounterDB = {\r\n  /** Fight encounters */\r\n  wolfAttack: {\r\n    encounterID: 'wolfAttack',\r\n    triggers: [\"(spot|see|find).*wol(f|ves).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 80,\r\n    duration: 5,\r\n    messageString: `Wolf attack!`,\r\n    contextNotes: ['You are being attacked by a wolf!', 'A wolf is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*(wol(f|ves))\"],\r\n    textNotes: [\r\n      `You hear howling, not far from where you are. The howling gets closer, and you start to feel uneasy. You look around, trying to find where it's coming from, and when you turn around. It's a wolf!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packWolfAttack',\r\n        branchChance: 50,\r\n        branchTextNotes: [\r\n          `You hear howling, not far from where you are. The howling gets closer, and now it sounds like more than one. You look around, trying to find where it's coming from, and then you see it. It's a pack of wolves!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  bearAttack: {\r\n    encounterID: 'bearAttack',\r\n    triggers: [\"(spot|see|find).*bear(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Bear attack',\r\n    contextNotes: ['You are being attacked by a bear!', 'A bear is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*bear(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling. It's definetely a bear. You hear it getting close, and you start to feel uneasy. When you look to your right, you see it. It's a bear!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packBearAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [\r\n          `You hear some growling. It's definetely a bear. But it doesn't sound like just one. It's uncommon for bears to attack in groups, but you seem to haven been chosen. It's a sleuth of bears!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n  sabreCatAttack: {\r\n    encounterID: 'sabreCatAttack',\r\n    triggers: [\"(spot|see|find).*sabre cat(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 50,\r\n    duration: 5,\r\n    messageString: 'Sabre cat attack!',\r\n    contextNotes: ['You are being attacked by a sabre cat!', 'A sabre cat is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*sabre cat(|s)\"],\r\n    textNotes: [\r\n      `You hear some roaring, but you can't tell what animal it is. But it sounds angry... and hungry. You hear it getting close, and you start to feel uneasy. When you turn around... it's a sabre cat!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packSabreCatAttack',\r\n        branchChance: 10,\r\n        branchTextNotes: [`You hear some roaring... and it sounds like there's more than one animal tracking. You start to feel uneasy, as you're sure you're about to be attacked. When you turn arround... it's a pack of sabre cats!`],\r\n      }\r\n    ]\r\n  },\r\n  trollAttack: {\r\n    encounterID: 'trollAttack',\r\n    triggers: [\"(spot|see|find).*troll(|s).*\", '(walk|run|stroll|rid(e|ing)).*(woods|road(|s)*)', \"enter.*(cave|warren|thicket).*\"],\r\n    chance: 20,\r\n    duration: 5,\r\n    messageString: 'Troll attack!',\r\n    contextNotes: ['You are being attacked by a troll!', 'A troll is attacking you!'],\r\n    endTriggers: [\"(kill|scare).*troll(|s)\"],\r\n    textNotes: [\r\n      `You hear some growling and roaring. You can't tell what kind of creature is making this horrendous sound, but it's close. And getting closer. It's approaches you, and you turn to look at it. It's a troll!`\r\n    ],\r\n    outputLock: true,\r\n    inputLock: false,\r\n    branches: [\r\n      {\r\n        branchID: 'packTrollAttack',\r\n        branchChance: 5,\r\n        branchTextNotes: [\r\n          `You hear some growling and roaring. It sounds like more than one creature, and they're getting closer... when you think of looking around, they show themselves. Two trolls are attacking you!`\r\n        ],\r\n      }\r\n    ]\r\n  },\r\n\r\n  /** Weather */\r\n  weather: {\r\n    inputLock: true,\r\n    encounterID: 'weather',\r\n    chance: 50,\r\n    memoryAdd: {\r\n      memoryText: 'The weather has changed!',\r\n      memoryLocation: 'top',\r\n      memoryLingerDuration: 5\r\n    },\r\n    cooldown: 10,\r\n    duration: 0,\r\n    branches: [\r\n      {\r\n        branchTriggers: [\r\n          '.*(snow(|ing)|road|out(doors|side)|freezing|cold).*'\r\n        ],\r\n        branchID: 'weatherSnowStorm',\r\n        branchChance: 5,\r\n        branchChained: ['snowStorm']\r\n      },\r\n      {\r\n        branchTriggers: [\r\n          '.*(road|out(doors|side)|night).*'\r\n        ],\r\n        branchID: 'weatherBeautifulNight',\r\n        branchChance: 15,\r\n        branchChained: ['beautifulNight']\r\n      }\r\n    ]\r\n  },\r\n  snowStorm: {\r\n    inputLock: true,\r\n    encounterID: 'snowStorm',\r\n    messageString: 'A snow storm! Be careful! It will last for 10 actions!',\r\n    contextNotes: [\r\n      'A snow storm is here! Protect yourself or you\\'ll freeze to death!'\r\n    ],\r\n    textNotes: [\r\n      `The air starts to feel cold all of a sudden, and a freezing breeze touches you. You start shaking from the cold, and the wind gets faster. You can't see anything, as it's all white. You're caught in a snow storm!`\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50\r\n  },\r\n  beautifulNight: {\r\n    inputLock: true,\r\n    encounterID: 'beautifulNight',\r\n    messageString: 'It\\'s a beautiful night!',\r\n    contextNotes: [\r\n      'It\\'s a beautiful night!'\r\n    ],\r\n    textNotes: [\r\n      `You look up. The night sky is amazing! You can see the stars bright in the distance, and the aurora is shimmering in the sky like an ethereal snake. The night is bright because of the beautiful lights in the sky, and you just can't stop looking at them. It's too beautiful.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 50,\r\n  },\r\n\r\n  /** Random events */\r\n  rebellion: {\r\n    outputLock: true,\r\n    encounterID: 'rebellion',\r\n    chance: 1,\r\n    messageString: `A rebellion is happening!`,\r\n    memoryAdd: {\r\n      memoryText: `A rebellion is happening!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    cooldown: 20,\r\n    duration: 0,\r\n    chained: ['whiterunRebellion', 'riftenRebellion',]\r\n  },\r\n  whiterunRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'whiterunRebellion',\r\n    messageString: `The citizens of Whiterun are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Whiterun are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Whiterun. The citizens of the city are not in agreement with Jarl Yolanda's debauchery and parties. She seems to be partying all the time at the expense of the people's taxes!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  riftenRebellion: {\r\n    outputLock: true,\r\n    encounterID: 'riftenRebellion',\r\n    messageString: `The citizens of Riften are rebelling against the Jarl!`,\r\n    memoryAdd: {\r\n      memoryText: `The citizens of Riften are revolting against Jarl Erikur for his negligence towards people's safaty! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n      memoryLocation: \"top\",\r\n      memoryLingerDuration: 10\r\n    },\r\n    textNotes: [\r\n      `You hear rumors of a rebellion in Riften. The citizens are revolting against Jarl Erikur for his negligence towards people's safety! The Thieves Guild is growing, and people are getting mugged and robbed all the time, and the guards do nothing!`,\r\n    ],\r\n    cooldown: 20,\r\n    duration: 0,\r\n  },\r\n  tavernBrawl: {\r\n    encounterID: 'tavernBrawl',\r\n    triggers: [\r\n      '.*(bar|pub|tavern|inn|brawl(|ing|er(|s))).*'\r\n    ],\r\n    chance: 10,\r\n    cooldown: 10,\r\n    duration: 5,\r\n    branches: [\r\n      {\r\n        branchID: 'brawlWithYouBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithYou']\r\n      },\r\n      {\r\n        branchID: 'brawlWithBrawlersBranch',\r\n        branchChance: 5,\r\n        branchChained: ['brawlWithBrawlers']\r\n      }\r\n    ]\r\n  },\r\n  brawlWithYouBranch: {\r\n    encounterID: 'brawlWithYouBranch',\r\n    messageString: 'Someone challanged you to a brawl!',\r\n    contextNotes: [\r\n      `You're brawling with someone!`\r\n    ],\r\n    textNotes: [\r\n      `A random drunk man starts screaming at you for some reason. He's so drunk you can't really understand what he says. He charges at you, and punches you in the face.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  },\r\n  brawlWithBrawlers: {\r\n    encounterID: 'brawlWithBrawlers',\r\n    messageString: 'There are people brawling at the tavern!',\r\n    contextNotes: [\r\n      'People are brawling at the tavern!'\r\n    ],\r\n    textNotes: [\r\n      `Two guys are yelling at each other, they seem angry. One of them gets up from his chair and just punches the other one in the face. The man who got punched screams something unintelligible and charges at the other one. They're in a serious brawl.`,\r\n    ],\r\n    duration: 10,\r\n    cooldown: 20,\r\n  }\r\n}\r\n\r\n// word list stuff like gauntlet script:\r\nencounterWordLists = {\r\n  /* Remove this line (and the one below) to enable the example word lists\r\n  charClass:[\"mage\",\"fighter\",\"valkyrie\"],\r\n  pattern:[\"sprinkles\", \"dots\", \"lines\"],\r\n  color:[\"red\",\"blue\",\"green\",\"yellow\",\"orange\"],\r\n  amount:[\"many\",\"few\",\"all of them\"]\r\n   */ // Remove this line (and the one above) to enable the example word lists\r\n}\r\n\r\n// WI data imports:\r\nfor (WIentry of worldInfo) {\r\n  // encounters from WI:\r\n  // these will be lower priority then the hardcoded ones above!\r\n  if (WIentry.keys.includes('!encounterDef')) {\r\n    encounterDefFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterDef for '${encounterDefFromWI.encounterID}', adding it to the DB!`)\r\n    encounterDB[encounterDefFromWI.encounterID] = encounterDefFromWI\r\n  }\r\n  // word lists from WI:\r\n  if (WIentry.keys.includes('!encounterWordListsFull')) {\r\n    encounterWordListsFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found full WI encounterWordLists entry, adding them to the DB!`)\r\n    for (encounterSingleWordList in encounterWordListsFromWI) {\r\n      encounterWordLists[encounterSingleWordList] = Object.values(encounterWordListsFromWI[encounterSingleWordList])\r\n    }\r\n  }\r\n  if (WIentry.keys.includes('!encounterWordListSingle')) {\r\n    encounterWordListSingleFromWI = JSON.parse(WIentry.entry)\r\n    console.log(`Found WI encounterWordList, adding it to the DB!`)\r\n    encounterWordLists[Object.keys(encounterWordListSingleFromWI)[0]] = Object.values(encounterWordListSingleFromWI)\r\n  }\r\n}\r\n\r\n\r\n// encounter functions: (DON'T MESS WITH THESE!)\r\nfunction updateCurrentEncounter(encounterUpcoming) { // sets or clears currentEncounter; if argument empty, clears current encounter\r\n  // limiting encounter recurrence:\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.recurrenceLimit) {\r\n      if (!state.limitedEncounters) {\r\n        state.limitedEncounters = []\r\n        state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n      } else {\r\n        for (limiter of state.limitedEncounters) {\r\n          if (limiter[0] == state.currentEncounter.encounterID) {\r\n            console.log(`'${state.currentEncounter.encounterID}' recurrence already has a limit.`)\r\n            if (limiter[1] > 0) {\r\n              limiter[1] = limiter[1] - 1\r\n            }\r\n          } else {\r\n            state.limitedEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.recurrenceLimit - 1])\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (state.currentEncounter.cooldown) {\r\n      if (!state.cooldownEncounters) {\r\n        state.cooldownEncounters = []\r\n      }\r\n      state.cooldownEncounters.push([state.currentEncounter.encounterID, state.currentEncounter.cooldown])\r\n    }\r\n  }\r\n  if (encounterUpcoming) {\r\n    console.log(`Setting current encounter to '${encounterUpcoming}'.`)\r\n    state.currentEncounter = encounterDB[encounterUpcoming]\r\n    // random initial values handling:\r\n    randomizables = ['duration', 'activationDelay', 'cooldown']\r\n    for (encounterValue of randomizables) {\r\n      if (typeof (state.currentEncounter[encounterValue]) !== 'undefined') {\r\n        if (typeof (state.currentEncounter[encounterValue]) !== 'number' && state.currentEncounter[encounterValue].length == 2) {\r\n          console.log(`${encounterUpcoming} has random ${encounterValue}: ${state.currentEncounter[encounterValue]}`)\r\n          state.currentEncounter[encounterValue] = getRndInteger(state.currentEncounter[encounterValue][0], state.currentEncounter[encounterValue][1])\r\n          console.log(`${encounterUpcoming} random ${encounterValue} set to ${state.currentEncounter[encounterValue]}`)\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    console.log(\"Clearing current encounter.\")\r\n    delete state.currentEncounter\r\n  }\r\n}\r\n\r\nfunction updateCurrentEffects() { // 'activates' currentEncounter; or clears encounter effects if there is no active encounter\r\n  if (state.currentEncounter) {\r\n    if (state.currentEncounter.messageString) {\r\n      state.message = state.currentEncounter.messageString\r\n    }\r\n    if (state.currentEncounter.contextNotes) {\r\n      state.encounterNote = getRndFromList(state.currentEncounter.contextNotes)\r\n    }\r\n    if (state.currentEncounter.displayStatNotes) {\r\n      displayStatsUpdate(getRndFromList(state.currentEncounter.displayStatNotes))\r\n    }\r\n  } else {\r\n    delete state.message\r\n    delete state.encounterNote\r\n  }\r\n}\r\n\r\nfunction fillPlaceholders(placeHolderString) {\r\n  curPlaceholderMatches = placeHolderString.match(/\\{(.*?)\\}/g)\r\n  if (curPlaceholderMatches) {\r\n    console.log(`Matched placeholders: ${curPlaceholderMatches}`)\r\n    for (placeholder of curPlaceholderMatches) {\r\n      console.log(`Current placeholder: ${placeholder}`)\r\n      if (placeholder[1] == '*') {\r\n        console.log(`Current placeholder ${placeholder} contains a *, checking temporary word lists...`)\r\n        placeholder = placeholder.replace(/(\\*|{|})/gi, '')\r\n        if (typeof (tempWordLists) == 'undefined') {\r\n          tempWordLists = {}\r\n        }\r\n        if (!tempWordLists[placeholder] || tempWordLists[placeholder].length == 0) {\r\n          console.log(`${placeholder} temporary wordlist is either non-existant or empty! Getting a new one.`)\r\n          tempWordLists[placeholder] = JSON.parse(JSON.stringify(encounterWordLists[placeholder]))\r\n        }\r\n        console.log(`Current temporary word lists:${tempWordLists}`)\r\n        for (insertTag in tempWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag in temporary list: ${insertTag}`)\r\n            pickedInsert = getRndFromList(tempWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert from temporary list: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{\\\\*${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n            tempWordLists[placeholder].splice(tempWordLists[placeholder].indexOf(pickedInsert), 1)\r\n          }\r\n        }\r\n      } else {\r\n        for (insertTag in encounterWordLists) {\r\n          if (placeholder.includes(insertTag)) {\r\n            console.log(`Found fitting placeholder tag: ${insertTag}`)\r\n            pickedInsert = getRndFromList(encounterWordLists[insertTag])\r\n            console.log(`Randomly picked placeholder insert: ${pickedInsert}`)\r\n            insertRegEx = new RegExp(`{${insertTag}}`,)\r\n            placeHolderString = placeHolderString.replace(insertRegEx, pickedInsert)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    delete tempWordLists\r\n  }\r\n  return (placeHolderString)\r\n}\r\n\r\n// misc helper functions:\r\n// get random\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min)) + min\r\n}\r\n\r\n// list-picker, dynamically handles weighted lists\r\nfunction getRndFromList(list) {\r\n  if (list[0].length == 2) {\r\n    console.log(`${list} looks like a weighted list, doing that!`)\r\n    return (getRndFromListWeighted(list))\r\n  } else {\r\n    console.log(`${list} looks like a plain list, simply picking from it!`)\r\n    return (list[getRndInteger(0, list.length)])\r\n  }\r\n}\r\n\r\n// list picker for lists with weighted items:\r\n// currently works kinda like oldschool D&D encounter lists\r\nfunction getRndFromListWeighted(weightedList) {\r\n  cutOff = getRndInteger(1, 100)\r\n  console.log(`Picking from weighted list, cutoff: ${cutOff}`)\r\n  for (item of weightedList) {\r\n    console.log(`'${item[0]}' threshold: ${item[1]}.`)\r\n    if (cutOff <= item[1]) {\r\n      console.log(`'${item[0]}' cutoff below threshold, picking it!`)\r\n      return item[0]\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\n// displayStats handling:\r\nfunction displayStatsUpdate([inKey, inValue, inColor]) {\r\n  // if key already exists, update; else push new entry; if no value given, removes displayStat entry matching key, if it exists\r\n  if (!state.displayStats) {\r\n    state.displayStats = []\r\n  }\r\n  let displayStatUpdated = false\r\n  for (displayStat of state.displayStats) {\r\n    console.log(`Checking ${displayStat.key} displayStats entry...`)\r\n    let curDisplayStatIndex = state.displayStats.indexOf(displayStat)\r\n    if (displayStat.key == inKey) {\r\n      console.log(`Found ${inKey} displayStats entry: ${state.displayStats[curDisplayStatIndex].key}, ${state.displayStats[curDisplayStatIndex].value}, ${state.displayStats[curDisplayStatIndex].color}, updating!`)\r\n      if (inValue) {\r\n        if (typeof (inValue) == 'string') {\r\n          inValue = fillPlaceholders(inValue)\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        } else {\r\n          console.log(`Value to update displayStat entry inputted: '${inValue}', updating.`)\r\n          state.displayStats[curDisplayStatIndex].value = inValue\r\n        }\r\n      } else {\r\n        console.log(`No value to update displayStat inputted, removing entry.`)\r\n        state.displayStats.splice(curDisplayStatIndex, 1)\r\n        displayStatUpdated = true\r\n        break\r\n      }\r\n      if (inColor) {\r\n        state.displayStats[curDisplayStatIndex].color = fillPlaceholders(inColor)\r\n      }\r\n      displayStatUpdated = true\r\n      break\r\n    }\r\n  }\r\n  if (!displayStatUpdated) {\r\n    console.log(`No ${inKey} displayStats entry found, adding it!`)\r\n    state.displayStats.push({ 'key': inKey, 'value': inValue, 'color': inColor })\r\n  }\r\n}\r\n\r\n/**\r\n * Name synthesizer by Zaltys\r\n * \r\n * Removed unwanted names and replaces them with better ones\r\n * \r\n */\r\n// List the names you wish to replace with random ones in this const.\r\nconst BADNAMES = ['Ackerson', 'Alison', 'Annah', 'Anu', 'Arat', 'Arrorn', 'Ashton', 'Azajaja', 'Big Red',\r\n  'Brot', 'Brother Gray', 'Bucklesberg', 'Captain Dario', 'Captain Eckard', 'Captain Hayes', 'Captain Ian', 'Captain Illam', 'Carn',\r\n  'Castus', 'Cloudpeak', 'Count Gray', 'Count Grey', 'Dark Order', 'David', 'Delantium', 'Delerg', 'Dendrin', 'Derg',\r\n  'Dert', 'Dessel', 'Dorna', 'Dr. Kessel', 'Dr. Kovas', 'Drake', 'Draven', 'Durge', 'Ebony Claw', 'Elam',\r\n  'Eldolith', 'Eliza', 'Eternals', 'Father Féval', 'Father Tomas', 'Felkan', 'Flog', 'Garrick', 'Grolik', \"Gro'tesk\", 'Haygarth',\r\n  'Hessla', 'Holgard', 'Isabella', \"J'Arel\", 'Jacob', 'Jicol', 'Karth', 'Kelso',\r\n  'Klemto', 'Klyton', 'Kralmer', 'Kyros', 'Lenay', 'Lord Rostov', 'Ludmilla', 'Magos Cern', 'Meliodas',\r\n  'Merk', 'Mihrab', 'Mr. Demar', 'Mr. Gaange', 'Mr. Reynolds', 'Nalin', 'Nolazir', 'Null', 'Nuro', 'Oalkwardner',\r\n  'Olive', 'Olivia', 'Oren', 'Quala', 'Ragnor', 'Ral', 'Rask', 'Retlad', 'Roldan', 'Rolomag', 'Sheriff Buckly',\r\n  'Sir Ignate', 'Sodran', 'Svelk', 'Talia', 'Teckleville', 'The Craxil', 'The Ghoul King', 'The Great Lich Lord',\r\n  'The Nightmare Tyrant', 'Theo', 'Trelik', 'Tulan', 'Ulivik', 'Vaughn', 'Velzix', 'Wessel', 'Zalan', 'Zalmora', 'Zuzu'];\r\n\r\n// This shuffles the arrays.\r\nconst shuffle = array =>\r\n  [...Array(array.length)]\r\n    .map((...args) => Math.floor(Math.random() * (args[1] + 1)))\r\n    .reduce((a, rv, i) => ([a[i], a[rv]] = [a[rv], a[i]]) && a, array);\r\n\r\n// Generates and saves arrays; ran only once.\r\nfunction makeArrays() {\r\n  state.mid = [];\r\n  state.end = [];\r\n  list = state.names.map(x => x.substring(1)); // Trim beginning.\r\n  list.forEach(addMid);\r\n}\r\n\r\nfunction addMid(seg) { // Generate array of possible mid-segments.\r\n  while (seg.length > 3) {\r\n    if (state.mid.indexOf(seg.substring(0, 4)) === -1) { state.mid.push(seg.substring(0, 4)) };\r\n    seg = seg.substring(1);\r\n  }\r\n  state.end.push(seg);\r\n}\r\n\r\nfunction synthName() {\r\n  var name_length = state.names[Math.floor(Math.random() * state.names.length)].length - 1;\r\n  var base = state.names[Math.floor(Math.random() * state.names.length)];\r\n  if (base.length < 3) { return Base; }\r\n  else {\r\n    var nomen = base.substring(0, 3);\r\n    while (nomen.length < name_length) {\r\n      mid = shuffle(state.mid).find(x => nomen.substring(nomen.length - 2, nomen.length) == x.substring(0, 2))\r\n      if (mid) { nomen += mid.substring(2); }\r\n      else { name_length = 0; } // No valid segments found, just skip ahead.\r\n    }\r\n    var end = shuffle(state.end).find(x => nomen.substring(nomen.length - 1, nomen.length) == x.substring(0, 1));\r\n    if (end) { nomen += end.substring(1); }\r\n    return nomen;\r\n  }\r\n}\r\n\r\nfunction nameReplace(text) {\r\n  if (!state.names_setup) { setupNamelist(); }\r\n  for (name of BADNAMES) {\r\n    if (text.includes(name)) { text = text.replace(name, synthName()); }\r\n  }\r\n  return text;\r\n}\r\n\r\n// This giant list is the list of names that this generator uses as examples to synthesize new names.\r\n// You can replace it with a more specific list, such as names from certain culture.\r\n// To work well, you need at least 100 names on the list.\r\nfunction setupNamelist() {\r\n  state.names_setup = true;\r\n  state.names = [\"Aby\", \"Aage\", \"Aakesh\", \"Aanon\", \"Aarlen\", \"Aaron\", \"Aart\", \"Aasta\", \"Abarden\", \"Abbathor\", \"Abbathorn\", \"Abraham\", \"Abryn\",\r\n    \"Abu\", \"Acadia\", \"Achard\", \"Acheron\", \"Achim\", \"Achlarg\", \"Ada\", \"Adair\", \"Adalbert\", \"Adanac\", \"Adario\", \"Adeisteen\", \"Adelaide\",\r\n    \"Adelin\", \"Adelot\", \"Adeen\", \"Aden\", \"Adena\", \"Aderyn\", \"Adeva\", \"Adger\", \"Adia\", \"Adin\", \"Adina\", \"Aditu\", \"Adlay\",\r\n    \"Adolf\", \"Adolmus\", \"Adoniram\", \"Adraeran\", \"Adriaan\", \"Adriel\", \"Adrienne\", \"Aedha\", \"Aeiran\", \"Ael\", \"Aelgifu\", \"Aelis\", \"Aerdrie\",\r\n    \"Aeriel\", \"Aerin\", \"Aeris\", \"Aeriss\", \"Aeron\", \"Aeru'in\", \"Aeruin\", \"Aethelweard\", \"Aethon\", \"Aethyr\", \"Afra\", \"Agate\", \"Agatha\",\r\n    \"Agathon\", \"Agathos\", \"Agenor\", \"Agidius\", \"Agnar\", \"Agora\", \"Agrias\", \"Aguidran\", \"Aguilla\", \"Ahanna\", \"Ahmre\", \"Aicha\", \"Aidan\",\r\n    \"Aidaron\", \"Aiden\", \"Aidred\", \"Aidro\", \"Aidwin\", \"Aifreda\", \"Aifrida\", \"Aiker\", \"Aikikia\", \"Aikman\", \"Ailcaer\", \"Aileen\", \"Ailric\",\r\n    \"Ailvar\", \"Aimee\", \"Aimo\", \"Aino\", \"Ainu\", \"Aipheus\", \"Airalyn\", \"Aircristir\", \"Airen\", \"Airis\", \"Airmid\", \"Aisha\", \"Aislinn\",\r\n    \"Aithne\", \"Aitken\", \"Akebia\", \"Aki\", \"Akira\", \"Aksel\", \"Al\", \"Aladan\", \"Aladar\", \"Aladdin\", \"Alain\", \"Alaine\", \"Alais\",\r\n    \"Alan\", \"Alana\", \"Alanson\", \"Alardan\", \"Alaric\", \"Alarion\", \"Alaris\", \"Alaron\", \"Alastair\", \"Alastrina\", \"Alastyr\", \"Albaral\", \"Alberich\",\r\n    \"Alberik\", \"Alberon\", \"Albert\", \"Alberta\", \"Albin\", \"Albion\", \"Albrecht\", \"Albright\", \"Alcan\", \"Alcina\", \"Alda\", \"Aldaren\", \"Aldegond\",\r\n    \"Alden\", \"Aldert\", \"Aldhelm\", \"Aldis\", \"Aldrich\", \"Aldridge\", \"Aldus\", \"Aldwerth\", \"Aldwin\", \"Aldwulf\", \"Alea\", \"Alec\", \"Alena\",\r\n    \"Alers\", \"Ales\", \"Alessandra\", \"Alexander\", \"Alexei\", \"Alf\", \"Alfdis\", \"Alfgeir\", \"Alfhid\", \"Alfons\", \"Alford\", \"Alfred\", \"Algernon\",\r\n    \"Algus\", \"Alhana\", \"Ali\", \"Alia\", \"Alicia\", \"Aliendre\", \"Alienor\", \"Alin\", \"Aline\", \"Alineric\", \"Alisbone\", \"Alison\", \"Alistair\",\r\n    \"Alister\", \"Allaire\", \"Allard\", \"Allart\", \"Allene\", \"Alliston\", \"Almas\", \"Almer\", \"Almira\", \"Almroth\", \"Almu\", \"Aloise\", \"Alor\",\r\n    \"Alora\", \"Alorosaz\", \"Aloysius\", \"Alphons\", \"Alrik\", \"Alsop\", \"Althalus\", \"Altin\", \"Alton\", \"Alured\", \"Alvan\", \"Alvey\", \"Alvina\",\r\n    \"Alvord\", \"Alvred\", \"Alwen\", \"Alwyn\", \"Alya\", \"Alyanna\", \"Alyce\", \"Alyssa\", \"Alyvia\", \"Ama\", \"Amadis\", \"Amain\", \"Amalina\",\r\n    \"Aman\", \"Amanfea\", \"Amar\", \"Amarah\", \"Amber\", \"Ambros\", \"Amelia\", \"Ames\", \"Amethyst\", \"Amilion\", \"Amin\", \"Amina\", \"Amineh\",\r\n    \"Ammdar\", \"Amschel\", \"Amundi\", \"Anandra\", \"Anastasia\", \"Anatol\", \"Anatolia\", \"Ancarion\", \"Ancelyn\", \"Anclaiar\", \"Ancla´ar\", \"Andara'an\", \"Andaraan\",\r\n    \"Andemon\", \"Andni\", \"Andolan\", \"Andre\", \"Andrei\", \"Andrew\", \"Andrus\", \"Aneurin\", \"Anfar\", \"Angelica\", \"Angelina\", \"Angharad\", \"Angheryn\",\r\n    \"Angmar\", \"Angus\", \"Anici\", \"Anigh\", \"Anika\", \"Anita\", \"Anitra\", \"Anlaf\", \"Anna\", \"Annion\", \"Annora\", \"Anouar\", \"Anseim\",\r\n    \"Ansel\", \"Anskar\", \"Anson\", \"Antal\", \"Antalya´ar\", \"Antares\", \"Antheirne\", \"Anton\", \"Antone\", \"Antony\", \"Antrim\", \"Anvar\", \"Anya\",\r\n    \"Anzie\", \"Apad\", \"April\", \"Apthorp\", \"Aquill\", \"Arabel\", \"Arabella\", \"Arabeth\", \"Aradan\", \"Aradh\", \"Aragon\", \"Aragorn\", \"Arakin\",\r\n    \"Aralik\", \"Aranel\", \"Arania\", \"Arathorn\", \"Aravis\", \"Arawn\", \"Arax\", \"Araz\", \"Archibald\", \"Arcarune\", \"Arctor\", \"Ardal\", \"Arden\",\r\n    \"Arder\", \"Ardesh\", \"Ardis\", \"Areagne\", \"Arell\", \"Areta\", \"Aretas\", \"Argethlam\", \"Argoeth\", \"Ari\", \"Aria\", \"Ariad\", \"Arian\",\r\n    \"Arianth\", \"Aribeth\", \"Aric\", \"Arid\", \"Ariel\", \"Aries\", \"Arilyn\", \"Arioch\", \"Arka\", \"Arkadia\", \"Arkron\", \"Arkwright\", \"Arlaith\",\r\n    \"Arlan\", \"Arlana\", \"Arlean\", \"Arleano\", \"Arlo\", \"Arlya\", \"Armand\", \"Armar\", \"Armin\", \"Armitage\", \"Armo\", \"Armod\", \"Arn\",\r\n    \"Arnbella\", \"Arnesen\", \"Arnfinn\", \"Arngrim\", \"Arni\", \"Arnlaug\", \"Arno\", \"Arnold\", \"Arnor\", \"Arnora\", \"Arnot\", \"Arnthora\", \"Arnuif\",\r\n    \"Arnulf\", \"Arnvid\", \"Aron\", \"Arrah\", \"Arronax\", \"Arshavir\", \"Arshel\", \"Artemis\", \"Artemus\", \"Arthol\", \"Arthryn\", \"Arthur\", \"Artnistead\",\r\n    \"Artreyu\", \"Artur\", \"Arun\", \"Arvid\", \"Arvida\", \"Arving\", \"Arvo\", \"Arwen\", \"Arwin\", \"Aryen\", \"Aryion\", \"Aryon\", \"Aryus\",\r\n    \"Arzamark\", \"Asa\", \"Asaf\", \"Aschar\", \"Asfrid\", \"Asgard\", \"Asger\", \"Asgerd\", \"Asgrim\", \"Ash\", \"Ashan\", \"Ashane\", \"Ashburton\",\r\n    \"Ashcar\", \"Ashdown\", \"Ashgaroth\", \"Ashley\", \"Ashlyn\", \"Ashne'e\", \"Ashnici\", \"Ashur\", \"Asiria\", \"Askew\", \"Askold\", \"Aslak\", \"Aslan\",\r\n    \"Asleif\", \"Aslior\", \"Asperon\", \"Asta\", \"Astar\", \"Astinus\", \"Astnid\", \"Astnild\", \"Astoiphe\", \"Astra\", \"Astraea\", \"Astran\", \"Astrid\",\r\n    \"Astrin\", \"Atazra\", \"Athabasca\", \"Athana\", \"Athol\", \"Atiaran\", \"Atli\", \"Atmeh\", \"Atreyu\", \"Atropos\", \"Atticus\", \"Attor\", \"Atul\",\r\n    \"Aturin\", \"Atyre\", \"Aubrey\", \"Aud\", \"Audrey\", \"Audrianna\", \"Audric\", \"August\", \"Augustus\", \"Aule\", \"Aulius\", \"Aun\", \"Aura\",\r\n    \"Aurian\", \"Auril\", \"Aurion\", \"Aurora\", \"Avall\", \"Avarath\", \"Avascaen\", \"Avedar\", \"Aveole\", \"Avery\", \"Avon\", \"Avril\", \"Axel\",\r\n    \"Aya\", \"Ayame\", \"Ayaron\", \"Ayarèn\", \"Ayin\", \"Ayir\", \"Aylin\", \"Aylmer\", \"Ayrie\", \"Azeal\", \"Azeezeh\", \"Azgoth\", \"Azhrarn\",\r\n    \"Aziz\", \"Azmodeus\", \"Azrean\", \"Azreck\", \"Azriaz\", \"Aztira\", \"Azure\", \"Azuth\", \"Baba\", \"Babacar\", \"Babrak\", \"Babrine\", \"Babylos\",\r\n    \"Baduk\", \"Baern\", \"Baeron\", \"Baervan\", \"Bag\", \"Bahamut\", \"Baird\", \"Bal\", \"Balain\", \"Baldor\", \"Baldrick\", \"Balduin\", \"Baldur\",\r\n    \"Baldwin\", \"Balendar\", \"Balfour\", \"Balin\", \"Baliol\", \"Ballard\", \"Balor\", \"Balthasard\", \"Balthazar\", \"Bandobras\", \"Bane\", \"Baraca\", \"Barahir\",\r\n    \"Barak\", \"Baralan\", \"Baravar\", \"Barbara\", \"Bardach\", \"Bardel\", \"Bardi\", \"Bardsley\", \"Bardwell\", \"Barend\", \"Barent\", \"Baring\", \"Barll\",\r\n    \"Barlo\", \"Barlow\", \"Barnabas\", \"Barnas\", \"Barnus\", \"Barr\", \"Barret\", \"Barron\", \"Barry\", \"Barstow\", \"Barthel\", \"Bartle\", \"Bartnel\",\r\n    \"Barton\", \"Baslayan\", \"Bayard\", \"Beams\", \"Beatrix\", \"Bechir\", \"Beck\", \"Bede\", \"Bedegran\", \"Begnus\", \"Beldaran\", \"Beldas\", \"Belerion\",\r\n    \"Belgarath\", \"Belgarion\", \"Belita\", \"Bella\", \"Belle\", \"Bellin\", \"Bellinus\", \"Belloc\", \"Belrene\", \"Beltane\", \"Belva\", \"Ben\", \"Benekander\",\r\n    \"Bengt\", \"Benita\", \"Benoist\", \"Beorn\", \"Beowulf\", \"Bera\", \"Bercan\", \"Berek\", \"Berem\", \"Beren\", \"Bergen\", \"Bergthor\", \"Berim\",\r\n    \"Bern\", \"Berna\", \"Bernhart\", \"Bernt\", \"Berronar\", \"Berryn\", \"Bersi\", \"Berta\", \"Bertil\", \"Bertilde\", \"Bertram\", \"Bertran\", \"Bertrem\",\r\n    \"Beryl\", \"Besma\", \"Bestagar\", \"Beth\", \"Bevil\", \"Beyash\", \"Beylard\", \"Bhimrao\", \"Bhoskar\", \"Bhupindar\", \"Bidwell\", \"Bilbo\", \"Bile\",\r\n    \"Bilmar\", \"Bindon\", \"Bion\", \"Bipin\", \"Birath\", \"Birbeck\", \"Birchard\", \"Birger\", \"Birgit\", \"Birket\", \"Bisuneh\", \"Bjarni\", \"Bjorn\",\r\n    \"Bjornstern\", \"Blackwood\", \"Blade\", \"Blaen\", \"Blair\", \"Blame\", \"Blasco\", \"Blaze\", \"Bledsoe\", \"Blenda\", \"Bleran\", \"Blount\", \"Blunyc\",\r\n    \"Bninna\", \"Bo\", \"Bodil\", \"Bodvar\", \"Bolthorn\", \"Boner\", \"Booker\", \"Boott\", \"Boris\", \"Bork\", \"Borlace\", \"Bormor\", \"Boromir\",\r\n    \"Bors\", \"Botho\", \"Botolf\", \"Bourke\", \"Bowie\", \"Boyd\", \"Bracca\", \"Brace\", \"Bracken\", \"Brand\", \"Brandec\", \"Brangwen\", \"Brann\",\r\n    \"Brannon\", \"Branwell\", \"Branwen\", \"Breanon\", \"Bremen\", \"Brenna\", \"Brenner\", \"Brent\", \"Bress\", \"Bretaine\", \"Breyugar\", \"Brianna\", \"Bridget\",\r\n    \"Brielle\", \"Brigantu\", \"Brighton\", \"Brinn\", \"Brion\", \"Bristan\", \"Brita\", \"Brithael\", \"Brock\", \"Brockden\", \"Brodhead\", \"Brodribb\", \"Brogan\",\r\n    \"Bron\", \"Brona\", \"Bronwyn\", \"Bror\", \"Broun\", \"Bruna\", \"Bruno\", \"Brunt\", \"Brynhild\", \"Brynit\", \"Bryoni\", \"Bunnvor\", \"Bupu\",\r\n    \"Burcan\", \"Buri\", \"Burkard\", \"Buzurg\", \"Byam\", \"Byblos\", \"Byre\", \"Byrna\", \"Byrne\", \"Bysshe\", \"Cabell\", \"Cabillo\", \"Caddor\",\r\n    \"Caden\", \"Cadfael\", \"Cadmar\", \"Cadrach\", \"Cadwallader\", \"Caecyn\", \"Cael\", \"Caelon\", \"Caer\", \"Cai\", \"Cail\", \"Cairn\", \"Caitlin\",\r\n    \"Caladon\", \"Calandria\", \"Calbraith\", \"Calder\", \"Cale\", \"Caleb\", \"Calera\", \"Caliban\", \"Callan\", \"Callcott\", \"Calmic\", \"Calrohir\", \"Calumn\",\r\n    \"Calvert\", \"Camber\", \"Cambree\", \"Camiya\", \"Canina\", \"Caprice\", \"Cardon\", \"Caramon\", \"Carelia\", \"Carey\", \"Caribou\", \"Caris\", \"Carl\",\r\n    \"Carless\", \"Carli\", \"Carlyle\", \"Caryne\", \"Caron\", \"Carsten\", \"Carvell\", \"Caryl\", \"Cashin\", \"Caspian\", \"Cassandra\", \"Cassaway\", \"Cathal\",\r\n    \"Catherine\", \"Cathla'in\", \"Cathlain\", \"Cathlin\", \"Cayl\", \"Caylin\", \"Cecilia\", \"Cecily\", \"Cedric\", \"Cedrick\", \"Cedrim\", \"Celadae\", \"Celebdil\",\r\n    \"Celeborn\", \"Celeren\", \"Celes\", \"Celeste\", \"Celestine\", \"Celia\", \"Celowen\", \"Cemark\", \"Ceomyr\", \"Ceowulf\", \"Cercyon\", \"Ceremon\", \"Cerimon\",\r\n    \"Cerindar\", \"Cermor\", \"Cernd\", \"Ceryx\", \"Cespar\", \"Cevir\", \"Ceylinn\", \"Chaka\", \"Chalfant\", \"Challen\", \"Chamon\", \"Chanti\", \"Chard\",\r\n    \"Charissa\", \"Charlene\", \"Charlotte\", \"Chauncey\", \"Chauntea\", \"Chavir\", \"Chaya\", \"Checotah\", \"Chevonne\", \"Chevran\", \"Chichester\", \"Chimaera\", \"Chiodwig\",\r\n    \"Chiron\", \"Chittenden\", \"Chloe\", \"Christopher\", \"Chronepsis\", \"Chronos\", \"Chrowder\", \"Chuz\", \"Cid\", \"Cilmar\", \"Cinerva\", \"Cirkin\", \"Civar\",\r\n    \"Claed\", \"Clafin\", \"Claire\", \"Clarinda\", \"Claudia\", \"Cleghorn\", \"Clerihew\", \"Clinch\", \"Clipster\", \"Clopton\", \"Cloud\", \"Clover\", \"Clovis\",\r\n    \"Cnud\", \"Cnut\", \"Coalter\", \"Cobryn\", \"Coddry\", \"Coel\", \"Coela\", \"Cohn\", \"Colden\", \"Colgan\", \"Colmen\", \"Colon\", \"Colwyn\",\r\n    \"Coma\", \"Conall\", \"Conan\", \"Congal\", \"Conlan\", \"Conn\", \"Connell\", \"Connidas\", \"Connon\", \"Connop\", \"Conor\", \"Conrad\", \"Constantius\",\r\n    \"Conwy\", \"Conyasal\", \"Coprates\", \"Cora\", \"Coral\", \"Corbin\", \"Corellon\", \"Coren\", \"Corin\", \"Corinne\", \"Corinth\", \"Cormac\", \"Cornelius\",\r\n    \"Corrowr\", \"Corry\", \"Corryn\", \"Corwin\", \"Cotton\", \"Cowan\", \"Cowden\", \"Cowper\", \"Coyan\", \"Craigh\", \"Cray\", \"Crewzel\", \"Creydah\",\r\n    \"Cronyn\", \"Croyble\", \"Crundall\", \"Crynal\", \"Crysania\", \"Cryshandylin\", \"Cryunnos\", \"Cuall\", \"Cuane\", \"Cuddry\", \"Cuhaid\", \"Culiross\", \"Culkin\",\r\n    \"Cullen\", \"Cullyn\", \"Cuthalion\", \"Cuthbert\", \"Cylarus\", \"Cylie\", \"Cylmar\", \"Cymbeline\", \"Cyndor\", \"Cynoril\", \"Cyria\", \"Cyriel\", \"Cyrilla\",\r\n    \"Cyrillus\", \"Cyrus\", \"Cyryl\", \"Cythnar\", \"Cyton\", \"Daburn\", \"Daen\", \"Dagar\", \"Dagda\", \"Dagmar\", \"Dagni\", \"Dagny\", \"Dagwyn\",\r\n    \"Dahil\", \"Daikkah\", \"Daila\", \"Daila'in\", \"Daimhin\", \"Daimon\", \"Daisy\", \"Dakamon\", \"Dakoda\", \"Dalamar\", \"Dall\", \"Dalla\", \"Dallandra\",\r\n    \"Dalziel\", \"Damar\", \"Damien\", \"Damon\", \"Dana\", \"Danforth\", \"Daniel\", \"Dannun\", \"Dannyn\", \"Danu\", \"Danuvius\", \"Daood\", \"Daphin\",\r\n    \"Dara\", \"Daragor\", \"Darandriel\", \"Darell\", \"Darien\", \"Dario\", \"Darius\", \"Darkash\", \"Darkboon\", \"Darkspur\", \"Darlis\", \"Daron\", \"Darrell\",\r\n    \"Darrin\", \"Darvin\", \"Daryan\", \"Dashiell\", \"Dashwood\", \"Dasyani\", \"Dathan\", \"Dathanja\", \"Daugas\", \"David\", \"Davnet\", \"Davros\", \"Dawn\",\r\n    \"Dayyan\", \"Dekteon\", \"Delevan\", \"Delita\", \"Dell\", \"Dellin\", \"Delmund\", \"Demarest\", \"Demi\", \"Deminar\", \"Demtris\", \"Denethor\", \"Denhain\",\r\n    \"Denor\", \"Denton\", \"Denzil\", \"Deogol\", \"Derfel\", \"Derian\", \"Dermaria\", \"Derran\", \"Derroll\", \"Derval\", \"Dervilia\", \"Desmona\", \"Devabriel\",\r\n    \"Devaron\", \"Deveron\", \"Devra\", \"Dexter\", \"Dhakos\", \"Dhan\", \"Dharijor\", \"Dholemtrix\", \"Dhur\", \"Diadra\", \"Diagur\", \"Dian\", \"Diarmud\",\r\n    \"Diderik\", \"Diehi\", \"Dighton\", \"Dillon\", \"Dimura\", \"Dinham\", \"Dinivan\", \"Dino\", \"Dionetta\", \"Diony\", \"Dirk\", \"Dirrach\", \"Divos\",\r\n    \"Djamal\", \"Dmitri\", \"Doak\", \"Dolman\", \"Dolyan\", \"Domnu\", \"Donagh\", \"Donal\", \"Donblas\", \"Dongal\", \"Doniol\", \"Donivesh\", \"Donovan\",\r\n    \"Doral\", \"Dorea\", \"Dorian\", \"Dorin\", \"Dorn\", \"Dornhnall\", \"Dorr\", \"Dorsan\", \"Dorvai\", \"Dotta\", \"Doud\", \"Dougal\", \"Doust\",\r\n    \"Draco\", \"Dragan\", \"Dragus\", \"Dragutin\", \"Draka\", \"Drake\", \"Drako\", \"Dran\", \"Draoi\", \"Draven\", \"Drax\", \"Drayko\", \"Dred\",\r\n    \"Dreed\", \"Drexel\", \"Drezael\", \"Drezaem\", \"Drin\", \"Drinda\", \"Drion\", \"Drusilla\", \"Drynn\", \"Dréagg\", \"Duain\", \"Duald\", \"Duana\",\r\n    \"Duer\", \"Dugal\", \"Dugald\", \"Dugdale\", \"Dulasiri\", \"Dumathoin\", \"Dunbar\", \"Dundas\", \"Dunglas\", \"Dunnabar\", \"Dunstan\", \"Dunwody\", \"Duny\",\r\n    \"Dunya\", \"Dur-Shuk\", \"Duran\", \"Durek\", \"Durin\", \"Durnik\", \"Durward\", \"Dwarkanath\", \"Dweomer\", \"Dwyer\", \"Dyce\", \"Dyer\", \"Dygardo\",\r\n    \"Dyke\", \"Dylan\", \"Dymphna\", \"Dynar\", \"Dyneley\", \"Dynera\", \"Dynie\", \"Dytan\", \"Dyvim\", \"E'thane\", \"Eadweard\", \"Eager\", \"Eamon\",\r\n    \"Eanger\", \"Eardley\", \"Earle\", \"Earnest\", \"Eastman\", \"Ebany\", \"Ebba\", \"Eberhard\", \"Ebony\", \"Echael\", \"Eckert\", \"Eckhard\", \"Ector\",\r\n    \"Edcyl\", \"Edda\", \"Edeva\", \"Edgar\", \"Edina\", \"Edla\", \"Edmond\", \"Edmondstone\", \"Edric\", \"Edrie\", \"Edson\", \"Eduard\", \"Edwin\",\r\n    \"Edwina\", \"Edwyn\", \"Eevin\", \"Efiath\", \"Efrem\", \"Egan\", \"Egbert\", \"Egerton\", \"Egil\", \"Egon\", \"Egron\", \"Ehlreth\", \"Ehrman\",\r\n    \"Eilhard\", \"Eilif\", \"Eilinud\", \"Einar\", \"Eindrini\", \"Eirech\", \"Eirik\", \"Eiron\", \"Eithne\", \"Eivind\", \"Ekaterina\", \"Elaine\", \"Elath\",\r\n    \"Elbert\", \"Eldath\", \"Eldavon\", \"Eldgrim\", \"Eldid\", \"Eldin\", \"Eldon\", \"Eldred\", \"Eldric\", \"Eldrin\", \"Eldron\", \"Eldìvèn\", \"Eleanor\",\r\n    \"Eleazar\", \"Electa\", \"Elelil\", \"Elena\", \"Elendil\", \"Eleno'in\", \"Elentari\", \"Elerion\", \"Elessar\", \"Elfnida\", \"Elfnide\", \"Elfnieda\", \"Elford\",\r\n    \"Elhanan\", \"Eliakini\", \"Eliard\", \"Elinor\", \"Elion\", \"Eliseth\", \"Elispeth\", \"Elisseer\", \"Elistan\", \"Eliwood\", \"Elizabeth\", \"Ella\", \"Ellanath\",\r\n    \"Ellen\", \"Ellin\", \"Ellingwood\", \"Ellydryr\", \"Ellynor\", \"Elmeric\", \"Elmira\", \"Eloisa\", \"Elora\", \"Elowen\", \"Elrad\", \"Elric\", \"Elrik\",\r\n    \"Elrodin\", \"Elron\", \"Elrond\", \"Elsa\", \"Elsbeth\", \"Elsdon\", \"Elspeth\", \"Elswyth\", \"Elton\", \"Elu\", \"Elva\", \"Elvalind\", \"Elvarion\",\r\n    \"Elvin\", \"Elvina\", \"Elvira\", \"Elvrit\", \"Elvérion\", \"Elwell\", \"Elwin\", \"Elwyn\", \"Elysia\", \"Emberyl\", \"Emerynn\", \"Emirah\", \"Emma\",\r\n    \"Emna\", \"Emory\", \"Endemian\", \"Endicott\", \"Endoray\", \"Endrede\", \"Endsor\", \"Engeihard\", \"Enigma\", \"Enn\", \"Ennorath\", \"Envi\", \"Enzoray\",\r\n    \"Eolair\", \"Eomer\", \"Eosin\", \"Eowyn\", \"Ephyre\", \"Erana\", \"Erard\", \"Ercan\", \"Erdmann\", \"Erebor\", \"Ergon\", \"Erian\", \"Eric\",\r\n    \"Erich\", \"Erie\", \"Erik\", \"Erika\", \"Erilyth\", \"Erland\", \"Erlend\", \"Erling\", \"Ernald\", \"Ernan\", \"Ernata\", \"Errine\", \"Ervin\",\r\n    \"Eryka\", \"Eryn\", \"Esghar\", \"Eslin\", \"Esmeralda\", \"Esmond\", \"Esnar\", \"Essa\", \"Esselin\", \"Estheria\", \"Estrella\", \"Etelka\", \"Ethelbearn\",\r\n    \"Ethelbert\", \"Ethelburga\", \"Ethelred\", \"Ethelreda\", \"Eudo\", \"Eugene\", \"Eulala\", \"Evadne\", \"Evaine\", \"Evald\", \"Evan\", \"Evarts\", \"Evelina\",\r\n    \"Evelyn\", \"Everard\", \"Evert\", \"Evind\", \"Evo\", \"Evolyn\", \"Evska\", \"Ewald\", \"Ewen\", \"Ewugan\", \"Eystein\", \"Eyulf\", \"Eyvind\",\r\n    \"Ezail\", \"Ezellohar\", \"Ezirith\", \"Ezme\", \"Ezrabar\", \"Ezri\", \"Faber\", \"Fabian\", \"Fael\", \"Faelyn\", \"Fahs\", \"Fairfax\", \"Fairtnan\",\r\n    \"Falathar\", \"Falcon\", \"Falgar\", \"Fali\", \"Falias\", \"Falkiner\", \"Falmalinnar\", \"Falyrias\", \"Fanchon\", \"Fangorn\", \"Fanshaw\", \"Faraday\", \"Farah\",\r\n    \"Farale\", \"Faramir\", \"Faran\", \"Farathar\", \"Farid\", \"Farith\", \"Farli\", \"Farnham\", \"Farouk\", \"Farquhar\", \"Farrin\", \"Farwehl\", \"Fatima\",\r\n    \"Fausto\", \"Fawn\", \"Faysal\", \"Fea\", \"Feargus\", \"Fedor\", \"Feike\", \"Felam\", \"Felladin\", \"Fellador\", \"Fellathor\", \"Fellow\", \"Fenella\",\r\n    \"Fenton\", \"Fenwick\", \"Fera\", \"Ferantay\", \"Ferazhin\", \"Ferdinand\", \"Fergus\", \"Fernand\", \"Feron\", \"Feustmann\", \"Fhinders\", \"Fhorgeir\", \"Fiana\",\r\n    \"Fiathna\", \"Fielding\", \"Fikir\", \"Filippe\", \"Finarfin\", \"Finbar\", \"Findegil\", \"Findley\", \"Finegan\", \"Fingal\", \"Fingalla\", \"Fingil\", \"Finias\",\r\n    \"Finn\", \"Finnbogi\", \"Finos\", \"Fiona\", \"Fiorag\", \"Fiori\", \"Firca\", \"Firin\", \"Firon\", \"Firozhan\", \"Fistandantilus\", \"Fistar\", \"Fistor\",\r\n    \"Fitzedward\", \"Fitzroy\", \"Fizban\", \"Fjolnir\", \"Flandrena\", \"Flare\", \"Flavius\", \"Flint\", \"Floki\", \"Florimund\", \"Flosi\", \"Flygare\", \"Flynn\",\r\n    \"Fnida\", \"Fomorii\", \"Forbus\", \"Forester\", \"Fornost\", \"Foronte\", \"Fothergill\", \"Francisco\", \"Frayja\", \"Freda\", \"Frederic\", \"Frederica\", \"Frederick\",\r\n    \"Fredrick\", \"Fredrik\", \"Freeborn\", \"Freeman\", \"Frey\", \"Freya\", \"Freydis\", \"Fridgeir\", \"Frodo\", \"Fryniwyd\", \"Fuad\", \"Fumorak\", \"Furnifold\",\r\n    \"Fury\", \"Fyodor\", \"Fyodr\", \"Fyza\", \"Gaarn\", \"Gabniela\", \"Gabriel\", \"Gadsby\", \"Gaea\", \"Gael\", \"Gaelinar\", \"Gaena\", \"Gaerdal\",\r\n    \"Gaillard\", \"Gairdner\", \"Galach\", \"Galadren\", \"Galan\", \"Galanna\", \"Galapas\", \"Galaphon\", \"Galar\", \"Galbard\", \"Galderon\", \"Galdor\", \"Gale\",\r\n    \"Galeia\", \"Galen\", \"Galfrey\", \"Galion\", \"Galrandar\", \"Galrion\", \"Gama\", \"Gandalf\", \"Ganduil\", \"Ganith\", \"Gannon\", \"Ganvan\", \"Gardi\",\r\n    \"Garet\", \"Gareth\", \"Garion\", \"Garith\", \"Garl\", \"Garland\", \"Garlenon\", \"Garn\", \"Garon\", \"Garrick\", \"Garrott\", \"Garth\", \"Gartnas\",\r\n    \"Garvin\", \"Garwood\", \"Gaston\", \"Gavendra\", \"Gavin\", \"Gavina\", \"Gawain\", \"Gealsgiath\", \"Gebhard\", \"Geir\", \"Geirmund\", \"Geirstein\", \"Gelonna\",\r\n    \"Genevieve\", \"Geoffrey\", \"Georgii\", \"Gerald\", \"Gerard\", \"Gerd\", \"Gerhard\", \"Gerhart\", \"Gerloc\", \"Gerrard\", \"Gerreint\", \"Gerrish\", \"Gertrude\",\r\n    \"Gervaise\", \"Gesin\", \"Gest\", \"Ghirra\", \"Ghislain\", \"Gholson\", \"Gia\", \"Gibbon\", \"Gilberta\", \"Gilda\", \"Gilden\", \"Gildersleeve\", \"Giles\",\r\n    \"Gilfanon\", \"Gilian\", \"Gilir\", \"Gilli\", \"Gillion\", \"Gillyn\", \"Gilm\", \"Gilraen\", \"Gilthanas\", \"Gimli\", \"Gird\", \"Girin\", \"Gisgin\",\r\n    \"Gizur\", \"Gladstone\", \"Glassford\", \"Glebur\", \"Gleda\", \"Gleocyn\", \"Gleridower\", \"Glida\", \"Glogan\", \"Gloisur\", \"Glorfindel\", \"Glugwyn\", \"Glum\",\r\n    \"Glyn\", \"Glynn\", \"Gnazia\", \"Godfred\", \"Godfrey\", \"Godwin\", \"Goibhniu\", \"Golding\", \"Goldwin\", \"Gollum\", \"Gongalo\", \"Goodhue\", \"Gorbash\",\r\n    \"Gordalius\", \"Gorias\", \"Gorion\", \"Gorm\", \"Gotthard\", \"Govier\", \"Govind\", \"Gowen\", \"Grace\", \"Graham\", \"Graine\", \"Gralon\", \"Grani\",\r\n    \"Grania\", \"Gravin\", \"Greegan\", \"Greenleaf\", \"Gregor\", \"Gregory\", \"Grendahl\", \"Greyfell\", \"Grian\", \"Gridley\", \"Griffid\", \"Griffin\", \"Griffith\",\r\n    \"Griggs\", \"Grim\", \"Grima\", \"Grimhilda\", \"Grimnir\", \"Grindan\", \"Griniing\", \"Grisha\", \"Griswold\", \"Groa\", \"Grover\", \"Grunak\", \"Grunnhild\",\r\n    \"Gruumsh\", \"Gualat\", \"Gudmund\", \"Gudmundur\", \"Gudrid\", \"Gudris\", \"Gudrun\", \"Guibert\", \"Guida\", \"Guido\", \"Gulian\", \"Gunila\", \"Gunnar\",\r\n    \"Gunning\", \"Gunther\", \"Gurnarok\", \"Gurney\", \"Gustav\", \"Guthorm\", \"Guthrie\", \"Guthum\", \"Gutzon\", \"Guy\", \"Gwacyn\", \"Gwaihir\", \"Gweddyn\",\r\n    \"Gwen\", \"Gwenca\", \"Gwenda\", \"Gwendolyn\", \"Gwenevere\", \"Gweniver\", \"Gwildor\", \"Gwoc\", \"Gwomyr\", \"Gwydion\", \"Gwyn\", \"Gwyneth\", \"Gwynfryd\",\r\n    \"Gwyran\", \"Gwythinn\", \"Gyda\", \"Gylian\", \"Gymir\", \"Haakon\", \"Habib\", \"Hablot\", \"Hack\", \"Haddon\", \"Hadrian\", \"Haestan\", \"Hafez\",\r\n    \"Hafgrim\", \"Hagar\", \"Haigh\", \"Hakatri\", \"Haki\", \"Hakon\", \"Halbert\", \"Halcyon\", \"Haldane\", \"Haldor\", \"Hale\", \"Halfdan\", \"Haliina\",\r\n    \"Hall\", \"Halldis\", \"Halldor\", \"Halley\", \"Hallfred\", \"Hallfrid\", \"Hallgerd\", \"Hallkel\", \"Hallock\", \"Halloweii\", \"Hallveig\", \"Halvord\", \"Hamlin\",\r\n    \"Hamnet\", \"Hanford\", \"Hani\", \"Haninah\", \"Hannibal\", \"Hanoran\", \"Hansine\", \"Hapweth\", \"Harald\", \"Harbaugh\", \"Harcourt\", \"Hardernan\", \"Hardon\",\r\n    \"Hardwicke\", \"Harek\", \"Harkness\", \"Harlan\", \"Harlo\", \"Harold\", \"Haroon\", \"Harpo\", \"Harren\", \"Harthan\", \"Harthran\", \"Hartpole\", \"Hartwig\",\r\n    \"Harwood\", \"Hasket\", \"Hassan\", \"Hastein\", \"Hatcher\", \"Hattrick\", \"Hauk\", \"Havard\", \"Havelock\", \"Hayvan\", \"Hazard\", \"Hazel\", \"Haziran\",\r\n    \"Hazrond\", \"Healdon\", \"Heardred\", \"Heaslip\", \"Heather\", \"Hector\", \"Hedda\", \"Hedin\", \"Hedwig\", \"Heimer\", \"Helena\", \"Helga\", \"Helgi\",\r\n    \"Helir\", \"Helix\", \"Helm\", \"Helma\", \"Helmi\", \"Heman\", \"Hemming\", \"Hendrik\", \"Hengist\", \"Henna\", \"Henrick\", \"Henry\", \"Geramon\",\r\n    \"Herdis\", \"Herekin\", \"Hereward\", \"Herijar\", \"Hermione\", \"Heron\", \"Hertha\", \"Heryom\", \"Herzog\", \"Heward\", \"Hhaba'id\", \"Hhabezur\", \"Hickling\",\r\n    \"Hidohebhi\", \"Hifryn\", \"Hild\", \"Hilda\", \"Hildebrand\", \"Hildegarde\", \"Hildric\", \"Himli\", \"Hisar\", \"Hislop\", \"Hjalmar\", \"Hjalti\", \"Hjeldin\",\r\n    \"Hjort\", \"Hjorth\", \"Hlif\", \"Hoadley\", \"Hoar\", \"Hobart\", \"Hodgdon\", \"Hogg\", \"Hogni\", \"Holbrook\", \"Holger\", \"Holgi\", \"Hollister\",\r\n    \"Holly\", \"Homli\", \"Hookham\", \"Horan\", \"Horatio\", \"Hord\", \"Horik\", \"Hormstein\", \"Horsa\", \"Hortensia\", \"Horton\", \"Hoskuld\", \"Hosni\",\r\n    \"Hossein\", \"Howarth\", \"Howland\", \"Hrafn\", \"Hrapp\", \"Hrefna\", \"Hrethel\", \"Hring\", \"Hroald\", \"Hrodyn\", \"Hrolf\", \"Hrothgar\", \"Hrugan\",\r\n    \"Hruggek\", \"Hruse\", \"Hrut\", \"Huffatn\", \"Hulbeart\", \"Hulda\", \"Hultz\", \"Humbert\", \"Hunter\", \"Hurd\", \"Hurgal\", \"Hurvin\", \"Hussain\",\r\n    \"Hustana\", \"Hyarantar\", \"Hyarante\", \"Hyder\", \"Hyfryn\", \"Hygelac\", \"Hylissa\", \"Hynman\", \"Hyrak\", \"Ian\", \"Iana\", \"Ibitz\", \"Ibrahim\",\r\n    \"Ibrandul\", \"Ica\", \"Icarus\", \"Icava\", \"Ick\", \"Ida\", \"Idarolan\", \"Iden\", \"Idris\", \"Iduna\", \"Iduné\", \"Ies'lorn\", \"Igjaru\",\r\n    \"Igor\", \"Ikarin\", \"Ilena\", \"Ilermath\", \"Ilia\", \"Iliriya\", \"Illentik\", \"Illuin\", \"Illyana\", \"Ilmare\", \"Ilniora\", \"Ilthoss\", \"Iluvatar\",\r\n    \"Ilya\", \"Ilyesha\", \"Imajin\", \"Imnar\", \"Imoen\", \"Imphela\", \"Imrador\", \"Imrahan\", \"Imrahim\", \"Imril\", \"Imryr\", \"Inahwen\", \"Indech\",\r\n    \"Indigo\", \"Indira\", \"Indreju\", \"Indria\", \"Ingald\", \"Ingeborg\", \"Ingen\", \"Ingi\", \"Ingirid\", \"Ingolf\", \"Ingram\", \"Ingrid\", \"Ingunn\",\r\n    \"Inifael\", \"Inigo\", \"Inisfa'il\", \"Iosaz\", \"Iosef\", \"Irgash\", \"Irial\", \"Irian\", \"Iris\", \"Irma\", \"Irphilin\", \"Irsai\", \"Irvin\",\r\n    \"Irwick\", \"Isael\", \"Isak\", \"Isambard\", \"Isbeorn\", \"Iscal\", \"Iselore\", \"Isengard\", \"Isengrim\", \"Iserion\", \"Isgrimnur\", \"Ishmael\", \"Isidora\",\r\n    \"Isiki\", \"Isildur\", \"Isilith\", \"Isleif\", \"Ismail\", \"Isolde\", \"Isorn\", \"Issak\", \"Ithaca\", \"Iuz\", \"Ivan\", \"Ivar\", \"Ivor\",\r\n    \"Ivy\", \"Iwanda\", \"Iyu'nigato\", \"Izard\", \"Izebel\", \"Izvire\", \"Jace\", \"Jacinth\", \"Jacoby\", \"Jacor\", \"Jade\", \"Jaden\", \"Jadzia\",\r\n    \"Jael\", \"Jaffar\", \"Jagadis\", \"Jaheira\", \"Jahrec\", \"Jahverbhai\", \"Jalasil\", \"Jalavier\", \"Jaligal\", \"Jamila\", \"Janda'nan\", \"Jandanan\", \"Janix\",\r\n    \"Janna\", \"Janus\", \"Janvel\", \"Jarak\", \"Jarazal\", \"Jared\", \"Jarek\", \"Jarnagua\", \"Jarriel\", \"Jarvin\", \"Jasara\", \"Jasek\", \"Jaseve\",\r\n    \"Jasha\", \"Jasmine\", \"Jason\", \"Javair\", \"Javon\", \"Jawaharial\", \"Jayce\", \"Jayden\", \"Jaylidan\", \"Jayna\", \"Jaysen\", \"Jazhara\", \"Jazrel\",\r\n    \"Jedd\", \"Jeffen\", \"Jehryn\", \"Jelyn\", \"Jenantar\", \"Jenkin\", \"Jennifer\", \"Jens\", \"Jensine\", \"Jephson\", \"Jerec\", \"Jeryth\", \"Jesiper\",\r\n    \"Jespar\", \"Jesslyn\", \"Jestyn\", \"Jethis\", \"Jevan\", \"Jevist\", \"Jezryanadar\", \"Jhael\", \"Jhaelen\", \"Jhany\", \"Jhardamòr\", \"Jharkor\", \"Jhary\",\r\n    \"Jihad\", \"Jillian\", \"Jingizu\", \"Jintah\", \"Jiriki\", \"Jirnost\", \"Jocelyn\", \"Jochan\", \"Johannes\", \"John\", \"Jolan\", \"Jomano\", \"Jonaya\",\r\n    \"Joran\", \"Jordan\", \"Joriel\", \"Jornadesh\", \"Jorunn\", \"Joscelyn\", \"Joseph\", \"Josephine\", \"Josette\", \"Joshua\", \"Jotham\", \"Jovena\", \"Jubini\",\r\n    \"Jullana\", \"Junius\", \"Juno\", \"Juntalin\", \"Jura\", \"Jurim\", \"Jusif\", \"Juss\", \"Jyresh\", \"K'aarna\", \"Kaarna\", \"Kael\", \"Kaelin\",\r\n    \"Kaffa\", \"Kai\", \"Kaia\", \"Kailyn\", \"Kaimana\", \"Kaitlinn\", \"Kaja\", \"Kalan\", \"Kalantir\", \"Kalar\", \"Kaldar\", \"Kaleen\", \"Kalen\",\r\n    \"Kalf\", \"Kalia\", \"Kalina\", \"Kalvan\", \"Kalvaro\", \"Kalyra\", \"Kalysha\", \"Kamril\", \"Kamshir\", \"Kanoa\", \"Kaori\", \"Kaprin\", \"Kara\",\r\n    \"Karali\", \"Karel\", \"Karelia\", \"Kari\", \"Karim\", \"Karinca\", \"Karine\", \"Karis\", \"Karitsa\", \"Karker\", \"Karl\", \"Karlsefni\", \"Karran\",\r\n    \"Karya\", \"Kaschak\", \"Kasia\", \"Kaspar\", \"Kasreyn\", \"Kathena\", \"Kathran\", \"Katishimo\", \"Katla\", \"Katnina\", \"Katrin\", \"Katrina\", \"Kavalam\",\r\n    \"Kavalnir\", \"Kaylianna\", \"Kaylin\", \"Kazairl\", \"Kazalim\", \"Kazir\", \"Keavy\", \"Keelan\", \"Kegan\", \"Keiko\", \"Keldorn\", \"Kelin\", \"Kellin\",\r\n    \"Kelma'in\", \"Kelson\", \"Kelth\", \"Kelvin\", \"Kemble\", \"Kendall\", \"Kendra\", \"Kendrick\", \"Kenesaw\", \"Kenin\", \"Kenny\", \"Kenobi\", \"Kenrick\",\r\n    \"Kerik\", \"Kerish\", \"Kermit\", \"Kerrigan\", \"Keshar\", \"Kesrick\", \"Kethios\", \"Ketial\", \"Ketil\", \"Kettali\", \"Kevan\", \"Keven\", \"Kevlin\",\r\n    \"Keyrnon\", \"Khader\", \"Khalia\", \"Khalid\", \"Khanzadian\", \"Kharas\", \"Khealynn\", \"Khelben\", \"Kheldor\", \"Khelen\", \"Khelin\", \"Khelyn\", \"Khendraja'aro\",\r\n    \"Khenel\", \"Khezeed\", \"Khindawe\", \"Khirsha\", \"Khlor\", \"Khris\", \"Khyved\", \"Ki'ushapo\", \"Kian\", \"Kiborno\", \"Kiera\", \"Kieran\", \"Kikkasut\",\r\n    \"Kilas\", \"Kilian\", \"Killion\", \"Kimmuriel\", \"Kimura\", \"Kinloch\", \"Kinson\", \"Kippler\", \"Kira\", \"Kiri\", \"Kirjava\", \"Kirk\", \"Kirren\",\r\n    \"Kirsopp\", \"Kirsten\", \"Kishin\", \"Kisin\", \"Kitiara\", \"Kjeldor\", \"Kjindar\", \"Klaus\", \"Klean\", \"Klerak\", \"Knud\", \"Knut\", \"Knute\",\r\n    \"Koabon\", \"Kolbein\", \"Kolchash\", \"Kolskegg\", \"Kolya\", \"Kona\", \"Konrad\", \"Konstantine\", \"Korban\", \"Kord\", \"Koreth\", \"Korgan\", \"Korm\",\r\n    \"Kormar\", \"Kornag\", \"Korska\", \"Kosh\", \"Kota\", \"Kovelir\", \"Krinn\", \"Krishnalai\", \"Kroh\", \"Krom\", \"Kronos\", \"Kuno\", \"Kurd\",\r\n    \"Kurn\", \"Kurt\", \"Kurin\", \"Kuros\", \"Kurtulmak\", \"Ky'ishi\", \"Ky'varan\", \"Kyle\", \"Kylindra\", \"Kypros\", \"Kyrie\", \"Kyriel\", \"La'ahl\",\r\n    \"Lachesis\", \"Lachian\", \"Ladia\", \"Ladoros\", \"Laeli\", \"Laelia\", \"Laerrui\", \"Lahar\", \"Lahsai\", \"Lalely\", \"Lamar\", \"Lambi\", \"Lan\",\r\n    \"Lana\", \"Lance\", \"Lancelot\", \"Landailyn\", \"Landoris\", \"Landrea\", \"Laneth\", \"Langhorne\", \"Langrian\", \"Langston\", \"Lanthal\", \"Lanthorn\", \"Larad\",\r\n    \"Lardner\", \"Larisa\", \"Larkin\", \"Larn\", \"Larnea\", \"Lars\", \"Larz\", \"Lashar\", \"Lateia\", \"Lathander\", \"Laurana\", \"Laurelin\", \"Laxton\",\r\n    \"Lazar\", \"Lazlo\", \"Lea\", \"Leareth\", \"Leathian\", \"Lec\", \"Ledyard\", \"Leela\", \"Legolas\", \"Legrand\", \"Leif\", \"Leighton\", \"Leika\",\r\n    \"Leila\", \"Leilah\", \"Leli\", \"Lembar\", \"Lenka\", \"Lenox\", \"Leo\", \"Leofric\", \"Leon\", \"Leonard\", \"Leonardo\", \"Leopond\", \"Lesesne\",\r\n    \"Lestyn\", \"Leta\", \"Letor\", \"Lev\", \"Lewellyri\", \"Lexan\", \"Lexx\", \"Lhuc\", \"Lia\", \"Liana\", \"Liena\", \"Lightfoot\", \"Liliane\",\r\n    \"Lilin\", \"Lina\", \"Lindar\", \"Linmer\", \"Linnea\", \"Lios\", \"Liphar\", \"Lippard\", \"Liptrot\", \"Lirith\", \"Lithar\", \"Littleton\", \"Livermore\",\r\n    \"Livia\", \"Ljot\", \"Ljotolf\", \"Lluth\", \"Llyn\", \"Llythin\", \"Lobelia\", \"Lobryn\", \"Lobur\", \"Locke\", \"Lockwood\", \"Loddlaen\", \"Lodica\",\r\n    \"Lodin\", \"Loella\", \"Logan\", \"Loibur\", \"Loili\", \"Lola\", \"Lonvan\", \"Lore\", \"Loric\", \"Lorin\", \"Lormyr\", \"Lothar\", \"Lothrop\",\r\n    \"Lott\", \"Lotta\", \"Loudon\", \"Louisa\", \"Lovegood\", \"Lovva\", \"Lovyan\", \"Luas\", \"Lucan\", \"Lucca\", \"Lucia\", \"Lucian\", \"Lucinda\",\r\n    \"Lucius\", \"Lucrecia\", \"Ludmila\", \"Luella\", \"Lufkin\", \"Lugh\", \"Luhsane\", \"Lum\", \"Lumbar\", \"Luna\", \"Lunar\", \"Lunetta\", \"Lupin\",\r\n    \"Lurican\", \"Lurue\", \"Luscan\", \"Luther\", \"Luthian\", \"Luvina\", \"Lycias\", \"Lydia\", \"Lylas\", \"Lyle\", \"Lymo\", \"Lyndall\", \"Lyndon\",\r\n    \"Lynette\", \"Lynis\", \"Lynn\", \"Lypilla\", \"Lyra\", \"Lyrian\", \"Lyrin\", \"Lyron\", \"Lysander\", \"Lyssa\", \"Lythia\", \"Lythian\", \"Lytler\",\r\n    \"Lyzandra\", \"Lyzette\", \"Lórien\", \"Mabon\", \"Macallan\", \"Macaulay\", \"Macer\", \"Mackim\", \"Macvey\", \"Maddern\", \"Maddock\", \"Madelon\", \"Madhao\",\r\n    \"Madora\", \"Maec\", \"Maegwin\", \"Mael\", \"Maerraent\", \"Mafka\", \"Magda\", \"Magh\", \"Magill\", \"Magna\", \"Magnus\", \"Magus\", \"Mahion\",\r\n    \"Mahmud\", \"Mahri\", \"Maia\", \"Maidah\", \"Maidak\", \"Maihar\", \"Makoma\", \"Malach\", \"Malachias\", \"Maladack\", \"Malador\", \"Malak\", \"Malar\",\r\n    \"Malcoff\", \"Malcolm\", \"Malfar\", \"Malia\", \"Maliforin\", \"Malkil\", \"Malto\", \"Malvin\", \"Malvtha\", \"Mama\", \"Mamba\", \"Mana\", \"Manala\",\r\n    \"Manaverr\", \"Manfred\", \"Mankey\", \"Mannin\", \"Manon\", \"Mansour\", \"Manton\", \"Manwe\", \"Maoll\", \"March\", \"Marcus\", \"Marena\", \"Margarita\",\r\n    \"Margery\", \"Mariandor\", \"Marid\", \"Marina\", \"Marion\", \"Marissa\", \"Marisse\", \"Mark\", \"Markham\", \"Maroof\", \"Marques\", \"Marsden\", \"Marshtnan\",\r\n    \"Marsineh\", \"Marta\", \"Martin\", \"Martus\", \"Mary\", \"Maryn\", \"Mathilda\", \"Mathilde\", \"Matilda\", \"Matthew\", \"Matthias\", \"Maudlin\", \"Maura\",\r\n    \"Mavis\", \"Maxander\", \"Maxfield\", \"Maximilian\", \"Maximus\", \"Maya\", \"Mayhew\", \"Mazrak\", \"Medar\", \"Medart\", \"Medea\", \"Meder\", \"Medrom\",\r\n    \"Megan\", \"Meghnad\", \"Mehmet\", \"Mekeesha\", \"Melba\", \"Melchior\", \"Meleri\", \"Meliadoul\", \"Melian\", \"Melisande\", \"Melkor\", \"Mellyora\", \"Melnyth\",\r\n    \"Melora\", \"Melva\", \"Melvaig\", \"Memor\", \"Men\", \"Menard\", \"Mendolin\", \"Menelvagor\", \"Mennefer\", \"Meoran\", \"Mephistopheles\", \"Merah\", \"Merasye\",\r\n    \"Meredith\", \"Meriadoc\", \"Merifa\", \"Merivan\", \"Merlin\", \"Merrilee\", \"Merryn\", \"Mervyn\", \"Merwold\", \"Merwolf\", \"Mes'ard\", \"Meta\", \"Methos\",\r\n    \"Methuen\", \"Michael\", \"Michel\", \"Mideya\", \"Midhat\", \"Midra\", \"Mignon\", \"Miguel\", \"Mikhail\", \"Mila\", \"Milada\", \"Milander\", \"Milandro\",\r\n    \"Mileaha\", \"Millard\", \"Milo\", \"Mimir\", \"Mina\", \"Minella\", \"Miner\", \"Minna\", \"Minx\", \"Mira\", \"Miragon\", \"Miranda\", \"Mirandros\",\r\n    \"Miriel\", \"Mirrash\", \"Mirromi\", \"Miryam\", \"Misha\", \"Mishanti\", \"Misin\", \"Mist\", \"Mithrandir\", \"Mithryl\", \"Mitre\", \"Miwa\", \"Mizra\",\r\n    \"Moda\", \"Modeus\", \"Moffett\", \"Mohammed\", \"Mohieddin\", \"Moina\", \"Moira\", \"Moiriane\", \"Moisur\", \"Molina\", \"Mona\", \"Monach\", \"Montfort\",\r\n    \"Mora\", \"Moradin\", \"Mord\", \"Moredlin\", \"Morgan\", \"Morgon\", \"Morgwin\", \"Moriana\", \"Morik\", \"Morin\", \"Morley\", \"Morna\", \"Morpheus\",\r\n    \"Morrigan\", \"Mortos\", \"Mortrock\", \"Morven\", \"Moya\", \"Muammar\", \"Mubur\", \"Muhammed\", \"Muhlwena\", \"Mujibur\", \"Muktar\", \"Munin\", \"Murdo\",\r\n    \"Murias\", \"Murina\", \"Murrough\", \"Mussa\", \"Mustadio\", \"Mustafa\", \"Mylin\", \"Mylé\", \"Myna\", \"Myra\", \"Myriam\", \"Myrick\", \"Myrmeen\",\r\n    \"Myrna\", \"Myron\", \"Myrrdyn\", \"Myrrha\", \"Myshella\", \"Mythil\", \"Myvor\", \"N'hadha\", \"Nada\", \"Nadezhda\", \"Nadia\", \"Nadir\", \"Nagai\",\r\n    \"Nagel\", \"Nagvar\", \"Nahar\", \"Naia\", \"Naidel\", \"Najib\", \"Nakea\", \"Nalia\", \"Nall\", \"Nanorion\", \"Naois\", \"Naomi\", \"Napollo\",\r\n    \"Narasen\", \"Narcista\", \"Narisa\", \"Narvi\", \"Nasir\", \"Nasser\", \"Natalia\", \"Natasha\", \"Nathalia\", \"Nathalie\", \"Natty\", \"Nazar\", \"Nebron\",\r\n    \"Nedda\", \"Nedstar\", \"Neelix\", \"Negley\", \"Nemm\", \"Nemuel\", \"Neral\", \"Neri\", \"Nerian\", \"Nerilka\", \"Nerissa\", \"Nerull\", \"Nesbit\",\r\n    \"Nesta\", \"Nethuan\", \"Neva\", \"Nevaeh\", \"Nevard\", \"Nevena\", \"Nevile\", \"Nevyn\", \"Newall\", \"Newbold\", \"Newman\", \"Neysa\", \"Neza\",\r\n    \"Nibbidard\", \"Nichol\", \"Nicor\", \"Nienna\", \"Night\", \"Nigil\", \"Nikolai\", \"Nikua\", \"Nila\", \"Nimir\", \"Nimrodel\", \"Nina\", \"Ninian\",\r\n    \"Niomir\", \"Nira'in\", \"Nirnir\", \"Nita\", \"Nivek\", \"Nivilian\", \"Nizam\", \"Nizar\", \"Nobanion\", \"Nodaran\", \"Noela\", \"Nolan\", \"Nona\",\r\n    \"Noora\", \"Nor\", \"Nordri\", \"Noreen\", \"Norine\", \"Norle\", \"Norna\", \"Norval\", \"Norvin\", \"Norwood\", \"Nova\", \"Novalis\", \"Novita\",\r\n    \"Novomira\", \"Nu'endo\", \"Nuada\", \"Nuadi\", \"Nuala\", \"Nuale\", \"Nuanni\", \"Nungo\", \"Nunila\", \"Nura\", \"Nurdoch\", \"Nurgan\", \"Nuri\",\r\n    \"Nushia\", \"Nyassa\", \"Nylan\", \"Nymara\", \"Nynaeve\", \"Nyra\", \"Nytasa\", \"Oakes\", \"Oalyn\", \"Obed\", \"Oberon\", \"Ocar\", \"Oda\",\r\n    \"Odar\", \"Odd\", \"Oden\", \"Odilia\", \"Odimus\", \"Odo\", \"Odona\", \"Ofeig\", \"Ogden\", \"Oghma\", \"Ogma\", \"Ogmund\", \"Ogrus\",\r\n    \"Okander\", \"Olac\", \"Olaf\", \"Oldac\", \"Oldham\", \"Olga\", \"Olissa\", \"Olof\", \"Olorin\", \"Oloru\", \"Olvir\", \"Olya\", \"Omandras\",\r\n    \"Omar\", \"Omassus\", \"Ombrum\", \"Omer\", \"Onslow\", \"Onufrio\", \"Onund\", \"Onyx\", \"Ooma\", \"Oona\", \"Oonai\", \"Opal\", \"Ophelia\",\r\n    \"Orah\", \"Orcrist\", \"Ordway\", \"Oriana\", \"Orin\", \"Orion\", \"Orius\", \"Orivaen\", \"Orlandu\", \"Orlata\", \"Orm\", \"Ormsby\", \"Orome\",\r\n    \"Oron\", \"Orren\", \"Orridge\", \"Orsola\", \"Orson\", \"Osa\", \"Osiris\", \"Oskavar\", \"Ospar\", \"Osric\", \"Oswin\", \"Othello\", \"Othilia\",\r\n    \"Otho\", \"Othran\", \"Otiluke\", \"Otkel\", \"Otrygg\", \"Ottar\", \"Ottilia\", \"Otto\", \"Overton\", \"Owain\", \"Owen\", \"Owyn\", \"Ozatras\",\r\n    \"Ozto\", \"Ozur\", \"Padraic\", \"Padrias\", \"Paget\", \"Pala\", \"Palma\", \"Pamar\", \"Pan\", \"Parbha\", \"Pargascor\", \"Parr\", \"Pasca\",\r\n    \"Paschal\", \"Passmore\", \"Patnas\", \"Pattabhai\", \"Pavel\", \"Pean\", \"Pearl\", \"Pearsall\", \"Peffer\", \"Peiham\", \"Peitar\", \"Peleg\", \"Pelipi\",\r\n    \"Pellin\", \"Pendleton\", \"Penfield\", \"Pengolod\", \"Penhallow\", \"Penniman\", \"Penrhyn\", \"Pepperell\", \"Pereban\", \"Peredon\", \"Peregrin\", \"Peregrine\", \"Perith\",\r\n    \"Peronn\", \"Perrin\", \"Persifor\", \"Pestivar\", \"Peter\", \"Pethros\", \"Petra\", \"Petrea\", \"Petronella\", \"Pflarr\", \"Phanuel\", \"Pharatnond\", \"Pharcellus\",\r\n    \"Phelim\", \"Philo\", \"Philpot\", \"Phimister\", \"Phoenix\", \"Phyrrus\", \"Pia\", \"Picar\", \"Pickman\", \"Pigot\", \"Pike\", \"Pine\", \"Pinkham\",\r\n    \"Pinkney\", \"Pinkstone\", \"Piotr\", \"Pittheus\", \"Plaisted\", \"Plunimer\", \"Plunkett\", \"Polassar\", \"Pollard\", \"Pollock\", \"Polonius\", \"Polycarp\", \"Pomeroy\",\r\n    \"Porthios\", \"Powell\", \"Prafulla\", \"Prendergast\", \"Preston\", \"Prichard\", \"Proctor\", \"Prospero\", \"Provida\", \"Psilofyr\", \"Puck\", \"Pue\", \"Pulisk\",\r\n    \"Pulteney\", \"Purdon\", \"Pyke\", \"Pyros\", \"Pysander\", \"Quaan\", \"Quagel\", \"Qualin\", \"Quan\", \"Quarles\", \"Quasar\", \"Quascar\", \"Quass\",\r\n    \"Quebba\", \"Quelfinas\", \"Quesan\", \"Queygo\", \"Quiddle\", \"Quinn\", \"Quiss\", \"Quixano\", \"Quora\", \"Quvar\", \"Quvean\", \"Raagon\", \"Raban\",\r\n    \"Rabind\", \"Rabur\", \"Rach\", \"Rachid\", \"Rackafel\", \"Rackhir\", \"Radagast\", \"Radija\", \"Rae\", \"Rael\", \"Raen\", \"Rafa\", \"Rafael\",\r\n    \"Rafur\", \"Ragen\", \"Ragna\", \"Ragnal\", \"Ragnar\", \"Ragnhild\", \"Rahaz\", \"Rai\", \"Raikes\", \"Rails\", \"Raimon\", \"Raina\", \"Raine\",\r\n    \"Raisa\", \"Raistlin\", \"Ralina\", \"Ralmanor\", \"Ralph\", \"Ramen\", \"Ramli\", \"Ramman\", \"Ramona\", \"Ramora\", \"Ramous\", \"Ramza\", \"Ranald\",\r\n    \"Ranath\", \"Rancor\", \"Rand\", \"Randar\", \"Randoer\", \"Randolf\", \"Randor\", \"Ranfurly\", \"Ranjan\", \"Rankin\", \"Rannuif\", \"Rannveig\", \"Raphael\",\r\n    \"Rary\", \"Rashiel\", \"Rasputin\", \"Rathack\", \"Rathanos\", \"Rathgar\", \"Rattray\", \"Rauros\", \"Ravenor\", \"Ravi\", \"Rayne\", \"Razamor\", \"Raziel\",\r\n    \"Razzan\", \"Rebecca\", \"Recoun\", \"Redcliffe\", \"Regalorn\", \"Regnar\", \"Reina\", \"Reis\", \"Relm\", \"Rem\", \"Remi\", \"Remnor\", \"Remus\",\r\n    \"Renar\", \"Renata\", \"Rendel\", \"Rengoll\", \"Reoc\", \"Resha\", \"Rethral\", \"Reva\", \"Rex\", \"Reyna\", \"Rezah\", \"Rhadry\", \"Rhaederle\",\r\n    \"Rhaeryn\", \"Rhea\", \"Rhiannon\", \"Rhiow\", \"Rhodhy\", \"Rhona\", \"Rhonda\", \"Rhora\", \"Rhorleif\", \"Rhorvald\", \"Rhundas\", \"Rhymer\", \"Rhynn\",\r\n    \"Rhys\", \"Riallus\", \"Riamon\", \"Rickard\", \"Ricyn\", \"Rigolio\", \"Rilir\", \"Rinaldus\", \"Ringgold\", \"Risaya\", \"Riss\", \"Rith\", \"Riven\",\r\n    \"Roach\", \"Roark\", \"Rockhill\", \"Rodefer\", \"Roderic\", \"Rodhan\", \"Rognvald\", \"Roignar\", \"Roland\", \"Rolf\", \"Rollo\", \"Roman\", \"Romelia\",\r\n    \"Romer\", \"Romney\", \"Ronan\", \"Root\", \"Rorik\", \"Rosalyn\", \"Rosamund\", \"Roscoe\", \"Rose\", \"Rosefyre\", \"Roseline\", \"Roshena\", \"Rosskeen\",\r\n    \"Roundell\", \"Rowena\", \"Ruadan\", \"Ruan\", \"Rubar\", \"Ruben\", \"Rubrick\", \"Ruby\", \"Rucker\", \"Rudyard\", \"Rufina\", \"Rufus\", \"Ruggles\",\r\n    \"Ruhollah\", \"Ruinar\", \"Rulian\", \"Rulinian\", \"Rumil\", \"Runa\", \"Runold\", \"Runolf\", \"Runus\", \"Rurik\", \"Rusgar\", \"Ruth\", \"Rutland\",\r\n    \"Ruwen\", \"Ryana\", \"Rycaro\", \"Rychanna\", \"Rygar\", \"Ryll\", \"Rylla\", \"Rynnyn\", \"Ryodan\", \"Ryoga\", \"Ryoka\", \"Saalem\", \"Sabal\",\r\n    \"Sabhel\", \"Sabriel\", \"Sabrok\", \"Sacheverall\", \"Sackville\", \"Saddam\", \"Sadler\", \"Sador\", \"Saedd\", \"Saermund\", \"Saeunn\", \"Safrin\", \"Saia\",\r\n    \"Said\", \"Saifai\", \"Saiwyn\", \"Salina\", \"Salmon\", \"Salter\", \"Sam\", \"Sambrea\", \"Samia\", \"Samira\", \"Sammel\", \"Samuel\", \"Sanfrid\",\r\n    \"Sano'rye\", \"Sanoreya\", \"Sanoria\", \"Sarcyn\", \"Sardior\", \"Sardul\", \"Sarel\", \"Sarevok\", \"Sargonus\", \"Saria\", \"Sarina\", \"Sarisin\", \"Sariya\",\r\n    \"Sarrask\", \"Saruman\", \"Sasha\", \"Saska\", \"Saturn\", \"Sauron\", \"Savah\", \"Savion\", \"Sawdon\", \"Sayan\", \"Scenesefa\", \"Scudamore\", \"Scythe\",\r\n    \"Sebastian\", \"Sebrinth\", \"Sechier\", \"Sedgely\", \"Seersha\", \"Segojan\", \"Sehanine\", \"Seitarin\", \"Selema\", \"Selena\", \"Selene\", \"Selig\", \"Selim\",\r\n    \"Selina\", \"Selis\", \"Selith\", \"Selune\", \"Selwyn\", \"Semuta\", \"Senith\", \"Senna\", \"Sephia\", \"Sephya\", \"Sepiroth\", \"Seramir\", \"Seraphina\",\r\n    \"Serena\", \"Serenyi\", \"Sergei\", \"Seriozha\", \"Seryan\", \"Seryl\", \"Seryth\", \"Seth\", \"Sethron\", \"Sevadia\", \"Severin\", \"Sevros\", \"Sevy\",\r\n    \"Sha'dar\", \"Sha'rell\", \"Shackerley\", \"Shadizad\", \"Shadrach\", \"Shadworth\", \"Shaera\", \"Shaivar\", \"Shaivir\", \"Shala\", \"Shalamar\", \"Shalandain\", \"Shalat\",\r\n    \"Shalhassan\", \"Shalindra\", \"Shalon\", \"Shalpan\", \"Shamane\", \"Shamir\", \"Shana\", \"Shandalar\", \"Shanell\", \"Shar\", \"Sharada\", \"Sharaq\", \"Shard\",\r\n    \"Sharif\", \"Sharilla\", \"Sharl\", \"Sharla\", \"Sharmaine\", \"Sharman\", \"Sharna\", \"Sharnira\", \"Sharra\", \"Sharteel\", \"Shaundra\", \"Sharyn\", \"Shayera\",\r\n    \"Shayla\", \"Shayll\", \"Shayonea\", \"Shea\", \"Sheegoth\", \"Sheeryl\", \"Sheherazad\", \"Shemsin\", \"Sheridan\", \"Sherif\", \"Sherry\", \"Shezael\", \"Shima'onari\",\r\n    \"Shintaro\", \"Shiza\", \"Shuinn\", \"Shuna\", \"Shurakai\", \"Shurik\", \"Shushila\", \"Shylock\", \"Siandar\", \"Sibert\", \"Sibyl\", \"Sidhe\", \"Siglinde\",\r\n    \"Sigmund\", \"Signe\", \"Sigred\", \"Sigrid\", \"Sigtrydd\", \"Sigurd\", \"Sigvaldi\", \"Silatasar\", \"Silius\", \"Silma\", \"Silmariel\", \"Silphane\", \"Silvain\",\r\n    \"Silvan\", \"Silvanus\", \"Silvera\", \"Silveron\", \"Silvia\", \"Silvyn\", \"Simir\", \"Simmu\", \"Sinbad\", \"Sindarin\", \"Sinir\", \"Sinjin\", \"Siranush\",\r\n    \"Sirisir\", \"Sirli'in\", \"Sirona\", \"Sirranon\", \"Sirwin\", \"Sisimar\", \"Siski\", \"Sivesh\", \"Siveth\", \"Siward\", \"Sjerdi\", \"Skamkel\", \"Skelmar\",\r\n    \"Skorian\", \"Slade\", \"Slania\", \"Slater\", \"Slava\", \"Sligh\", \"Slingsby\", \"Smedley\", \"Snargg\", \"Snorri\", \"Snyder\", \"Sodorn\", \"Soilir\",\r\n    \"Soisil\", \"Sokki\", \"Solaris\", \"Solera\", \"Solevig\", \"Solmund\", \"Solomon\", \"Solvi\", \"Sonnet\", \"Sooth\", \"Sora\", \"Sorass\", \"Sorcha\",\r\n    \"Sorin\", \"Sornovas\", \"Soth\", \"Southall\", \"Sovaz\", \"Soveh\", \"Soyadi\", \"Sparrow\", \"Sprigg\", \"Squall\", \"Srass\", \"Stabyl\", \"Stanwood\",\r\n    \"Starkad\", \"Starke\", \"Stedman\", \"Stefan\", \"Stehman\", \"Stein\", \"Steinkel\", \"Steinthor\", \"Stelectra\", \"Stenger\", \"Stenwulf\", \"Steponas\", \"Sterndale\",\r\n    \"Stetson\", \"Stetter\", \"Stiliman\", \"Stilingfleet\", \"Stopford\", \"Storm\", \"Stowna\", \"Strachan\", \"Straygoth\", \"Stroud\", \"Strudwick\", \"Strybyorn\", \"Strykar\",\r\n    \"Sturla\", \"Sturm\", \"Styx\", \"Sudeha\", \"Suleiman\", \"Sulimo\", \"Sulkas\", \"Sumarlidi\", \"Suras\", \"Surridge\", \"Susin\", \"Susur\", \"Sutan\",\r\n    \"Svala\", \"Svan\", \"Svante\", \"Svatopluk\", \"Sveata\", \"Sven\", \"Swain\", \"Swartwout\", \"Sydnor\", \"Syllva\", \"Sylvane\", \"Sylvia\", \"Sylvin\",\r\n    \"Sylvine\", \"Syndarra\", \"Synnyn\", \"Syranita\", \"Syrioll\", \"Tabar\", \"Tabitha\", \"Tabor\", \"Tabu\", \"Tacey\", \"Tachel\", \"Tadashi\", \"Tadeus\",\r\n    \"Tadia\", \"Tadisha\", \"Tadra\", \"Taennyn\", \"Taeynnyn\", \"Taggart\", \"Tahir\", \"Tailabar\", \"Taina\", \"Takhisis\", \"Taleen\", \"Talen\", \"Taleth\",\r\n    \"Talia\", \"Taliesin\", \"Talin\", \"Talmora\", \"Talobar\", \"Talona\", \"Taloxi\", \"Taltos\", \"Talus\", \"Tamar\", \"Tamara\", \"Tameryn\", \"Tamias\",\r\n    \"Tamlin\", \"Tamoreya\", \"Tanina\", \"Tanis\", \"Tanith\", \"Tanyc\", \"Tar\", \"Tara\", \"Taran\", \"Tarcia\", \"Taria\", \"Tarik\", \"Taromas\",\r\n    \"Taron\", \"Tarran\", \"Taryn\", \"Tas\", \"Tasharra\", \"Tasker\", \"Tatyana\", \"Taurus\", \"Taveli\", \"Taylian\", \"Taylin\", \"Tedra\", \"Tegan\",\r\n    \"Tekia\", \"Telena\", \"Tell\", \"Tench\", \"Tenna\", \"Tenser\", \"Teoddry\", \"Ter\", \"Teralyn\", \"Teressa\", \"Terix\", \"Teruah\", \"Tesin\",\r\n    \"Tesla\", \"Tessa\", \"Tevran\", \"Thaal\", \"Thacker\", \"Thaddeus\", \"Thaki\", \"Thal\", \"Thalen\", \"Thalessa\", \"Thalia\", \"Thalna\", \"Tham\",\r\n    \"Thana\", \"Thane\", \"Thanatos\", \"Thantos\", \"Thar\", \"Tharbad\", \"Tharkesh\", \"Tharn\", \"Thax\", \"Thecla\", \"Theda\", \"Theleb\", \"Theoden\",\r\n    \"Theodor\", \"Theodoric\", \"Theodosia\", \"Theodric\", \"Theoric\", \"Thera\", \"Therad\", \"Theresa\", \"Therios\", \"Theros\", \"Thesius\", \"Thieras\", \"Thieryn\",\r\n    \"Thingyr\", \"Thio\", \"Tholan\", \"Thomas\", \"Thomulor\", \"Thora\", \"Thoran\", \"Thorarin\", \"Thorburn\", \"Thord\", \"Thordarson\", \"Thordis\", \"Thorfel\",\r\n    \"Thorfinn\", \"Thorfinna\", \"Thorgeir\", \"Thorgerd\", \"Thorgest\", \"Thorgils\", \"Thorgrim\", \"Thorgunna\", \"Thorhall\", \"Thorhalla\", \"Thorhild\", \"Thorin\", \"Thorir\",\r\n    \"Thorkatla\", \"Thorkell\", \"Thorkild\", \"Thormod\", \"Thormodr\", \"Thormond\", \"Thorn\", \"Thorndike\", \"Thornwell\", \"Thorold\", \"Thorolf\", \"Thorsager\", \"Thorstein\",\r\n    \"Thorunn\", \"Thorvald\", \"Thorvaldur\", \"Thorvar\", \"Thorzyl\", \"Thoth\", \"Thrain\", \"Thrand\", \"Throck\", \"Thule\", \"Thurid\", \"Thylda\", \"Thyra\",\r\n    \"Thyri\", \"Thyrza\", \"Thyssa\", \"Tiana\", \"Tiffany\", \"Tihan\", \"Tika\", \"Tilford\", \"Tilica\", \"Tilir\", \"Tillinghast\", \"Tilloch\", \"Timon\",\r\n    \"Tioniel\", \"Tirion\", \"Tisha\", \"Tisheri\", \"Titania\", \"Titia\", \"Titiana\", \"Tivernee\", \"Tiyagar\", \"Tnin\", \"Tobias\", \"Tobis\", \"Todhunter\",\r\n    \"Tolbert\", \"Tolenka\", \"Topaz\", \"Topham\", \"Torc\", \"Tortbold\", \"Tosti\", \"Tosya\", \"Toulac\", \"Tovi\", \"Trafford\", \"Trebor\", \"Trelane\",\r\n    \"Trelawny\", \"Trella\", \"Trevel\", \"Trick\", \"Trigg\", \"Trill\", \"Triona\", \"Trir\", \"Tristam\", \"Tristan\", \"Trost\", \"Trotwood\", \"Trowbridge\",\r\n    \"Truesdell\", \"Tuane\", \"Tufnell\", \"Tugan\", \"Tuilleth\", \"Tulio\", \"Tulkas\", \"Tundine\", \"Tunstall\", \"Tuor\", \"Turan\", \"Turgoz\", \"Turhan\",\r\n    \"Turin\", \"Turpin\", \"Tuttle\", \"Tuula\", \"Twyla\", \"Tylden\", \"Tyldoran\", \"Tylen\", \"Tylien\", \"Tylynn\", \"Tymar\", \"Tymora\", \"Tymoriel\",\r\n    \"Tynnyn\", \"Tyr\", \"Tyra\", \"Tyranina\", \"Tyreen\", \"Tyrwhitt\", \"Uamian\", \"Ubriani\", \"Ucarsh\", \"Uda\", \"Uhier\", \"Uhlain\", \"Uhlume\",\r\n    \"Uholedil\", \"Uinen\", \"Ula\", \"Ulf\", \"Ulgor\", \"Ulis\", \"Uljas\", \"Ulji\", \"Ulmaerr\", \"Ulmo\", \"Ulosh\", \"Ulric\", \"Ulrich\",\r\n    \"Ultron\", \"Umaiar\", \"Umbar\", \"Umda\", \"Umgalad\", \"Una\", \"Uneitna\", \"Ungon\", \"Unius\", \"Unn\", \"Unrak\", \"Unwin\", \"Upal\",\r\n    \"Upton\", \"Urabi\", \"Urania\", \"Uranos\", \"Uranus\", \"Uriel\", \"Urish\", \"Urokoz\", \"Ursula\", \"Usher\", \"Uta\", \"Utumno\", \"Uusoae\",\r\n    \"Uvanimor\", \"Uziel\", \"Vabryn\", \"Vadarin\", \"Vadi\", \"Vaeddyn\", \"Vagn\", \"Vai\", \"Val\", \"Valadan\", \"Valandario\", \"Valandor\", \"Valarindi\",\r\n    \"Valborg\", \"Valda\", \"Valdain\", \"Valdemar\", \"Valen\", \"Valenka\", \"Valentia\", \"Valerand\", \"Valeria\", \"Valerian\", \"Valeska\", \"Valgar\", \"Valgard\",\r\n    \"Valgerd\", \"Valiah\", \"Valion\", \"Valisa\", \"Valiss\", \"Valistor\", \"Valkor\", \"Valla\", \"Vallo\", \"Valmar\", \"Valminder\", \"Valor\", \"Valsera\",\r\n    \"Valurian\", \"Valya\", \"Valynard\", \"Vandrad\", \"Vane\", \"Vanechka\", \"Vanidor\", \"Vanion\", \"Vannevar\", \"Vannyn\", \"Vanya\", \"Vanyar\", \"Vanyel\",\r\n    \"Varda\", \"Vardis\", \"Varina\", \"Varion\", \"Varken\", \"Varnum\", \"Vasava\", \"Vash\", \"Vasha\", \"Vasilii\", \"Vasin\", \"Vaydin\", \"Vaydir\",\r\n    \"Vayi\", \"Vecna\", \"Veda\", \"Veldahar\", \"Veldan\", \"Velex\", \"Velior\", \"Venable\", \"Vendor\", \"Veorcyn\", \"Vercyn\", \"Verdina\", \"Vereesa\",\r\n    \"Verline\", \"Vermund\", \"Verna\", \"Ves\", \"Vespar\", \"Vestein\", \"Veva\", \"Vevina\", \"Vexter\", \"Viasta\", \"Vicarr\", \"Vicat\", \"Vicentia\",\r\n    \"Viconia\", \"Victor\", \"Vida\", \"Vidkun\", \"Vidron\", \"Vieno\", \"Viera\", \"Vierna\", \"Vigdis\", \"Vigfus\", \"Vilhelm\", \"Vilka\", \"Vilrna\",\r\n    \"Vinatta\", \"Vincas\", \"Vincent\", \"Vintar\", \"Violet\", \"Vircyn\", \"Vishali\", \"Viveka\", \"Vladimir\", \"Vladislav\", \"Vlaric\", \"Vobur\", \"Voirath\",\r\n    \"Vokos\", \"Voldor\", \"Volkan\", \"Volney\", \"Volodya\", \"Volund\", \"Vonya\", \"Voranor\", \"Vrashin\", \"Vulpen\", \"Vurog\", \"Vusil\", \"Vyecheslav\",\r\n    \"Vyner\", \"Wadleigh\", \"Waenwryht\", \"Wager\", \"Waisham\", \"Waivan\", \"Wakeman\", \"Wakkar\", \"Walborg\", \"Walda\", \"Waldan\", \"Waldegrave\", \"Waldemar\",\r\n    \"Waleran\", \"Walford\", \"Walid\", \"Walker\", \"Wanhim\", \"Waring\", \"Wariv\", \"Wark\", \"Warne\", \"Warrender\", \"Warrigel\", \"Warwick\", \"Waryk\",\r\n    \"Watson\", \"Watt\", \"Waylan\", \"Wayland\", \"Waylon\", \"Wealin\", \"Wedlake\", \"Weilborn\", \"Weiryn\", \"Wel\", \"Wemick\", \"Wendolyn\", \"Wertha\",\r\n    \"Westcott\", \"Westen\", \"Weyrn\", \"Wharrom\", \"Whitwell\", \"Whyte\", \"Wicca\", \"Wideman\", \"Wightman\", \"Wildhair\", \"Wilfrid\", \"Wilhelm\", \"Wilhelmina\",\r\n    \"Wilibald\", \"Will\", \"Willa\", \"William\", \"Willock\", \"Willow\", \"Wilma\", \"Wilmar\", \"Wilner\", \"Wilven\", \"Windham\", \"Winfrey\", \"Winian\",\r\n    \"Winslow\", \"Winton\", \"Wisp\", \"Wisuth\", \"Wivianne\", \"Wizlow\", \"Woart\", \"Wodan\", \"Wolfgang\", \"Wolmar\", \"Womal\", \"Woodfin\", \"Woodruff\",\r\n    \"Wooligar\", \"Wortley\", \"Wotan\", \"Wulf\", \"Wulfgar\", \"Wulfric\", \"Wulgar\", \"Wychnor\", \"Wycliffe\", \"Wyllows\", \"Wyly\", \"Wynkyn\", \"Wynne\",\r\n    \"Wynston\", \"Wyvan\", \"Xaandria\", \"Xaath\", \"Xabian\", \"Xabiel\", \"Xabu\", \"Xain\", \"Xalthan\", \"Xan\", \"Xanaphel\", \"Xanathar\", \"Xander\",\r\n    \"Xandra\", \"Xandria\", \"Xanthon\", \"Xanthus\", \"Xarek\", \"Xarolith\", \"Xaver\", \"Xavier\", \"Xavin\", \"Xela\", \"Xelmonth\", \"Xena\", \"Xenia\",\r\n    \"Xenoba\", \"Xera\", \"Xercon\", \"Xerravin\", \"Xiombarg\", \"Xoncarg\", \"Xoran\", \"Xulan\", \"Xyas\", \"Xydra\", \"Xyko\", \"Xylah\", \"Xylia\",\r\n    \"Xymoya\", \"Xystus\", \"Xythrin\", \"Xytrin\", \"Yacima\", \"Yaheira\", \"Yahira\", \"Yaigin\", \"Yakov\", \"Yalan\", \"Yali\", \"Yalin\", \"Yalniz\",\r\n    \"Yamari\", \"Yana\", \"Yandell\", \"Yangin\", \"Yanira\", \"Yannul\", \"Yara\", \"Yaraia\", \"Yarali\", \"Yardim\", \"Yardley\", \"Yari\", \"Yarim\",\r\n    \"Yarin\", \"Yarir\", \"Yaritza\", \"Yartrina\", \"Yasimina\", \"Yasir\", \"Yasmina\", \"Yasser\", \"Yastar\", \"Yatay\", \"Yavana\", \"Yazihane\", \"Yelain\",\r\n    \"Yeni\", \"Yetne\", \"Yevgenii\", \"Yezade\", \"Ygerna\", \"Ygraine\", \"Yishana\", \"Ynryc\", \"Ynvar\", \"Yoda\", \"Yolanda\", \"Yondalla\", \"York\",\r\n    \"Yradry\", \"Yreoddyn\", \"Yrrkoon\", \"Yrsa\", \"Yrun\", \"Yryllyn\", \"Ysabel\", \"Ysgerryn\", \"Ysolde\", \"Yuri\", \"Yvain\", \"Yvette\", \"Yvonne\",\r\n    \"Yvyr\", \"Yénisar\", \"Yérusha\", \"Zabdiel\", \"Zacarias\", \"Zachary\", \"Zachris\", \"Zadock\", \"Zahara\", \"Zahra\", \"Zaidh\", \"Zalazar\", \"Zalbar\",\r\n    \"Zan\", \"Zandra\", \"Zanifa\", \"Zanthar\", \"Zara\", \"Zaranthe\", \"Zared\", \"Zarimarth\", \"Zarquan\", \"Zathras\", \"Zavel\", \"Zaviv\", \"Zay\",\r\n    \"Zazumel\", \"Zebalane\", \"Zebulon\", \"Zehir\", \"Zelda\", \"Zemenar\", \"Zenda\", \"Zendrac\", \"Zenith\", \"Zenobia\", \"Zenon\", \"Zepher\", \"Zephyr\",\r\n    \"Zerika\", \"Zerin\", \"Zeswick\", \"Zhalore\", \"Zhanna\", \"Zharvek\", \"Zhenya\", \"Zhirek\", \"Zhirem\", \"Zhoreb\", \"Zia\", \"Zigmal\", \"Zilar\",\r\n    \"Zinaida\", \"Zincir\", \"Zion\", \"Ziona\", \"Zircon\", \"Zirzihin\", \"Zita\", \"Zoe\", \"Zolabar\", \"Zoltan\", \"Zona\", \"Zora\", \"Zorashad\",\r\n    \"Zorayas\", \"Zorlan\", \"Zosia\", \"Zotar\", \"Zumurrud\", \"Zurrog\", \"Zykhiralamshad\"];\r\n  makeArrays();\r\n}\r\n\r\n/**\r\n * EWIJSON by Zynj\r\n */\r\nconsole.log(`Turn: ${info.actionCount}`)\r\nif (!state.data) { state.data = {} }\r\nlet dataStorage = state.data;\r\nlet contextMemoryLength = 0; // Keep count of additional context added.\r\nif (!state.generate) { state.generate = {} }\r\nif (!state.settings) { state.settings = {} }\r\nif (!state.settings.globalWhitelist) { state.settings.globalWhitelist = [] }\r\nconst DefaultSettings = {\r\n  'cross': false,\r\n  'filter': false,\r\n  'mode': true,\r\n}\r\nfor (const setting in DefaultSettings) { if (!state.settings.hasOwnProperty(setting)) { state.settings[setting] = DefaultSettings[setting] } }\r\n\r\nconst Expressions = {\r\n\r\n  \"invalid\": /(((\"|')[^\"']*(\"|'):)\\s*({}|null|\"\")),?\\s*/g,\r\n  \"clean\": /,\\s*(?=})/g,\r\n  \"listener\": /<l=[^>]*>|<\\/l>/g,\r\n  \"placeholder\": /\\$\\{[^{}]*}/g,\r\n  \"attributes\": /(\\w(=+-*\\d*)?)/g,\r\n  \"split\": /=+/,\r\n  \"EWI\": /#\\[.*\\]$/,\r\n  \"flags\": /(?<=^\\/.*\\/)([ygmiu]+)/,\r\n  \"expectFlags\": /(?<=^\\/.*\\/)/\r\n}\r\n\r\nstate.config = {\r\n  prefix: /\\n? ?(?:> You |> You say \"|)\\/(.+?)[\"]?[.]?\\n?$/i,\r\n  prefixSymbol: '/',\r\n  libraryPath: '_exp',\r\n  whitelistPath: '_whitelist',\r\n  synonymsPath: '_synonyms',\r\n  configPath: '_config',\r\n  wildcardPath: '/*',\r\n  pathSymbol: '.',\r\n  openListener: '<l',\r\n  closeListener: '</l>'\r\n}\r\nlet { cross } = state.settings;\r\nconst { whitelistPath, synonymsPath, pathSymbol, wildcardPath, configPath, libraryPath, openListener, closeListener } = state.config;\r\nconst Paths = [whitelistPath, synonymsPath, libraryPath];\r\n\r\nconst filter = (arr, by, restrict) => {\r\n\r\n  const hash = {};\r\n  const result = [];\r\n  arr.forEach(el => {\r\n    const value = el.metadata.attributes.find(e => by.some(b => b == e[0]));\r\n    const restricted = el.metadata.attributes.find(e => e[0] == restrict);\r\n\r\n    if (value) {\r\n\r\n      if (!hash[value[1]]) {\r\n        hash[value[1]] = {\r\n          \"elements\": []\r\n        };\r\n        result.push(hash[value[1]]);\r\n      };\r\n\r\n      if (restricted && !hash[value[1]].hasOwnProperty('limit')) {\r\n        hash[value[1]].limit = restricted[1]\r\n      }\r\n      if (!hash[value[1]].hasOwnProperty('limit') || (hash[value[1]].elements.length < hash[value[1]].limit)) {\r\n        hash[value[1]].elements.push(el);\r\n      }\r\n    } else {\r\n      result.push([el])\r\n    };\r\n  });\r\n\r\n  return result.map(e => e.elements || e);\r\n\r\n}\r\nconst getRandomObjects = (arr) => {\r\n\r\n  return filter(arr, ['r']).map(e => {\r\n    const find = e.filter(x => x.metadata?.random?.picked);\r\n    // If multiple previous picks are present, reset their status and re-roll from the batch.\r\n    if (find.length == 1 && (find[0].metadata.random.action == info.actionCount || !getHistoryString(-1).includes(find[0].metadata.matches[0]))) { return [find[0]] }\r\n    else { if (find.length > 0) { find.forEach(e => e.metadata.random.picked = false); } return e };\r\n  }).map(e => {\r\n    if (e.length > 1) {\r\n      const random = e[Math.floor(Math.random() * e.length)];\r\n      random.metadata.random = { \"picked\": true };\r\n      random.metadata.random.action = info.actionCount;\r\n      return random\r\n    }\r\n    else { return e[0] }\r\n  });\r\n};\r\n\r\n//https://stackoverflow.com/questions/61681176/json-stringify-replacer-how-to-get-full-path\r\nconst replacerWithPath = (replacer) => { let m = new Map(); return function (field, value) { let path = m.get(this) + (Array.isArray(this) ? `[${field}]` : '.' + field); if (value === Object(value)) m.set(value, path); return replacer.call(this, field, value, path.replace(/undefined\\.\\.?/, '')); } }\r\nconst worldEntriesFromObject = (obj, root) => {\r\n  JSON.stringify(obj, replacerWithPath(function (field, value, path) {\r\n    if (typeof value != 'object') {\r\n      const index = worldInfo.findIndex(e => e[\"keys\"] == `${root}.${path}`.replace(/^\\.*|\\.$/g, ''));\r\n      index >= 0 ? updateWorldEntry(index, `${root}.${path}`.replace(/^\\.*|\\.$/g, ''), value.toString(), hidden = false) : addWorldEntry(`${root}.${path}`.replace(/^\\.*|\\.$/g, ''), value.toString(), hidden = false);\r\n    }\r\n    return value;\r\n  }));\r\n}\r\nconst getHistoryString = (start, end = undefined) => history.slice(start, end).map(e => e[\"text\"]).join('\\n') // Returns a single string of the text.\r\nconst getHistoryText = (start, end = undefined) => history.slice(start, end).map(e => e[\"text\"]) // Returns an array of text.\r\nconst getActionTypes = (turns) => history.slice(turns).map(e => e[\"type\"]) // Returns the action types of the previous turns in an array.\r\n\r\n\r\n// Ensure that '_synonyms' is processed first in the loop. It's executed if (Object.keys(dataStorage)[0] != synonymsPath)\r\nconst fixOrder = () => {\r\n  dataStorage = Object.assign({ \"_whitelist\": {}, \"_synonyms\": {} }, dataStorage);\r\n  state.data = dataStorage;\r\n}\r\n\r\n// Consider implementing a negative 'every' check for 'do not match' instances, expression prefixed by '!'\r\nconst regExMatch = (keys, text = undefined) => {\r\n  if (typeof keys != 'string') { console.log(`Invalid Expressions: ${keys}`); return }\r\n  // Test the multi-lines individually, last/bottom line qualifying becomes result.\r\n  const array = keys.split(/\\n/g);\r\n  const result = [];\r\n  let key = '';\r\n  try {\r\n    array.forEach(line => {\r\n      const string = text ? text : getSlice(line, state.settings.mode).join('\\n')\r\n      const expressions = line.slice(0, /#\\[.*\\]/.test(line) ? line.lastIndexOf('#') : line.length).split(/(?<!\\\\),/g);\r\n\r\n      if (expressions.every(exp => {\r\n        const regExRaw = exp;\r\n        const regExString = regExRaw.replace(/(^\\/)|(\\/.*)$/g, '').replace(/\\\\,/, '');\r\n        const regExFlags = Expressions[\"flags\"].test(regExRaw) ? [...new Set([...regExRaw.match(Expressions[\"flags\"]).join('').split(''), 'g'])].join('') : Expressions[\"expectFlags\"].test(regExRaw) ? 'g' : 'gi';\r\n        const regEx = new RegExp(regExString, regExFlags);\r\n        return regEx.test(string);\r\n      })) {\r\n        key = line;\r\n        const regExRawLast = expressions.pop();\r\n        const regExString = regExRawLast.replace(/(^\\/)|(\\/.*)$/g, '').replace(/\\\\,/, '');\r\n        const regExFlags = Expressions[\"flags\"].test(regExRawLast) ? [...new Set([...regExRawLast.match(Expressions[\"flags\"]).join('').split(''), 'g'])].join('') : Expressions[\"expectFlags\"].test(regExRawLast) ? 'g' : 'gi'\r\n        const regEx = new RegExp(regExString, regExFlags);\r\n        result.push([...string.matchAll(regEx)].filter(Boolean).pop());\r\n      }\r\n    })\r\n  }\r\n  catch (error) {\r\n    console.log(`In regExMatch:\\n${error.name}: ${error.message}`);\r\n    state.message = `In regExMatch:\\n${error.name}: ${error.message}`;\r\n\r\n  }\r\n  return [result.length > 0 ? result.pop().filter(Boolean) : undefined, key]\r\n}\r\n\r\n\r\nconst getAttributes = (string) => { const regEx = new RegExp(String.raw`(${Object.keys(Attributes).sort((a, b) => b.length - a.length).join('|')})(=+-*\\d*)?`, 'g'); const index = string.search(Expressions[\"EWI\"]); if (index >= 0) { const match = string.slice(index).match(regEx); if (Boolean(match)) { const result = match.map(e => e.includes('=') ? e.split(Expressions[\"split\"]) : [e, 0]).map(e => [e[0], Number(e[1])]); return result; } } }\r\nconst lens = (obj, path) => path.split('.').reduce((o, key) => o && o[key] ? o[key] : null, obj);\r\nconst replaceLast = (x, y, z) => { let a = x.split(\"\"); let length = y.length; if (x.lastIndexOf(y) != -1) { for (let i = x.lastIndexOf(y); i < x.lastIndexOf(y) + length; i++) { if (i == x.lastIndexOf(y)) { a[i] = z; } else { delete a[i]; } } } return a.join(\"\"); }\r\nconst getMemory = (text) => { return info.memoryLength ? text.slice(0, info.memoryLength) : '' } // If memoryLength is set then slice of the beginning until the end of memoryLength, else return an empty string.\r\nconst getContext = (text) => { return info.memoryLength ? text.slice(info.memoryLength) : text } // If memoryLength is set then slice from the end of memory to the end of text, else return the entire text.\r\n\r\n// Extract the last cluster in the RegEx' AND check then filter out non-word/non-whitespace symbols to TRY and assemble the intended words.\r\nconst addDescription = (entry, value = 0) => {\r\n  const result = entry.metadata.matches.pop()\r\n  let search = lines.join('\\n');\r\n  // Find a match for the last expression and grab the most recent word for positioning. Filter out undefined/false values.\r\n  if (search.includes(result) && result && !Boolean(value)) {\r\n    search = search.slice(0, search.toLowerCase().lastIndexOf(result.toLowerCase())) + result.slice(0, -result.length) + entry[\"entry\"] + ' ' + (result) + search.slice(search.toLowerCase().lastIndexOf(result.toLowerCase()) + result.length)\r\n    lines = search.split('\\n');\r\n  }\r\n  else if (search.includes(result) && result && Boolean(value)) {\r\n    search = search.slice(0, search.toLowerCase().lastIndexOf(result.toLowerCase()) + result.length) + ' ' + entry[\"entry\"] + search.slice(search.toLowerCase().lastIndexOf(result.toLowerCase()) + result.length)\r\n    lines = search.split('\\n');\r\n  }\r\n}\r\n\r\n// Reference to Object is severed during processing, so index it instead.\r\nconst addAuthorsNote = (entry, value = 0) => state.memory.authorsNote = `${entry[\"entry\"]}`\r\nconst showWorldEntry = (entry, value = 0) => entry.hidden = false;\r\nconst addPositionalEntry = (entry, value = 0) => { spliceContext((Boolean(value) ? -(value) : copyLines.length), entry[\"entry\"]); }\r\nconst addMemoryEntry = (entry, value = 0) => {\r\n  if ((info.memoryLength + contextMemoryLength + entry[\"entry\"].length) < (info.maxChars / 2)) {\r\n    spliceMemory(Boolean(value) ? -(value) : (memoryLines.length - 1), entry[\"entry\"]);\r\n  }\r\n\r\n}\r\nconst getRange = (list) => list ? list.find(e => e[0] == 'l') || [undefined, undefined] : [undefined, undefined];\r\nconst getSlice = (string, mode = true) => {\r\n  const attributes = getAttributes(string);\r\n  const length = getRange(attributes);\r\n\r\n  if (mode) {\r\n    let measure = 0;\r\n    const compare = copyLines.length;\r\n    let actions = 0;\r\n\r\n    for (let i = history.length - 1; i >= 0; i--) {\r\n      const test = history[i][\"text\"].split('\\n')\r\n      if (test.length + measure <= compare) {\r\n        measure += test.length;\r\n        actions++;\r\n      }\r\n      else { if (copyLines.some(l => history[i][\"text\"].includes(l))) { actions++ } break; }\r\n    }\r\n\r\n    return getHistoryText(length[1] > 0 ? -length[1] : -actions, length[1] >= 0 ? history.length : length[1])\r\n  }\r\n\r\n  else { return lines.slice(length[1] > 0 ? -length[1] : 0, length[1] >= 0 ? lines.length : length[1]); }\r\n}\r\n\r\nconst getLineIndex = (find, range) => {\r\n  let result;\r\n  if (range > 0) { for (let i = copyLines.length - copyLines.slice(-range).length; i < copyLines.length; i++) { if (copyLines[i].includes(find)) { result = i; } } }\r\n  else if (range < 0) { for (let i = 0; i < copyLines.length + range; i++) { if (copyLines[i].includes(find)) { result = i; } } }\r\n  else { copyLines.forEach((l, i) => { if (l.includes(find)) { result = i; } }) }\r\n  return result\r\n}\r\n\r\nconst addTrailingEntry = (entry, value = 0) => {\r\n\r\n  const { attributes, matches } = entry.metadata;\r\n\r\n  const range = getRange(attributes);\r\n  const find = matches[0];\r\n  const index = getLineIndex(find, range[1]);\r\n  if (index >= 0) { spliceContext((index - value) >= 0 ? index - value : 0, entry[\"entry\"]) }\r\n\r\n  return;\r\n}\r\n\r\nconst addAustralianKangaroo = (entry, value = 0) => spliceContext(-1, '[A polite Australian kangaroo pulls a top-hat out of its pouch before greeting you.]');\r\n\r\n\r\nconst Attributes = {\r\n  'a': addAuthorsNote, // [a] adds it as authorsNote, only one authorsNote at a time.\r\n  'd': addDescription, // [d] adds the first sentence of the entry as a short, parenthesized descriptor to the last mention of the revelant keyword(s) e.g John (a business man)\r\n  'f': () => { }, // [e] filters and limits the amount of simultaneous attribute activations.\r\n  'i': () => { }, // [i] Ignores the entry if present.\r\n  'l': () => { },\r\n  'm': addMemoryEntry,\r\n  'p': addPositionalEntry, // Inserts the <entry> <value> amount of lines into context, e.g [p=1] inserts it one line into context.\r\n  'r': () => { }, // [r] picks randomly between entries with the same matching keys. e.g 'you.*catch#[rp=1]' and 'you.*catch#[rd]' has 50% each to be picked.\r\n  's': showWorldEntry, // [r] reveals the entry once mentioned, used in conjuction with [e] to only reveal if all keywords are mentioned at once.\r\n  't': addTrailingEntry, // [t] adds the entry at a line relative to the activator in context. [t=2] will trail context two lines behind the activating word.\r\n  'w': () => { }, // [w] assigns the weight attribute, the higher value the more recent/relevant it will be in context/frontMemory/intermediateMemory etc.\r\n  'x': () => { }, // [x] ignores the entry if not X amount of rounds have processed.\r\n  'australiankangaroo': addAustralianKangaroo\r\n}\r\n\r\nconst getWhitelist = () => { const index = getEntryIndex('_whitelist.'); return index >= 0 ? worldInfo[index][\"entry\"].split(/,|\\n/g).map(e => e.trim()) : [] }\r\nconst getWildcard = (display, offset = 0) => { const wildcard = display.split('.').slice(offset != 0 ? 0 : 1).join('.'); const list = display.split('.'); const index = list.indexOf(wildcard.slice(wildcard.lastIndexOf('.') + 1)); return [list[index].replace(wildcardPath, ''), index + offset] }\r\nconst getPlaceholder = (value) => typeof value == 'string' ? value.replace(Expressions[\"placeholder\"], match => dataStorage[libraryPath][match.replace(/\\$\\{|\\}/g, '')]) : value\r\nconst updateListener = (value, display, visited) => {\r\n  // Check if it has previously qualified in 'visited' instead of running regExMatch on each node.\r\n  const qualified = visited.some(e => e.includes(display.split('.')[0]));\r\n  if (qualified) {\r\n    const array = value.split(/(?<!\\\\),/g)\r\n    const result = array.map(e => {\r\n      const find = e.match(/(?<=<l=)[^>]*(?=>)/g)\r\n      if (find) {\r\n        const expression = getPlaceholder(find[0])\r\n        const match = regExMatch(`${expression}`)\r\n        if (Boolean(match[0])) { return e.replace(/(?<=>)[^<]*(?=<)/g, match[0][0]) }\r\n        else { return e }\r\n\r\n      }\r\n      else { return e }\r\n    })\r\n\r\n    const keys = display.toLowerCase().trim()\r\n    const setKeys = display.includes('.') ? keys : `${keys}.`;\r\n    const setValue = result.join(',')\r\n    const index = getEntryIndex(setKeys);\r\n    index >= 0 ? updateWorldEntry(index, setKeys, setValue, hidden = false) : addWorldEntry(setKeys, setValue, hidden = false)\r\n\r\n  }\r\n}\r\n\r\nconst globalReplacer = () => {\r\n\r\n  const paths = [];\r\n  const search = lines.join('\\n')\r\n  // Toggle the wildcard state to search down full path.\r\n  // If the current path does not include the wildcard path, toggle it to false.\r\n  let wildcards = [];\r\n  const visited = [];\r\n  const whitelist = getWhitelist().map(e => {\r\n    if (e.includes(wildcardPath)) { wildcards.push(getWildcard(e, 1)); return e.replace(wildcardPath, ''); }\r\n    else { return e.split('.') }\r\n  }).flat();\r\n\r\n\r\n  //console.log(`Wildcards: ${wildcards}`)\r\n  function replacer(replace) {\r\n    let m = new Map();\r\n    return function (key, value) {\r\n      let path = m.get(this) + (Array.isArray(this) ? `[${key}]` : '.' + key);\r\n      let display = path.replace(/undefined\\.\\.?/, '')\r\n      const root = display.split('.')[0]\r\n\r\n      // Find and store whether the Object qualifies to avoid repeated calls to regExMatch.\r\n      // Without this, it'll call regExMatch for each node. While with this one may run:\r\n      // visited.some(e => e.includes(node))\r\n      if (dataStorage.hasOwnProperty(root) && dataStorage[root].hasOwnProperty(synonymsPath) && !visited.some(e => e[0].includes(root))) {\r\n        const match = regExMatch(getPlaceholder(dataStorage[root][synonymsPath]))\r\n\r\n        if (Boolean(match[0])) { visited.push([root, match[0][0]]) }\r\n      }\r\n\r\n      if (value === Object(value)) { m.set(value, path); }\r\n\r\n      const final = replace.call(this, key, value, display);\r\n      let current;\r\n\r\n      if (Boolean(key) && (whitelist.includes(key))) {\r\n        if (typeof value == 'string' && value.includes(closeListener)) { updateListener(value, display, visited); }\r\n      }\r\n\r\n      else if (typeof value == 'string') {\r\n        // Only match paths in `_synonyms`.\r\n        const match = display.startsWith(synonymsPath) ? regExMatch(getPlaceholder(value)) : undefined;\r\n        if (value.includes(closeListener)) { updateListener(value, display, visited); }\r\n        // Key is a wildcard and its value qualifies the regEx match.\r\n        if (key.includes(wildcardPath) && Boolean(value) && Boolean(match[0])) { wildcards.push(getWildcard(display)) }\r\n        // The current path contains one of the wildcards.\r\n        else if (wildcards.some(e => { if (display.split('.')[e[1]] == e[0]) { current = e[0]; return true } })) {\r\n          const array = display.split('.');\r\n          paths.push([array, 0]);\r\n        }\r\n        else if (display.startsWith(synonymsPath) && Boolean(value) && Boolean(match[0])) { paths.push([display.split('.'), lines.join('\\n').lastIndexOf(match[0][match[0].length - 1])]); }\r\n\r\n      }\r\n      return final;\r\n    }\r\n  }\r\n\r\n\r\n  JSON.stringify(dataStorage, replacer(function (key, value, path) { return value; }));\r\n  return [...new Set([...whitelist, ...paths.sort((a, b) => a[1] - b[1]).map(e => e[0]).flat()])].filter(e => !Paths.includes(e)).map(e => e.replace(wildcardPath, ''))\r\n}\r\n\r\n// globalWhitelist - Should only make one call to it per turn in context modifiers. Other modifiers access it via state.\r\nconst getGlobalWhitelist = () => state.settings.globalWhitelist = globalReplacer();\r\nconst setProperty = (keys, value, obj) => { const property = keys.split('.').pop(); const path = keys.split('.')[1] ? keys.split('.').slice(0, -1).join('.') : keys.replace('.', ''); if (property[1]) { getKey(path, obj)[property] = value ? value : null; } else { dataStorage[path] = value; } }\r\nconst getKey = (keys, obj) => { return keys.split('.').reduce((a, b) => { if (typeof a[b] != \"object\" || a[b] == null) { a[b] = {} } if (!a.hasOwnProperty(b)) { a[b] = {} } return a && a[b] }, obj) }\r\n\r\nconst buildObjects = () => {\r\n\r\n  // Consume and process entries whose keys start with '!' or contains '.' and does not contain a '#'.\r\n  const regEx = /(^!|\\.)(?!.*#)/\r\n  worldInfo.filter(wEntry => regEx.test(wEntry[\"keys\"])).forEach(wEntry => {\r\n    if (wEntry[\"keys\"].startsWith('!')) {\r\n      const root = wEntry[\"keys\"].match(/(?<=!)[^.]*/)[0];\r\n      try {\r\n        // Parse the contents into an Object.\r\n        const object = JSON.parse(wEntry[\"entry\"].match(/{.*}/)[0]);\r\n        // Remove the parsed entry to prevent further executions of this process.\r\n        removeWorldEntry(worldInfo.indexOf(wEntry));\r\n        // Build individual entries of the Object into worldEntries.\r\n        worldEntriesFromObject(object, root);\r\n        // Re-process entries that begin with the exact root path.\r\n        state.message = `Built Objects from !${root}.`\r\n        worldInfo.filter(e => e[\"keys\"].split('.')[0] == root).forEach(wEntry => setProperty(wEntry[\"keys\"].split(',').filter(e => e.includes('.')).map(e => e.trim()).join(''), wEntry[\"entry\"], dataStorage))\r\n      }\r\n      catch (error) {\r\n        console.log(error);\r\n        state.message = `Failed to parse implicit conversion of !${root}. Verify the entry's format!`\r\n      }\r\n    }\r\n    else { setProperty(wEntry[\"keys\"].split(',').filter(e => e.includes('.')).map(e => e.trim()).join(''), wEntry[\"entry\"], dataStorage); }\r\n\r\n  })\r\n}\r\n\r\nconst sanitizeWhitelist = () => { const index = worldInfo.findIndex(e => e[\"keys\"].includes(whitelistPath)); if (index >= 0) { worldInfo[index][\"keys\"] = whitelistPath + '.'; } }\r\nconst trackRoots = () => { const list = Object.keys(dataStorage); const index = worldInfo.findIndex(e => e[\"keys\"] == 'rootList'); if (index < 0) { addWorldEntry('rootList', list, hidden = false) } else { updateWorldEntry(index, 'rootList', list, hidden = false) } }\r\n\r\n// spliceContext takes a position to insert a line into the full context (memoryLines and lines combined) then reconstructs it with 'memory' taking priority.\r\n// TODO: Sanitize and add counter, verify whether memory having priority is detrimental to the structure - 'Remember' should never be at risk of ommitance.\r\nconst spliceContext = (pos, string) => {\r\n\r\n  const linesLength = lines.join('\\n').length\r\n  const memoryLength = memoryLines.join('\\n').length\r\n\r\n  let adjustedLines = 0;\r\n  if ((linesLength + memoryLength) + string.length > info.maxChars && false) {\r\n    const adjustor = lines.join('\\n').slice(string.length).split('\\n');\r\n    adjustedLines = lines.length - adjustor.length;\r\n    lines = adjustor;\r\n  }\r\n\r\n  lines.splice(pos ? pos : 0, 0, string);\r\n  //lines.splice(pos - adjustedLines >= 0 ? pos - adjustedLines : pos, 0, string)\r\n  return\r\n}\r\n\r\nconst spliceMemory = (pos, string) => {\r\n  contextMemoryLength += string.length;\r\n  memoryLines.splice(pos, 0, string);\r\n  return\r\n\r\n}\r\n\r\nconst cleanString = (string) => string.replace(/\\\\/g, ' ').replace(Expressions[\"listener\"], '').replace(Expressions[\"invalid\"], '').replace(Expressions[\"clean\"], '');\r\nconst insertJSON = () => {\r\n\r\n  // Cleanup edge-cases of empty Objects in the presented string.\r\n  const { globalWhitelist } = state.settings;\r\n  console.log(`Global Whitelist: ${globalWhitelist}`)\r\n\r\n  const list = []\r\n  for (const data in dataStorage) {\r\n\r\n    if (typeof dataStorage[data] == 'object') {\r\n      if (!dataStorage[data].hasOwnProperty(synonymsPath)) { dataStorage[data][synonymsPath] = `${data}#[t]` }\r\n      let string = cleanString(JSON.stringify(dataStorage[data], globalWhitelist));\r\n      if (state.settings[\"filter\"]) { string = string.replace(/\"|{|}/g, ''); }\r\n      if (string.length > 4) {\r\n        const object = { \"keys\": dataStorage[data][synonymsPath].split('\\n').map(e => !e.includes('#') ? e + '#[t]' : e).join('\\n'), \"entry\": `[${string}]`, \"metadata\": { \"isObject\": true } }\r\n        list.push(object)\r\n      }\r\n    }\r\n  }\r\n  if (list.length > 0) { preprocess(list) };\r\n}\r\n\r\nconst getEWI = () => { return worldInfo.filter(e => Expressions[\"EWI\"].test(e[\"keys\"])) }\r\nconst processEWI = () => preprocess(getEWI());\r\nconst execAttributes = (object) => {\r\n\r\n  const { attributes } = object.metadata;\r\n  const ignore = attributes.find(e => e[0] == 'x');\r\n  if (((ignore ? ignore[1] < history.length : true) && attributes.length > 0) && (object.metadata.hasOwnProperty('ignore') ? object.metadata.ignore.count > 0 : true)) {\r\n\r\n    try { attributes.forEach(pair => { Attributes[pair[0]](object, pair[1]) }) }\r\n    catch (error) { console.log(`${error.name}: ${error.message}`) }\r\n  }\r\n}\r\n\r\n// Sort all Objects/entries by the order of most-recent mention before processing.\r\n// expects sortList to be populated by Objects with properties {\"key\": string, \"entry\": string}\r\nconst preprocess = (list) => {\r\n  const search = copyLines.join('\\n');\r\n  const attributed = list.map(e => {\r\n    const match = regExMatch(getPlaceholder(e[\"keys\"]));\r\n    if (!e.hasOwnProperty('metadata')) { e.metadata = {}; };\r\n    if (Boolean(match[0])) {\r\n      e.metadata.index = search.lastIndexOf(match[0][match[0].length - 1]);\r\n      e.metadata.qualifier = match[1];\r\n      e.metadata.matches = match[0];\r\n      e.metadata.attributes = getAttributes(match[1]).filter(a => { if (Attributes.hasOwnProperty(a[0])) { return true } else { state.message += `[${a[0]}] is an invalid attribute!\\n`; return false } });\r\n      const ignore = e.metadata.attributes.find(a => a[0] == 'i');\r\n      if (ignore) {\r\n        if (!e.metadata.hasOwnProperty('ignore')) {\r\n          e.metadata.ignore = { \"original\": ignore[1], \"count\": ignore[1], \"turn\": [] }\r\n        }\r\n\r\n        if (ignore[1] != e.metadata.ignore.original) {\r\n          e.metadata.ignore.original == ignore[1];\r\n          e.metadata.ignore.count = ignore[1];\r\n        }\r\n\r\n        if (!(e.metadata.ignore.turn.some(t => t == info.actionCount)) && getHistoryString(-1).includes(e.metadata.matches[0])) {\r\n          e.metadata.ignore.count--;\r\n          e.metadata.ignore.turn.push(info.actionCount);\r\n        }\r\n\r\n        if (e.metadata.ignore.turn.some(t => t > info.actionCount)) {\r\n          const refund = e.metadata.ignore.turn.filter(t => t > info.actionCount);\r\n          e.metadata.ignore.count += refund.length;\r\n          refund.forEach(t => e.metadata.ignore.turn.splice(e.metadata.ignore.turn.indexOf(t), 1));\r\n        }\r\n      }\r\n      e.metadata.lastSeen = info.actionCount;\r\n      return e;\r\n    }\r\n\r\n  }).filter(Boolean)\r\n\r\n  // TODO: Optimize this section.\r\n  const randomized = getRandomObjects(attributed).filter(e => Expressions[\"EWI\"].test(e.metadata.qualifier));\r\n  const sorted = randomized.sort((a, b) => b.metadata.index - a.metadata.index);\r\n  const filtered = filter(sorted, Object.keys(Attributes).filter(a => Attributes[a].toString() != '() => {}'), 'f').flat();\r\n  filtered.forEach(e => { execAttributes(e); });\r\n}\r\n\r\n/*  Cross Lines pulls eligble World Information if its keywords are found within a JSON-line that is present in the context. \r\n    Insertions are done strictly through the memoryLines section of the context.\r\n    TODO: Enable attributes for the EWI entries.\r\n*/\r\nconst crossLines = () => {\r\n  const JSONLines = lines.filter(line => /\\[\\{.*\\}\\]/.test(line));\r\n  const JSONString = JSONLines.join('\\n');\r\n  worldInfo.forEach(e => {\r\n    if (!Object.keys(dataStorage).includes(e[\"keys\"].split('.')[0]) && !e[\"keys\"].startsWith('!')) // Handle regular entries - EWI likely fails test.\r\n    {\r\n      if (Boolean(regExMatch(e[\"keys\"], JSONString)[0]) && !text.includes(e[\"entry\"])) {\r\n        if (info.memoryLength + contextMemoryLength + e[\"entry\"].length <= info.maxChars / 2) {\r\n          spliceMemory(memoryLines.length - 1, e[\"entry\"]);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nconst parseAsRoot = (text, root) => {\r\n  const toParse = text.match(/{.*}/g);\r\n  if (toParse) {\r\n    toParse.forEach(string => {\r\n      const obj = JSON.parse(string);\r\n      worldEntriesFromObject(obj, root);\r\n      text = text.replace(string, '');\r\n    });\r\n  }\r\n}\r\n\r\nconst getEntryIndex = (keys) => worldInfo.findIndex(e => e[\"keys\"].toLowerCase() == keys.toLowerCase());\r\nconst updateHUD = () => {\r\n  const { globalWhitelist } = state.settings;\r\n  state.displayStats.forEach((e, i) => {\r\n    if (dataStorage.hasOwnProperty(e[\"key\"].trim())) {\r\n      state.displayStats[i] = {\r\n        \"key\": `${e[\"key\"].trim()}`,\r\n        \"value\": `${cleanString(JSON.stringify(dataStorage[e[\"key\"].trim()], globalWhitelist)).replace(/\\{|\\}/g, '')}    `\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nstate.commandList = {\r\n  scenarioHelp: {\r\n    name: \"scenarioHelp\",\r\n    description: \"Prints a list of commands\",\r\n    args: false,\r\n    usage: `Really? You need help with the help command and expected this to work? I don't blame you. Hit me at AIDcord for help.`,\r\n    execute: (args) => {\r\n      console.log(`Begin help command.`);\r\n      let availableCommands = '';\r\n      Object.keys(state.commandList).forEach(key => {\r\n        availableCommands += ` ${state.commandList[key].name}`\r\n      });\r\n\r\n      availableCommands = availableCommands.trim().replace(/\\s/g, ', ');\r\n      console.log(`Begin help command.`);\r\n      if (args == '') {\r\n        state.message = `List of available commands: ${availableCommands}`;\r\n      } else if ((!(args in commandList))) {\r\n        state.message = `This command was not found. List of available commands: ${availableCommands}`;\r\n      } else {\r\n        let cmd = commandList[args];\r\n        state.message = `Example: /${cmd.name} ${cmd.usage}\\n${cmd.description}`;\r\n      }\r\n\r\n      console.log(`End help command.`);\r\n    }\r\n  },\r\n  ewiSet: {\r\n    name: 'ewiSet',\r\n    description: \"Sets or updates a World Entry's keys and entry to the arguments given in addition to directly updating the object.\",\r\n    args: true,\r\n    usage: '<root>.<property> <value>',\r\n    execute: (args) => {\r\n      const keys = args[0].trim()\r\n      const setKeys = keys.includes('.') ? keys : `${keys}.`;\r\n      const setValue = args.slice(1).join(' ');\r\n      const index = getEntryIndex(setKeys);\r\n\r\n      index >= 0 ? updateWorldEntry(index, setKeys, setValue, hidden = false) : addWorldEntry(setKeys, setValue, hidden = false)\r\n      state.message = `Set ${setKeys} to ${setValue}!`\r\n      if (state.displayStats) { updateHUD(); }\r\n      return\r\n    }\r\n  },\r\n  ewiGet: {\r\n    name: 'ewiGet',\r\n    description: \"Fetches and displays the properties of an object.\",\r\n    args: true,\r\n    usage: '<root> or <root>.<property>',\r\n    execute: (args) => {\r\n      const path = args.join('').trim();\r\n      if (dataStorage && dataStorage.hasOwnProperty(args[0].split('.')[0].trim())) {\r\n        state.message = `Data Sheet for ${path}:\\n${JSON.stringify(lens(dataStorage, path), null)}`;\r\n      } else {\r\n        state.message = `${path} was invalid!`;\r\n      }\r\n\r\n      return;\r\n    }\r\n  },\r\n  ewiDelete: {\r\n    name: 'ewiDelete',\r\n    description: 'Deletes all dot-separated entries that match the provided argument.',\r\n    args: true,\r\n    usage: '<root> or <root>.<path>',\r\n    execute: (args) => {\r\n      const keys = args[0].toLowerCase().trim();\r\n      const setKeys = keys.includes('.') ? keys : `${keys}.`;\r\n      worldInfo.filter(e => e[\"keys\"].toLowerCase().startsWith(setKeys)).forEach(e => removeWorldEntry(worldInfo.indexOf(e)))\r\n      state.message = `Deleted all entries matching: ${keys}`;\r\n    }\r\n  },\r\n  ewiShow: {\r\n    name: 'ewiShow',\r\n    description: \"Shows entries starting with the provided argument in World Information.\",\r\n    args: true,\r\n    usage: '<root> or <root>.<property>',\r\n    execute: (args) => {\r\n      const keys = args[0].toLowerCase()\r\n      worldInfo.forEach(e => {\r\n        if (e[\"keys\"].toLowerCase().startsWith(keys)) {\r\n          e[\"hidden\"] = false;\r\n        }\r\n      });\r\n\r\n      state.message = `Showing all entries starting with ${keys} in World Information!`;\r\n      return\r\n    }\r\n  },\r\n  ewiHide: {\r\n    name: 'ewiHide',\r\n    description: \"Hides entries starting with the provided argument in World Information.\",\r\n    args: true,\r\n    usage: '<root> or <root>.<property>',\r\n    execute: (args) => {\r\n      const keys = args[0].toLowerCase()\r\n      worldInfo.forEach(e => {\r\n        if (e[\"keys\"].toLowerCase().startsWith(keys)) {\r\n          e[\"hidden\"] = true;\r\n        }\r\n      })\r\n\r\n      state.message = `Hiding all entries starting with ${keys} in World Information!`;\r\n      return\r\n    }\r\n  },\r\n  ewiCross: {\r\n    name: 'ewiCross',\r\n    description: `Toggles fetching of World Information from JSON Lines: ${state.settings[\"cross\"]}`,\r\n    args: false,\r\n    execute: (args) => {\r\n      state.settings[\"cross\"] = !state.settings[\"cross\"];\r\n      state.message = `World Information from JSON Lines: ${state.settings[\"cross\"]}`\r\n      return\r\n    }\r\n  },\r\n  ewiFilter: {\r\n    name: 'ewiFilter',\r\n    description: `Toggles the filtering of quotation and curly-brackets within JSON lines: ${state.settings[\"filter\"]}\\nSaves character count, but may have detrimental effects.`,\r\n    args: false,\r\n    execute: (args) => {\r\n      state.settings[\"filter\"] = !state.settings[\"filter\"];\r\n      state.message = `'\"{}' filter set to ${state.settings[\"filter\"]}`\r\n      return\r\n    }\r\n  },\r\n  ewiFrom: {\r\n    name: \"ewiFrom\",\r\n    description: 'Creates an Object with the given root from the passed JSON- line.',\r\n    args: true,\r\n    usage: '<root> <JSON- Line/Object>',\r\n    execute: (args) => {\r\n      const obj = args.slice(1).join(' ')\r\n      const root = args[0]\r\n      parseAsRoot(obj, root)\r\n      state.message = `Created Object '${root}' from ${obj}!`\r\n    }\r\n  },\r\n  ewiHud: {\r\n    name: \"ewiHud\",\r\n    description: \"Tracks the Object in the HUD\",\r\n    args: true,\r\n    usage: '<root>',\r\n    execute: (args) => {\r\n      if (!state.displayStats) {\r\n        state.displayStats = []\r\n      }\r\n\r\n      const { globalWhitelist } = state.settings;\r\n      const root = args[0].trim();\r\n      const index = state.displayStats.findIndex(e => e[\"key\"].trim() == root)\r\n      if (dataStorage.hasOwnProperty(root)) {\r\n        const object = {\r\n          \"key\": root,\r\n          \"value\": `${cleanString(JSON.stringify(dataStorage[root], globalWhitelist).replace(/\\{|\\}/g, '')).replace(/\\{|\\}/g, '')}    `\r\n        }\r\n\r\n        if (index >= 0) {\r\n          state.displayStats.splice(index, 1)\r\n        } else {\r\n          state.displayStats.push(object)\r\n        }\r\n      }\r\n    }\r\n  },\r\n  ewiMode: {\r\n    name: \"ewiMode\",\r\n    description: \"Switches between actions (true) or lines (false) for conditions.\",\r\n    args: false,\r\n    usage: '',\r\n    execute: (args) => {\r\n      state.settings.mode = !state.settings.mode\r\n      state.message = `Conditions now search amount of ${state.settings.mode == true ? 'actions' : 'lines'}.`\r\n    }\r\n  },\r\n  invAdd: {\r\n    name: \"invAdd\",\r\n    description: \"Adds objects to the player's inventory\",\r\n    args: true,\r\n    usage: '<object name> <quantity>',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory add.`);\r\n        const itemName = args.replace(LETTER_REGEX, '').trim();\r\n        const itemQuantity = Number.isNaN(parseInt(args.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(args.replace(DIGIT_REGEX, '').trim());\r\n\r\n        if (itemQuantity >= 1) {\r\n          state.message = `${addToInventory(itemName, itemQuantity)}`;\r\n        } else {\r\n          state.message = `You cannot add less than 1 unit of an item to your inventory.`;\r\n        }\r\n\r\n        console.log(`End inventory add.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invRemove: {\r\n    name: \"invRemove\",\r\n    description: \"Removes objects from the player's inventory\",\r\n    args: true,\r\n    usage: '<object name> <quantity>',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory remove.`);\r\n        const itemName = args.replace(LETTER_REGEX, '').trim();\r\n        const itemQuantity = Number.isNaN(parseInt(args.replace(DIGIT_REGEX, '').trim())) ? 1 : parseInt(args.replace(DIGIT_REGEX, '').trim());\r\n\r\n        if (itemQuantity >= 1) {\r\n          state.message = `${removeFromInventory(itemName, itemQuantity)}`;\r\n        } else {\r\n          state.message = `You cannot remove less than 1 unit of an item from your inventory.`;\r\n        }\r\n\r\n        console.log(`End inventory remove.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invEquip: {\r\n    name: \"invEquip\",\r\n    description: \"Equips objects from the player's inventory\",\r\n    args: true,\r\n    usage: '<object name>',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory equip.`);\r\n        const itemName = args.replace(LETTER_REGEX, '').trim();\r\n        state.message = `${equipItem(itemName)}`;\r\n        console.log(`End inventory equip.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invCheck: {\r\n    name: \"invCheck\",\r\n    description: \"Checks the player's inventory\",\r\n    args: false,\r\n    usage: '',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory check.`);\r\n        state.message = `${checkInventory()}`;\r\n        console.log(`End inventory check.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invDebug: {\r\n    name: \"invDebug\",\r\n    description: \"Debugs player's inventory\",\r\n    args: false,\r\n    usage: '',\r\n    execute: (args) => {\r\n      if (state.enableInventory) {\r\n        console.log(`Begin inventory debug.`);\r\n        debugInventory();\r\n        state.message = `Your inventory and player WI have been debugged.`;\r\n        console.log(`End inventory debug.`);\r\n      } else {\r\n        state.message = `Inventory mechanics are disabled. Re-enable them with \"/invMechanics enable\" to use commands again.`;\r\n      }\r\n    }\r\n  },\r\n  invMechanics: {\r\n    name: \"invMechanics\",\r\n    description: \"Toggles inventory system mechanics\",\r\n    args: false,\r\n    usage: '<enable or disable>',\r\n    execute: (args) => {\r\n      console.log(`Begin inventory toggle.`);\r\n      if (args != '') {\r\n        if (args == 'disable') {\r\n          state.enableInventory = false;\r\n          state.message = 'You have disabled the inventory system mechanics.';\r\n          console.log(`Disabled inventory mechanics toggle.`);\r\n        } else if (args == 'enable') {\r\n          state.enableInventory = true;\r\n          state.message = 'You have enabled the inventory system mechanics.';\r\n          console.log(`Enabled inventory mechanics toggle.`);\r\n        } else {\r\n          console.log('Wrong rpg mechanic toggle arg supplied.');\r\n          state.message = 'Invalid agument. Usage: /invMechanics <enable or disable>.';\r\n        }\r\n      } else {\r\n        console.log(`Checking inventory mechanics state.`);\r\n        state.message = `Inventory system mechanics are ${state.enableInventory ? 'enabled' : 'disabled'}`;\r\n      }\r\n\r\n      console.log(`End inventory toggle.`);\r\n    }\r\n  }\r\n};",
                        "onModelContext": "state.data = {} // When processing context, rebuild data. Input modifier interacts with \"cached\" version.\r\ndataStorage = state.data;\r\ndelete state.message\r\nlet contextMemory = getMemory(text);\r\nlet context = getContext(text);\r\nlet lines = context.split('\\n');\r\nconst linesLength = context.length;\r\nlet memoryLines = contextMemory.split('\\n');\r\n\r\nlet modifiedText = text.toLowerCase();\r\nlet modifiedContext = context.toLowerCase();\r\nlet memoryLinesLength = memoryLines.length\r\n\r\nlet copyLines = [...lines];\r\nlet copyMemoryLines = [...memoryLines];\r\n\r\nconst modifier = (text) => {\r\n  const lowered = text.toLowerCase();\r\n  let stop = false;\r\n\r\n  // BEGIN Encounters\r\n  // for mashing with other context scripts, keep this codeblock before 'const contextMemory'\r\n  // encounter memory stuff:\r\n  if (state.encounterMemories) {\r\n    memoryLoop:\r\n    for (encounterMemory of state.encounterMemories) {\r\n      // take care to not overload memory, unless forced:\r\n      if (!encounterMemory.memoryGreed && (encounterMemory.memoryText.length + memory.length) > 1000) {\r\n        console.log(`Non-greedy encounterMemory too long, not inserting it!`)\r\n        continue memoryLoop\r\n      }\r\n      state.memory.context = memory\r\n      if (encounterMemory.memoryLocation == 'bottom') {\r\n        state.memory.context = `${state.memory.context}\\n${encounterMemory.memoryText}`\r\n      } else if (encounterMemory.memoryLocation == 'top') {\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      } else {\r\n        console.log(`No memoryLocation defined for '${encounterMemory.memoryText}', defaulting to 'top'.`)\r\n        state.memory.context = `${encounterMemory.memoryText}\\n${state.memory.context}`\r\n      }\r\n    }\r\n  }\r\n  // END Encounters\r\n\r\n  // BEGIN EWIJSON\r\n  const execute = {\r\n\r\n    \"Sanitize the whitelist.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": sanitizeWhitelist\r\n    },\r\n    \"Build qualified entries as Objects in dataStorage.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": buildObjects\r\n    },\r\n\r\n    \"Ensure _synonyms is handled first when creating the globalWhitelist.\":\r\n    {\r\n      \"req\": Object.keys(dataStorage)[1] != synonymsPath || Object.keys(dataStorage)[0] != whitelistPath,\r\n      \"args\": null,\r\n      \"exec\": fixOrder\r\n    },\r\n    \"Build a global whitelist based on context and wildcards.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": getGlobalWhitelist\r\n    },\r\n    \"Sort and execute the Object entries.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": insertJSON\r\n    },\r\n    \"Sort and execute the EWI Attribute entries.\":\r\n    {\r\n      \"req\": worldInfo.length > 0,\r\n      \"args\": null,\r\n      \"exec\": processEWI\r\n    },\r\n    \"Check the inserted JSON- lines for the presence of worldInfo keywords.\":\r\n    {\r\n      \"req\": state.settings[\"cross\"],\r\n      \"args\": null,\r\n      \"exec\": crossLines\r\n    },\r\n    /*  \"Add the Stacks\":\r\n     {\r\n         \"req\": Stacks,\r\n         \"args\": null,\r\n         \"exec\": addStacks\r\n     }, */\r\n    \"Create an always visible entry that displays all created roots for Objects.\":\r\n    {\r\n      \"req\": true,\r\n      \"args\": null,\r\n      \"exec\": trackRoots\r\n    },\r\n    \"Refresh the variables presented in the HUD.\":\r\n    {\r\n      \"req\": state.displayStats,\r\n      \"args\": null,\r\n      \"exec\": updateHUD\r\n    }\r\n\r\n  }\r\n\r\n  for (let action in execute) { if (execute[action][\"req\"]) { execute[action][\"exec\"](execute[action][\"args\"]) } }\r\n\r\n  let combinedMemory = memoryLines.join('\\n')\r\n  let combinedLines = lines.join('\\n').slice(-(info.maxChars - combinedMemory.length - 1));\r\n  const finalText = [combinedMemory, combinedLines].join(\"\");\r\n\r\n  // Debug to check if the context is intact and properly utilized, optimally the numbers should always match\r\n  console.log(`Final Text: ${finalText.length}`, `Max Text: ${info.maxChars}`, `MemoryLength: ${info.memoryLength}`, `Total Memory: ${info.memoryLength + contextMemoryLength}`)\r\n  // END EWIJSON\r\n\r\n  return { text: finalText, stop: stop };\r\n}\r\n\r\nmodifier(text);"
                },
                "isOwner": true,
                "user": {
                        "username": "thaalesalves"
                },
                "options": [],
                "isOption": true
        }
]